(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __knownSymbol = (name, symbol) => {
    if (symbol = Symbol[name])
      return symbol;
    throw Error("Symbol." + name + " is not defined");
  };
  var __pow = Math.pow;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __restKey = (key) => typeof key === "symbol" ? key : key + "";
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var __await = function(promise, isYieldStar) {
    this[0] = promise;
    this[1] = isYieldStar;
  };
  var __yieldStar = (value) => {
    var obj = value[__knownSymbol("asyncIterator")];
    var isAwait = false;
    var method;
    var it = {};
    if (obj == null) {
      obj = value[__knownSymbol("iterator")]();
      method = (k) => it[k] = (x) => obj[k](x);
    } else {
      obj = obj.call(value);
      method = (k) => it[k] = (v) => {
        if (isAwait) {
          isAwait = false;
          if (k === "throw")
            throw v;
          return v;
        }
        isAwait = true;
        return {
          done: false,
          value: new __await(new Promise((resolve) => {
            var x = obj[k](v);
            if (!(x instanceof Object))
              throw TypeError("Object expected");
            resolve(x);
          }), 1)
        };
      };
    }
    return it[__knownSymbol("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x) => {
      throw x;
    }, "return" in obj && method("return"), it;
  };

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement2(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index3) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index3.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count2 = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count2++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext2(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef2(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef4(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback2(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement2.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext2;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef2;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback2;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef4;
          exports.useState = useState;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index3 = heap.length;
            heap.push(node);
            siftUp(heap, node, index3);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index3 = i;
            while (index3 > 0) {
              var parentIndex = index3 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index3] = parent;
                index3 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index3 = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index3 < halfLength) {
              var leftIndex = (index3 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index3] = right;
                  heap[rightIndex] = node;
                  index3 = rightIndex;
                } else {
                  heap[index3] = left;
                  heap[leftIndex] = node;
                  index3 = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index3] = right;
                heap[rightIndex] = node;
                index3 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React3 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React3.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index4 = 0; index4 < TotalLanes; index4++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index4 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index4;
                nextLanes |= entanglements[index4];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              var eventTime = eventTimes[index4];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              var expirationTime = expirationTimes[index4];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index4] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index4 = laneToIndex(updateLane);
            eventTimes[index4] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              expirationTimes[index4] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              entanglements[index4] = NoLanes;
              eventTimes[index4] = NoTimestamp;
              expirationTimes[index4] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index4] & entangledLanes
              ) {
                entanglements[index4] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index4 = laneToIndex(lanes);
              var lane = 1 << index4;
              var updaters = pendingUpdatersLaneMap[index4];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index4 = laneToIndex(lanes);
              var lane = 1 << index4;
              var updaters = pendingUpdatersLaneMap[index4];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement2(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement2(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index3 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index3 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index3]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index3];
            valueStack[index3] = null;
            {
              fiberStack[index3] = null;
            }
            index3--;
          }
          function push(cursor, value, fiber) {
            index3++;
            valueStack[index3] = cursor.current;
            {
              fiberStack[index3] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index4) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index4 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React3.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef3(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef3();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef3();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef3();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef3();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index4) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index4, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index4) {
              var key = path[index4];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index4 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index4 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index4) {
              var oldKey = oldPath[index4];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index4 + 1 === oldPath.length) {
                var newKey = newPath[index4];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index4 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index4, value) {
              if (index4 >= path.length) {
                return value;
              }
              var key = path[index4];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index4 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/@remix-run/router/dist/router.cjs.js
  var require_router_cjs = __commonJS({
    "node_modules/@remix-run/router/dist/router.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _extends2() {
        _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends2.apply(this, arguments);
      }
      var Action = /* @__PURE__ */ function(Action2) {
        Action2["Pop"] = "POP";
        Action2["Push"] = "PUSH";
        Action2["Replace"] = "REPLACE";
        return Action2;
      }({});
      var PopStateEventType = "popstate";
      function createMemoryHistory(options) {
        if (options === void 0) {
          options = {};
        }
        let {
          initialEntries = ["/"],
          initialIndex,
          v5Compat = false
        } = options;
        let entries;
        entries = initialEntries.map((entry, index4) => createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index4 === 0 ? "default" : void 0));
        let index3 = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
        let action = Action.Pop;
        let listener = null;
        function clampIndex(n) {
          return Math.min(Math.max(n, 0), entries.length - 1);
        }
        function getCurrentLocation() {
          return entries[index3];
        }
        function createMemoryLocation(to, state, key) {
          if (state === void 0) {
            state = null;
          }
          let location2 = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
          warning(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));
          return location2;
        }
        function createHref(to) {
          return typeof to === "string" ? to : createPath(to);
        }
        let history = {
          get index() {
            return index3;
          },
          get action() {
            return action;
          },
          get location() {
            return getCurrentLocation();
          },
          createHref,
          createURL(to) {
            return new URL(createHref(to), "http://localhost");
          },
          encodeLocation(to) {
            let path = typeof to === "string" ? parsePath(to) : to;
            return {
              pathname: path.pathname || "",
              search: path.search || "",
              hash: path.hash || ""
            };
          },
          push(to, state) {
            action = Action.Push;
            let nextLocation = createMemoryLocation(to, state);
            index3 += 1;
            entries.splice(index3, entries.length, nextLocation);
            if (v5Compat && listener) {
              listener({
                action,
                location: nextLocation,
                delta: 1
              });
            }
          },
          replace(to, state) {
            action = Action.Replace;
            let nextLocation = createMemoryLocation(to, state);
            entries[index3] = nextLocation;
            if (v5Compat && listener) {
              listener({
                action,
                location: nextLocation,
                delta: 0
              });
            }
          },
          go(delta) {
            action = Action.Pop;
            let nextIndex = clampIndex(index3 + delta);
            let nextLocation = entries[nextIndex];
            index3 = nextIndex;
            if (listener) {
              listener({
                action,
                location: nextLocation,
                delta
              });
            }
          },
          listen(fn) {
            listener = fn;
            return () => {
              listener = null;
            };
          }
        };
        return history;
      }
      function createBrowserHistory(options) {
        if (options === void 0) {
          options = {};
        }
        function createBrowserLocation(window2, globalHistory) {
          let {
            pathname,
            search,
            hash
          } = window2.location;
          return createLocation(
            "",
            {
              pathname,
              search,
              hash
            },
            // state defaults to `null` because `window.history.state` does
            globalHistory.state && globalHistory.state.usr || null,
            globalHistory.state && globalHistory.state.key || "default"
          );
        }
        function createBrowserHref(window2, to) {
          return typeof to === "string" ? to : createPath(to);
        }
        return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
      }
      function createHashHistory(options) {
        if (options === void 0) {
          options = {};
        }
        function createHashLocation(window2, globalHistory) {
          let {
            pathname = "/",
            search = "",
            hash = ""
          } = parsePath(window2.location.hash.substr(1));
          if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
            pathname = "/" + pathname;
          }
          return createLocation(
            "",
            {
              pathname,
              search,
              hash
            },
            // state defaults to `null` because `window.history.state` does
            globalHistory.state && globalHistory.state.usr || null,
            globalHistory.state && globalHistory.state.key || "default"
          );
        }
        function createHashHref(window2, to) {
          let base = window2.document.querySelector("base");
          let href = "";
          if (base && base.getAttribute("href")) {
            let url = window2.location.href;
            let hashIndex = url.indexOf("#");
            href = hashIndex === -1 ? url : url.slice(0, hashIndex);
          }
          return href + "#" + (typeof to === "string" ? to : createPath(to));
        }
        function validateHashLocation(location2, to) {
          warning(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
        }
        return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
      }
      function invariant(value, message) {
        if (value === false || value === null || typeof value === "undefined") {
          throw new Error(message);
        }
      }
      function warning(cond, message) {
        if (!cond) {
          if (typeof console !== "undefined")
            console.warn(message);
          try {
            throw new Error(message);
          } catch (e) {
          }
        }
      }
      function createKey() {
        return Math.random().toString(36).substr(2, 8);
      }
      function getHistoryState(location2, index3) {
        return {
          usr: location2.state,
          key: location2.key,
          idx: index3
        };
      }
      function createLocation(current, to, state, key) {
        if (state === void 0) {
          state = null;
        }
        let location2 = _extends2({
          pathname: typeof current === "string" ? current : current.pathname,
          search: "",
          hash: ""
        }, typeof to === "string" ? parsePath(to) : to, {
          state,
          // TODO: This could be cleaned up.  push/replace should probably just take
          // full Locations now and avoid the need to run through this flow at all
          // But that's a pretty big refactor to the current test suite so going to
          // keep as is for the time being and just let any incoming keys take precedence
          key: to && to.key || key || createKey()
        });
        return location2;
      }
      function createPath(_ref) {
        let {
          pathname = "/",
          search = "",
          hash = ""
        } = _ref;
        if (search && search !== "?")
          pathname += search.charAt(0) === "?" ? search : "?" + search;
        if (hash && hash !== "#")
          pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
        return pathname;
      }
      function parsePath(path) {
        let parsedPath = {};
        if (path) {
          let hashIndex = path.indexOf("#");
          if (hashIndex >= 0) {
            parsedPath.hash = path.substr(hashIndex);
            path = path.substr(0, hashIndex);
          }
          let searchIndex = path.indexOf("?");
          if (searchIndex >= 0) {
            parsedPath.search = path.substr(searchIndex);
            path = path.substr(0, searchIndex);
          }
          if (path) {
            parsedPath.pathname = path;
          }
        }
        return parsedPath;
      }
      function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
        if (options === void 0) {
          options = {};
        }
        let {
          window: window2 = document.defaultView,
          v5Compat = false
        } = options;
        let globalHistory = window2.history;
        let action = Action.Pop;
        let listener = null;
        let index3 = getIndex();
        if (index3 == null) {
          index3 = 0;
          globalHistory.replaceState(_extends2({}, globalHistory.state, {
            idx: index3
          }), "");
        }
        function getIndex() {
          let state = globalHistory.state || {
            idx: null
          };
          return state.idx;
        }
        function handlePop() {
          action = Action.Pop;
          let nextIndex = getIndex();
          let delta = nextIndex == null ? null : nextIndex - index3;
          index3 = nextIndex;
          if (listener) {
            listener({
              action,
              location: history.location,
              delta
            });
          }
        }
        function push(to, state) {
          action = Action.Push;
          let location2 = createLocation(history.location, to, state);
          if (validateLocation)
            validateLocation(location2, to);
          index3 = getIndex() + 1;
          let historyState = getHistoryState(location2, index3);
          let url = history.createHref(location2);
          try {
            globalHistory.pushState(historyState, "", url);
          } catch (error) {
            if (error instanceof DOMException && error.name === "DataCloneError") {
              throw error;
            }
            window2.location.assign(url);
          }
          if (v5Compat && listener) {
            listener({
              action,
              location: history.location,
              delta: 1
            });
          }
        }
        function replace(to, state) {
          action = Action.Replace;
          let location2 = createLocation(history.location, to, state);
          if (validateLocation)
            validateLocation(location2, to);
          index3 = getIndex();
          let historyState = getHistoryState(location2, index3);
          let url = history.createHref(location2);
          globalHistory.replaceState(historyState, "", url);
          if (v5Compat && listener) {
            listener({
              action,
              location: history.location,
              delta: 0
            });
          }
        }
        function createURL(to) {
          let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
          let href = typeof to === "string" ? to : createPath(to);
          invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
          return new URL(href, base);
        }
        let history = {
          get action() {
            return action;
          },
          get location() {
            return getLocation(window2, globalHistory);
          },
          listen(fn) {
            if (listener) {
              throw new Error("A history only accepts one active listener");
            }
            window2.addEventListener(PopStateEventType, handlePop);
            listener = fn;
            return () => {
              window2.removeEventListener(PopStateEventType, handlePop);
              listener = null;
            };
          },
          createHref(to) {
            return createHref(window2, to);
          },
          createURL,
          encodeLocation(to) {
            let url = createURL(to);
            return {
              pathname: url.pathname,
              search: url.search,
              hash: url.hash
            };
          },
          push,
          replace,
          go(n) {
            return globalHistory.go(n);
          }
        };
        return history;
      }
      var ResultType = /* @__PURE__ */ function(ResultType2) {
        ResultType2["data"] = "data";
        ResultType2["deferred"] = "deferred";
        ResultType2["redirect"] = "redirect";
        ResultType2["error"] = "error";
        return ResultType2;
      }({});
      var immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
      function isIndexRoute(route) {
        return route.index === true;
      }
      function convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {
        if (parentPath === void 0) {
          parentPath = [];
        }
        if (manifest === void 0) {
          manifest = {};
        }
        return routes.map((route, index3) => {
          let treePath = [...parentPath, index3];
          let id = typeof route.id === "string" ? route.id : treePath.join("-");
          invariant(route.index !== true || !route.children, "Cannot specify children on an index route");
          invariant(!manifest[id], 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`);
          if (isIndexRoute(route)) {
            let indexRoute = _extends2({}, route, mapRouteProperties(route), {
              id
            });
            manifest[id] = indexRoute;
            return indexRoute;
          } else {
            let pathOrLayoutRoute = _extends2({}, route, mapRouteProperties(route), {
              id,
              children: void 0
            });
            manifest[id] = pathOrLayoutRoute;
            if (route.children) {
              pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);
            }
            return pathOrLayoutRoute;
          }
        });
      }
      function matchRoutes(routes, locationArg, basename) {
        if (basename === void 0) {
          basename = "/";
        }
        let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
        let pathname = stripBasename(location2.pathname || "/", basename);
        if (pathname == null) {
          return null;
        }
        let branches = flattenRoutes(routes);
        rankRouteBranches(branches);
        let matches = null;
        for (let i = 0; matches == null && i < branches.length; ++i) {
          matches = matchRouteBranch(
            branches[i],
            // Incoming pathnames are generally encoded from either window.location
            // or from router.navigate, but we want to match against the unencoded
            // paths in the route definitions.  Memory router locations won't be
            // encoded here but there also shouldn't be anything to decode so this
            // should be a safe operation.  This avoids needing matchRoutes to be
            // history-aware.
            safelyDecodeURI(pathname)
          );
        }
        return matches;
      }
      function convertRouteMatchToUiMatch(match, loaderData) {
        let {
          route,
          pathname,
          params
        } = match;
        return {
          id: route.id,
          pathname,
          params,
          data: loaderData[route.id],
          handle: route.handle
        };
      }
      function flattenRoutes(routes, branches, parentsMeta, parentPath) {
        if (branches === void 0) {
          branches = [];
        }
        if (parentsMeta === void 0) {
          parentsMeta = [];
        }
        if (parentPath === void 0) {
          parentPath = "";
        }
        let flattenRoute = (route, index3, relativePath) => {
          let meta = {
            relativePath: relativePath === void 0 ? route.path || "" : relativePath,
            caseSensitive: route.caseSensitive === true,
            childrenIndex: index3,
            route
          };
          if (meta.relativePath.startsWith("/")) {
            invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
            meta.relativePath = meta.relativePath.slice(parentPath.length);
          }
          let path = joinPaths([parentPath, meta.relativePath]);
          let routesMeta = parentsMeta.concat(meta);
          if (route.children && route.children.length > 0) {
            invariant(
              // Our types know better, but runtime JS may not!
              // @ts-expect-error
              route.index !== true,
              "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
            );
            flattenRoutes(route.children, branches, routesMeta, path);
          }
          if (route.path == null && !route.index) {
            return;
          }
          branches.push({
            path,
            score: computeScore(path, route.index),
            routesMeta
          });
        };
        routes.forEach((route, index3) => {
          var _route$path;
          if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
            flattenRoute(route, index3);
          } else {
            for (let exploded of explodeOptionalSegments(route.path)) {
              flattenRoute(route, index3, exploded);
            }
          }
        });
        return branches;
      }
      function explodeOptionalSegments(path) {
        let segments = path.split("/");
        if (segments.length === 0)
          return [];
        let [first, ...rest] = segments;
        let isOptional = first.endsWith("?");
        let required = first.replace(/\?$/, "");
        if (rest.length === 0) {
          return isOptional ? [required, ""] : [required];
        }
        let restExploded = explodeOptionalSegments(rest.join("/"));
        let result = [];
        result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
        if (isOptional) {
          result.push(...restExploded);
        }
        return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
      }
      function rankRouteBranches(branches) {
        branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
      }
      var paramRe = /^:\w+$/;
      var dynamicSegmentValue = 3;
      var indexRouteValue = 2;
      var emptySegmentValue = 1;
      var staticSegmentValue = 10;
      var splatPenalty = -2;
      var isSplat = (s) => s === "*";
      function computeScore(path, index3) {
        let segments = path.split("/");
        let initialScore = segments.length;
        if (segments.some(isSplat)) {
          initialScore += splatPenalty;
        }
        if (index3) {
          initialScore += indexRouteValue;
        }
        return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
      }
      function compareIndexes(a, b) {
        let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
        return siblings ? (
          // If two routes are siblings, we should try to match the earlier sibling
          // first. This allows people to have fine-grained control over the matching
          // behavior by simply putting routes with identical paths in the order they
          // want them tried.
          a[a.length - 1] - b[b.length - 1]
        ) : (
          // Otherwise, it doesn't really make sense to rank non-siblings by index,
          // so they sort equally.
          0
        );
      }
      function matchRouteBranch(branch, pathname) {
        let {
          routesMeta
        } = branch;
        let matchedParams = {};
        let matchedPathname = "/";
        let matches = [];
        for (let i = 0; i < routesMeta.length; ++i) {
          let meta = routesMeta[i];
          let end = i === routesMeta.length - 1;
          let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
          let match = matchPath({
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end
          }, remainingPathname);
          if (!match)
            return null;
          Object.assign(matchedParams, match.params);
          let route = meta.route;
          matches.push({
            // TODO: Can this as be avoided?
            params: matchedParams,
            pathname: joinPaths([matchedPathname, match.pathname]),
            pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
            route
          });
          if (match.pathnameBase !== "/") {
            matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
          }
        }
        return matches;
      }
      function generatePath(originalPath, params) {
        if (params === void 0) {
          params = {};
        }
        let path = originalPath;
        if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {
          warning(false, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
          path = path.replace(/\*$/, "/*");
        }
        const prefix = path.startsWith("/") ? "/" : "";
        const stringify = (p) => p == null ? "" : typeof p === "string" ? p : String(p);
        const segments = path.split(/\/+/).map((segment, index3, array) => {
          const isLastSegment = index3 === array.length - 1;
          if (isLastSegment && segment === "*") {
            const star = "*";
            return stringify(params[star]);
          }
          const keyMatch = segment.match(/^:(\w+)(\??)$/);
          if (keyMatch) {
            const [, key, optional] = keyMatch;
            let param = params[key];
            invariant(optional === "?" || param != null, 'Missing ":' + key + '" param');
            return stringify(param);
          }
          return segment.replace(/\?$/g, "");
        }).filter((segment) => !!segment);
        return prefix + segments.join("/");
      }
      function matchPath(pattern, pathname) {
        if (typeof pattern === "string") {
          pattern = {
            path: pattern,
            caseSensitive: false,
            end: true
          };
        }
        let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
        let match = pathname.match(matcher);
        if (!match)
          return null;
        let matchedPathname = match[0];
        let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
        let captureGroups = match.slice(1);
        let params = paramNames.reduce((memo, paramName, index3) => {
          if (paramName === "*") {
            let splatValue = captureGroups[index3] || "";
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
          }
          memo[paramName] = safelyDecodeURIComponent(captureGroups[index3] || "", paramName);
          return memo;
        }, {});
        return {
          params,
          pathname: matchedPathname,
          pathnameBase,
          pattern
        };
      }
      function compilePath(path, caseSensitive, end) {
        if (caseSensitive === void 0) {
          caseSensitive = false;
        }
        if (end === void 0) {
          end = true;
        }
        warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
        let paramNames = [];
        let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_, paramName) => {
          paramNames.push(paramName);
          return "/([^\\/]+)";
        });
        if (path.endsWith("*")) {
          paramNames.push("*");
          regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
        } else if (end) {
          regexpSource += "\\/*$";
        } else if (path !== "" && path !== "/") {
          regexpSource += "(?:(?=\\/|$))";
        } else
          ;
        let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
        return [matcher, paramNames];
      }
      function safelyDecodeURI(value) {
        try {
          return decodeURI(value);
        } catch (error) {
          warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
          return value;
        }
      }
      function safelyDecodeURIComponent(value, paramName) {
        try {
          return decodeURIComponent(value);
        } catch (error) {
          warning(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
          return value;
        }
      }
      function stripBasename(pathname, basename) {
        if (basename === "/")
          return pathname;
        if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
          return null;
        }
        let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
        let nextChar = pathname.charAt(startIndex);
        if (nextChar && nextChar !== "/") {
          return null;
        }
        return pathname.slice(startIndex) || "/";
      }
      function resolvePath(to, fromPathname) {
        if (fromPathname === void 0) {
          fromPathname = "/";
        }
        let {
          pathname: toPathname,
          search = "",
          hash = ""
        } = typeof to === "string" ? parsePath(to) : to;
        let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
        return {
          pathname,
          search: normalizeSearch(search),
          hash: normalizeHash(hash)
        };
      }
      function resolvePathname(relativePath, fromPathname) {
        let segments = fromPathname.replace(/\/+$/, "").split("/");
        let relativeSegments = relativePath.split("/");
        relativeSegments.forEach((segment) => {
          if (segment === "..") {
            if (segments.length > 1)
              segments.pop();
          } else if (segment !== ".") {
            segments.push(segment);
          }
        });
        return segments.length > 1 ? segments.join("/") : "/";
      }
      function getInvalidPathError(char, field, dest, path) {
        return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
      }
      function getPathContributingMatches(matches) {
        return matches.filter((match, index3) => index3 === 0 || match.route.path && match.route.path.length > 0);
      }
      function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
        if (isPathRelative === void 0) {
          isPathRelative = false;
        }
        let to;
        if (typeof toArg === "string") {
          to = parsePath(toArg);
        } else {
          to = _extends2({}, toArg);
          invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
          invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
          invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
        }
        let isEmptyPath = toArg === "" || to.pathname === "";
        let toPathname = isEmptyPath ? "/" : to.pathname;
        let from;
        if (isPathRelative || toPathname == null) {
          from = locationPathname;
        } else {
          let routePathnameIndex = routePathnames.length - 1;
          if (toPathname.startsWith("..")) {
            let toSegments = toPathname.split("/");
            while (toSegments[0] === "..") {
              toSegments.shift();
              routePathnameIndex -= 1;
            }
            to.pathname = toSegments.join("/");
          }
          from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
        }
        let path = resolvePath(to, from);
        let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
        let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
        if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
          path.pathname += "/";
        }
        return path;
      }
      function getToPathname(to) {
        return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? parsePath(to).pathname : to.pathname;
      }
      var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
      var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
      var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
      var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
      var json = function json2(data, init) {
        if (init === void 0) {
          init = {};
        }
        let responseInit = typeof init === "number" ? {
          status: init
        } : init;
        let headers = new Headers(responseInit.headers);
        if (!headers.has("Content-Type")) {
          headers.set("Content-Type", "application/json; charset=utf-8");
        }
        return new Response(JSON.stringify(data), _extends2({}, responseInit, {
          headers
        }));
      };
      var AbortedDeferredError = class extends Error {
      };
      var DeferredData = class {
        constructor(data, responseInit) {
          this.pendingKeysSet = /* @__PURE__ */ new Set();
          this.subscribers = /* @__PURE__ */ new Set();
          this.deferredKeys = [];
          invariant(data && typeof data === "object" && !Array.isArray(data), "defer() only accepts plain objects");
          let reject;
          this.abortPromise = new Promise((_, r) => reject = r);
          this.controller = new AbortController();
          let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
          this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort);
          this.controller.signal.addEventListener("abort", onAbort);
          this.data = Object.entries(data).reduce((acc, _ref) => {
            let [key, value] = _ref;
            return Object.assign(acc, {
              [key]: this.trackPromise(key, value)
            });
          }, {});
          if (this.done) {
            this.unlistenAbortSignal();
          }
          this.init = responseInit;
        }
        trackPromise(key, value) {
          if (!(value instanceof Promise)) {
            return value;
          }
          this.deferredKeys.push(key);
          this.pendingKeysSet.add(key);
          let promise = Promise.race([value, this.abortPromise]).then((data) => this.onSettle(promise, key, void 0, data), (error) => this.onSettle(promise, key, error));
          promise.catch(() => {
          });
          Object.defineProperty(promise, "_tracked", {
            get: () => true
          });
          return promise;
        }
        onSettle(promise, key, error, data) {
          if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {
            this.unlistenAbortSignal();
            Object.defineProperty(promise, "_error", {
              get: () => error
            });
            return Promise.reject(error);
          }
          this.pendingKeysSet.delete(key);
          if (this.done) {
            this.unlistenAbortSignal();
          }
          if (error === void 0 && data === void 0) {
            let undefinedError = new Error('Deferred data for key "' + key + '" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');
            Object.defineProperty(promise, "_error", {
              get: () => undefinedError
            });
            this.emit(false, key);
            return Promise.reject(undefinedError);
          }
          if (data === void 0) {
            Object.defineProperty(promise, "_error", {
              get: () => error
            });
            this.emit(false, key);
            return Promise.reject(error);
          }
          Object.defineProperty(promise, "_data", {
            get: () => data
          });
          this.emit(false, key);
          return data;
        }
        emit(aborted, settledKey) {
          this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
        }
        subscribe(fn) {
          this.subscribers.add(fn);
          return () => this.subscribers.delete(fn);
        }
        cancel() {
          this.controller.abort();
          this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));
          this.emit(true);
        }
        resolveData(signal) {
          return __async(this, null, function* () {
            let aborted = false;
            if (!this.done) {
              let onAbort = () => this.cancel();
              signal.addEventListener("abort", onAbort);
              aborted = yield new Promise((resolve) => {
                this.subscribe((aborted2) => {
                  signal.removeEventListener("abort", onAbort);
                  if (aborted2 || this.done) {
                    resolve(aborted2);
                  }
                });
              });
            }
            return aborted;
          });
        }
        get done() {
          return this.pendingKeysSet.size === 0;
        }
        get unwrappedData() {
          invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");
          return Object.entries(this.data).reduce((acc, _ref2) => {
            let [key, value] = _ref2;
            return Object.assign(acc, {
              [key]: unwrapTrackedPromise(value)
            });
          }, {});
        }
        get pendingKeys() {
          return Array.from(this.pendingKeysSet);
        }
      };
      function isTrackedPromise(value) {
        return value instanceof Promise && value._tracked === true;
      }
      function unwrapTrackedPromise(value) {
        if (!isTrackedPromise(value)) {
          return value;
        }
        if (value._error) {
          throw value._error;
        }
        return value._data;
      }
      var defer = function defer2(data, init) {
        if (init === void 0) {
          init = {};
        }
        let responseInit = typeof init === "number" ? {
          status: init
        } : init;
        return new DeferredData(data, responseInit);
      };
      var redirect = function redirect2(url, init) {
        if (init === void 0) {
          init = 302;
        }
        let responseInit = init;
        if (typeof responseInit === "number") {
          responseInit = {
            status: responseInit
          };
        } else if (typeof responseInit.status === "undefined") {
          responseInit.status = 302;
        }
        let headers = new Headers(responseInit.headers);
        headers.set("Location", url);
        return new Response(null, _extends2({}, responseInit, {
          headers
        }));
      };
      var redirectDocument = (url, init) => {
        let response = redirect(url, init);
        response.headers.set("X-Remix-Reload-Document", "true");
        return response;
      };
      var ErrorResponseImpl = class {
        constructor(status, statusText, data, internal) {
          if (internal === void 0) {
            internal = false;
          }
          this.status = status;
          this.statusText = statusText || "";
          this.internal = internal;
          if (data instanceof Error) {
            this.data = data.toString();
            this.error = data;
          } else {
            this.data = data;
          }
        }
      };
      function isRouteErrorResponse(error) {
        return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
      }
      var validMutationMethodsArr = ["post", "put", "patch", "delete"];
      var validMutationMethods = new Set(validMutationMethodsArr);
      var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
      var validRequestMethods = new Set(validRequestMethodsArr);
      var redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
      var redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
      var IDLE_NAVIGATION = {
        state: "idle",
        location: void 0,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0
      };
      var IDLE_FETCHER = {
        state: "idle",
        data: void 0,
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0
      };
      var IDLE_BLOCKER = {
        state: "unblocked",
        proceed: void 0,
        reset: void 0,
        location: void 0
      };
      var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
      var defaultMapRouteProperties = (route) => ({
        hasErrorBoundary: Boolean(route.hasErrorBoundary)
      });
      function createRouter(init) {
        const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : void 0;
        const isBrowser = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
        const isServer = !isBrowser;
        invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
        let mapRouteProperties;
        if (init.mapRouteProperties) {
          mapRouteProperties = init.mapRouteProperties;
        } else if (init.detectErrorBoundary) {
          let detectErrorBoundary = init.detectErrorBoundary;
          mapRouteProperties = (route) => ({
            hasErrorBoundary: detectErrorBoundary(route)
          });
        } else {
          mapRouteProperties = defaultMapRouteProperties;
        }
        let manifest = {};
        let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, void 0, manifest);
        let inFlightDataRoutes;
        let basename = init.basename || "/";
        let future = _extends2({
          v7_normalizeFormMethod: false,
          v7_prependBasename: false
        }, init.future);
        let unlistenHistory = null;
        let subscribers = /* @__PURE__ */ new Set();
        let savedScrollPositions = null;
        let getScrollRestorationKey = null;
        let getScrollPosition = null;
        let initialScrollRestored = init.hydrationData != null;
        let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
        let initialErrors = null;
        if (initialMatches == null) {
          let error = getInternalRouterError(404, {
            pathname: init.history.location.pathname
          });
          let {
            matches,
            route
          } = getShortCircuitMatches(dataRoutes);
          initialMatches = matches;
          initialErrors = {
            [route.id]: error
          };
        }
        let initialized = (
          // All initialMatches need to be loaded before we're ready.  If we have lazy
          // functions around still then we'll need to run them in initialize()
          !initialMatches.some((m) => m.route.lazy) && // And we have to either have no loaders or have been provided hydrationData
          (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null)
        );
        let router;
        let state = {
          historyAction: init.history.action,
          location: init.history.location,
          matches: initialMatches,
          initialized,
          navigation: IDLE_NAVIGATION,
          // Don't restore on initial updateState() if we were SSR'd
          restoreScrollPosition: init.hydrationData != null ? false : null,
          preventScrollReset: false,
          revalidation: "idle",
          loaderData: init.hydrationData && init.hydrationData.loaderData || {},
          actionData: init.hydrationData && init.hydrationData.actionData || null,
          errors: init.hydrationData && init.hydrationData.errors || initialErrors,
          fetchers: /* @__PURE__ */ new Map(),
          blockers: /* @__PURE__ */ new Map()
        };
        let pendingAction = Action.Pop;
        let pendingPreventScrollReset = false;
        let pendingNavigationController;
        let isUninterruptedRevalidation = false;
        let isRevalidationRequired = false;
        let cancelledDeferredRoutes = [];
        let cancelledFetcherLoads = [];
        let fetchControllers = /* @__PURE__ */ new Map();
        let incrementingLoadId = 0;
        let pendingNavigationLoadId = -1;
        let fetchReloadIds = /* @__PURE__ */ new Map();
        let fetchRedirectIds = /* @__PURE__ */ new Set();
        let fetchLoadMatches = /* @__PURE__ */ new Map();
        let activeDeferreds = /* @__PURE__ */ new Map();
        let blockerFunctions = /* @__PURE__ */ new Map();
        let ignoreNextHistoryUpdate = false;
        function initialize() {
          unlistenHistory = init.history.listen((_ref) => {
            let {
              action: historyAction,
              location: location2,
              delta
            } = _ref;
            if (ignoreNextHistoryUpdate) {
              ignoreNextHistoryUpdate = false;
              return;
            }
            warning(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
            let blockerKey = shouldBlockNavigation({
              currentLocation: state.location,
              nextLocation: location2,
              historyAction
            });
            if (blockerKey && delta != null) {
              ignoreNextHistoryUpdate = true;
              init.history.go(delta * -1);
              updateBlocker(blockerKey, {
                state: "blocked",
                location: location2,
                proceed() {
                  updateBlocker(blockerKey, {
                    state: "proceeding",
                    proceed: void 0,
                    reset: void 0,
                    location: location2
                  });
                  init.history.go(delta);
                },
                reset() {
                  let blockers = new Map(state.blockers);
                  blockers.set(blockerKey, IDLE_BLOCKER);
                  updateState({
                    blockers
                  });
                }
              });
              return;
            }
            return startNavigation(historyAction, location2);
          });
          if (!state.initialized) {
            startNavigation(Action.Pop, state.location);
          }
          return router;
        }
        function dispose() {
          if (unlistenHistory) {
            unlistenHistory();
          }
          subscribers.clear();
          pendingNavigationController && pendingNavigationController.abort();
          state.fetchers.forEach((_, key) => deleteFetcher(key));
          state.blockers.forEach((_, key) => deleteBlocker(key));
        }
        function subscribe(fn) {
          subscribers.add(fn);
          return () => subscribers.delete(fn);
        }
        function updateState(newState) {
          state = _extends2({}, state, newState);
          subscribers.forEach((subscriber) => subscriber(state));
        }
        function completeNavigation(location2, newState) {
          var _location$state, _location$state2;
          let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location2.state) == null ? void 0 : _location$state._isRedirect) !== true;
          let actionData;
          if (newState.actionData) {
            if (Object.keys(newState.actionData).length > 0) {
              actionData = newState.actionData;
            } else {
              actionData = null;
            }
          } else if (isActionReload) {
            actionData = state.actionData;
          } else {
            actionData = null;
          }
          let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
          let blockers = state.blockers;
          if (blockers.size > 0) {
            blockers = new Map(blockers);
            blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));
          }
          let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location2.state) == null ? void 0 : _location$state2._isRedirect) !== true;
          if (inFlightDataRoutes) {
            dataRoutes = inFlightDataRoutes;
            inFlightDataRoutes = void 0;
          }
          if (isUninterruptedRevalidation)
            ;
          else if (pendingAction === Action.Pop)
            ;
          else if (pendingAction === Action.Push) {
            init.history.push(location2, location2.state);
          } else if (pendingAction === Action.Replace) {
            init.history.replace(location2, location2.state);
          }
          updateState(_extends2({}, newState, {
            // matches, errors, fetchers go through as-is
            actionData,
            loaderData,
            historyAction: pendingAction,
            location: location2,
            initialized: true,
            navigation: IDLE_NAVIGATION,
            revalidation: "idle",
            restoreScrollPosition: getSavedScrollPosition(location2, newState.matches || state.matches),
            preventScrollReset,
            blockers
          }));
          pendingAction = Action.Pop;
          pendingPreventScrollReset = false;
          isUninterruptedRevalidation = false;
          isRevalidationRequired = false;
          cancelledDeferredRoutes = [];
          cancelledFetcherLoads = [];
        }
        function navigate(to, opts) {
          return __async(this, null, function* () {
            if (typeof to === "number") {
              init.history.go(to);
              return;
            }
            let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
            let {
              path,
              submission,
              error
            } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
            let currentLocation = state.location;
            let nextLocation = createLocation(state.location, path, opts && opts.state);
            nextLocation = _extends2({}, nextLocation, init.history.encodeLocation(nextLocation));
            let userReplace = opts && opts.replace != null ? opts.replace : void 0;
            let historyAction = Action.Push;
            if (userReplace === true) {
              historyAction = Action.Replace;
            } else if (userReplace === false)
              ;
            else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
              historyAction = Action.Replace;
            }
            let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
            let blockerKey = shouldBlockNavigation({
              currentLocation,
              nextLocation,
              historyAction
            });
            if (blockerKey) {
              updateBlocker(blockerKey, {
                state: "blocked",
                location: nextLocation,
                proceed() {
                  updateBlocker(blockerKey, {
                    state: "proceeding",
                    proceed: void 0,
                    reset: void 0,
                    location: nextLocation
                  });
                  navigate(to, opts);
                },
                reset() {
                  let blockers = new Map(state.blockers);
                  blockers.set(blockerKey, IDLE_BLOCKER);
                  updateState({
                    blockers
                  });
                }
              });
              return;
            }
            return yield startNavigation(historyAction, nextLocation, {
              submission,
              // Send through the formData serialization error if we have one so we can
              // render at the right error boundary after we match routes
              pendingError: error,
              preventScrollReset,
              replace: opts && opts.replace
            });
          });
        }
        function revalidate() {
          interruptActiveLoads();
          updateState({
            revalidation: "loading"
          });
          if (state.navigation.state === "submitting") {
            return;
          }
          if (state.navigation.state === "idle") {
            startNavigation(state.historyAction, state.location, {
              startUninterruptedRevalidation: true
            });
            return;
          }
          startNavigation(pendingAction || state.historyAction, state.navigation.location, {
            overrideNavigation: state.navigation
          });
        }
        function startNavigation(historyAction, location2, opts) {
          return __async(this, null, function* () {
            pendingNavigationController && pendingNavigationController.abort();
            pendingNavigationController = null;
            pendingAction = historyAction;
            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
            saveScrollPosition(state.location, state.matches);
            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let loadingNavigation = opts && opts.overrideNavigation;
            let matches = matchRoutes(routesToUse, location2, basename);
            if (!matches) {
              let error = getInternalRouterError(404, {
                pathname: location2.pathname
              });
              let {
                matches: notFoundMatches,
                route
              } = getShortCircuitMatches(routesToUse);
              cancelActiveDeferreds();
              completeNavigation(location2, {
                matches: notFoundMatches,
                loaderData: {},
                errors: {
                  [route.id]: error
                }
              });
              return;
            }
            if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location2) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
              completeNavigation(location2, {
                matches
              });
              return;
            }
            pendingNavigationController = new AbortController();
            let request = createClientSideRequest(init.history, location2, pendingNavigationController.signal, opts && opts.submission);
            let pendingActionData;
            let pendingError;
            if (opts && opts.pendingError) {
              pendingError = {
                [findNearestBoundary(matches).route.id]: opts.pendingError
              };
            } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
              let actionOutput = yield handleAction(request, location2, opts.submission, matches, {
                replace: opts.replace
              });
              if (actionOutput.shortCircuited) {
                return;
              }
              pendingActionData = actionOutput.pendingActionData;
              pendingError = actionOutput.pendingActionError;
              loadingNavigation = getLoadingNavigation(location2, opts.submission);
              request = new Request(request.url, {
                signal: request.signal
              });
            }
            let {
              shortCircuited,
              loaderData,
              errors
            } = yield handleLoaders(request, location2, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);
            if (shortCircuited) {
              return;
            }
            pendingNavigationController = null;
            completeNavigation(location2, _extends2({
              matches
            }, pendingActionData ? {
              actionData: pendingActionData
            } : {}, {
              loaderData,
              errors
            }));
          });
        }
        function handleAction(request, location2, submission, matches, opts) {
          return __async(this, null, function* () {
            if (opts === void 0) {
              opts = {};
            }
            interruptActiveLoads();
            let navigation = getSubmittingNavigation(location2, submission);
            updateState({
              navigation
            });
            let result;
            let actionMatch = getTargetMatch(matches, location2);
            if (!actionMatch.route.action && !actionMatch.route.lazy) {
              result = {
                type: ResultType.error,
                error: getInternalRouterError(405, {
                  method: request.method,
                  pathname: location2.pathname,
                  routeId: actionMatch.route.id
                })
              };
            } else {
              result = yield callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename);
              if (request.signal.aborted) {
                return {
                  shortCircuited: true
                };
              }
            }
            if (isRedirectResult(result)) {
              let replace;
              if (opts && opts.replace != null) {
                replace = opts.replace;
              } else {
                replace = result.location === state.location.pathname + state.location.search;
              }
              yield startRedirectNavigation(state, result, {
                submission,
                replace
              });
              return {
                shortCircuited: true
              };
            }
            if (isErrorResult(result)) {
              let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
              if ((opts && opts.replace) !== true) {
                pendingAction = Action.Push;
              }
              return {
                // Send back an empty object we can use to clear out any prior actionData
                pendingActionData: {},
                pendingActionError: {
                  [boundaryMatch.route.id]: result.error
                }
              };
            }
            if (isDeferredResult(result)) {
              throw getInternalRouterError(400, {
                type: "defer-action"
              });
            }
            return {
              pendingActionData: {
                [actionMatch.route.id]: result.data
              }
            };
          });
        }
        function handleLoaders(request, location2, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {
          return __async(this, null, function* () {
            let loadingNavigation = overrideNavigation || getLoadingNavigation(location2, submission);
            let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location2, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);
            cancelActiveDeferreds((routeId) => !(matches && matches.some((m) => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId));
            pendingNavigationLoadId = ++incrementingLoadId;
            if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
              let updatedFetchers2 = markFetchRedirectsDone();
              completeNavigation(location2, _extends2({
                matches,
                loaderData: {},
                // Commit pending error if we're short circuiting
                errors: pendingError || null
              }, pendingActionData ? {
                actionData: pendingActionData
              } : {}, updatedFetchers2 ? {
                fetchers: new Map(state.fetchers)
              } : {}));
              return {
                shortCircuited: true
              };
            }
            if (!isUninterruptedRevalidation) {
              revalidatingFetchers.forEach((rf) => {
                let fetcher = state.fetchers.get(rf.key);
                let revalidatingFetcher = getLoadingFetcher(void 0, fetcher ? fetcher.data : void 0);
                state.fetchers.set(rf.key, revalidatingFetcher);
              });
              let actionData = pendingActionData || state.actionData;
              updateState(_extends2({
                navigation: loadingNavigation
              }, actionData ? Object.keys(actionData).length === 0 ? {
                actionData: null
              } : {
                actionData
              } : {}, revalidatingFetchers.length > 0 ? {
                fetchers: new Map(state.fetchers)
              } : {}));
            }
            revalidatingFetchers.forEach((rf) => {
              if (fetchControllers.has(rf.key)) {
                abortFetcher(rf.key);
              }
              if (rf.controller) {
                fetchControllers.set(rf.key, rf.controller);
              }
            });
            let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));
            if (pendingNavigationController) {
              pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
            }
            let {
              results,
              loaderResults,
              fetcherResults
            } = yield callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
            if (request.signal.aborted) {
              return {
                shortCircuited: true
              };
            }
            if (pendingNavigationController) {
              pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
            }
            revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
            let redirect2 = findRedirect(results);
            if (redirect2) {
              if (redirect2.idx >= matchesToLoad.length) {
                let fetcherKey = revalidatingFetchers[redirect2.idx - matchesToLoad.length].key;
                fetchRedirectIds.add(fetcherKey);
              }
              yield startRedirectNavigation(state, redirect2.result, {
                replace
              });
              return {
                shortCircuited: true
              };
            }
            let {
              loaderData,
              errors
            } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
            activeDeferreds.forEach((deferredData, routeId) => {
              deferredData.subscribe((aborted) => {
                if (aborted || deferredData.done) {
                  activeDeferreds.delete(routeId);
                }
              });
            });
            let updatedFetchers = markFetchRedirectsDone();
            let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
            let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
            return _extends2({
              loaderData,
              errors
            }, shouldUpdateFetchers ? {
              fetchers: new Map(state.fetchers)
            } : {});
          });
        }
        function getFetcher(key) {
          return state.fetchers.get(key) || IDLE_FETCHER;
        }
        function fetch2(key, routeId, href, opts) {
          if (isServer) {
            throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
          }
          if (fetchControllers.has(key))
            abortFetcher(key);
          let routesToUse = inFlightDataRoutes || dataRoutes;
          let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);
          let matches = matchRoutes(routesToUse, normalizedPath, basename);
          if (!matches) {
            setFetcherError(key, routeId, getInternalRouterError(404, {
              pathname: normalizedPath
            }));
            return;
          }
          let {
            path,
            submission,
            error
          } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
          if (error) {
            setFetcherError(key, routeId, error);
            return;
          }
          let match = getTargetMatch(matches, path);
          pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
          if (submission && isMutationMethod(submission.formMethod)) {
            handleFetcherAction(key, routeId, path, match, matches, submission);
            return;
          }
          fetchLoadMatches.set(key, {
            routeId,
            path
          });
          handleFetcherLoader(key, routeId, path, match, matches, submission);
        }
        function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {
          return __async(this, null, function* () {
            interruptActiveLoads();
            fetchLoadMatches.delete(key);
            if (!match.route.action && !match.route.lazy) {
              let error = getInternalRouterError(405, {
                method: submission.formMethod,
                pathname: path,
                routeId
              });
              setFetcherError(key, routeId, error);
              return;
            }
            let existingFetcher = state.fetchers.get(key);
            let fetcher = getSubmittingFetcher(submission, existingFetcher);
            state.fetchers.set(key, fetcher);
            updateState({
              fetchers: new Map(state.fetchers)
            });
            let abortController = new AbortController();
            let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
            fetchControllers.set(key, abortController);
            let originatingLoadId = incrementingLoadId;
            let actionResult = yield callLoaderOrAction("action", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);
            if (fetchRequest.signal.aborted) {
              if (fetchControllers.get(key) === abortController) {
                fetchControllers.delete(key);
              }
              return;
            }
            if (isRedirectResult(actionResult)) {
              fetchControllers.delete(key);
              if (pendingNavigationLoadId > originatingLoadId) {
                let doneFetcher = getDoneFetcher(void 0);
                state.fetchers.set(key, doneFetcher);
                updateState({
                  fetchers: new Map(state.fetchers)
                });
                return;
              } else {
                fetchRedirectIds.add(key);
                let loadingFetcher = getLoadingFetcher(submission);
                state.fetchers.set(key, loadingFetcher);
                updateState({
                  fetchers: new Map(state.fetchers)
                });
                return startRedirectNavigation(state, actionResult, {
                  fetcherSubmission: submission
                });
              }
            }
            if (isErrorResult(actionResult)) {
              setFetcherError(key, routeId, actionResult.error);
              return;
            }
            if (isDeferredResult(actionResult)) {
              throw getInternalRouterError(400, {
                type: "defer-action"
              });
            }
            let nextLocation = state.navigation.location || state.location;
            let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
            invariant(matches, "Didn't find any matches after fetcher action");
            let loadId = ++incrementingLoadId;
            fetchReloadIds.set(key, loadId);
            let loadFetcher = getLoadingFetcher(submission, actionResult.data);
            state.fetchers.set(key, loadFetcher);
            let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
              init.history,
              state,
              matches,
              submission,
              nextLocation,
              isRevalidationRequired,
              cancelledDeferredRoutes,
              cancelledFetcherLoads,
              fetchLoadMatches,
              fetchRedirectIds,
              routesToUse,
              basename,
              {
                [match.route.id]: actionResult.data
              },
              void 0
              // No need to send through errors since we short circuit above
            );
            revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
              let staleKey = rf.key;
              let existingFetcher2 = state.fetchers.get(staleKey);
              let revalidatingFetcher = getLoadingFetcher(void 0, existingFetcher2 ? existingFetcher2.data : void 0);
              state.fetchers.set(staleKey, revalidatingFetcher);
              if (fetchControllers.has(staleKey)) {
                abortFetcher(staleKey);
              }
              if (rf.controller) {
                fetchControllers.set(staleKey, rf.controller);
              }
            });
            updateState({
              fetchers: new Map(state.fetchers)
            });
            let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
            abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
            let {
              results,
              loaderResults,
              fetcherResults
            } = yield callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
            if (abortController.signal.aborted) {
              return;
            }
            abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
            fetchReloadIds.delete(key);
            fetchControllers.delete(key);
            revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));
            let redirect2 = findRedirect(results);
            if (redirect2) {
              if (redirect2.idx >= matchesToLoad.length) {
                let fetcherKey = revalidatingFetchers[redirect2.idx - matchesToLoad.length].key;
                fetchRedirectIds.add(fetcherKey);
              }
              return startRedirectNavigation(state, redirect2.result);
            }
            let {
              loaderData,
              errors
            } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
            if (state.fetchers.has(key)) {
              let doneFetcher = getDoneFetcher(actionResult.data);
              state.fetchers.set(key, doneFetcher);
            }
            let didAbortFetchLoads = abortStaleFetchLoads(loadId);
            if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
              invariant(pendingAction, "Expected pending action");
              pendingNavigationController && pendingNavigationController.abort();
              completeNavigation(state.navigation.location, {
                matches,
                loaderData,
                errors,
                fetchers: new Map(state.fetchers)
              });
            } else {
              updateState(_extends2({
                errors,
                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)
              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {
                fetchers: new Map(state.fetchers)
              } : {}));
              isRevalidationRequired = false;
            }
          });
        }
        function handleFetcherLoader(key, routeId, path, match, matches, submission) {
          return __async(this, null, function* () {
            let existingFetcher = state.fetchers.get(key);
            let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : void 0);
            state.fetchers.set(key, loadingFetcher);
            updateState({
              fetchers: new Map(state.fetchers)
            });
            let abortController = new AbortController();
            let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
            fetchControllers.set(key, abortController);
            let originatingLoadId = incrementingLoadId;
            let result = yield callLoaderOrAction("loader", fetchRequest, match, matches, manifest, mapRouteProperties, basename);
            if (isDeferredResult(result)) {
              result = (yield resolveDeferredData(result, fetchRequest.signal, true)) || result;
            }
            if (fetchControllers.get(key) === abortController) {
              fetchControllers.delete(key);
            }
            if (fetchRequest.signal.aborted) {
              return;
            }
            if (isRedirectResult(result)) {
              if (pendingNavigationLoadId > originatingLoadId) {
                let doneFetcher2 = getDoneFetcher(void 0);
                state.fetchers.set(key, doneFetcher2);
                updateState({
                  fetchers: new Map(state.fetchers)
                });
                return;
              } else {
                fetchRedirectIds.add(key);
                yield startRedirectNavigation(state, result);
                return;
              }
            }
            if (isErrorResult(result)) {
              let boundaryMatch = findNearestBoundary(state.matches, routeId);
              state.fetchers.delete(key);
              updateState({
                fetchers: new Map(state.fetchers),
                errors: {
                  [boundaryMatch.route.id]: result.error
                }
              });
              return;
            }
            invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
            let doneFetcher = getDoneFetcher(result.data);
            state.fetchers.set(key, doneFetcher);
            updateState({
              fetchers: new Map(state.fetchers)
            });
          });
        }
        function startRedirectNavigation(state2, redirect2, _temp) {
          return __async(this, null, function* () {
            let {
              submission,
              fetcherSubmission,
              replace
            } = _temp === void 0 ? {} : _temp;
            if (redirect2.revalidate) {
              isRevalidationRequired = true;
            }
            let redirectLocation = createLocation(state2.location, redirect2.location, {
              _isRedirect: true
            });
            invariant(redirectLocation, "Expected a location on the redirect navigation");
            if (isBrowser) {
              let isDocumentReload = false;
              if (redirect2.reloadDocument) {
                isDocumentReload = true;
              } else if (ABSOLUTE_URL_REGEX.test(redirect2.location)) {
                const url = init.history.createURL(redirect2.location);
                isDocumentReload = // Hard reload if it's an absolute URL to a new origin
                url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
                stripBasename(url.pathname, basename) == null;
              }
              if (isDocumentReload) {
                if (replace) {
                  routerWindow.location.replace(redirect2.location);
                } else {
                  routerWindow.location.assign(redirect2.location);
                }
                return;
              }
            }
            pendingNavigationController = null;
            let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;
            let {
              formMethod,
              formAction,
              formEncType
            } = state2.navigation;
            if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {
              submission = getSubmissionFromNavigation(state2.navigation);
            }
            let activeSubmission = submission || fetcherSubmission;
            if (redirectPreserveMethodStatusCodes.has(redirect2.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {
              yield startNavigation(redirectHistoryAction, redirectLocation, {
                submission: _extends2({}, activeSubmission, {
                  formAction: redirect2.location
                }),
                // Preserve this flag across redirects
                preventScrollReset: pendingPreventScrollReset
              });
            } else {
              let overrideNavigation = getLoadingNavigation(redirectLocation, submission);
              yield startNavigation(redirectHistoryAction, redirectLocation, {
                overrideNavigation,
                // Send fetcher submissions through for shouldRevalidate
                fetcherSubmission,
                // Preserve this flag across redirects
                preventScrollReset: pendingPreventScrollReset
              });
            }
          });
        }
        function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
          return __async(this, null, function* () {
            let results = yield Promise.all([...matchesToLoad.map((match) => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map((f) => {
              if (f.matches && f.match && f.controller) {
                return callLoaderOrAction("loader", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);
              } else {
                let error = {
                  type: ResultType.error,
                  error: getInternalRouterError(404, {
                    pathname: f.path
                  })
                };
                return error;
              }
            })]);
            let loaderResults = results.slice(0, matchesToLoad.length);
            let fetcherResults = results.slice(matchesToLoad.length);
            yield Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f) => f.match), fetcherResults, fetchersToLoad.map((f) => f.controller ? f.controller.signal : null), true)]);
            return {
              results,
              loaderResults,
              fetcherResults
            };
          });
        }
        function interruptActiveLoads() {
          isRevalidationRequired = true;
          cancelledDeferredRoutes.push(...cancelActiveDeferreds());
          fetchLoadMatches.forEach((_, key) => {
            if (fetchControllers.has(key)) {
              cancelledFetcherLoads.push(key);
              abortFetcher(key);
            }
          });
        }
        function setFetcherError(key, routeId, error) {
          let boundaryMatch = findNearestBoundary(state.matches, routeId);
          deleteFetcher(key);
          updateState({
            errors: {
              [boundaryMatch.route.id]: error
            },
            fetchers: new Map(state.fetchers)
          });
        }
        function deleteFetcher(key) {
          let fetcher = state.fetchers.get(key);
          if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {
            abortFetcher(key);
          }
          fetchLoadMatches.delete(key);
          fetchReloadIds.delete(key);
          fetchRedirectIds.delete(key);
          state.fetchers.delete(key);
        }
        function abortFetcher(key) {
          let controller = fetchControllers.get(key);
          invariant(controller, "Expected fetch controller: " + key);
          controller.abort();
          fetchControllers.delete(key);
        }
        function markFetchersDone(keys) {
          for (let key of keys) {
            let fetcher = getFetcher(key);
            let doneFetcher = getDoneFetcher(fetcher.data);
            state.fetchers.set(key, doneFetcher);
          }
        }
        function markFetchRedirectsDone() {
          let doneKeys = [];
          let updatedFetchers = false;
          for (let key of fetchRedirectIds) {
            let fetcher = state.fetchers.get(key);
            invariant(fetcher, "Expected fetcher: " + key);
            if (fetcher.state === "loading") {
              fetchRedirectIds.delete(key);
              doneKeys.push(key);
              updatedFetchers = true;
            }
          }
          markFetchersDone(doneKeys);
          return updatedFetchers;
        }
        function abortStaleFetchLoads(landedId) {
          let yeetedKeys = [];
          for (let [key, id] of fetchReloadIds) {
            if (id < landedId) {
              let fetcher = state.fetchers.get(key);
              invariant(fetcher, "Expected fetcher: " + key);
              if (fetcher.state === "loading") {
                abortFetcher(key);
                fetchReloadIds.delete(key);
                yeetedKeys.push(key);
              }
            }
          }
          markFetchersDone(yeetedKeys);
          return yeetedKeys.length > 0;
        }
        function getBlocker(key, fn) {
          let blocker = state.blockers.get(key) || IDLE_BLOCKER;
          if (blockerFunctions.get(key) !== fn) {
            blockerFunctions.set(key, fn);
          }
          return blocker;
        }
        function deleteBlocker(key) {
          state.blockers.delete(key);
          blockerFunctions.delete(key);
        }
        function updateBlocker(key, newBlocker) {
          let blocker = state.blockers.get(key) || IDLE_BLOCKER;
          invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
          let blockers = new Map(state.blockers);
          blockers.set(key, newBlocker);
          updateState({
            blockers
          });
        }
        function shouldBlockNavigation(_ref2) {
          let {
            currentLocation,
            nextLocation,
            historyAction
          } = _ref2;
          if (blockerFunctions.size === 0) {
            return;
          }
          if (blockerFunctions.size > 1) {
            warning(false, "A router only supports one blocker at a time");
          }
          let entries = Array.from(blockerFunctions.entries());
          let [blockerKey, blockerFunction] = entries[entries.length - 1];
          let blocker = state.blockers.get(blockerKey);
          if (blocker && blocker.state === "proceeding") {
            return;
          }
          if (blockerFunction({
            currentLocation,
            nextLocation,
            historyAction
          })) {
            return blockerKey;
          }
        }
        function cancelActiveDeferreds(predicate) {
          let cancelledRouteIds = [];
          activeDeferreds.forEach((dfd, routeId) => {
            if (!predicate || predicate(routeId)) {
              dfd.cancel();
              cancelledRouteIds.push(routeId);
              activeDeferreds.delete(routeId);
            }
          });
          return cancelledRouteIds;
        }
        function enableScrollRestoration(positions, getPosition, getKey) {
          savedScrollPositions = positions;
          getScrollPosition = getPosition;
          getScrollRestorationKey = getKey || null;
          if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
            initialScrollRestored = true;
            let y = getSavedScrollPosition(state.location, state.matches);
            if (y != null) {
              updateState({
                restoreScrollPosition: y
              });
            }
          }
          return () => {
            savedScrollPositions = null;
            getScrollPosition = null;
            getScrollRestorationKey = null;
          };
        }
        function getScrollKey(location2, matches) {
          if (getScrollRestorationKey) {
            let key = getScrollRestorationKey(location2, matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData)));
            return key || location2.key;
          }
          return location2.key;
        }
        function saveScrollPosition(location2, matches) {
          if (savedScrollPositions && getScrollPosition) {
            let key = getScrollKey(location2, matches);
            savedScrollPositions[key] = getScrollPosition();
          }
        }
        function getSavedScrollPosition(location2, matches) {
          if (savedScrollPositions) {
            let key = getScrollKey(location2, matches);
            let y = savedScrollPositions[key];
            if (typeof y === "number") {
              return y;
            }
          }
          return null;
        }
        function _internalSetRoutes(newRoutes) {
          manifest = {};
          inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, void 0, manifest);
        }
        router = {
          get basename() {
            return basename;
          },
          get state() {
            return state;
          },
          get routes() {
            return dataRoutes;
          },
          initialize,
          subscribe,
          enableScrollRestoration,
          navigate,
          fetch: fetch2,
          revalidate,
          // Passthrough to history-aware createHref used by useHref so we get proper
          // hash-aware URLs in DOM paths
          createHref: (to) => init.history.createHref(to),
          encodeLocation: (to) => init.history.encodeLocation(to),
          getFetcher,
          deleteFetcher,
          dispose,
          getBlocker,
          deleteBlocker,
          _internalFetchControllers: fetchControllers,
          _internalActiveDeferreds: activeDeferreds,
          // TODO: Remove setRoutes, it's temporary to avoid dealing with
          // updating the tree while validating the update algorithm.
          _internalSetRoutes
        };
        return router;
      }
      var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
      function createStaticHandler(routes, opts) {
        invariant(routes.length > 0, "You must provide a non-empty routes array to createStaticHandler");
        let manifest = {};
        let basename = (opts ? opts.basename : null) || "/";
        let mapRouteProperties;
        if (opts != null && opts.mapRouteProperties) {
          mapRouteProperties = opts.mapRouteProperties;
        } else if (opts != null && opts.detectErrorBoundary) {
          let detectErrorBoundary = opts.detectErrorBoundary;
          mapRouteProperties = (route) => ({
            hasErrorBoundary: detectErrorBoundary(route)
          });
        } else {
          mapRouteProperties = defaultMapRouteProperties;
        }
        let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, void 0, manifest);
        function query(request, _temp2) {
          return __async(this, null, function* () {
            let {
              requestContext
            } = _temp2 === void 0 ? {} : _temp2;
            let url = new URL(request.url);
            let method = request.method;
            let location2 = createLocation("", createPath(url), null, "default");
            let matches = matchRoutes(dataRoutes, location2, basename);
            if (!isValidMethod(method) && method !== "HEAD") {
              let error = getInternalRouterError(405, {
                method
              });
              let {
                matches: methodNotAllowedMatches,
                route
              } = getShortCircuitMatches(dataRoutes);
              return {
                basename,
                location: location2,
                matches: methodNotAllowedMatches,
                loaderData: {},
                actionData: null,
                errors: {
                  [route.id]: error
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
              };
            } else if (!matches) {
              let error = getInternalRouterError(404, {
                pathname: location2.pathname
              });
              let {
                matches: notFoundMatches,
                route
              } = getShortCircuitMatches(dataRoutes);
              return {
                basename,
                location: location2,
                matches: notFoundMatches,
                loaderData: {},
                actionData: null,
                errors: {
                  [route.id]: error
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
              };
            }
            let result = yield queryImpl(request, location2, matches, requestContext);
            if (isResponse(result)) {
              return result;
            }
            return _extends2({
              location: location2,
              basename
            }, result);
          });
        }
        function queryRoute(request, _temp3) {
          return __async(this, null, function* () {
            let {
              routeId,
              requestContext
            } = _temp3 === void 0 ? {} : _temp3;
            let url = new URL(request.url);
            let method = request.method;
            let location2 = createLocation("", createPath(url), null, "default");
            let matches = matchRoutes(dataRoutes, location2, basename);
            if (!isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS") {
              throw getInternalRouterError(405, {
                method
              });
            } else if (!matches) {
              throw getInternalRouterError(404, {
                pathname: location2.pathname
              });
            }
            let match = routeId ? matches.find((m) => m.route.id === routeId) : getTargetMatch(matches, location2);
            if (routeId && !match) {
              throw getInternalRouterError(403, {
                pathname: location2.pathname,
                routeId
              });
            } else if (!match) {
              throw getInternalRouterError(404, {
                pathname: location2.pathname
              });
            }
            let result = yield queryImpl(request, location2, matches, requestContext, match);
            if (isResponse(result)) {
              return result;
            }
            let error = result.errors ? Object.values(result.errors)[0] : void 0;
            if (error !== void 0) {
              throw error;
            }
            if (result.actionData) {
              return Object.values(result.actionData)[0];
            }
            if (result.loaderData) {
              var _result$activeDeferre;
              let data = Object.values(result.loaderData)[0];
              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {
                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];
              }
              return data;
            }
            return void 0;
          });
        }
        function queryImpl(request, location2, matches, requestContext, routeMatch) {
          return __async(this, null, function* () {
            invariant(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
            try {
              if (isMutationMethod(request.method.toLowerCase())) {
                let result2 = yield submit(request, matches, routeMatch || getTargetMatch(matches, location2), requestContext, routeMatch != null);
                return result2;
              }
              let result = yield loadRouteData(request, matches, requestContext, routeMatch);
              return isResponse(result) ? result : _extends2({}, result, {
                actionData: null,
                actionHeaders: {}
              });
            } catch (e) {
              if (isQueryRouteResponse(e)) {
                if (e.type === ResultType.error) {
                  throw e.response;
                }
                return e.response;
              }
              if (isRedirectResponse(e)) {
                return e;
              }
              throw e;
            }
          });
        }
        function submit(request, matches, actionMatch, requestContext, isRouteRequest) {
          return __async(this, null, function* () {
            let result;
            if (!actionMatch.route.action && !actionMatch.route.lazy) {
              let error = getInternalRouterError(405, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId: actionMatch.route.id
              });
              if (isRouteRequest) {
                throw error;
              }
              result = {
                type: ResultType.error,
                error
              };
            } else {
              result = yield callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, {
                isStaticRequest: true,
                isRouteRequest,
                requestContext
              });
              if (request.signal.aborted) {
                let method = isRouteRequest ? "queryRoute" : "query";
                throw new Error(method + "() call aborted: " + request.method + " " + request.url);
              }
            }
            if (isRedirectResult(result)) {
              throw new Response(null, {
                status: result.status,
                headers: {
                  Location: result.location
                }
              });
            }
            if (isDeferredResult(result)) {
              let error = getInternalRouterError(400, {
                type: "defer-action"
              });
              if (isRouteRequest) {
                throw error;
              }
              result = {
                type: ResultType.error,
                error
              };
            }
            if (isRouteRequest) {
              if (isErrorResult(result)) {
                throw result.error;
              }
              return {
                matches: [actionMatch],
                loaderData: {},
                actionData: {
                  [actionMatch.route.id]: result.data
                },
                errors: null,
                // Note: statusCode + headers are unused here since queryRoute will
                // return the raw Response or value
                statusCode: 200,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
              };
            }
            if (isErrorResult(result)) {
              let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
              let context2 = yield loadRouteData(request, matches, requestContext, void 0, {
                [boundaryMatch.route.id]: result.error
              });
              return _extends2({}, context2, {
                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,
                actionData: null,
                actionHeaders: _extends2({}, result.headers ? {
                  [actionMatch.route.id]: result.headers
                } : {})
              });
            }
            let loaderRequest = new Request(request.url, {
              headers: request.headers,
              redirect: request.redirect,
              signal: request.signal
            });
            let context = yield loadRouteData(loaderRequest, matches, requestContext);
            return _extends2({}, context, result.statusCode ? {
              statusCode: result.statusCode
            } : {}, {
              actionData: {
                [actionMatch.route.id]: result.data
              },
              actionHeaders: _extends2({}, result.headers ? {
                [actionMatch.route.id]: result.headers
              } : {})
            });
          });
        }
        function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {
          return __async(this, null, function* () {
            let isRouteRequest = routeMatch != null;
            if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {
              throw getInternalRouterError(400, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId: routeMatch == null ? void 0 : routeMatch.route.id
              });
            }
            let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);
            let matchesToLoad = requestMatches.filter((m) => m.route.loader || m.route.lazy);
            if (matchesToLoad.length === 0) {
              return {
                matches,
                // Add a null for all matched routes for proper revalidation on the client
                loaderData: matches.reduce((acc, m) => Object.assign(acc, {
                  [m.route.id]: null
                }), {}),
                errors: pendingActionError || null,
                statusCode: 200,
                loaderHeaders: {},
                activeDeferreds: null
              };
            }
            let results = yield Promise.all([...matchesToLoad.map((match) => callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, {
              isStaticRequest: true,
              isRouteRequest,
              requestContext
            }))]);
            if (request.signal.aborted) {
              let method = isRouteRequest ? "queryRoute" : "query";
              throw new Error(method + "() call aborted: " + request.method + " " + request.url);
            }
            let activeDeferreds = /* @__PURE__ */ new Map();
            let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);
            let executedLoaders = new Set(matchesToLoad.map((match) => match.route.id));
            matches.forEach((match) => {
              if (!executedLoaders.has(match.route.id)) {
                context.loaderData[match.route.id] = null;
              }
            });
            return _extends2({}, context, {
              matches,
              activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
            });
          });
        }
        return {
          dataRoutes,
          query,
          queryRoute
        };
      }
      function getStaticContextFromError(routes, context, error) {
        let newContext = _extends2({}, context, {
          statusCode: 500,
          errors: {
            [context._deepestRenderedBoundaryId || routes[0].id]: error
          }
        });
        return newContext;
      }
      function isSubmissionNavigation(opts) {
        return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
      }
      function normalizeTo(location2, matches, basename, prependBasename, to, fromRouteId, relative) {
        let contextualMatches;
        let activeRouteMatch;
        if (fromRouteId != null && relative !== "path") {
          contextualMatches = [];
          for (let match of matches) {
            contextualMatches.push(match);
            if (match.route.id === fromRouteId) {
              activeRouteMatch = match;
              break;
            }
          }
        } else {
          contextualMatches = matches;
          activeRouteMatch = matches[matches.length - 1];
        }
        let path = resolveTo(to ? to : ".", getPathContributingMatches(contextualMatches).map((m) => m.pathnameBase), stripBasename(location2.pathname, basename) || location2.pathname, relative === "path");
        if (to == null) {
          path.search = location2.search;
          path.hash = location2.hash;
        }
        if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {
          path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
        }
        if (prependBasename && basename !== "/") {
          path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
        }
        return createPath(path);
      }
      function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
        if (!opts || !isSubmissionNavigation(opts)) {
          return {
            path
          };
        }
        if (opts.formMethod && !isValidMethod(opts.formMethod)) {
          return {
            path,
            error: getInternalRouterError(405, {
              method: opts.formMethod
            })
          };
        }
        let getInvalidBodyError = () => ({
          path,
          error: getInternalRouterError(400, {
            type: "invalid-body"
          })
        });
        let rawFormMethod = opts.formMethod || "get";
        let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
        let formAction = stripHashFromPath(path);
        if (opts.body !== void 0) {
          if (opts.formEncType === "text/plain") {
            if (!isMutationMethod(formMethod)) {
              return getInvalidBodyError();
            }
            let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
              // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
              Array.from(opts.body.entries()).reduce((acc, _ref3) => {
                let [name, value] = _ref3;
                return "" + acc + name + "=" + value + "\n";
              }, "")
            ) : String(opts.body);
            return {
              path,
              submission: {
                formMethod,
                formAction,
                formEncType: opts.formEncType,
                formData: void 0,
                json: void 0,
                text
              }
            };
          } else if (opts.formEncType === "application/json") {
            if (!isMutationMethod(formMethod)) {
              return getInvalidBodyError();
            }
            try {
              let json2 = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
              return {
                path,
                submission: {
                  formMethod,
                  formAction,
                  formEncType: opts.formEncType,
                  formData: void 0,
                  json: json2,
                  text: void 0
                }
              };
            } catch (e) {
              return getInvalidBodyError();
            }
          }
        }
        invariant(typeof FormData === "function", "FormData is not available in this environment");
        let searchParams;
        let formData;
        if (opts.formData) {
          searchParams = convertFormDataToSearchParams(opts.formData);
          formData = opts.formData;
        } else if (opts.body instanceof FormData) {
          searchParams = convertFormDataToSearchParams(opts.body);
          formData = opts.body;
        } else if (opts.body instanceof URLSearchParams) {
          searchParams = opts.body;
          formData = convertSearchParamsToFormData(searchParams);
        } else if (opts.body == null) {
          searchParams = new URLSearchParams();
          formData = new FormData();
        } else {
          try {
            searchParams = new URLSearchParams(opts.body);
            formData = convertSearchParamsToFormData(searchParams);
          } catch (e) {
            return getInvalidBodyError();
          }
        }
        let submission = {
          formMethod,
          formAction,
          formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
          formData,
          json: void 0,
          text: void 0
        };
        if (isMutationMethod(submission.formMethod)) {
          return {
            path,
            submission
          };
        }
        let parsedPath = parsePath(path);
        if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
          searchParams.append("index", "");
        }
        parsedPath.search = "?" + searchParams;
        return {
          path: createPath(parsedPath),
          submission
        };
      }
      function getLoaderMatchesUntilBoundary(matches, boundaryId) {
        let boundaryMatches = matches;
        if (boundaryId) {
          let index3 = matches.findIndex((m) => m.route.id === boundaryId);
          if (index3 >= 0) {
            boundaryMatches = matches.slice(0, index3);
          }
        }
        return boundaryMatches;
      }
      function getMatchesToLoad(history, state, matches, submission, location2, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {
        let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0;
        let currentUrl = history.createURL(state.location);
        let nextUrl = history.createURL(location2);
        let boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0;
        let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);
        let navigationMatches = boundaryMatches.filter((match, index3) => {
          if (match.route.lazy) {
            return true;
          }
          if (match.route.loader == null) {
            return false;
          }
          if (isNewLoader(state.loaderData, state.matches[index3], match) || cancelledDeferredRoutes.some((id) => id === match.route.id)) {
            return true;
          }
          let currentRouteMatch = state.matches[index3];
          let nextRouteMatch = match;
          return shouldRevalidateLoader(match, _extends2({
            currentUrl,
            currentParams: currentRouteMatch.params,
            nextUrl,
            nextParams: nextRouteMatch.params
          }, submission, {
            actionResult,
            defaultShouldRevalidate: (
              // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
              isRevalidationRequired || // Clicked the same link, resubmitted a GET form
              currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
              currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
            )
          }));
        });
        let revalidatingFetchers = [];
        fetchLoadMatches.forEach((f, key) => {
          if (!matches.some((m) => m.route.id === f.routeId)) {
            return;
          }
          let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
          if (!fetcherMatches) {
            revalidatingFetchers.push({
              key,
              routeId: f.routeId,
              path: f.path,
              matches: null,
              match: null,
              controller: null
            });
            return;
          }
          let fetcher = state.fetchers.get(key);
          let fetcherMatch = getTargetMatch(fetcherMatches, f.path);
          let shouldRevalidate = false;
          if (fetchRedirectIds.has(key)) {
            shouldRevalidate = false;
          } else if (cancelledFetcherLoads.includes(key)) {
            shouldRevalidate = true;
          } else if (fetcher && fetcher.state !== "idle" && fetcher.data === void 0) {
            shouldRevalidate = isRevalidationRequired;
          } else {
            shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends2({
              currentUrl,
              currentParams: state.matches[state.matches.length - 1].params,
              nextUrl,
              nextParams: matches[matches.length - 1].params
            }, submission, {
              actionResult,
              defaultShouldRevalidate: isRevalidationRequired
            }));
          }
          if (shouldRevalidate) {
            revalidatingFetchers.push({
              key,
              routeId: f.routeId,
              path: f.path,
              matches: fetcherMatches,
              match: fetcherMatch,
              controller: new AbortController()
            });
          }
        });
        return [navigationMatches, revalidatingFetchers];
      }
      function isNewLoader(currentLoaderData, currentMatch, match) {
        let isNew = (
          // [a] -> [a, b]
          !currentMatch || // [a, b] -> [a, c]
          match.route.id !== currentMatch.route.id
        );
        let isMissingData = currentLoaderData[match.route.id] === void 0;
        return isNew || isMissingData;
      }
      function isNewRouteInstance(currentMatch, match) {
        let currentPath = currentMatch.route.path;
        return (
          // param change for this match, /users/123 -> /users/456
          currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
          // e.g. /files/images/avatar.jpg -> files/finances.xls
          currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]
        );
      }
      function shouldRevalidateLoader(loaderMatch, arg) {
        if (loaderMatch.route.shouldRevalidate) {
          let routeChoice = loaderMatch.route.shouldRevalidate(arg);
          if (typeof routeChoice === "boolean") {
            return routeChoice;
          }
        }
        return arg.defaultShouldRevalidate;
      }
      function loadLazyRouteModule(route, mapRouteProperties, manifest) {
        return __async(this, null, function* () {
          if (!route.lazy) {
            return;
          }
          let lazyRoute = yield route.lazy();
          if (!route.lazy) {
            return;
          }
          let routeToUpdate = manifest[route.id];
          invariant(routeToUpdate, "No route found in manifest");
          let routeUpdates = {};
          for (let lazyRouteProperty in lazyRoute) {
            let staticRouteValue = routeToUpdate[lazyRouteProperty];
            let isPropertyStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
            // on the route updates
            lazyRouteProperty !== "hasErrorBoundary";
            warning(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
            if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {
              routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
            }
          }
          Object.assign(routeToUpdate, routeUpdates);
          Object.assign(routeToUpdate, _extends2({}, mapRouteProperties(routeToUpdate), {
            lazy: void 0
          }));
        });
      }
      function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {
        return __async(this, null, function* () {
          if (opts === void 0) {
            opts = {};
          }
          let resultType;
          let result;
          let onReject;
          let runHandler = (handler) => {
            let reject;
            let abortPromise = new Promise((_, r) => reject = r);
            onReject = () => reject();
            request.signal.addEventListener("abort", onReject);
            return Promise.race([handler({
              request,
              params: match.params,
              context: opts.requestContext
            }), abortPromise]);
          };
          try {
            let handler = match.route[type];
            if (match.route.lazy) {
              if (handler) {
                let handlerError;
                let values = yield Promise.all([
                  // If the handler throws, don't let it immediately bubble out,
                  // since we need to let the lazy() execution finish so we know if this
                  // route has a boundary that can handle the error
                  runHandler(handler).catch((e) => {
                    handlerError = e;
                  }),
                  loadLazyRouteModule(match.route, mapRouteProperties, manifest)
                ]);
                if (handlerError) {
                  throw handlerError;
                }
                result = values[0];
              } else {
                yield loadLazyRouteModule(match.route, mapRouteProperties, manifest);
                handler = match.route[type];
                if (handler) {
                  result = yield runHandler(handler);
                } else if (type === "action") {
                  let url = new URL(request.url);
                  let pathname = url.pathname + url.search;
                  throw getInternalRouterError(405, {
                    method: request.method,
                    pathname,
                    routeId: match.route.id
                  });
                } else {
                  return {
                    type: ResultType.data,
                    data: void 0
                  };
                }
              }
            } else if (!handler) {
              let url = new URL(request.url);
              let pathname = url.pathname + url.search;
              throw getInternalRouterError(404, {
                pathname
              });
            } else {
              result = yield runHandler(handler);
            }
            invariant(result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
          } catch (e) {
            resultType = ResultType.error;
            result = e;
          } finally {
            if (onReject) {
              request.signal.removeEventListener("abort", onReject);
            }
          }
          if (isResponse(result)) {
            let status = result.status;
            if (redirectStatusCodes.has(status)) {
              let location2 = result.headers.get("Location");
              invariant(location2, "Redirects returned/thrown from loaders/actions must have a Location header");
              if (!ABSOLUTE_URL_REGEX.test(location2)) {
                location2 = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location2);
              } else if (!opts.isStaticRequest) {
                let currentUrl = new URL(request.url);
                let url = location2.startsWith("//") ? new URL(currentUrl.protocol + location2) : new URL(location2);
                let isSameBasename = stripBasename(url.pathname, basename) != null;
                if (url.origin === currentUrl.origin && isSameBasename) {
                  location2 = url.pathname + url.search + url.hash;
                }
              }
              if (opts.isStaticRequest) {
                result.headers.set("Location", location2);
                throw result;
              }
              return {
                type: ResultType.redirect,
                status,
                location: location2,
                revalidate: result.headers.get("X-Remix-Revalidate") !== null,
                reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
              };
            }
            if (opts.isRouteRequest) {
              let queryRouteResponse = {
                type: resultType === ResultType.error ? ResultType.error : ResultType.data,
                response: result
              };
              throw queryRouteResponse;
            }
            let data;
            let contentType = result.headers.get("Content-Type");
            if (contentType && /\bapplication\/json\b/.test(contentType)) {
              data = yield result.json();
            } else {
              data = yield result.text();
            }
            if (resultType === ResultType.error) {
              return {
                type: resultType,
                error: new ErrorResponseImpl(status, result.statusText, data),
                headers: result.headers
              };
            }
            return {
              type: ResultType.data,
              data,
              statusCode: result.status,
              headers: result.headers
            };
          }
          if (resultType === ResultType.error) {
            return {
              type: resultType,
              error: result
            };
          }
          if (isDeferredData(result)) {
            var _result$init, _result$init2;
            return {
              type: ResultType.deferred,
              deferredData: result,
              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
              headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
            };
          }
          return {
            type: ResultType.data,
            data: result
          };
        });
      }
      function createClientSideRequest(history, location2, signal, submission) {
        let url = history.createURL(stripHashFromPath(location2)).toString();
        let init = {
          signal
        };
        if (submission && isMutationMethod(submission.formMethod)) {
          let {
            formMethod,
            formEncType
          } = submission;
          init.method = formMethod.toUpperCase();
          if (formEncType === "application/json") {
            init.headers = new Headers({
              "Content-Type": formEncType
            });
            init.body = JSON.stringify(submission.json);
          } else if (formEncType === "text/plain") {
            init.body = submission.text;
          } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {
            init.body = convertFormDataToSearchParams(submission.formData);
          } else {
            init.body = submission.formData;
          }
        }
        return new Request(url, init);
      }
      function convertFormDataToSearchParams(formData) {
        let searchParams = new URLSearchParams();
        for (let [key, value] of formData.entries()) {
          searchParams.append(key, typeof value === "string" ? value : value.name);
        }
        return searchParams;
      }
      function convertSearchParamsToFormData(searchParams) {
        let formData = new FormData();
        for (let [key, value] of searchParams.entries()) {
          formData.append(key, value);
        }
        return formData;
      }
      function processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
        let loaderData = {};
        let errors = null;
        let statusCode;
        let foundError = false;
        let loaderHeaders = {};
        results.forEach((result, index3) => {
          let id = matchesToLoad[index3].route.id;
          invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
          if (isErrorResult(result)) {
            let boundaryMatch = findNearestBoundary(matches, id);
            let error = result.error;
            if (pendingError) {
              error = Object.values(pendingError)[0];
              pendingError = void 0;
            }
            errors = errors || {};
            if (errors[boundaryMatch.route.id] == null) {
              errors[boundaryMatch.route.id] = error;
            }
            loaderData[id] = void 0;
            if (!foundError) {
              foundError = true;
              statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
            }
            if (result.headers) {
              loaderHeaders[id] = result.headers;
            }
          } else {
            if (isDeferredResult(result)) {
              activeDeferreds.set(id, result.deferredData);
              loaderData[id] = result.deferredData.data;
            } else {
              loaderData[id] = result.data;
            }
            if (result.statusCode != null && result.statusCode !== 200 && !foundError) {
              statusCode = result.statusCode;
            }
            if (result.headers) {
              loaderHeaders[id] = result.headers;
            }
          }
        });
        if (pendingError) {
          errors = pendingError;
          loaderData[Object.keys(pendingError)[0]] = void 0;
        }
        return {
          loaderData,
          errors,
          statusCode: statusCode || 200,
          loaderHeaders
        };
      }
      function processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
        let {
          loaderData,
          errors
        } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
        for (let index3 = 0; index3 < revalidatingFetchers.length; index3++) {
          let {
            key,
            match,
            controller
          } = revalidatingFetchers[index3];
          invariant(fetcherResults !== void 0 && fetcherResults[index3] !== void 0, "Did not find corresponding fetcher result");
          let result = fetcherResults[index3];
          if (controller && controller.signal.aborted) {
            continue;
          } else if (isErrorResult(result)) {
            let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
            if (!(errors && errors[boundaryMatch.route.id])) {
              errors = _extends2({}, errors, {
                [boundaryMatch.route.id]: result.error
              });
            }
            state.fetchers.delete(key);
          } else if (isRedirectResult(result)) {
            invariant(false, "Unhandled fetcher revalidation redirect");
          } else if (isDeferredResult(result)) {
            invariant(false, "Unhandled fetcher deferred data");
          } else {
            let doneFetcher = getDoneFetcher(result.data);
            state.fetchers.set(key, doneFetcher);
          }
        }
        return {
          loaderData,
          errors
        };
      }
      function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
        let mergedLoaderData = _extends2({}, newLoaderData);
        for (let match of matches) {
          let id = match.route.id;
          if (newLoaderData.hasOwnProperty(id)) {
            if (newLoaderData[id] !== void 0) {
              mergedLoaderData[id] = newLoaderData[id];
            }
          } else if (loaderData[id] !== void 0 && match.route.loader) {
            mergedLoaderData[id] = loaderData[id];
          }
          if (errors && errors.hasOwnProperty(id)) {
            break;
          }
        }
        return mergedLoaderData;
      }
      function findNearestBoundary(matches, routeId) {
        let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1) : [...matches];
        return eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) || matches[0];
      }
      function getShortCircuitMatches(routes) {
        let route = routes.find((r) => r.index || !r.path || r.path === "/") || {
          id: "__shim-error-route__"
        };
        return {
          matches: [{
            params: {},
            pathname: "",
            pathnameBase: "",
            route
          }],
          route
        };
      }
      function getInternalRouterError(status, _temp4) {
        let {
          pathname,
          routeId,
          method,
          type
        } = _temp4 === void 0 ? {} : _temp4;
        let statusText = "Unknown Server Error";
        let errorMessage = "Unknown @remix-run/router error";
        if (status === 400) {
          statusText = "Bad Request";
          if (method && pathname && routeId) {
            errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
          } else if (type === "defer-action") {
            errorMessage = "defer() is not supported in actions";
          } else if (type === "invalid-body") {
            errorMessage = "Unable to encode submission body";
          }
        } else if (status === 403) {
          statusText = "Forbidden";
          errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
        } else if (status === 404) {
          statusText = "Not Found";
          errorMessage = 'No route matches URL "' + pathname + '"';
        } else if (status === 405) {
          statusText = "Method Not Allowed";
          if (method && pathname && routeId) {
            errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
          } else if (method) {
            errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
          }
        }
        return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);
      }
      function findRedirect(results) {
        for (let i = results.length - 1; i >= 0; i--) {
          let result = results[i];
          if (isRedirectResult(result)) {
            return {
              result,
              idx: i
            };
          }
        }
      }
      function stripHashFromPath(path) {
        let parsedPath = typeof path === "string" ? parsePath(path) : path;
        return createPath(_extends2({}, parsedPath, {
          hash: ""
        }));
      }
      function isHashChangeOnly(a, b) {
        if (a.pathname !== b.pathname || a.search !== b.search) {
          return false;
        }
        if (a.hash === "") {
          return b.hash !== "";
        } else if (a.hash === b.hash) {
          return true;
        } else if (b.hash !== "") {
          return true;
        }
        return false;
      }
      function isDeferredResult(result) {
        return result.type === ResultType.deferred;
      }
      function isErrorResult(result) {
        return result.type === ResultType.error;
      }
      function isRedirectResult(result) {
        return (result && result.type) === ResultType.redirect;
      }
      function isDeferredData(value) {
        let deferred = value;
        return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
      }
      function isResponse(value) {
        return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
      }
      function isRedirectResponse(result) {
        if (!isResponse(result)) {
          return false;
        }
        let status = result.status;
        let location2 = result.headers.get("Location");
        return status >= 300 && status <= 399 && location2 != null;
      }
      function isQueryRouteResponse(obj) {
        return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);
      }
      function isValidMethod(method) {
        return validRequestMethods.has(method.toLowerCase());
      }
      function isMutationMethod(method) {
        return validMutationMethods.has(method.toLowerCase());
      }
      function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
        return __async(this, null, function* () {
          for (let index3 = 0; index3 < results.length; index3++) {
            let result = results[index3];
            let match = matchesToLoad[index3];
            if (!match) {
              continue;
            }
            let currentMatch = currentMatches.find((m) => m.route.id === match.route.id);
            let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== void 0;
            if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
              let signal = signals[index3];
              invariant(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
              yield resolveDeferredData(result, signal, isFetcher).then((result2) => {
                if (result2) {
                  results[index3] = result2 || results[index3];
                }
              });
            }
          }
        });
      }
      function resolveDeferredData(result, signal, unwrap) {
        return __async(this, null, function* () {
          if (unwrap === void 0) {
            unwrap = false;
          }
          let aborted = yield result.deferredData.resolveData(signal);
          if (aborted) {
            return;
          }
          if (unwrap) {
            try {
              return {
                type: ResultType.data,
                data: result.deferredData.unwrappedData
              };
            } catch (e) {
              return {
                type: ResultType.error,
                error: e
              };
            }
          }
          return {
            type: ResultType.data,
            data: result.deferredData.data
          };
        });
      }
      function hasNakedIndexQuery(search) {
        return new URLSearchParams(search).getAll("index").some((v) => v === "");
      }
      function getTargetMatch(matches, location2) {
        let search = typeof location2 === "string" ? parsePath(location2).search : location2.search;
        if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {
          return matches[matches.length - 1];
        }
        let pathMatches = getPathContributingMatches(matches);
        return pathMatches[pathMatches.length - 1];
      }
      function getSubmissionFromNavigation(navigation) {
        let {
          formMethod,
          formAction,
          formEncType,
          text,
          formData,
          json: json2
        } = navigation;
        if (!formMethod || !formAction || !formEncType) {
          return;
        }
        if (text != null) {
          return {
            formMethod,
            formAction,
            formEncType,
            formData: void 0,
            json: void 0,
            text
          };
        } else if (formData != null) {
          return {
            formMethod,
            formAction,
            formEncType,
            formData,
            json: void 0,
            text: void 0
          };
        } else if (json2 !== void 0) {
          return {
            formMethod,
            formAction,
            formEncType,
            formData: void 0,
            json: json2,
            text: void 0
          };
        }
      }
      function getLoadingNavigation(location2, submission) {
        if (submission) {
          let navigation = {
            state: "loading",
            location: location2,
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text
          };
          return navigation;
        } else {
          let navigation = {
            state: "loading",
            location: location2,
            formMethod: void 0,
            formAction: void 0,
            formEncType: void 0,
            formData: void 0,
            json: void 0,
            text: void 0
          };
          return navigation;
        }
      }
      function getSubmittingNavigation(location2, submission) {
        let navigation = {
          state: "submitting",
          location: location2,
          formMethod: submission.formMethod,
          formAction: submission.formAction,
          formEncType: submission.formEncType,
          formData: submission.formData,
          json: submission.json,
          text: submission.text
        };
        return navigation;
      }
      function getLoadingFetcher(submission, data) {
        if (submission) {
          let fetcher = {
            state: "loading",
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text,
            data
          };
          return fetcher;
        } else {
          let fetcher = {
            state: "loading",
            formMethod: void 0,
            formAction: void 0,
            formEncType: void 0,
            formData: void 0,
            json: void 0,
            text: void 0,
            data
          };
          return fetcher;
        }
      }
      function getSubmittingFetcher(submission, existingFetcher) {
        let fetcher = {
          state: "submitting",
          formMethod: submission.formMethod,
          formAction: submission.formAction,
          formEncType: submission.formEncType,
          formData: submission.formData,
          json: submission.json,
          text: submission.text,
          data: existingFetcher ? existingFetcher.data : void 0
        };
        return fetcher;
      }
      function getDoneFetcher(data) {
        let fetcher = {
          state: "idle",
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          json: void 0,
          text: void 0,
          data
        };
        return fetcher;
      }
      exports.AbortedDeferredError = AbortedDeferredError;
      exports.Action = Action;
      exports.IDLE_BLOCKER = IDLE_BLOCKER;
      exports.IDLE_FETCHER = IDLE_FETCHER;
      exports.IDLE_NAVIGATION = IDLE_NAVIGATION;
      exports.UNSAFE_DEFERRED_SYMBOL = UNSAFE_DEFERRED_SYMBOL;
      exports.UNSAFE_DeferredData = DeferredData;
      exports.UNSAFE_ErrorResponseImpl = ErrorResponseImpl;
      exports.UNSAFE_convertRouteMatchToUiMatch = convertRouteMatchToUiMatch;
      exports.UNSAFE_convertRoutesToDataRoutes = convertRoutesToDataRoutes;
      exports.UNSAFE_getPathContributingMatches = getPathContributingMatches;
      exports.UNSAFE_invariant = invariant;
      exports.UNSAFE_warning = warning;
      exports.createBrowserHistory = createBrowserHistory;
      exports.createHashHistory = createHashHistory;
      exports.createMemoryHistory = createMemoryHistory;
      exports.createPath = createPath;
      exports.createRouter = createRouter;
      exports.createStaticHandler = createStaticHandler;
      exports.defer = defer;
      exports.generatePath = generatePath;
      exports.getStaticContextFromError = getStaticContextFromError;
      exports.getToPathname = getToPathname;
      exports.isDeferredData = isDeferredData;
      exports.isRouteErrorResponse = isRouteErrorResponse;
      exports.joinPaths = joinPaths;
      exports.json = json;
      exports.matchPath = matchPath;
      exports.matchRoutes = matchRoutes;
      exports.normalizePathname = normalizePathname;
      exports.parsePath = parsePath;
      exports.redirect = redirect;
      exports.redirectDocument = redirectDocument;
      exports.resolvePath = resolvePath;
      exports.resolveTo = resolveTo;
      exports.stripBasename = stripBasename;
    }
  });

  // node_modules/react-router/dist/umd/react-router.development.js
  var require_react_router_development = __commonJS({
    "node_modules/react-router/dist/umd/react-router.development.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_react(), require_router_cjs()) : typeof define === "function" && define.amd ? define(["exports", "react", "@remix-run/router"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ReactRouter = {}, global2.React, global2.RemixRouter));
      })(exports, function(exports2, React3, router) {
        "use strict";
        function _interopNamespace(e) {
          if (e && e.__esModule)
            return e;
          var n = /* @__PURE__ */ Object.create(null);
          if (e) {
            Object.keys(e).forEach(function(k) {
              if (k !== "default") {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                  enumerable: true,
                  get: function() {
                    return e[k];
                  }
                });
              }
            });
          }
          n["default"] = e;
          return Object.freeze(n);
        }
        var React__namespace = /* @__PURE__ */ _interopNamespace(React3);
        function _extends2() {
          _extends2 = Object.assign ? Object.assign.bind() : function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends2.apply(this, arguments);
        }
        const DataRouterContext = /* @__PURE__ */ React__namespace.createContext(null);
        {
          DataRouterContext.displayName = "DataRouter";
        }
        const DataRouterStateContext = /* @__PURE__ */ React__namespace.createContext(null);
        {
          DataRouterStateContext.displayName = "DataRouterState";
        }
        const AwaitContext = /* @__PURE__ */ React__namespace.createContext(null);
        {
          AwaitContext.displayName = "Await";
        }
        const NavigationContext = /* @__PURE__ */ React__namespace.createContext(null);
        {
          NavigationContext.displayName = "Navigation";
        }
        const LocationContext = /* @__PURE__ */ React__namespace.createContext(null);
        {
          LocationContext.displayName = "Location";
        }
        const RouteContext = /* @__PURE__ */ React__namespace.createContext({
          outlet: null,
          matches: [],
          isDataRoute: false
        });
        {
          RouteContext.displayName = "Route";
        }
        const RouteErrorContext = /* @__PURE__ */ React__namespace.createContext(null);
        {
          RouteErrorContext.displayName = "RouteError";
        }
        function useHref(to, _temp) {
          let {
            relative
          } = _temp === void 0 ? {} : _temp;
          !useInRouterContext() ? router.UNSAFE_invariant(
            false,
            // TODO: This error is probably because they somehow have 2 versions of the
            // router loaded. We can help them understand how to avoid that.
            "useHref() may be used only in the context of a <Router> component."
          ) : void 0;
          let {
            basename,
            navigator: navigator2
          } = React__namespace.useContext(NavigationContext);
          let {
            hash,
            pathname,
            search
          } = useResolvedPath(to, {
            relative
          });
          let joinedPathname = pathname;
          if (basename !== "/") {
            joinedPathname = pathname === "/" ? basename : router.joinPaths([basename, pathname]);
          }
          return navigator2.createHref({
            pathname: joinedPathname,
            search,
            hash
          });
        }
        function useInRouterContext() {
          return React__namespace.useContext(LocationContext) != null;
        }
        function useLocation() {
          !useInRouterContext() ? router.UNSAFE_invariant(
            false,
            // TODO: This error is probably because they somehow have 2 versions of the
            // router loaded. We can help them understand how to avoid that.
            "useLocation() may be used only in the context of a <Router> component."
          ) : void 0;
          return React__namespace.useContext(LocationContext).location;
        }
        function useNavigationType() {
          return React__namespace.useContext(LocationContext).navigationType;
        }
        function useMatch(pattern) {
          !useInRouterContext() ? router.UNSAFE_invariant(
            false,
            // TODO: This error is probably because they somehow have 2 versions of the
            // router loaded. We can help them understand how to avoid that.
            "useMatch() may be used only in the context of a <Router> component."
          ) : void 0;
          let {
            pathname
          } = useLocation();
          return React__namespace.useMemo(() => router.matchPath(pattern, pathname), [pathname, pattern]);
        }
        const navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
        function useIsomorphicLayoutEffect(cb) {
          let isStatic = React__namespace.useContext(NavigationContext).static;
          if (!isStatic) {
            React__namespace.useLayoutEffect(cb);
          }
        }
        function useNavigate() {
          let {
            isDataRoute
          } = React__namespace.useContext(RouteContext);
          return isDataRoute ? useNavigateStable() : useNavigateUnstable();
        }
        function useNavigateUnstable() {
          !useInRouterContext() ? router.UNSAFE_invariant(
            false,
            // TODO: This error is probably because they somehow have 2 versions of the
            // router loaded. We can help them understand how to avoid that.
            "useNavigate() may be used only in the context of a <Router> component."
          ) : void 0;
          let dataRouterContext = React__namespace.useContext(DataRouterContext);
          let {
            basename,
            navigator: navigator2
          } = React__namespace.useContext(NavigationContext);
          let {
            matches
          } = React__namespace.useContext(RouteContext);
          let {
            pathname: locationPathname
          } = useLocation();
          let routePathnamesJson = JSON.stringify(router.UNSAFE_getPathContributingMatches(matches).map((match) => match.pathnameBase));
          let activeRef = React__namespace.useRef(false);
          useIsomorphicLayoutEffect(() => {
            activeRef.current = true;
          });
          let navigate = React__namespace.useCallback(function(to, options) {
            if (options === void 0) {
              options = {};
            }
            router.UNSAFE_warning(activeRef.current, navigateEffectWarning);
            if (!activeRef.current)
              return;
            if (typeof to === "number") {
              navigator2.go(to);
              return;
            }
            let path = router.resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
            if (dataRouterContext == null && basename !== "/") {
              path.pathname = path.pathname === "/" ? basename : router.joinPaths([basename, path.pathname]);
            }
            (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
          }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
          return navigate;
        }
        const OutletContext = /* @__PURE__ */ React__namespace.createContext(null);
        function useOutletContext() {
          return React__namespace.useContext(OutletContext);
        }
        function useOutlet(context) {
          let outlet = React__namespace.useContext(RouteContext).outlet;
          if (outlet) {
            return /* @__PURE__ */ React__namespace.createElement(OutletContext.Provider, {
              value: context
            }, outlet);
          }
          return outlet;
        }
        function useParams() {
          let {
            matches
          } = React__namespace.useContext(RouteContext);
          let routeMatch = matches[matches.length - 1];
          return routeMatch ? routeMatch.params : {};
        }
        function useResolvedPath(to, _temp2) {
          let {
            relative
          } = _temp2 === void 0 ? {} : _temp2;
          let {
            matches
          } = React__namespace.useContext(RouteContext);
          let {
            pathname: locationPathname
          } = useLocation();
          let routePathnamesJson = JSON.stringify(router.UNSAFE_getPathContributingMatches(matches).map((match) => match.pathnameBase));
          return React__namespace.useMemo(() => router.resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
        }
        function useRoutes(routes, locationArg) {
          return useRoutesImpl(routes, locationArg);
        }
        function useRoutesImpl(routes, locationArg, dataRouterState) {
          !useInRouterContext() ? router.UNSAFE_invariant(
            false,
            // TODO: This error is probably because they somehow have 2 versions of the
            // router loaded. We can help them understand how to avoid that.
            "useRoutes() may be used only in the context of a <Router> component."
          ) : void 0;
          let {
            navigator: navigator2
          } = React__namespace.useContext(NavigationContext);
          let {
            matches: parentMatches
          } = React__namespace.useContext(RouteContext);
          let routeMatch = parentMatches[parentMatches.length - 1];
          let parentParams = routeMatch ? routeMatch.params : {};
          let parentPathname = routeMatch ? routeMatch.pathname : "/";
          let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
          let parentRoute = routeMatch && routeMatch.route;
          {
            let parentPath = parentRoute && parentRoute.path || "";
            warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
          }
          let locationFromContext = useLocation();
          let location2;
          if (locationArg) {
            var _parsedLocationArg$pa;
            let parsedLocationArg = typeof locationArg === "string" ? router.parsePath(locationArg) : locationArg;
            !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? router.UNSAFE_invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : void 0;
            location2 = parsedLocationArg;
          } else {
            location2 = locationFromContext;
          }
          let pathname = location2.pathname || "/";
          let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
          let matches = router.matchRoutes(routes, {
            pathname: remainingPathname
          });
          {
            router.UNSAFE_warning(parentRoute || matches != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" ');
            router.UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.');
          }
          let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
            params: Object.assign({}, parentParams, match.params),
            pathname: router.joinPaths([
              parentPathnameBase,
              // Re-encode pathnames that were decoded inside matchRoutes
              navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
            ]),
            pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : router.joinPaths([
              parentPathnameBase,
              // Re-encode pathnames that were decoded inside matchRoutes
              navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
            ])
          })), parentMatches, dataRouterState);
          if (locationArg && renderedMatches) {
            return /* @__PURE__ */ React__namespace.createElement(LocationContext.Provider, {
              value: {
                location: _extends2({
                  pathname: "/",
                  search: "",
                  hash: "",
                  state: null,
                  key: "default"
                }, location2),
                navigationType: router.Action.Pop
              }
            }, renderedMatches);
          }
          return renderedMatches;
        }
        function DefaultErrorComponent() {
          let error = useRouteError();
          let message = router.isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
          let stack = error instanceof Error ? error.stack : null;
          let lightgrey = "rgba(200,200,200, 0.5)";
          let preStyles = {
            padding: "0.5rem",
            backgroundColor: lightgrey
          };
          let codeStyles = {
            padding: "2px 4px",
            backgroundColor: lightgrey
          };
          let devInfo = null;
          {
            console.error("Error handled by React Router default ErrorBoundary:", error);
            devInfo = /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React__namespace.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React__namespace.createElement("code", {
              style: codeStyles
            }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React__namespace.createElement("code", {
              style: codeStyles
            }, "errorElement"), " prop on your route."));
          }
          return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React__namespace.createElement("h3", {
            style: {
              fontStyle: "italic"
            }
          }, message), stack ? /* @__PURE__ */ React__namespace.createElement("pre", {
            style: preStyles
          }, stack) : null, devInfo);
        }
        const defaultErrorElement = /* @__PURE__ */ React__namespace.createElement(DefaultErrorComponent, null);
        class RenderErrorBoundary extends React__namespace.Component {
          constructor(props) {
            super(props);
            this.state = {
              location: props.location,
              revalidation: props.revalidation,
              error: props.error
            };
          }
          static getDerivedStateFromError(error) {
            return {
              error
            };
          }
          static getDerivedStateFromProps(props, state) {
            if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
              return {
                error: props.error,
                location: props.location,
                revalidation: props.revalidation
              };
            }
            return {
              error: props.error || state.error,
              location: state.location,
              revalidation: props.revalidation || state.revalidation
            };
          }
          componentDidCatch(error, errorInfo) {
            console.error("React Router caught the following error during render", error, errorInfo);
          }
          render() {
            return this.state.error ? /* @__PURE__ */ React__namespace.createElement(RouteContext.Provider, {
              value: this.props.routeContext
            }, /* @__PURE__ */ React__namespace.createElement(RouteErrorContext.Provider, {
              value: this.state.error,
              children: this.props.component
            })) : this.props.children;
          }
        }
        function RenderedRoute(_ref) {
          let {
            routeContext,
            match,
            children
          } = _ref;
          let dataRouterContext = React__namespace.useContext(DataRouterContext);
          if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
            dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
          }
          return /* @__PURE__ */ React__namespace.createElement(RouteContext.Provider, {
            value: routeContext
          }, children);
        }
        function _renderMatches(matches, parentMatches, dataRouterState) {
          var _dataRouterState2;
          if (parentMatches === void 0) {
            parentMatches = [];
          }
          if (dataRouterState === void 0) {
            dataRouterState = null;
          }
          if (matches == null) {
            var _dataRouterState;
            if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
              matches = dataRouterState.matches;
            } else {
              return null;
            }
          }
          let renderedMatches = matches;
          let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
          if (errors != null) {
            let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]));
            !(errorIndex >= 0) ? router.UNSAFE_invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : void 0;
            renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
          }
          return renderedMatches.reduceRight((outlet, match, index3) => {
            let error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null;
            let errorElement = null;
            if (dataRouterState) {
              errorElement = match.route.errorElement || defaultErrorElement;
            }
            let matches2 = parentMatches.concat(renderedMatches.slice(0, index3 + 1));
            let getChildren = () => {
              let children;
              if (error) {
                children = errorElement;
              } else if (match.route.Component) {
                children = /* @__PURE__ */ React__namespace.createElement(match.route.Component, null);
              } else if (match.route.element) {
                children = match.route.element;
              } else {
                children = outlet;
              }
              return /* @__PURE__ */ React__namespace.createElement(RenderedRoute, {
                match,
                routeContext: {
                  outlet,
                  matches: matches2,
                  isDataRoute: dataRouterState != null
                },
                children
              });
            };
            return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index3 === 0) ? /* @__PURE__ */ React__namespace.createElement(RenderErrorBoundary, {
              location: dataRouterState.location,
              revalidation: dataRouterState.revalidation,
              component: errorElement,
              error,
              children: getChildren(),
              routeContext: {
                outlet: null,
                matches: matches2,
                isDataRoute: true
              }
            }) : getChildren();
          }, null);
        }
        var DataRouterHook = /* @__PURE__ */ function(DataRouterHook2) {
          DataRouterHook2["UseBlocker"] = "useBlocker";
          DataRouterHook2["UseRevalidator"] = "useRevalidator";
          DataRouterHook2["UseNavigateStable"] = "useNavigate";
          return DataRouterHook2;
        }(DataRouterHook || {});
        var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook2) {
          DataRouterStateHook2["UseBlocker"] = "useBlocker";
          DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
          DataRouterStateHook2["UseActionData"] = "useActionData";
          DataRouterStateHook2["UseRouteError"] = "useRouteError";
          DataRouterStateHook2["UseNavigation"] = "useNavigation";
          DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
          DataRouterStateHook2["UseMatches"] = "useMatches";
          DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
          DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
          DataRouterStateHook2["UseRouteId"] = "useRouteId";
          return DataRouterStateHook2;
        }(DataRouterStateHook || {});
        function getDataRouterConsoleError(hookName) {
          return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
        }
        function useDataRouterContext(hookName) {
          let ctx = React__namespace.useContext(DataRouterContext);
          !ctx ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
          return ctx;
        }
        function useDataRouterState(hookName) {
          let state = React__namespace.useContext(DataRouterStateContext);
          !state ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
          return state;
        }
        function useRouteContext(hookName) {
          let route = React__namespace.useContext(RouteContext);
          !route ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
          return route;
        }
        function useCurrentRouteId(hookName) {
          let route = useRouteContext(hookName);
          let thisRoute = route.matches[route.matches.length - 1];
          !thisRoute.route.id ? router.UNSAFE_invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : void 0;
          return thisRoute.route.id;
        }
        function useRouteId() {
          return useCurrentRouteId(DataRouterStateHook.UseRouteId);
        }
        function useNavigation() {
          let state = useDataRouterState(DataRouterStateHook.UseNavigation);
          return state.navigation;
        }
        function useRevalidator() {
          let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);
          let state = useDataRouterState(DataRouterStateHook.UseRevalidator);
          return React__namespace.useMemo(() => ({
            revalidate: dataRouterContext.router.revalidate,
            state: state.revalidation
          }), [dataRouterContext.router.revalidate, state.revalidation]);
        }
        function useMatches() {
          let {
            matches,
            loaderData
          } = useDataRouterState(DataRouterStateHook.UseMatches);
          return React__namespace.useMemo(() => matches.map((m) => router.UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);
        }
        function useLoaderData() {
          let state = useDataRouterState(DataRouterStateHook.UseLoaderData);
          let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
          if (state.errors && state.errors[routeId] != null) {
            console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
            return void 0;
          }
          return state.loaderData[routeId];
        }
        function useRouteLoaderData(routeId) {
          let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);
          return state.loaderData[routeId];
        }
        function useActionData() {
          let state = useDataRouterState(DataRouterStateHook.UseActionData);
          let route = React__namespace.useContext(RouteContext);
          !route ? router.UNSAFE_invariant(false, "useActionData must be used inside a RouteContext") : void 0;
          return Object.values((state == null ? void 0 : state.actionData) || {})[0];
        }
        function useRouteError() {
          var _state$errors;
          let error = React__namespace.useContext(RouteErrorContext);
          let state = useDataRouterState(DataRouterStateHook.UseRouteError);
          let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
          if (error) {
            return error;
          }
          return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
        }
        function useAsyncValue() {
          let value = React__namespace.useContext(AwaitContext);
          return value == null ? void 0 : value._data;
        }
        function useAsyncError() {
          let value = React__namespace.useContext(AwaitContext);
          return value == null ? void 0 : value._error;
        }
        let blockerId = 0;
        function useBlocker(shouldBlock) {
          let {
            router: router$1,
            basename
          } = useDataRouterContext(DataRouterHook.UseBlocker);
          let state = useDataRouterState(DataRouterStateHook.UseBlocker);
          let [blockerKey, setBlockerKey] = React__namespace.useState("");
          let blockerFunction = React__namespace.useCallback((arg) => {
            if (typeof shouldBlock !== "function") {
              return !!shouldBlock;
            }
            if (basename === "/") {
              return shouldBlock(arg);
            }
            let {
              currentLocation,
              nextLocation,
              historyAction
            } = arg;
            return shouldBlock({
              currentLocation: _extends2({}, currentLocation, {
                pathname: router.stripBasename(currentLocation.pathname, basename) || currentLocation.pathname
              }),
              nextLocation: _extends2({}, nextLocation, {
                pathname: router.stripBasename(nextLocation.pathname, basename) || nextLocation.pathname
              }),
              historyAction
            });
          }, [basename, shouldBlock]);
          React__namespace.useEffect(() => {
            let key = String(++blockerId);
            setBlockerKey(key);
            return () => router$1.deleteBlocker(key);
          }, [router$1]);
          React__namespace.useEffect(() => {
            if (blockerKey !== "") {
              router$1.getBlocker(blockerKey, blockerFunction);
            }
          }, [router$1, blockerKey, blockerFunction]);
          return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : router.IDLE_BLOCKER;
        }
        function useNavigateStable() {
          let {
            router: router$1
          } = useDataRouterContext(DataRouterHook.UseNavigateStable);
          let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
          let activeRef = React__namespace.useRef(false);
          useIsomorphicLayoutEffect(() => {
            activeRef.current = true;
          });
          let navigate = React__namespace.useCallback(function(to, options) {
            if (options === void 0) {
              options = {};
            }
            router.UNSAFE_warning(activeRef.current, navigateEffectWarning);
            if (!activeRef.current)
              return;
            if (typeof to === "number") {
              router$1.navigate(to);
            } else {
              router$1.navigate(to, _extends2({
                fromRouteId: id
              }, options));
            }
          }, [router$1, id]);
          return navigate;
        }
        const alreadyWarned = {};
        function warningOnce(key, cond, message) {
          if (!cond && !alreadyWarned[key]) {
            alreadyWarned[key] = true;
            router.UNSAFE_warning(false, message);
          }
        }
        const START_TRANSITION = "startTransition";
        const startTransitionImpl = React__namespace[START_TRANSITION];
        function RouterProvider(_ref) {
          let {
            fallbackElement,
            router: router2,
            future
          } = _ref;
          let [state, setStateImpl] = React__namespace.useState(router2.state);
          let {
            v7_startTransition
          } = future || {};
          let setState = React__namespace.useCallback((newState) => {
            v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
          }, [setStateImpl, v7_startTransition]);
          React__namespace.useLayoutEffect(() => router2.subscribe(setState), [router2, setState]);
          let navigator2 = React__namespace.useMemo(() => {
            return {
              createHref: router2.createHref,
              encodeLocation: router2.encodeLocation,
              go: (n) => router2.navigate(n),
              push: (to, state2, opts) => router2.navigate(to, {
                state: state2,
                preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
              }),
              replace: (to, state2, opts) => router2.navigate(to, {
                replace: true,
                state: state2,
                preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
              })
            };
          }, [router2]);
          let basename = router2.basename || "/";
          let dataRouterContext = React__namespace.useMemo(() => ({
            router: router2,
            navigator: navigator2,
            static: false,
            basename
          }), [router2, navigator2, basename]);
          return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(DataRouterContext.Provider, {
            value: dataRouterContext
          }, /* @__PURE__ */ React__namespace.createElement(DataRouterStateContext.Provider, {
            value: state
          }, /* @__PURE__ */ React__namespace.createElement(Router, {
            basename,
            location: state.location,
            navigationType: state.historyAction,
            navigator: navigator2
          }, state.initialized ? /* @__PURE__ */ React__namespace.createElement(DataRoutes, {
            routes: router2.routes,
            state
          }) : fallbackElement))), null);
        }
        function DataRoutes(_ref2) {
          let {
            routes,
            state
          } = _ref2;
          return useRoutesImpl(routes, void 0, state);
        }
        function MemoryRouter(_ref3) {
          let {
            basename,
            children,
            initialEntries,
            initialIndex,
            future
          } = _ref3;
          let historyRef = React__namespace.useRef();
          if (historyRef.current == null) {
            historyRef.current = router.createMemoryHistory({
              initialEntries,
              initialIndex,
              v5Compat: true
            });
          }
          let history = historyRef.current;
          let [state, setStateImpl] = React__namespace.useState({
            action: history.action,
            location: history.location
          });
          let {
            v7_startTransition
          } = future || {};
          let setState = React__namespace.useCallback((newState) => {
            v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
          }, [setStateImpl, v7_startTransition]);
          React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /* @__PURE__ */ React__namespace.createElement(Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history
          });
        }
        function Navigate(_ref4) {
          let {
            to,
            replace,
            state,
            relative
          } = _ref4;
          !useInRouterContext() ? router.UNSAFE_invariant(
            false,
            // TODO: This error is probably because they somehow have 2 versions of
            // the router loaded. We can help them understand how to avoid that.
            "<Navigate> may be used only in the context of a <Router> component."
          ) : void 0;
          router.UNSAFE_warning(!React__namespace.useContext(NavigationContext).static, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");
          let {
            matches
          } = React__namespace.useContext(RouteContext);
          let {
            pathname: locationPathname
          } = useLocation();
          let navigate = useNavigate();
          let path = router.resolveTo(to, router.UNSAFE_getPathContributingMatches(matches).map((match) => match.pathnameBase), locationPathname, relative === "path");
          let jsonPath = JSON.stringify(path);
          React__namespace.useEffect(() => navigate(JSON.parse(jsonPath), {
            replace,
            state,
            relative
          }), [navigate, jsonPath, relative, replace, state]);
          return null;
        }
        function Outlet(props) {
          return useOutlet(props.context);
        }
        function Route(_props) {
          router.UNSAFE_invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.");
        }
        function Router(_ref5) {
          let {
            basename: basenameProp = "/",
            children = null,
            location: locationProp,
            navigationType = router.Action.Pop,
            navigator: navigator2,
            static: staticProp = false
          } = _ref5;
          !!useInRouterContext() ? router.UNSAFE_invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : void 0;
          let basename = basenameProp.replace(/^\/*/, "/");
          let navigationContext = React__namespace.useMemo(() => ({
            basename,
            navigator: navigator2,
            static: staticProp
          }), [basename, navigator2, staticProp]);
          if (typeof locationProp === "string") {
            locationProp = router.parsePath(locationProp);
          }
          let {
            pathname = "/",
            search = "",
            hash = "",
            state = null,
            key = "default"
          } = locationProp;
          let locationContext = React__namespace.useMemo(() => {
            let trailingPathname = router.stripBasename(pathname, basename);
            if (trailingPathname == null) {
              return null;
            }
            return {
              location: {
                pathname: trailingPathname,
                search,
                hash,
                state,
                key
              },
              navigationType
            };
          }, [basename, pathname, search, hash, state, key, navigationType]);
          router.UNSAFE_warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.");
          if (locationContext == null) {
            return null;
          }
          return /* @__PURE__ */ React__namespace.createElement(NavigationContext.Provider, {
            value: navigationContext
          }, /* @__PURE__ */ React__namespace.createElement(LocationContext.Provider, {
            children,
            value: locationContext
          }));
        }
        function Routes(_ref6) {
          let {
            children,
            location: location2
          } = _ref6;
          return useRoutes(createRoutesFromChildren(children), location2);
        }
        function Await(_ref7) {
          let {
            children,
            errorElement,
            resolve
          } = _ref7;
          return /* @__PURE__ */ React__namespace.createElement(AwaitErrorBoundary, {
            resolve,
            errorElement
          }, /* @__PURE__ */ React__namespace.createElement(ResolveAwait, null, children));
        }
        var AwaitRenderStatus = /* @__PURE__ */ function(AwaitRenderStatus2) {
          AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
          AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
          AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
          return AwaitRenderStatus2;
        }(AwaitRenderStatus || {});
        const neverSettledPromise = new Promise(() => {
        });
        class AwaitErrorBoundary extends React__namespace.Component {
          constructor(props) {
            super(props);
            this.state = {
              error: null
            };
          }
          static getDerivedStateFromError(error) {
            return {
              error
            };
          }
          componentDidCatch(error, errorInfo) {
            console.error("<Await> caught the following error during render", error, errorInfo);
          }
          render() {
            let {
              children,
              errorElement,
              resolve
            } = this.props;
            let promise = null;
            let status = AwaitRenderStatus.pending;
            if (!(resolve instanceof Promise)) {
              status = AwaitRenderStatus.success;
              promise = Promise.resolve();
              Object.defineProperty(promise, "_tracked", {
                get: () => true
              });
              Object.defineProperty(promise, "_data", {
                get: () => resolve
              });
            } else if (this.state.error) {
              status = AwaitRenderStatus.error;
              let renderError = this.state.error;
              promise = Promise.reject().catch(() => {
              });
              Object.defineProperty(promise, "_tracked", {
                get: () => true
              });
              Object.defineProperty(promise, "_error", {
                get: () => renderError
              });
            } else if (resolve._tracked) {
              promise = resolve;
              status = promise._error !== void 0 ? AwaitRenderStatus.error : promise._data !== void 0 ? AwaitRenderStatus.success : AwaitRenderStatus.pending;
            } else {
              status = AwaitRenderStatus.pending;
              Object.defineProperty(resolve, "_tracked", {
                get: () => true
              });
              promise = resolve.then((data) => Object.defineProperty(resolve, "_data", {
                get: () => data
              }), (error) => Object.defineProperty(resolve, "_error", {
                get: () => error
              }));
            }
            if (status === AwaitRenderStatus.error && promise._error instanceof router.AbortedDeferredError) {
              throw neverSettledPromise;
            }
            if (status === AwaitRenderStatus.error && !errorElement) {
              throw promise._error;
            }
            if (status === AwaitRenderStatus.error) {
              return /* @__PURE__ */ React__namespace.createElement(AwaitContext.Provider, {
                value: promise,
                children: errorElement
              });
            }
            if (status === AwaitRenderStatus.success) {
              return /* @__PURE__ */ React__namespace.createElement(AwaitContext.Provider, {
                value: promise,
                children
              });
            }
            throw promise;
          }
        }
        function ResolveAwait(_ref8) {
          let {
            children
          } = _ref8;
          let data = useAsyncValue();
          let toRender = typeof children === "function" ? children(data) : children;
          return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, toRender);
        }
        function createRoutesFromChildren(children, parentPath) {
          if (parentPath === void 0) {
            parentPath = [];
          }
          let routes = [];
          React__namespace.Children.forEach(children, (element, index3) => {
            if (!/* @__PURE__ */ React__namespace.isValidElement(element)) {
              return;
            }
            let treePath = [...parentPath, index3];
            if (element.type === React__namespace.Fragment) {
              routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
              return;
            }
            !(element.type === Route) ? router.UNSAFE_invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : void 0;
            !(!element.props.index || !element.props.children) ? router.UNSAFE_invariant(false, "An index route cannot have child routes.") : void 0;
            let route = {
              id: element.props.id || treePath.join("-"),
              caseSensitive: element.props.caseSensitive,
              element: element.props.element,
              Component: element.props.Component,
              index: element.props.index,
              path: element.props.path,
              loader: element.props.loader,
              action: element.props.action,
              errorElement: element.props.errorElement,
              ErrorBoundary: element.props.ErrorBoundary,
              hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
              shouldRevalidate: element.props.shouldRevalidate,
              handle: element.props.handle,
              lazy: element.props.lazy
            };
            if (element.props.children) {
              route.children = createRoutesFromChildren(element.props.children, treePath);
            }
            routes.push(route);
          });
          return routes;
        }
        function renderMatches(matches) {
          return _renderMatches(matches);
        }
        function mapRouteProperties(route) {
          let updates = {
            // Note: this check also occurs in createRoutesFromChildren so update
            // there if you change this -- please and thank you!
            hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
          };
          if (route.Component) {
            {
              if (route.element) {
                router.UNSAFE_warning(false, "You should not include both `Component` and `element` on your route - `Component` will be used.");
              }
            }
            Object.assign(updates, {
              element: /* @__PURE__ */ React__namespace.createElement(route.Component),
              Component: void 0
            });
          }
          if (route.ErrorBoundary) {
            {
              if (route.errorElement) {
                router.UNSAFE_warning(false, "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.");
              }
            }
            Object.assign(updates, {
              errorElement: /* @__PURE__ */ React__namespace.createElement(route.ErrorBoundary),
              ErrorBoundary: void 0
            });
          }
          return updates;
        }
        function createMemoryRouter(routes, opts) {
          return router.createRouter({
            basename: opts == null ? void 0 : opts.basename,
            future: _extends2({}, opts == null ? void 0 : opts.future, {
              v7_prependBasename: true
            }),
            history: router.createMemoryHistory({
              initialEntries: opts == null ? void 0 : opts.initialEntries,
              initialIndex: opts == null ? void 0 : opts.initialIndex
            }),
            hydrationData: opts == null ? void 0 : opts.hydrationData,
            routes,
            mapRouteProperties
          }).initialize();
        }
        Object.defineProperty(exports2, "AbortedDeferredError", {
          enumerable: true,
          get: function() {
            return router.AbortedDeferredError;
          }
        });
        Object.defineProperty(exports2, "NavigationType", {
          enumerable: true,
          get: function() {
            return router.Action;
          }
        });
        Object.defineProperty(exports2, "createPath", {
          enumerable: true,
          get: function() {
            return router.createPath;
          }
        });
        Object.defineProperty(exports2, "defer", {
          enumerable: true,
          get: function() {
            return router.defer;
          }
        });
        Object.defineProperty(exports2, "generatePath", {
          enumerable: true,
          get: function() {
            return router.generatePath;
          }
        });
        Object.defineProperty(exports2, "isRouteErrorResponse", {
          enumerable: true,
          get: function() {
            return router.isRouteErrorResponse;
          }
        });
        Object.defineProperty(exports2, "json", {
          enumerable: true,
          get: function() {
            return router.json;
          }
        });
        Object.defineProperty(exports2, "matchPath", {
          enumerable: true,
          get: function() {
            return router.matchPath;
          }
        });
        Object.defineProperty(exports2, "matchRoutes", {
          enumerable: true,
          get: function() {
            return router.matchRoutes;
          }
        });
        Object.defineProperty(exports2, "parsePath", {
          enumerable: true,
          get: function() {
            return router.parsePath;
          }
        });
        Object.defineProperty(exports2, "redirect", {
          enumerable: true,
          get: function() {
            return router.redirect;
          }
        });
        Object.defineProperty(exports2, "redirectDocument", {
          enumerable: true,
          get: function() {
            return router.redirectDocument;
          }
        });
        Object.defineProperty(exports2, "resolvePath", {
          enumerable: true,
          get: function() {
            return router.resolvePath;
          }
        });
        exports2.Await = Await;
        exports2.MemoryRouter = MemoryRouter;
        exports2.Navigate = Navigate;
        exports2.Outlet = Outlet;
        exports2.Route = Route;
        exports2.Router = Router;
        exports2.RouterProvider = RouterProvider;
        exports2.Routes = Routes;
        exports2.UNSAFE_DataRouterContext = DataRouterContext;
        exports2.UNSAFE_DataRouterStateContext = DataRouterStateContext;
        exports2.UNSAFE_LocationContext = LocationContext;
        exports2.UNSAFE_NavigationContext = NavigationContext;
        exports2.UNSAFE_RouteContext = RouteContext;
        exports2.UNSAFE_mapRouteProperties = mapRouteProperties;
        exports2.UNSAFE_useRouteId = useRouteId;
        exports2.UNSAFE_useRoutesImpl = useRoutesImpl;
        exports2.createMemoryRouter = createMemoryRouter;
        exports2.createRoutesFromChildren = createRoutesFromChildren;
        exports2.createRoutesFromElements = createRoutesFromChildren;
        exports2.renderMatches = renderMatches;
        exports2.unstable_useBlocker = useBlocker;
        exports2.useActionData = useActionData;
        exports2.useAsyncError = useAsyncError;
        exports2.useAsyncValue = useAsyncValue;
        exports2.useHref = useHref;
        exports2.useInRouterContext = useInRouterContext;
        exports2.useLoaderData = useLoaderData;
        exports2.useLocation = useLocation;
        exports2.useMatch = useMatch;
        exports2.useMatches = useMatches;
        exports2.useNavigate = useNavigate;
        exports2.useNavigation = useNavigation;
        exports2.useNavigationType = useNavigationType;
        exports2.useOutlet = useOutlet;
        exports2.useOutletContext = useOutletContext;
        exports2.useParams = useParams;
        exports2.useResolvedPath = useResolvedPath;
        exports2.useRevalidator = useRevalidator;
        exports2.useRouteError = useRouteError;
        exports2.useRouteLoaderData = useRouteLoaderData;
        exports2.useRoutes = useRoutes;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/react-router/dist/main.js
  var require_main = __commonJS({
    "node_modules/react-router/dist/main.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_router_development();
      }
    }
  });

  // node_modules/react-router-dom/dist/umd/react-router-dom.development.js
  var require_react_router_dom_development = __commonJS({
    "node_modules/react-router-dom/dist/umd/react-router-dom.development.js"(exports, module) {
      (function(global2, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_react(), require_main(), require_router_cjs()) : typeof define === "function" && define.amd ? define(["exports", "react", "react-router", "@remix-run/router"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.ReactRouterDOM = {}, global2.React, global2.ReactRouter, global2.RemixRouter));
      })(exports, function(exports2, React3, reactRouter, router) {
        "use strict";
        function _interopNamespace(e) {
          if (e && e.__esModule)
            return e;
          var n = /* @__PURE__ */ Object.create(null);
          if (e) {
            Object.keys(e).forEach(function(k) {
              if (k !== "default") {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                  enumerable: true,
                  get: function() {
                    return e[k];
                  }
                });
              }
            });
          }
          n["default"] = e;
          return Object.freeze(n);
        }
        var React__namespace = /* @__PURE__ */ _interopNamespace(React3);
        function _extends2() {
          _extends2 = Object.assign ? Object.assign.bind() : function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends2.apply(this, arguments);
        }
        function _objectWithoutPropertiesLoose2(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        const defaultMethod = "get";
        const defaultEncType = "application/x-www-form-urlencoded";
        function isHtmlElement(object) {
          return object != null && typeof object.tagName === "string";
        }
        function isButtonElement(object) {
          return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
        }
        function isFormElement(object) {
          return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
        }
        function isInputElement(object) {
          return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
        }
        function isModifiedEvent(event) {
          return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
        }
        function shouldProcessLinkClick(event, target) {
          return event.button === 0 && // Ignore everything but left clicks
          (!target || target === "_self") && // Let browser handle "target=_blank" etc.
          !isModifiedEvent(event);
        }
        function createSearchParams(init) {
          if (init === void 0) {
            init = "";
          }
          return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
            let value = init[key];
            return memo.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);
          }, []));
        }
        function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
          let searchParams = createSearchParams(locationSearch);
          if (defaultSearchParams) {
            defaultSearchParams.forEach((_, key) => {
              if (!searchParams.has(key)) {
                defaultSearchParams.getAll(key).forEach((value) => {
                  searchParams.append(key, value);
                });
              }
            });
          }
          return searchParams;
        }
        let _formDataSupportsSubmitter = null;
        function isFormDataSubmitterSupported() {
          if (_formDataSupportsSubmitter === null) {
            try {
              new FormData(
                document.createElement("form"),
                // @ts-expect-error if FormData supports the submitter parameter, this will throw
                0
              );
              _formDataSupportsSubmitter = false;
            } catch (e) {
              _formDataSupportsSubmitter = true;
            }
          }
          return _formDataSupportsSubmitter;
        }
        const supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
        function getFormEncType(encType) {
          if (encType != null && !supportedFormEncTypes.has(encType)) {
            router.UNSAFE_warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"'));
            return null;
          }
          return encType;
        }
        function getFormSubmissionInfo(target, basename) {
          let method;
          let action;
          let encType;
          let formData;
          let body;
          if (isFormElement(target)) {
            let attr = target.getAttribute("action");
            action = attr ? router.stripBasename(attr, basename) : null;
            method = target.getAttribute("method") || defaultMethod;
            encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
            formData = new FormData(target);
          } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
            let form = target.form;
            if (form == null) {
              throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
            }
            let attr = target.getAttribute("formaction") || form.getAttribute("action");
            action = attr ? router.stripBasename(attr, basename) : null;
            method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
            encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
            formData = new FormData(form, target);
            if (!isFormDataSubmitterSupported()) {
              let {
                name,
                type,
                value
              } = target;
              if (type === "image") {
                let prefix = name ? name + "." : "";
                formData.append(prefix + "x", "0");
                formData.append(prefix + "y", "0");
              } else if (name) {
                formData.append(name, value);
              }
            }
          } else if (isHtmlElement(target)) {
            throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
          } else {
            method = defaultMethod;
            action = null;
            encType = defaultEncType;
            body = target;
          }
          if (formData && encType === "text/plain") {
            body = formData;
            formData = void 0;
          }
          return {
            action,
            method: method.toLowerCase(),
            encType,
            formData,
            body
          };
        }
        const _excluded2 = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"], _excluded22 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"], _excluded3 = ["reloadDocument", "replace", "state", "method", "action", "onSubmit", "submit", "relative", "preventScrollReset"];
        function createBrowserRouter(routes, opts) {
          return router.createRouter({
            basename: opts == null ? void 0 : opts.basename,
            future: _extends2({}, opts == null ? void 0 : opts.future, {
              v7_prependBasename: true
            }),
            history: router.createBrowserHistory({
              window: opts == null ? void 0 : opts.window
            }),
            hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
            routes,
            mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties
          }).initialize();
        }
        function createHashRouter(routes, opts) {
          return router.createRouter({
            basename: opts == null ? void 0 : opts.basename,
            future: _extends2({}, opts == null ? void 0 : opts.future, {
              v7_prependBasename: true
            }),
            history: router.createHashHistory({
              window: opts == null ? void 0 : opts.window
            }),
            hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
            routes,
            mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties
          }).initialize();
        }
        function parseHydrationData() {
          var _window;
          let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
          if (state && state.errors) {
            state = _extends2({}, state, {
              errors: deserializeErrors(state.errors)
            });
          }
          return state;
        }
        function deserializeErrors(errors) {
          if (!errors)
            return null;
          let entries = Object.entries(errors);
          let serialized = {};
          for (let [key, val] of entries) {
            if (val && val.__type === "RouteErrorResponse") {
              serialized[key] = new router.UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);
            } else if (val && val.__type === "Error") {
              if (val.__subType) {
                let ErrorConstructor = window[val.__subType];
                if (typeof ErrorConstructor === "function") {
                  try {
                    let error = new ErrorConstructor(val.message);
                    error.stack = "";
                    serialized[key] = error;
                  } catch (e) {
                  }
                }
              }
              if (serialized[key] == null) {
                let error = new Error(val.message);
                error.stack = "";
                serialized[key] = error;
              }
            } else {
              serialized[key] = val;
            }
          }
          return serialized;
        }
        const START_TRANSITION = "startTransition";
        const startTransitionImpl = React__namespace[START_TRANSITION];
        function BrowserRouter(_ref) {
          let {
            basename,
            children,
            future,
            window: window2
          } = _ref;
          let historyRef = React__namespace.useRef();
          if (historyRef.current == null) {
            historyRef.current = router.createBrowserHistory({
              window: window2,
              v5Compat: true
            });
          }
          let history = historyRef.current;
          let [state, setStateImpl] = React__namespace.useState({
            action: history.action,
            location: history.location
          });
          let {
            v7_startTransition
          } = future || {};
          let setState = React__namespace.useCallback((newState) => {
            v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
          }, [setStateImpl, v7_startTransition]);
          React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history
          });
        }
        function HashRouter(_ref2) {
          let {
            basename,
            children,
            future,
            window: window2
          } = _ref2;
          let historyRef = React__namespace.useRef();
          if (historyRef.current == null) {
            historyRef.current = router.createHashHistory({
              window: window2,
              v5Compat: true
            });
          }
          let history = historyRef.current;
          let [state, setStateImpl] = React__namespace.useState({
            action: history.action,
            location: history.location
          });
          let {
            v7_startTransition
          } = future || {};
          let setState = React__namespace.useCallback((newState) => {
            v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
          }, [setStateImpl, v7_startTransition]);
          React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history
          });
        }
        function HistoryRouter(_ref3) {
          let {
            basename,
            children,
            future,
            history
          } = _ref3;
          let [state, setStateImpl] = React__namespace.useState({
            action: history.action,
            location: history.location
          });
          let {
            v7_startTransition
          } = future || {};
          let setState = React__namespace.useCallback((newState) => {
            v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
          }, [setStateImpl, v7_startTransition]);
          React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);
          return /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
            basename,
            children,
            location: state.location,
            navigationType: state.action,
            navigator: history
          });
        }
        {
          HistoryRouter.displayName = "unstable_HistoryRouter";
        }
        const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
        const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
        const Link = /* @__PURE__ */ React__namespace.forwardRef(function LinkWithRef(_ref4, ref) {
          let {
            onClick,
            relative,
            reloadDocument,
            replace,
            state,
            target,
            to,
            preventScrollReset
          } = _ref4, rest = _objectWithoutPropertiesLoose2(_ref4, _excluded2);
          let {
            basename
          } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
          let absoluteHref;
          let isExternal = false;
          if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
            absoluteHref = to;
            if (isBrowser) {
              try {
                let currentUrl = new URL(window.location.href);
                let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
                let path = router.stripBasename(targetUrl.pathname, basename);
                if (targetUrl.origin === currentUrl.origin && path != null) {
                  to = path + targetUrl.search + targetUrl.hash;
                } else {
                  isExternal = true;
                }
              } catch (e) {
                router.UNSAFE_warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.');
              }
            }
          }
          let href = reactRouter.useHref(to, {
            relative
          });
          let internalOnClick = useLinkClickHandler(to, {
            replace,
            state,
            target,
            preventScrollReset,
            relative
          });
          function handleClick(event) {
            if (onClick)
              onClick(event);
            if (!event.defaultPrevented) {
              internalOnClick(event);
            }
          }
          return (
            // eslint-disable-next-line jsx-a11y/anchor-has-content
            /* @__PURE__ */ React__namespace.createElement("a", _extends2({}, rest, {
              href: absoluteHref || href,
              onClick: isExternal || reloadDocument ? onClick : handleClick,
              ref,
              target
            }))
          );
        });
        {
          Link.displayName = "Link";
        }
        const NavLink = /* @__PURE__ */ React__namespace.forwardRef(function NavLinkWithRef(_ref5, ref) {
          let {
            "aria-current": ariaCurrentProp = "page",
            caseSensitive = false,
            className: classNameProp = "",
            end = false,
            style: styleProp,
            to,
            children
          } = _ref5, rest = _objectWithoutPropertiesLoose2(_ref5, _excluded22);
          let path = reactRouter.useResolvedPath(to, {
            relative: rest.relative
          });
          let location2 = reactRouter.useLocation();
          let routerState = React__namespace.useContext(reactRouter.UNSAFE_DataRouterStateContext);
          let {
            navigator: navigator2
          } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
          let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
          let locationPathname = location2.pathname;
          let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
          if (!caseSensitive) {
            locationPathname = locationPathname.toLowerCase();
            nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
            toPathname = toPathname.toLowerCase();
          }
          let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
          let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
          let ariaCurrent = isActive ? ariaCurrentProp : void 0;
          let className;
          if (typeof classNameProp === "function") {
            className = classNameProp({
              isActive,
              isPending
            });
          } else {
            className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
          }
          let style = typeof styleProp === "function" ? styleProp({
            isActive,
            isPending
          }) : styleProp;
          return /* @__PURE__ */ React__namespace.createElement(Link, _extends2({}, rest, {
            "aria-current": ariaCurrent,
            className,
            ref,
            style,
            to
          }), typeof children === "function" ? children({
            isActive,
            isPending
          }) : children);
        });
        {
          NavLink.displayName = "NavLink";
        }
        const Form = /* @__PURE__ */ React__namespace.forwardRef((props, ref) => {
          let submit = useSubmit();
          return /* @__PURE__ */ React__namespace.createElement(FormImpl, _extends2({}, props, {
            submit,
            ref
          }));
        });
        {
          Form.displayName = "Form";
        }
        const FormImpl = /* @__PURE__ */ React__namespace.forwardRef((_ref6, forwardedRef) => {
          let {
            reloadDocument,
            replace,
            state,
            method = defaultMethod,
            action,
            onSubmit,
            submit,
            relative,
            preventScrollReset
          } = _ref6, props = _objectWithoutPropertiesLoose2(_ref6, _excluded3);
          let formMethod = method.toLowerCase() === "get" ? "get" : "post";
          let formAction = useFormAction(action, {
            relative
          });
          let submitHandler = (event) => {
            onSubmit && onSubmit(event);
            if (event.defaultPrevented)
              return;
            event.preventDefault();
            let submitter = event.nativeEvent.submitter;
            let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
            submit(submitter || event.currentTarget, {
              method: submitMethod,
              replace,
              state,
              relative,
              preventScrollReset
            });
          };
          return /* @__PURE__ */ React__namespace.createElement("form", _extends2({
            ref: forwardedRef,
            method: formMethod,
            action: formAction,
            onSubmit: reloadDocument ? onSubmit : submitHandler
          }, props));
        });
        {
          FormImpl.displayName = "FormImpl";
        }
        function ScrollRestoration(_ref7) {
          let {
            getKey,
            storageKey
          } = _ref7;
          useScrollRestoration({
            getKey,
            storageKey
          });
          return null;
        }
        {
          ScrollRestoration.displayName = "ScrollRestoration";
        }
        var DataRouterHook = /* @__PURE__ */ function(DataRouterHook2) {
          DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
          DataRouterHook2["UseSubmit"] = "useSubmit";
          DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
          DataRouterHook2["UseFetcher"] = "useFetcher";
          return DataRouterHook2;
        }(DataRouterHook || {});
        var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook2) {
          DataRouterStateHook2["UseFetchers"] = "useFetchers";
          DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
          return DataRouterStateHook2;
        }(DataRouterStateHook || {});
        function getDataRouterConsoleError(hookName) {
          return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
        }
        function useDataRouterContext(hookName) {
          let ctx = React__namespace.useContext(reactRouter.UNSAFE_DataRouterContext);
          !ctx ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
          return ctx;
        }
        function useDataRouterState(hookName) {
          let state = React__namespace.useContext(reactRouter.UNSAFE_DataRouterStateContext);
          !state ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
          return state;
        }
        function useLinkClickHandler(to, _temp) {
          let {
            target,
            replace: replaceProp,
            state,
            preventScrollReset,
            relative
          } = _temp === void 0 ? {} : _temp;
          let navigate = reactRouter.useNavigate();
          let location2 = reactRouter.useLocation();
          let path = reactRouter.useResolvedPath(to, {
            relative
          });
          return React__namespace.useCallback((event) => {
            if (shouldProcessLinkClick(event, target)) {
              event.preventDefault();
              let replace = replaceProp !== void 0 ? replaceProp : reactRouter.createPath(location2) === reactRouter.createPath(path);
              navigate(to, {
                replace,
                state,
                preventScrollReset,
                relative
              });
            }
          }, [location2, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);
        }
        function useSearchParams(defaultInit) {
          router.UNSAFE_warning(typeof URLSearchParams !== "undefined", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.");
          let defaultSearchParamsRef = React__namespace.useRef(createSearchParams(defaultInit));
          let hasSetSearchParamsRef = React__namespace.useRef(false);
          let location2 = reactRouter.useLocation();
          let searchParams = React__namespace.useMemo(() => (
            // Only merge in the defaults if we haven't yet called setSearchParams.
            // Once we call that we want those to take precedence, otherwise you can't
            // remove a param with setSearchParams({}) if it has an initial value
            getSearchParamsForLocation(location2.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
          ), [location2.search]);
          let navigate = reactRouter.useNavigate();
          let setSearchParams = React__namespace.useCallback((nextInit, navigateOptions) => {
            const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
            hasSetSearchParamsRef.current = true;
            navigate("?" + newSearchParams, navigateOptions);
          }, [navigate, searchParams]);
          return [searchParams, setSearchParams];
        }
        function validateClientSideSubmission() {
          if (typeof document === "undefined") {
            throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
          }
        }
        function useSubmit() {
          let {
            router: router2
          } = useDataRouterContext(DataRouterHook.UseSubmit);
          let {
            basename
          } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
          let currentRouteId = reactRouter.UNSAFE_useRouteId();
          return React__namespace.useCallback(function(target, options) {
            if (options === void 0) {
              options = {};
            }
            validateClientSideSubmission();
            let {
              action,
              method,
              encType,
              formData,
              body
            } = getFormSubmissionInfo(target, basename);
            router2.navigate(options.action || action, {
              preventScrollReset: options.preventScrollReset,
              formData,
              body,
              formMethod: options.method || method,
              formEncType: options.encType || encType,
              replace: options.replace,
              state: options.state,
              fromRouteId: currentRouteId
            });
          }, [router2, basename, currentRouteId]);
        }
        function useSubmitFetcher(fetcherKey, fetcherRouteId) {
          let {
            router: router$1
          } = useDataRouterContext(DataRouterHook.UseSubmitFetcher);
          let {
            basename
          } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
          return React__namespace.useCallback(function(target, options) {
            if (options === void 0) {
              options = {};
            }
            validateClientSideSubmission();
            let {
              action,
              method,
              encType,
              formData,
              body
            } = getFormSubmissionInfo(target, basename);
            !(fetcherRouteId != null) ? router.UNSAFE_invariant(false, "No routeId available for useFetcher()") : void 0;
            router$1.fetch(fetcherKey, fetcherRouteId, options.action || action, {
              preventScrollReset: options.preventScrollReset,
              formData,
              body,
              formMethod: options.method || method,
              formEncType: options.encType || encType
            });
          }, [router$1, basename, fetcherKey, fetcherRouteId]);
        }
        function useFormAction(action, _temp2) {
          let {
            relative
          } = _temp2 === void 0 ? {} : _temp2;
          let {
            basename
          } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
          let routeContext = React__namespace.useContext(reactRouter.UNSAFE_RouteContext);
          !routeContext ? router.UNSAFE_invariant(false, "useFormAction must be used inside a RouteContext") : void 0;
          let [match] = routeContext.matches.slice(-1);
          let path = _extends2({}, reactRouter.useResolvedPath(action ? action : ".", {
            relative
          }));
          let location2 = reactRouter.useLocation();
          if (action == null) {
            path.search = location2.search;
            if (match.route.index) {
              let params = new URLSearchParams(path.search);
              params.delete("index");
              path.search = params.toString() ? "?" + params.toString() : "";
            }
          }
          if ((!action || action === ".") && match.route.index) {
            path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
          }
          if (basename !== "/") {
            path.pathname = path.pathname === "/" ? basename : router.joinPaths([basename, path.pathname]);
          }
          return reactRouter.createPath(path);
        }
        function createFetcherForm(fetcherKey, routeId) {
          let FetcherForm = /* @__PURE__ */ React__namespace.forwardRef((props, ref) => {
            let submit = useSubmitFetcher(fetcherKey, routeId);
            return /* @__PURE__ */ React__namespace.createElement(FormImpl, _extends2({}, props, {
              ref,
              submit
            }));
          });
          {
            FetcherForm.displayName = "fetcher.Form";
          }
          return FetcherForm;
        }
        let fetcherId = 0;
        function useFetcher() {
          var _route$matches;
          let {
            router: router$1
          } = useDataRouterContext(DataRouterHook.UseFetcher);
          let route = React__namespace.useContext(reactRouter.UNSAFE_RouteContext);
          !route ? router.UNSAFE_invariant(false, "useFetcher must be used inside a RouteContext") : void 0;
          let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
          !(routeId != null) ? router.UNSAFE_invariant(false, 'useFetcher can only be used on routes that contain a unique "id"') : void 0;
          let [fetcherKey] = React__namespace.useState(() => String(++fetcherId));
          let [Form2] = React__namespace.useState(() => {
            !routeId ? router.UNSAFE_invariant(false, "No routeId available for fetcher.Form()") : void 0;
            return createFetcherForm(fetcherKey, routeId);
          });
          let [load] = React__namespace.useState(() => (href) => {
            !router$1 ? router.UNSAFE_invariant(false, "No router available for fetcher.load()") : void 0;
            !routeId ? router.UNSAFE_invariant(false, "No routeId available for fetcher.load()") : void 0;
            router$1.fetch(fetcherKey, routeId, href);
          });
          let submit = useSubmitFetcher(fetcherKey, routeId);
          let fetcher = router$1.getFetcher(fetcherKey);
          let fetcherWithComponents = React__namespace.useMemo(() => _extends2({
            Form: Form2,
            submit,
            load
          }, fetcher), [fetcher, Form2, submit, load]);
          React__namespace.useEffect(() => {
            return () => {
              if (!router$1) {
                console.warn("No router available to clean up from useFetcher()");
                return;
              }
              router$1.deleteFetcher(fetcherKey);
            };
          }, [router$1, fetcherKey]);
          return fetcherWithComponents;
        }
        function useFetchers() {
          let state = useDataRouterState(DataRouterStateHook.UseFetchers);
          return [...state.fetchers.values()];
        }
        const SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
        let savedScrollPositions = {};
        function useScrollRestoration(_temp3) {
          let {
            getKey,
            storageKey
          } = _temp3 === void 0 ? {} : _temp3;
          let {
            router: router$1
          } = useDataRouterContext(DataRouterHook.UseScrollRestoration);
          let {
            restoreScrollPosition,
            preventScrollReset
          } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);
          let {
            basename
          } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
          let location2 = reactRouter.useLocation();
          let matches = reactRouter.useMatches();
          let navigation = reactRouter.useNavigation();
          React__namespace.useEffect(() => {
            window.history.scrollRestoration = "manual";
            return () => {
              window.history.scrollRestoration = "auto";
            };
          }, []);
          usePageHide(React__namespace.useCallback(() => {
            if (navigation.state === "idle") {
              let key = (getKey ? getKey(location2, matches) : null) || location2.key;
              savedScrollPositions[key] = window.scrollY;
            }
            sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
            window.history.scrollRestoration = "auto";
          }, [storageKey, getKey, navigation.state, location2, matches]));
          if (typeof document !== "undefined") {
            React__namespace.useLayoutEffect(() => {
              try {
                let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
                if (sessionPositions) {
                  savedScrollPositions = JSON.parse(sessionPositions);
                }
              } catch (e) {
              }
            }, [storageKey]);
            React__namespace.useLayoutEffect(() => {
              let getKeyWithoutBasename = getKey && basename !== "/" ? (location3, matches2) => getKey(
                // Strip the basename to match useLocation()
                _extends2({}, location3, {
                  pathname: router.stripBasename(location3.pathname, basename) || location3.pathname
                }),
                matches2
              ) : getKey;
              let disableScrollRestoration = router$1 == null ? void 0 : router$1.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
              return () => disableScrollRestoration && disableScrollRestoration();
            }, [router$1, basename, getKey]);
            React__namespace.useLayoutEffect(() => {
              if (restoreScrollPosition === false) {
                return;
              }
              if (typeof restoreScrollPosition === "number") {
                window.scrollTo(0, restoreScrollPosition);
                return;
              }
              if (location2.hash) {
                let el = document.getElementById(decodeURIComponent(location2.hash.slice(1)));
                if (el) {
                  el.scrollIntoView();
                  return;
                }
              }
              if (preventScrollReset === true) {
                return;
              }
              window.scrollTo(0, 0);
            }, [location2, restoreScrollPosition, preventScrollReset]);
          }
        }
        function useBeforeUnload(callback, options) {
          let {
            capture
          } = options || {};
          React__namespace.useEffect(() => {
            let opts = capture != null ? {
              capture
            } : void 0;
            window.addEventListener("beforeunload", callback, opts);
            return () => {
              window.removeEventListener("beforeunload", callback, opts);
            };
          }, [callback, capture]);
        }
        function usePageHide(callback, options) {
          let {
            capture
          } = options || {};
          React__namespace.useEffect(() => {
            let opts = capture != null ? {
              capture
            } : void 0;
            window.addEventListener("pagehide", callback, opts);
            return () => {
              window.removeEventListener("pagehide", callback, opts);
            };
          }, [callback, capture]);
        }
        function usePrompt(_ref8) {
          let {
            when,
            message
          } = _ref8;
          let blocker = reactRouter.unstable_useBlocker(when);
          React__namespace.useEffect(() => {
            if (blocker.state === "blocked") {
              let proceed = window.confirm(message);
              if (proceed) {
                setTimeout(blocker.proceed, 0);
              } else {
                blocker.reset();
              }
            }
          }, [blocker, message]);
          React__namespace.useEffect(() => {
            if (blocker.state === "blocked" && !when) {
              blocker.reset();
            }
          }, [blocker, when]);
        }
        Object.defineProperty(exports2, "AbortedDeferredError", {
          enumerable: true,
          get: function() {
            return reactRouter.AbortedDeferredError;
          }
        });
        Object.defineProperty(exports2, "Await", {
          enumerable: true,
          get: function() {
            return reactRouter.Await;
          }
        });
        Object.defineProperty(exports2, "MemoryRouter", {
          enumerable: true,
          get: function() {
            return reactRouter.MemoryRouter;
          }
        });
        Object.defineProperty(exports2, "Navigate", {
          enumerable: true,
          get: function() {
            return reactRouter.Navigate;
          }
        });
        Object.defineProperty(exports2, "NavigationType", {
          enumerable: true,
          get: function() {
            return reactRouter.NavigationType;
          }
        });
        Object.defineProperty(exports2, "Outlet", {
          enumerable: true,
          get: function() {
            return reactRouter.Outlet;
          }
        });
        Object.defineProperty(exports2, "Route", {
          enumerable: true,
          get: function() {
            return reactRouter.Route;
          }
        });
        Object.defineProperty(exports2, "Router", {
          enumerable: true,
          get: function() {
            return reactRouter.Router;
          }
        });
        Object.defineProperty(exports2, "RouterProvider", {
          enumerable: true,
          get: function() {
            return reactRouter.RouterProvider;
          }
        });
        Object.defineProperty(exports2, "Routes", {
          enumerable: true,
          get: function() {
            return reactRouter.Routes;
          }
        });
        Object.defineProperty(exports2, "UNSAFE_DataRouterContext", {
          enumerable: true,
          get: function() {
            return reactRouter.UNSAFE_DataRouterContext;
          }
        });
        Object.defineProperty(exports2, "UNSAFE_DataRouterStateContext", {
          enumerable: true,
          get: function() {
            return reactRouter.UNSAFE_DataRouterStateContext;
          }
        });
        Object.defineProperty(exports2, "UNSAFE_LocationContext", {
          enumerable: true,
          get: function() {
            return reactRouter.UNSAFE_LocationContext;
          }
        });
        Object.defineProperty(exports2, "UNSAFE_NavigationContext", {
          enumerable: true,
          get: function() {
            return reactRouter.UNSAFE_NavigationContext;
          }
        });
        Object.defineProperty(exports2, "UNSAFE_RouteContext", {
          enumerable: true,
          get: function() {
            return reactRouter.UNSAFE_RouteContext;
          }
        });
        Object.defineProperty(exports2, "UNSAFE_useRouteId", {
          enumerable: true,
          get: function() {
            return reactRouter.UNSAFE_useRouteId;
          }
        });
        Object.defineProperty(exports2, "createMemoryRouter", {
          enumerable: true,
          get: function() {
            return reactRouter.createMemoryRouter;
          }
        });
        Object.defineProperty(exports2, "createPath", {
          enumerable: true,
          get: function() {
            return reactRouter.createPath;
          }
        });
        Object.defineProperty(exports2, "createRoutesFromChildren", {
          enumerable: true,
          get: function() {
            return reactRouter.createRoutesFromChildren;
          }
        });
        Object.defineProperty(exports2, "createRoutesFromElements", {
          enumerable: true,
          get: function() {
            return reactRouter.createRoutesFromElements;
          }
        });
        Object.defineProperty(exports2, "defer", {
          enumerable: true,
          get: function() {
            return reactRouter.defer;
          }
        });
        Object.defineProperty(exports2, "generatePath", {
          enumerable: true,
          get: function() {
            return reactRouter.generatePath;
          }
        });
        Object.defineProperty(exports2, "isRouteErrorResponse", {
          enumerable: true,
          get: function() {
            return reactRouter.isRouteErrorResponse;
          }
        });
        Object.defineProperty(exports2, "json", {
          enumerable: true,
          get: function() {
            return reactRouter.json;
          }
        });
        Object.defineProperty(exports2, "matchPath", {
          enumerable: true,
          get: function() {
            return reactRouter.matchPath;
          }
        });
        Object.defineProperty(exports2, "matchRoutes", {
          enumerable: true,
          get: function() {
            return reactRouter.matchRoutes;
          }
        });
        Object.defineProperty(exports2, "parsePath", {
          enumerable: true,
          get: function() {
            return reactRouter.parsePath;
          }
        });
        Object.defineProperty(exports2, "redirect", {
          enumerable: true,
          get: function() {
            return reactRouter.redirect;
          }
        });
        Object.defineProperty(exports2, "redirectDocument", {
          enumerable: true,
          get: function() {
            return reactRouter.redirectDocument;
          }
        });
        Object.defineProperty(exports2, "renderMatches", {
          enumerable: true,
          get: function() {
            return reactRouter.renderMatches;
          }
        });
        Object.defineProperty(exports2, "resolvePath", {
          enumerable: true,
          get: function() {
            return reactRouter.resolvePath;
          }
        });
        Object.defineProperty(exports2, "unstable_useBlocker", {
          enumerable: true,
          get: function() {
            return reactRouter.unstable_useBlocker;
          }
        });
        Object.defineProperty(exports2, "useActionData", {
          enumerable: true,
          get: function() {
            return reactRouter.useActionData;
          }
        });
        Object.defineProperty(exports2, "useAsyncError", {
          enumerable: true,
          get: function() {
            return reactRouter.useAsyncError;
          }
        });
        Object.defineProperty(exports2, "useAsyncValue", {
          enumerable: true,
          get: function() {
            return reactRouter.useAsyncValue;
          }
        });
        Object.defineProperty(exports2, "useHref", {
          enumerable: true,
          get: function() {
            return reactRouter.useHref;
          }
        });
        Object.defineProperty(exports2, "useInRouterContext", {
          enumerable: true,
          get: function() {
            return reactRouter.useInRouterContext;
          }
        });
        Object.defineProperty(exports2, "useLoaderData", {
          enumerable: true,
          get: function() {
            return reactRouter.useLoaderData;
          }
        });
        Object.defineProperty(exports2, "useLocation", {
          enumerable: true,
          get: function() {
            return reactRouter.useLocation;
          }
        });
        Object.defineProperty(exports2, "useMatch", {
          enumerable: true,
          get: function() {
            return reactRouter.useMatch;
          }
        });
        Object.defineProperty(exports2, "useMatches", {
          enumerable: true,
          get: function() {
            return reactRouter.useMatches;
          }
        });
        Object.defineProperty(exports2, "useNavigate", {
          enumerable: true,
          get: function() {
            return reactRouter.useNavigate;
          }
        });
        Object.defineProperty(exports2, "useNavigation", {
          enumerable: true,
          get: function() {
            return reactRouter.useNavigation;
          }
        });
        Object.defineProperty(exports2, "useNavigationType", {
          enumerable: true,
          get: function() {
            return reactRouter.useNavigationType;
          }
        });
        Object.defineProperty(exports2, "useOutlet", {
          enumerable: true,
          get: function() {
            return reactRouter.useOutlet;
          }
        });
        Object.defineProperty(exports2, "useOutletContext", {
          enumerable: true,
          get: function() {
            return reactRouter.useOutletContext;
          }
        });
        Object.defineProperty(exports2, "useParams", {
          enumerable: true,
          get: function() {
            return reactRouter.useParams;
          }
        });
        Object.defineProperty(exports2, "useResolvedPath", {
          enumerable: true,
          get: function() {
            return reactRouter.useResolvedPath;
          }
        });
        Object.defineProperty(exports2, "useRevalidator", {
          enumerable: true,
          get: function() {
            return reactRouter.useRevalidator;
          }
        });
        Object.defineProperty(exports2, "useRouteError", {
          enumerable: true,
          get: function() {
            return reactRouter.useRouteError;
          }
        });
        Object.defineProperty(exports2, "useRouteLoaderData", {
          enumerable: true,
          get: function() {
            return reactRouter.useRouteLoaderData;
          }
        });
        Object.defineProperty(exports2, "useRoutes", {
          enumerable: true,
          get: function() {
            return reactRouter.useRoutes;
          }
        });
        exports2.BrowserRouter = BrowserRouter;
        exports2.Form = Form;
        exports2.HashRouter = HashRouter;
        exports2.Link = Link;
        exports2.NavLink = NavLink;
        exports2.ScrollRestoration = ScrollRestoration;
        exports2.UNSAFE_useScrollRestoration = useScrollRestoration;
        exports2.createBrowserRouter = createBrowserRouter;
        exports2.createHashRouter = createHashRouter;
        exports2.createSearchParams = createSearchParams;
        exports2.unstable_HistoryRouter = HistoryRouter;
        exports2.unstable_usePrompt = usePrompt;
        exports2.useBeforeUnload = useBeforeUnload;
        exports2.useFetcher = useFetcher;
        exports2.useFetchers = useFetchers;
        exports2.useFormAction = useFormAction;
        exports2.useLinkClickHandler = useLinkClickHandler;
        exports2.useSearchParams = useSearchParams;
        exports2.useSubmit = useSubmit;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // node_modules/react-router-dom/dist/main.js
  var require_main2 = __commonJS({
    "node_modules/react-router-dom/dist/main.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_router_dom_development();
      }
    }
  });

  // client/dataHelper.js
  var dataHelper_exports = {};
  __export(dataHelper_exports, {
    retrieveProfilePicture: () => retrieveProfilePicture,
    sendUpdatedPassword: () => sendUpdatedPassword
  });
  function retrieveProfilePicture(username) {
    return __async(this, null, function* () {
      try {
        const response = yield fetch(`/api/getProfilePicture/${username}`, {
          method: "GET",
          headers: {
            "Content-type": "application/json; charset=UTF-8"
          }
        });
        if (response.status >= 400) {
          throw new Error(`Error ${response.status} - Call to DB for profile picture failed because no user exists with username ${username}`);
        } else {
          return yield response.text();
        }
      } catch (err) {
        console.error("Failed to retrieve profile picture");
        console.error(err);
        return null;
      }
    });
  }
  function sendUpdatedPassword(token, oldPass, newPass) {
    return __async(this, null, function* () {
      try {
        const response = yield fetch(`api/profile/settings/password`, {
          method: "POST",
          body: JSON.stringify({
            token,
            oldPassword: oldPass,
            newPassword: newPass
          }),
          headers: {
            "Content-type": "application/json; charset=UTF-8"
          }
        });
        if (response.status >= 400) {
          throw new Error(`Error ${response.status} - Password update failed`);
        } else {
          return yield response.text();
        }
      } catch (err) {
        console.error("Failed to update password");
        console.error(err);
        return null;
      }
    });
  }
  var init_dataHelper = __esm({
    "client/dataHelper.js"() {
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location2, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/@react-aria/ssr/dist/main.js
  var require_main3 = __commonJS({
    "node_modules/@react-aria/ssr/dist/main.js"(exports, module) {
      var $32tCg$react = require_react();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "SSRProvider", () => $97d95f6660b1bb14$export$9f8ac96af4b1b2ae);
      $parcel$export(module.exports, "useSSRSafeId", () => $97d95f6660b1bb14$export$619500959fc48b26);
      $parcel$export(module.exports, "useIsSSR", () => $97d95f6660b1bb14$export$535bd6ca7f90a273);
      var $97d95f6660b1bb14$var$defaultContext = {
        prefix: String(Math.round(Math.random() * 1e10)),
        current: 0
      };
      var $97d95f6660b1bb14$var$SSRContext = /* @__PURE__ */ (0, $parcel$interopDefault($32tCg$react)).createContext($97d95f6660b1bb14$var$defaultContext);
      var $97d95f6660b1bb14$var$IsSSRContext = /* @__PURE__ */ (0, $parcel$interopDefault($32tCg$react)).createContext(false);
      function $97d95f6660b1bb14$var$LegacySSRProvider(props) {
        let cur = (0, $32tCg$react.useContext)($97d95f6660b1bb14$var$SSRContext);
        let counter = $97d95f6660b1bb14$var$useCounter(cur === $97d95f6660b1bb14$var$defaultContext);
        let [isSSR, setIsSSR] = (0, $32tCg$react.useState)(true);
        let value = (0, $32tCg$react.useMemo)(() => ({
          // If this is the first SSRProvider, start with an empty string prefix, otherwise
          // append and increment the counter.
          prefix: cur === $97d95f6660b1bb14$var$defaultContext ? "" : `${cur.prefix}-${counter}`,
          current: 0
        }), [
          cur,
          counter
        ]);
        if (typeof document !== "undefined")
          (0, $32tCg$react.useLayoutEffect)(() => {
            setIsSSR(false);
          }, []);
        return /* @__PURE__ */ (0, $parcel$interopDefault($32tCg$react)).createElement($97d95f6660b1bb14$var$SSRContext.Provider, {
          value
        }, /* @__PURE__ */ (0, $parcel$interopDefault($32tCg$react)).createElement($97d95f6660b1bb14$var$IsSSRContext.Provider, {
          value: isSSR
        }, props.children));
      }
      var $97d95f6660b1bb14$var$warnedAboutSSRProvider = false;
      function $97d95f6660b1bb14$export$9f8ac96af4b1b2ae(props) {
        if (typeof (0, $parcel$interopDefault($32tCg$react))["useId"] === "function") {
          if (!$97d95f6660b1bb14$var$warnedAboutSSRProvider) {
            console.warn("In React 18, SSRProvider is not necessary and is a noop. You can remove it from your app.");
            $97d95f6660b1bb14$var$warnedAboutSSRProvider = true;
          }
          return /* @__PURE__ */ (0, $parcel$interopDefault($32tCg$react)).createElement((0, $parcel$interopDefault($32tCg$react)).Fragment, null, props.children);
        }
        return /* @__PURE__ */ (0, $parcel$interopDefault($32tCg$react)).createElement($97d95f6660b1bb14$var$LegacySSRProvider, props);
      }
      var $97d95f6660b1bb14$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
      var $97d95f6660b1bb14$var$componentIds = /* @__PURE__ */ new WeakMap();
      function $97d95f6660b1bb14$var$useCounter(isDisabled = false) {
        let ctx = (0, $32tCg$react.useContext)($97d95f6660b1bb14$var$SSRContext);
        let ref = (0, $32tCg$react.useRef)(null);
        if (ref.current === null && !isDisabled) {
          var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner;
          let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (0, $parcel$interopDefault($32tCg$react)).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
          if (currentOwner) {
            let prevComponentValue = $97d95f6660b1bb14$var$componentIds.get(currentOwner);
            if (prevComponentValue == null)
              $97d95f6660b1bb14$var$componentIds.set(currentOwner, {
                id: ctx.current,
                state: currentOwner.memoizedState
              });
            else if (currentOwner.memoizedState !== prevComponentValue.state) {
              ctx.current = prevComponentValue.id;
              $97d95f6660b1bb14$var$componentIds.delete(currentOwner);
            }
          }
          ref.current = ++ctx.current;
        }
        return ref.current;
      }
      function $97d95f6660b1bb14$var$useLegacySSRSafeId(defaultId) {
        let ctx = (0, $32tCg$react.useContext)($97d95f6660b1bb14$var$SSRContext);
        if (ctx === $97d95f6660b1bb14$var$defaultContext && !$97d95f6660b1bb14$var$canUseDOM)
          console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
        let counter = $97d95f6660b1bb14$var$useCounter(!!defaultId);
        let prefix = ctx === $97d95f6660b1bb14$var$defaultContext && false ? "react-aria" : `react-aria${ctx.prefix}`;
        return defaultId || `${prefix}-${counter}`;
      }
      function $97d95f6660b1bb14$var$useModernSSRSafeId(defaultId) {
        let id = (0, $parcel$interopDefault($32tCg$react)).useId();
        let [didSSR] = (0, $32tCg$react.useState)($97d95f6660b1bb14$export$535bd6ca7f90a273());
        let prefix = didSSR || false ? "react-aria" : `react-aria${$97d95f6660b1bb14$var$defaultContext.prefix}`;
        return defaultId || `${prefix}-${id}`;
      }
      var $97d95f6660b1bb14$export$619500959fc48b26 = typeof (0, $parcel$interopDefault($32tCg$react))["useId"] === "function" ? $97d95f6660b1bb14$var$useModernSSRSafeId : $97d95f6660b1bb14$var$useLegacySSRSafeId;
      function $97d95f6660b1bb14$var$getSnapshot() {
        return false;
      }
      function $97d95f6660b1bb14$var$getServerSnapshot() {
        return true;
      }
      function $97d95f6660b1bb14$var$subscribe(onStoreChange) {
        return () => {
        };
      }
      function $97d95f6660b1bb14$export$535bd6ca7f90a273() {
        if (typeof (0, $parcel$interopDefault($32tCg$react))["useSyncExternalStore"] === "function")
          return (0, $parcel$interopDefault($32tCg$react))["useSyncExternalStore"]($97d95f6660b1bb14$var$subscribe, $97d95f6660b1bb14$var$getSnapshot, $97d95f6660b1bb14$var$getServerSnapshot);
        return (0, $32tCg$react.useContext)($97d95f6660b1bb14$var$IsSSRContext);
      }
    }
  });

  // node_modules/@internationalized/string/dist/main.js
  var require_main4 = __commonJS({
    "node_modules/@internationalized/string/dist/main.js"(exports, module) {
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "LocalizedStringDictionary", () => $f80be5fd4d03dda9$export$c17fa47878dc55b6);
      $parcel$export(module.exports, "LocalizedStringFormatter", () => $3e95fbf3429967d1$export$2f817fcdc4b89ae0);
      var $f80be5fd4d03dda9$export$c17fa47878dc55b6 = class {
        /** Returns a localized string for the given key and locale. */
        getStringForLocale(key, locale) {
          let strings = this.strings[locale];
          if (!strings) {
            strings = $f80be5fd4d03dda9$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
            this.strings[locale] = strings;
          }
          let string = strings[key];
          if (!string)
            throw new Error(`Could not find intl message ${key} in ${locale} locale`);
          return string;
        }
        constructor(messages, defaultLocale = "en-US") {
          this.strings = __spreadValues({}, messages);
          this.defaultLocale = defaultLocale;
        }
      };
      function $f80be5fd4d03dda9$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
        if (strings[locale])
          return strings[locale];
        let language = $f80be5fd4d03dda9$var$getLanguage(locale);
        if (strings[language])
          return strings[language];
        for (let key in strings) {
          if (key.startsWith(language + "-"))
            return strings[key];
        }
        return strings[defaultLocale];
      }
      function $f80be5fd4d03dda9$var$getLanguage(locale) {
        if (Intl.Locale)
          return new Intl.Locale(locale).language;
        return locale.split("-")[0];
      }
      var $3e95fbf3429967d1$var$pluralRulesCache = /* @__PURE__ */ new Map();
      var $3e95fbf3429967d1$var$numberFormatCache = /* @__PURE__ */ new Map();
      var $3e95fbf3429967d1$export$2f817fcdc4b89ae0 = class {
        /** Formats a localized string for the given key with the provided variables. */
        format(key, variables) {
          let message = this.strings.getStringForLocale(key, this.locale);
          return typeof message === "function" ? message(variables, this) : message;
        }
        plural(count2, options, type = "cardinal") {
          let opt = options["=" + count2];
          if (opt)
            return typeof opt === "function" ? opt() : opt;
          let key = this.locale + ":" + type;
          let pluralRules = $3e95fbf3429967d1$var$pluralRulesCache.get(key);
          if (!pluralRules) {
            pluralRules = new Intl.PluralRules(this.locale, {
              type
            });
            $3e95fbf3429967d1$var$pluralRulesCache.set(key, pluralRules);
          }
          let selected = pluralRules.select(count2);
          opt = options[selected] || options.other;
          return typeof opt === "function" ? opt() : opt;
        }
        number(value) {
          let numberFormat = $3e95fbf3429967d1$var$numberFormatCache.get(this.locale);
          if (!numberFormat) {
            numberFormat = new Intl.NumberFormat(this.locale);
            $3e95fbf3429967d1$var$numberFormatCache.set(this.locale, numberFormat);
          }
          return numberFormat.format(value);
        }
        select(options, value) {
          let opt = options[value] || options.other;
          return typeof opt === "function" ? opt() : opt;
        }
        constructor(locale, strings) {
          this.locale = locale;
          this.strings = strings;
        }
      };
    }
  });

  // node_modules/@swc/helpers/cjs/_check_private_redeclaration.cjs
  var require_check_private_redeclaration = __commonJS({
    "node_modules/@swc/helpers/cjs/_check_private_redeclaration.cjs"(exports) {
      "use strict";
      exports._ = exports._check_private_redeclaration = _check_private_redeclaration;
      function _check_private_redeclaration(obj, privateCollection) {
        if (privateCollection.has(obj)) {
          throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
      }
    }
  });

  // node_modules/@swc/helpers/cjs/_class_private_field_init.cjs
  var require_class_private_field_init = __commonJS({
    "node_modules/@swc/helpers/cjs/_class_private_field_init.cjs"(exports) {
      "use strict";
      var _check_private_redeclaration = require_check_private_redeclaration();
      exports._ = exports._class_private_field_init = _class_private_field_init;
      function _class_private_field_init(obj, privateMap, value) {
        _check_private_redeclaration._(obj, privateMap);
        privateMap.set(obj, value);
      }
    }
  });

  // node_modules/@internationalized/date/dist/main.js
  var require_main5 = __commonJS({
    "node_modules/@internationalized/date/dist/main.js"(exports, module) {
      var $kgI3C$swchelperscjs_class_private_field_initcjs = require_class_private_field_init();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "CalendarDate", () => $625ad1e1f4c43bc1$export$99faa760c7908e4f);
      $parcel$export(module.exports, "CalendarDateTime", () => $625ad1e1f4c43bc1$export$ca871e8dbb80966f);
      $parcel$export(module.exports, "Time", () => $625ad1e1f4c43bc1$export$680ea196effce5f);
      $parcel$export(module.exports, "ZonedDateTime", () => $625ad1e1f4c43bc1$export$d3b7288e7994edea);
      $parcel$export(module.exports, "GregorianCalendar", () => $af14c9812fdceb33$export$80ee6245ec4f29ec);
      $parcel$export(module.exports, "JapaneseCalendar", () => $b0ac0602ef646b2c$export$b746ab2b60cdffbf);
      $parcel$export(module.exports, "BuddhistCalendar", () => $561c4ef058278b74$export$42d20a78301dee44);
      $parcel$export(module.exports, "TaiwanCalendar", () => $9cc5d3577ec40243$export$65e01080afcb0799);
      $parcel$export(module.exports, "PersianCalendar", () => $3c060181fc7249ae$export$37fccdbfd14c5939);
      $parcel$export(module.exports, "IndianCalendar", () => $5f1dfa5c67609fe6$export$39f31c639fa15726);
      $parcel$export(module.exports, "IslamicCivilCalendar", () => $ecb2c4cc8c9aae25$export$2066795aadd37bfc);
      $parcel$export(module.exports, "IslamicTabularCalendar", () => $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7);
      $parcel$export(module.exports, "IslamicUmalquraCalendar", () => $ecb2c4cc8c9aae25$export$5baab4758c231076);
      $parcel$export(module.exports, "HebrewCalendar", () => $0f5324ee3bdd9396$export$ca405048b8fb5af);
      $parcel$export(module.exports, "EthiopicCalendar", () => $4db04d1051af0f2f$export$26ba6eab5e20cd7d);
      $parcel$export(module.exports, "EthiopicAmeteAlemCalendar", () => $4db04d1051af0f2f$export$d72e0c37005a4914);
      $parcel$export(module.exports, "CopticCalendar", () => $4db04d1051af0f2f$export$fe6243cbe1a4b7c1);
      $parcel$export(module.exports, "createCalendar", () => $4922c0a5a69da0ba$export$dd0bbc9b26defe37);
      $parcel$export(module.exports, "toCalendarDate", () => $4ae0260a69729f1d$export$93522d1a439f3617);
      $parcel$export(module.exports, "toCalendarDateTime", () => $4ae0260a69729f1d$export$b21e0b124e224484);
      $parcel$export(module.exports, "toTime", () => $4ae0260a69729f1d$export$d33f79e3ffc3dc83);
      $parcel$export(module.exports, "toCalendar", () => $4ae0260a69729f1d$export$b4a036af3fc0b032);
      $parcel$export(module.exports, "toZoned", () => $4ae0260a69729f1d$export$84c95a83c799e074);
      $parcel$export(module.exports, "toTimeZone", () => $4ae0260a69729f1d$export$538b00033cc11c75);
      $parcel$export(module.exports, "toLocalTimeZone", () => $4ae0260a69729f1d$export$d9b67bc93c097491);
      $parcel$export(module.exports, "fromDate", () => $4ae0260a69729f1d$export$e57ff100d91bd4b9);
      $parcel$export(module.exports, "fromAbsolute", () => $4ae0260a69729f1d$export$1b96692a1ba042ac);
      $parcel$export(module.exports, "isSameDay", () => $1f0f7ebf1ae6c530$export$ea39ec197993aef0);
      $parcel$export(module.exports, "isSameMonth", () => $1f0f7ebf1ae6c530$export$a18c89cbd24170ff);
      $parcel$export(module.exports, "isSameYear", () => $1f0f7ebf1ae6c530$export$5841f9eb9773f25f);
      $parcel$export(module.exports, "isEqualDay", () => $1f0f7ebf1ae6c530$export$91b62ebf2ba703ee);
      $parcel$export(module.exports, "isEqualMonth", () => $1f0f7ebf1ae6c530$export$5a8da0c44a3afdf2);
      $parcel$export(module.exports, "isEqualYear", () => $1f0f7ebf1ae6c530$export$ea840f5a6dda8147);
      $parcel$export(module.exports, "isToday", () => $1f0f7ebf1ae6c530$export$629b0a497aa65267);
      $parcel$export(module.exports, "getDayOfWeek", () => $1f0f7ebf1ae6c530$export$2061056d06d7cdf7);
      $parcel$export(module.exports, "now", () => $1f0f7ebf1ae6c530$export$461939dd4422153);
      $parcel$export(module.exports, "today", () => $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3);
      $parcel$export(module.exports, "getHoursInDay", () => $1f0f7ebf1ae6c530$export$126c91c941de7e);
      $parcel$export(module.exports, "getLocalTimeZone", () => $1f0f7ebf1ae6c530$export$aa8b41735afcabd2);
      $parcel$export(module.exports, "startOfMonth", () => $1f0f7ebf1ae6c530$export$a5a3b454ada2268e);
      $parcel$export(module.exports, "startOfWeek", () => $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4);
      $parcel$export(module.exports, "startOfYear", () => $1f0f7ebf1ae6c530$export$f91e89d3d0406102);
      $parcel$export(module.exports, "endOfMonth", () => $1f0f7ebf1ae6c530$export$a2258d9c4118825c);
      $parcel$export(module.exports, "endOfWeek", () => $1f0f7ebf1ae6c530$export$ef8b6d9133084f4e);
      $parcel$export(module.exports, "endOfYear", () => $1f0f7ebf1ae6c530$export$8b7aa55c66d5569e);
      $parcel$export(module.exports, "getMinimumMonthInYear", () => $1f0f7ebf1ae6c530$export$5412ac11713b72ad);
      $parcel$export(module.exports, "getMinimumDayInMonth", () => $1f0f7ebf1ae6c530$export$b2f4953d301981d5);
      $parcel$export(module.exports, "getWeeksInMonth", () => $1f0f7ebf1ae6c530$export$ccc1b2479e7dd654);
      $parcel$export(module.exports, "minDate", () => $1f0f7ebf1ae6c530$export$5c333a116e949cdd);
      $parcel$export(module.exports, "maxDate", () => $1f0f7ebf1ae6c530$export$a75f2bff57811055);
      $parcel$export(module.exports, "isWeekend", () => $1f0f7ebf1ae6c530$export$618d60ea299da42);
      $parcel$export(module.exports, "isWeekday", () => $1f0f7ebf1ae6c530$export$ee9d87258e1d19ed);
      $parcel$export(module.exports, "parseDate", () => $4c32e2d98e5a5134$export$6b862160d295c8e);
      $parcel$export(module.exports, "parseDateTime", () => $4c32e2d98e5a5134$export$588937bcd60ade55);
      $parcel$export(module.exports, "parseTime", () => $4c32e2d98e5a5134$export$c9698ec7f05a07e1);
      $parcel$export(module.exports, "parseAbsolute", () => $4c32e2d98e5a5134$export$5adfdab05168c219);
      $parcel$export(module.exports, "parseAbsoluteToLocal", () => $4c32e2d98e5a5134$export$8e384432362ed0f0);
      $parcel$export(module.exports, "parseZonedDateTime", () => $4c32e2d98e5a5134$export$fd7893f06e92a6a4);
      $parcel$export(module.exports, "parseDuration", () => $4c32e2d98e5a5134$export$ecae829bb3747ea6);
      $parcel$export(module.exports, "DateFormatter", () => $8f23a04ae90a588b$export$ad991b66133851cf);
      function $a5090d6430502238$export$842a2cf37af977e1(amount, numerator) {
        return amount - numerator * Math.floor(amount / numerator);
      }
      var $af14c9812fdceb33$var$EPOCH = 1721426;
      function $af14c9812fdceb33$export$f297eb839006d339(era, year, month, day) {
        year = $af14c9812fdceb33$export$c36e0ecb2d4fa69d(era, year);
        let y1 = year - 1;
        let monthOffset = -2;
        if (month <= 2)
          monthOffset = 0;
        else if ($af14c9812fdceb33$export$553d7fa8e3805fc0(year))
          monthOffset = -1;
        return $af14c9812fdceb33$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
      }
      function $af14c9812fdceb33$export$553d7fa8e3805fc0(year) {
        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
      }
      function $af14c9812fdceb33$export$c36e0ecb2d4fa69d(era, year) {
        return era === "BC" ? 1 - year : year;
      }
      function $af14c9812fdceb33$export$4475b7e617eb123c(year) {
        let era = "AD";
        if (year <= 0) {
          era = "BC";
          year = 1 - year;
        }
        return [
          era,
          year
        ];
      }
      var $af14c9812fdceb33$var$daysInMonth = {
        standard: [
          31,
          28,
          31,
          30,
          31,
          30,
          31,
          31,
          30,
          31,
          30,
          31
        ],
        leapyear: [
          31,
          29,
          31,
          30,
          31,
          30,
          31,
          31,
          30,
          31,
          30,
          31
        ]
      };
      var $af14c9812fdceb33$export$80ee6245ec4f29ec = class {
        fromJulianDay(jd) {
          let jd0 = jd;
          let depoch = jd0 - $af14c9812fdceb33$var$EPOCH;
          let quadricent = Math.floor(depoch / 146097);
          let dqc = (0, $a5090d6430502238$export$842a2cf37af977e1)(depoch, 146097);
          let cent = Math.floor(dqc / 36524);
          let dcent = (0, $a5090d6430502238$export$842a2cf37af977e1)(dqc, 36524);
          let quad = Math.floor(dcent / 1461);
          let dquad = (0, $a5090d6430502238$export$842a2cf37af977e1)(dcent, 1461);
          let yindex = Math.floor(dquad / 365);
          let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
          let [era, year] = $af14c9812fdceb33$export$4475b7e617eb123c(extendedYear);
          let yearDay = jd0 - $af14c9812fdceb33$export$f297eb839006d339(era, year, 1, 1);
          let leapAdj = 2;
          if (jd0 < $af14c9812fdceb33$export$f297eb839006d339(era, year, 3, 1))
            leapAdj = 0;
          else if ($af14c9812fdceb33$export$553d7fa8e3805fc0(year))
            leapAdj = 1;
          let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
          let day = jd0 - $af14c9812fdceb33$export$f297eb839006d339(era, year, month, 1) + 1;
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(era, year, month, day);
        }
        toJulianDay(date) {
          return $af14c9812fdceb33$export$f297eb839006d339(date.era, date.year, date.month, date.day);
        }
        getDaysInMonth(date) {
          return $af14c9812fdceb33$var$daysInMonth[$af14c9812fdceb33$export$553d7fa8e3805fc0(date.year) ? "leapyear" : "standard"][date.month - 1];
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        getMonthsInYear(date) {
          return 12;
        }
        getDaysInYear(date) {
          return $af14c9812fdceb33$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        getYearsInEra(date) {
          return 9999;
        }
        getEras() {
          return [
            "BC",
            "AD"
          ];
        }
        isInverseEra(date) {
          return date.era === "BC";
        }
        balanceDate(date) {
          if (date.year <= 0) {
            date.era = date.era === "BC" ? "AD" : "BC";
            date.year = 1 - date.year;
          }
        }
        constructor() {
          this.identifier = "gregory";
        }
      };
      var $4d88eff242b38a9e$export$7a5acbd77d414bd9 = {
        "001": 1,
        AD: 1,
        AE: 6,
        AF: 6,
        AI: 1,
        AL: 1,
        AM: 1,
        AN: 1,
        AR: 1,
        AT: 1,
        AU: 1,
        AX: 1,
        AZ: 1,
        BA: 1,
        BE: 1,
        BG: 1,
        BH: 6,
        BM: 1,
        BN: 1,
        BY: 1,
        CH: 1,
        CL: 1,
        CM: 1,
        CN: 1,
        CR: 1,
        CY: 1,
        CZ: 1,
        DE: 1,
        DJ: 6,
        DK: 1,
        DZ: 6,
        EC: 1,
        EE: 1,
        EG: 6,
        ES: 1,
        FI: 1,
        FJ: 1,
        FO: 1,
        FR: 1,
        GB: 1,
        GE: 1,
        GF: 1,
        GP: 1,
        GR: 1,
        HR: 1,
        HU: 1,
        IE: 1,
        IQ: 6,
        IR: 6,
        IS: 1,
        IT: 1,
        JO: 6,
        KG: 1,
        KW: 6,
        KZ: 1,
        LB: 1,
        LI: 1,
        LK: 1,
        LT: 1,
        LU: 1,
        LV: 1,
        LY: 6,
        MC: 1,
        MD: 1,
        ME: 1,
        MK: 1,
        MN: 1,
        MQ: 1,
        MV: 5,
        MY: 1,
        NL: 1,
        NO: 1,
        NZ: 1,
        OM: 6,
        PL: 1,
        QA: 6,
        RE: 1,
        RO: 1,
        RS: 1,
        RU: 1,
        SD: 6,
        SE: 1,
        SI: 1,
        SK: 1,
        SM: 1,
        SY: 6,
        TJ: 1,
        TM: 1,
        TR: 1,
        UA: 1,
        UY: 1,
        UZ: 1,
        VA: 1,
        VN: 1,
        XK: 1
      };
      function $1f0f7ebf1ae6c530$export$ea39ec197993aef0(a, b) {
        b = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(b, a.calendar);
        return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
      }
      function $1f0f7ebf1ae6c530$export$a18c89cbd24170ff(a, b) {
        b = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(b, a.calendar);
        a = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(a);
        b = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(b);
        return a.era === b.era && a.year === b.year && a.month === b.month;
      }
      function $1f0f7ebf1ae6c530$export$5841f9eb9773f25f(a, b) {
        b = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(b, a.calendar);
        a = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(a);
        b = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(b);
        return a.era === b.era && a.year === b.year;
      }
      function $1f0f7ebf1ae6c530$export$91b62ebf2ba703ee(a, b) {
        return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
      }
      function $1f0f7ebf1ae6c530$export$5a8da0c44a3afdf2(a, b) {
        a = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(a);
        b = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(b);
        return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;
      }
      function $1f0f7ebf1ae6c530$export$ea840f5a6dda8147(a, b) {
        a = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(a);
        b = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(b);
        return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;
      }
      function $1f0f7ebf1ae6c530$export$629b0a497aa65267(date, timeZone) {
        return $1f0f7ebf1ae6c530$export$ea39ec197993aef0(date, $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3(timeZone));
      }
      function $1f0f7ebf1ae6c530$export$2061056d06d7cdf7(date, locale) {
        let julian = date.calendar.toJulianDay(date);
        let dayOfWeek = Math.ceil(julian + 1 - $1f0f7ebf1ae6c530$var$getWeekStart(locale)) % 7;
        if (dayOfWeek < 0)
          dayOfWeek += 7;
        return dayOfWeek;
      }
      function $1f0f7ebf1ae6c530$export$461939dd4422153(timeZone) {
        return (0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(Date.now(), timeZone);
      }
      function $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3(timeZone) {
        return (0, $4ae0260a69729f1d$export$93522d1a439f3617)($1f0f7ebf1ae6c530$export$461939dd4422153(timeZone));
      }
      function $1f0f7ebf1ae6c530$export$68781ddf31c0090f(a, b) {
        return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);
      }
      function $1f0f7ebf1ae6c530$export$c19a80a9721b80f6(a, b) {
        return $1f0f7ebf1ae6c530$var$timeToMs(a) - $1f0f7ebf1ae6c530$var$timeToMs(b);
      }
      function $1f0f7ebf1ae6c530$var$timeToMs(a) {
        return a.hour * 36e5 + a.minute * 6e4 + a.second * 1e3 + a.millisecond;
      }
      function $1f0f7ebf1ae6c530$export$126c91c941de7e(a, timeZone) {
        let ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(a, timeZone);
        let tomorrow = a.add({
          days: 1
        });
        let tomorrowMs = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(tomorrow, timeZone);
        return (tomorrowMs - ms) / 36e5;
      }
      var $1f0f7ebf1ae6c530$var$localTimeZone = null;
      function $1f0f7ebf1ae6c530$export$aa8b41735afcabd2() {
        if ($1f0f7ebf1ae6c530$var$localTimeZone == null)
          $1f0f7ebf1ae6c530$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
        return $1f0f7ebf1ae6c530$var$localTimeZone;
      }
      function $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date) {
        return date.subtract({
          days: date.day - 1
        });
      }
      function $1f0f7ebf1ae6c530$export$a2258d9c4118825c(date) {
        return date.add({
          days: date.calendar.getDaysInMonth(date) - date.day
        });
      }
      function $1f0f7ebf1ae6c530$export$f91e89d3d0406102(date) {
        return $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date.subtract({
          months: date.month - 1
        }));
      }
      function $1f0f7ebf1ae6c530$export$8b7aa55c66d5569e(date) {
        return $1f0f7ebf1ae6c530$export$a2258d9c4118825c(date.add({
          months: date.calendar.getMonthsInYear(date) - date.month
        }));
      }
      function $1f0f7ebf1ae6c530$export$5412ac11713b72ad(date) {
        if (date.calendar.getMinimumMonthInYear)
          return date.calendar.getMinimumMonthInYear(date);
        return 1;
      }
      function $1f0f7ebf1ae6c530$export$b2f4953d301981d5(date) {
        if (date.calendar.getMinimumDayInMonth)
          return date.calendar.getMinimumDayInMonth(date);
        return 1;
      }
      function $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4(date, locale) {
        let dayOfWeek = $1f0f7ebf1ae6c530$export$2061056d06d7cdf7(date, locale);
        return date.subtract({
          days: dayOfWeek
        });
      }
      function $1f0f7ebf1ae6c530$export$ef8b6d9133084f4e(date, locale) {
        return $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4(date, locale).add({
          days: 6
        });
      }
      var $1f0f7ebf1ae6c530$var$cachedRegions = /* @__PURE__ */ new Map();
      function $1f0f7ebf1ae6c530$var$getRegion(locale) {
        if (Intl.Locale) {
          let region = $1f0f7ebf1ae6c530$var$cachedRegions.get(locale);
          if (!region) {
            region = new Intl.Locale(locale).maximize().region;
            $1f0f7ebf1ae6c530$var$cachedRegions.set(locale, region);
          }
          return region;
        }
        let part = locale.split("-")[1];
        return part === "u" ? null : part;
      }
      function $1f0f7ebf1ae6c530$var$getWeekStart(locale) {
        let region = $1f0f7ebf1ae6c530$var$getRegion(locale);
        return (0, $4d88eff242b38a9e$export$7a5acbd77d414bd9)[region] || 0;
      }
      function $1f0f7ebf1ae6c530$export$ccc1b2479e7dd654(date, locale) {
        let days = date.calendar.getDaysInMonth(date);
        return Math.ceil(($1f0f7ebf1ae6c530$export$2061056d06d7cdf7($1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date), locale) + days) / 7);
      }
      function $1f0f7ebf1ae6c530$export$5c333a116e949cdd(a, b) {
        if (a && b)
          return a.compare(b) <= 0 ? a : b;
        return a || b;
      }
      function $1f0f7ebf1ae6c530$export$a75f2bff57811055(a, b) {
        if (a && b)
          return a.compare(b) >= 0 ? a : b;
        return a || b;
      }
      var $1f0f7ebf1ae6c530$var$WEEKEND_DATA = {
        AF: [
          4,
          5
        ],
        AE: [
          5,
          6
        ],
        BH: [
          5,
          6
        ],
        DZ: [
          5,
          6
        ],
        EG: [
          5,
          6
        ],
        IL: [
          5,
          6
        ],
        IQ: [
          5,
          6
        ],
        IR: [
          5,
          5
        ],
        JO: [
          5,
          6
        ],
        KW: [
          5,
          6
        ],
        LY: [
          5,
          6
        ],
        OM: [
          5,
          6
        ],
        QA: [
          5,
          6
        ],
        SA: [
          5,
          6
        ],
        SD: [
          5,
          6
        ],
        SY: [
          5,
          6
        ],
        YE: [
          5,
          6
        ]
      };
      function $1f0f7ebf1ae6c530$export$618d60ea299da42(date, locale) {
        let julian = date.calendar.toJulianDay(date);
        let dayOfWeek = Math.ceil(julian + 1) % 7;
        if (dayOfWeek < 0)
          dayOfWeek += 7;
        let region = $1f0f7ebf1ae6c530$var$getRegion(locale);
        let [start, end] = $1f0f7ebf1ae6c530$var$WEEKEND_DATA[region] || [
          6,
          0
        ];
        return dayOfWeek === start || dayOfWeek === end;
      }
      function $1f0f7ebf1ae6c530$export$ee9d87258e1d19ed(date, locale) {
        return !$1f0f7ebf1ae6c530$export$618d60ea299da42(date, locale);
      }
      function $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) {
        date = $4ae0260a69729f1d$export$b4a036af3fc0b032(date, new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());
        let year = (0, $af14c9812fdceb33$export$c36e0ecb2d4fa69d)(date.era, date.year);
        return $4ae0260a69729f1d$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
      }
      function $4ae0260a69729f1d$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
        let date = /* @__PURE__ */ new Date();
        date.setUTCHours(hour, minute, second, millisecond);
        date.setUTCFullYear(year, month - 1, day);
        return date.getTime();
      }
      function $4ae0260a69729f1d$export$59c99f3515d3493f(ms, timeZone) {
        if (timeZone === "UTC")
          return 0;
        if (ms > 0 && timeZone === (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)())
          return new Date(ms).getTimezoneOffset() * -6e4;
        let { year, month, day, hour, minute, second } = $4ae0260a69729f1d$var$getTimeZoneParts(ms, timeZone);
        let utc = $4ae0260a69729f1d$var$epochFromParts(year, month, day, hour, minute, second, 0);
        return utc - Math.floor(ms / 1e3) * 1e3;
      }
      var $4ae0260a69729f1d$var$formattersByTimeZone = /* @__PURE__ */ new Map();
      function $4ae0260a69729f1d$var$getTimeZoneParts(ms, timeZone) {
        let formatter = $4ae0260a69729f1d$var$formattersByTimeZone.get(timeZone);
        if (!formatter) {
          formatter = new Intl.DateTimeFormat("en-US", {
            timeZone,
            hour12: false,
            era: "short",
            year: "numeric",
            month: "numeric",
            day: "numeric",
            hour: "numeric",
            minute: "numeric",
            second: "numeric"
          });
          $4ae0260a69729f1d$var$formattersByTimeZone.set(timeZone, formatter);
        }
        let parts = formatter.formatToParts(new Date(ms));
        let namedParts = {};
        for (let part of parts)
          if (part.type !== "literal")
            namedParts[part.type] = part.value;
        return {
          // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253
          year: namedParts.era === "BC" || namedParts.era === "B" ? -namedParts.year + 1 : +namedParts.year,
          month: +namedParts.month,
          day: +namedParts.day,
          hour: namedParts.hour === "24" ? 0 : +namedParts.hour,
          minute: +namedParts.minute,
          second: +namedParts.second
        };
      }
      var $4ae0260a69729f1d$var$DAYMILLIS = 864e5;
      function $4ae0260a69729f1d$export$136f38efe7caf549(date, timeZone) {
        let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date);
        let earlier = ms - $4ae0260a69729f1d$export$59c99f3515d3493f(ms - $4ae0260a69729f1d$var$DAYMILLIS, timeZone);
        let later = ms - $4ae0260a69729f1d$export$59c99f3515d3493f(ms + $4ae0260a69729f1d$var$DAYMILLIS, timeZone);
        return $4ae0260a69729f1d$var$getValidWallTimes(date, timeZone, earlier, later);
      }
      function $4ae0260a69729f1d$var$getValidWallTimes(date, timeZone, earlier, later) {
        let found = earlier === later ? [
          earlier
        ] : [
          earlier,
          later
        ];
        return found.filter((absolute) => $4ae0260a69729f1d$var$isValidWallTime(date, timeZone, absolute));
      }
      function $4ae0260a69729f1d$var$isValidWallTime(date, timeZone, absolute) {
        let parts = $4ae0260a69729f1d$var$getTimeZoneParts(absolute, timeZone);
        return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
      }
      function $4ae0260a69729f1d$export$5107c82f94518f5c(date, timeZone, disambiguation = "compatible") {
        let dateTime = $4ae0260a69729f1d$export$b21e0b124e224484(date);
        if (timeZone === "UTC")
          return $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(dateTime);
        if (timeZone === (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)() && disambiguation === "compatible") {
          dateTime = $4ae0260a69729f1d$export$b4a036af3fc0b032(dateTime, new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());
          let date2 = /* @__PURE__ */ new Date();
          let year = (0, $af14c9812fdceb33$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);
          date2.setFullYear(year, dateTime.month - 1, dateTime.day);
          date2.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
          return date2.getTime();
        }
        let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(dateTime);
        let offsetBefore = $4ae0260a69729f1d$export$59c99f3515d3493f(ms - $4ae0260a69729f1d$var$DAYMILLIS, timeZone);
        let offsetAfter = $4ae0260a69729f1d$export$59c99f3515d3493f(ms + $4ae0260a69729f1d$var$DAYMILLIS, timeZone);
        let valid = $4ae0260a69729f1d$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
        if (valid.length === 1)
          return valid[0];
        if (valid.length > 1)
          switch (disambiguation) {
            case "compatible":
            case "earlier":
              return valid[0];
            case "later":
              return valid[valid.length - 1];
            case "reject":
              throw new RangeError("Multiple possible absolute times found");
          }
        switch (disambiguation) {
          case "earlier":
            return Math.min(ms - offsetBefore, ms - offsetAfter);
          case "compatible":
          case "later":
            return Math.max(ms - offsetBefore, ms - offsetAfter);
          case "reject":
            throw new RangeError("No such absolute time found");
        }
      }
      function $4ae0260a69729f1d$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = "compatible") {
        return new Date($4ae0260a69729f1d$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
      }
      function $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone) {
        let offset = $4ae0260a69729f1d$export$59c99f3515d3493f(ms, timeZone);
        let date = new Date(ms + offset);
        let year = date.getUTCFullYear();
        let month = date.getUTCMonth() + 1;
        let day = date.getUTCDate();
        let hour = date.getUTCHours();
        let minute = date.getUTCMinutes();
        let second = date.getUTCSeconds();
        let millisecond = date.getUTCMilliseconds();
        return new (0, $625ad1e1f4c43bc1$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);
      }
      function $4ae0260a69729f1d$export$e57ff100d91bd4b9(date, timeZone) {
        return $4ae0260a69729f1d$export$1b96692a1ba042ac(date.getTime(), timeZone);
      }
      function $4ae0260a69729f1d$export$93522d1a439f3617(dateTime) {
        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
      }
      function $4ae0260a69729f1d$export$b21e0b124e224484(date, time) {
        let hour = 0, minute = 0, second = 0, millisecond = 0;
        if ("timeZone" in date)
          ({ hour, minute, second, millisecond } = date);
        else if ("hour" in date && !time)
          return date;
        if (time)
          ({ hour, minute, second, millisecond } = time);
        return new (0, $625ad1e1f4c43bc1$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
      }
      function $4ae0260a69729f1d$export$d33f79e3ffc3dc83(dateTime) {
        return new (0, $625ad1e1f4c43bc1$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
      }
      function $4ae0260a69729f1d$export$b4a036af3fc0b032(date, calendar) {
        if (date.calendar.identifier === calendar.identifier)
          return date;
        let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
        let copy = date.copy();
        copy.calendar = calendar;
        copy.era = calendarDate.era;
        copy.year = calendarDate.year;
        copy.month = calendarDate.month;
        copy.day = calendarDate.day;
        (0, $5c0571aa5b6fb5da$export$c4e2ecac49351ef2)(copy);
        return copy;
      }
      function $4ae0260a69729f1d$export$84c95a83c799e074(date, timeZone, disambiguation) {
        if (date instanceof (0, $625ad1e1f4c43bc1$export$d3b7288e7994edea)) {
          if (date.timeZone === timeZone)
            return date;
          return $4ae0260a69729f1d$export$538b00033cc11c75(date, timeZone);
        }
        let ms = $4ae0260a69729f1d$export$5107c82f94518f5c(date, timeZone, disambiguation);
        return $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone);
      }
      function $4ae0260a69729f1d$export$83aac07b4c37b25(date) {
        let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) - date.offset;
        return new Date(ms);
      }
      function $4ae0260a69729f1d$export$538b00033cc11c75(date, timeZone) {
        let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) - date.offset;
        return $4ae0260a69729f1d$export$b4a036af3fc0b032($4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
      }
      function $4ae0260a69729f1d$export$d9b67bc93c097491(date) {
        return $4ae0260a69729f1d$export$538b00033cc11c75(date, (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)());
      }
      var $5c0571aa5b6fb5da$var$ONE_HOUR = 36e5;
      function $5c0571aa5b6fb5da$export$e16d8520af44a096(date, duration) {
        let mutableDate = date.copy();
        let days = "hour" in mutableDate ? $5c0571aa5b6fb5da$var$addTimeFields(mutableDate, duration) : 0;
        $5c0571aa5b6fb5da$var$addYears(mutableDate, duration.years || 0);
        if (mutableDate.calendar.balanceYearMonth)
          mutableDate.calendar.balanceYearMonth(mutableDate, date);
        mutableDate.month += duration.months || 0;
        $5c0571aa5b6fb5da$var$balanceYearMonth(mutableDate);
        $5c0571aa5b6fb5da$var$constrainMonthDay(mutableDate);
        mutableDate.day += (duration.weeks || 0) * 7;
        mutableDate.day += duration.days || 0;
        mutableDate.day += days;
        $5c0571aa5b6fb5da$var$balanceDay(mutableDate);
        if (mutableDate.calendar.balanceDate)
          mutableDate.calendar.balanceDate(mutableDate);
        if (mutableDate.year < 1) {
          mutableDate.year = 1;
          mutableDate.month = 1;
          mutableDate.day = 1;
        }
        let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);
        if (mutableDate.year > maxYear) {
          var _mutableDate_calendar, _mutableDate_calendar_isInverseEra;
          let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);
          mutableDate.year = maxYear;
          mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);
          mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);
        }
        if (mutableDate.month < 1) {
          mutableDate.month = 1;
          mutableDate.day = 1;
        }
        let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);
        if (mutableDate.month > maxMonth) {
          mutableDate.month = maxMonth;
          mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);
        }
        mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));
        return mutableDate;
      }
      function $5c0571aa5b6fb5da$var$addYears(date, years) {
        var _date_calendar, _date_calendar_isInverseEra;
        if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date))
          years = -years;
        date.year += years;
      }
      function $5c0571aa5b6fb5da$var$balanceYearMonth(date) {
        while (date.month < 1) {
          $5c0571aa5b6fb5da$var$addYears(date, -1);
          date.month += date.calendar.getMonthsInYear(date);
        }
        let monthsInYear = 0;
        while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {
          date.month -= monthsInYear;
          $5c0571aa5b6fb5da$var$addYears(date, 1);
        }
      }
      function $5c0571aa5b6fb5da$var$balanceDay(date) {
        while (date.day < 1) {
          date.month--;
          $5c0571aa5b6fb5da$var$balanceYearMonth(date);
          date.day += date.calendar.getDaysInMonth(date);
        }
        while (date.day > date.calendar.getDaysInMonth(date)) {
          date.day -= date.calendar.getDaysInMonth(date);
          date.month++;
          $5c0571aa5b6fb5da$var$balanceYearMonth(date);
        }
      }
      function $5c0571aa5b6fb5da$var$constrainMonthDay(date) {
        date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
        date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
      }
      function $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(date) {
        if (date.calendar.constrainDate)
          date.calendar.constrainDate(date);
        date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
        $5c0571aa5b6fb5da$var$constrainMonthDay(date);
      }
      function $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration) {
        let inverseDuration = {};
        for (let key in duration)
          if (typeof duration[key] === "number")
            inverseDuration[key] = -duration[key];
        return inverseDuration;
      }
      function $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3(date, duration) {
        return $5c0571aa5b6fb5da$export$e16d8520af44a096(date, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));
      }
      function $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be(date, fields) {
        let mutableDate = date.copy();
        if (fields.era != null)
          mutableDate.era = fields.era;
        if (fields.year != null)
          mutableDate.year = fields.year;
        if (fields.month != null)
          mutableDate.month = fields.month;
        if (fields.day != null)
          mutableDate.day = fields.day;
        $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutableDate);
        return mutableDate;
      }
      function $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(value, fields) {
        let mutableValue = value.copy();
        if (fields.hour != null)
          mutableValue.hour = fields.hour;
        if (fields.minute != null)
          mutableValue.minute = fields.minute;
        if (fields.second != null)
          mutableValue.second = fields.second;
        if (fields.millisecond != null)
          mutableValue.millisecond = fields.millisecond;
        $5c0571aa5b6fb5da$export$7555de1e070510cb(mutableValue);
        return mutableValue;
      }
      function $5c0571aa5b6fb5da$var$balanceTime(time) {
        time.second += Math.floor(time.millisecond / 1e3);
        time.millisecond = $5c0571aa5b6fb5da$var$nonNegativeMod(time.millisecond, 1e3);
        time.minute += Math.floor(time.second / 60);
        time.second = $5c0571aa5b6fb5da$var$nonNegativeMod(time.second, 60);
        time.hour += Math.floor(time.minute / 60);
        time.minute = $5c0571aa5b6fb5da$var$nonNegativeMod(time.minute, 60);
        let days = Math.floor(time.hour / 24);
        time.hour = $5c0571aa5b6fb5da$var$nonNegativeMod(time.hour, 24);
        return days;
      }
      function $5c0571aa5b6fb5da$export$7555de1e070510cb(time) {
        time.millisecond = Math.max(0, Math.min(time.millisecond, 1e3));
        time.second = Math.max(0, Math.min(time.second, 59));
        time.minute = Math.max(0, Math.min(time.minute, 59));
        time.hour = Math.max(0, Math.min(time.hour, 23));
      }
      function $5c0571aa5b6fb5da$var$nonNegativeMod(a, b) {
        let result = a % b;
        if (result < 0)
          result += b;
        return result;
      }
      function $5c0571aa5b6fb5da$var$addTimeFields(time, duration) {
        time.hour += duration.hours || 0;
        time.minute += duration.minutes || 0;
        time.second += duration.seconds || 0;
        time.millisecond += duration.milliseconds || 0;
        return $5c0571aa5b6fb5da$var$balanceTime(time);
      }
      function $5c0571aa5b6fb5da$export$7ed87b6bc2506470(time, duration) {
        let res = time.copy();
        $5c0571aa5b6fb5da$var$addTimeFields(res, duration);
        return res;
      }
      function $5c0571aa5b6fb5da$export$fe34d3a381cd7501(time, duration) {
        return $5c0571aa5b6fb5da$export$7ed87b6bc2506470(time, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));
      }
      function $5c0571aa5b6fb5da$export$d52ced6badfb9a4c(value, field, amount, options) {
        let mutable = value.copy();
        switch (field) {
          case "era": {
            let eras = value.calendar.getEras();
            let eraIndex = eras.indexOf(value.era);
            if (eraIndex < 0)
              throw new Error("Invalid era: " + value.era);
            eraIndex = $5c0571aa5b6fb5da$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);
            mutable.era = eras[eraIndex];
            $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutable);
            break;
          }
          case "year":
            var _mutable_calendar, _mutable_calendar_isInverseEra;
            if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable))
              amount = -amount;
            mutable.year = $5c0571aa5b6fb5da$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);
            if (mutable.year === -Infinity)
              mutable.year = 1;
            if (mutable.calendar.balanceYearMonth)
              mutable.calendar.balanceYearMonth(mutable, value);
            break;
          case "month":
            mutable.month = $5c0571aa5b6fb5da$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);
            break;
          case "day":
            mutable.day = $5c0571aa5b6fb5da$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);
            break;
          default:
            throw new Error("Unsupported field " + field);
        }
        if (value.calendar.balanceDate)
          value.calendar.balanceDate(mutable);
        $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutable);
        return mutable;
      }
      function $5c0571aa5b6fb5da$export$dd02b3e0007dfe28(value, field, amount, options) {
        let mutable = value.copy();
        switch (field) {
          case "hour": {
            let hours = value.hour;
            let min = 0;
            let max = 23;
            if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
              let isPM = hours >= 12;
              min = isPM ? 12 : 0;
              max = isPM ? 23 : 11;
            }
            mutable.hour = $5c0571aa5b6fb5da$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);
            break;
          }
          case "minute":
            mutable.minute = $5c0571aa5b6fb5da$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
            break;
          case "second":
            mutable.second = $5c0571aa5b6fb5da$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
            break;
          case "millisecond":
            mutable.millisecond = $5c0571aa5b6fb5da$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);
            break;
          default:
            throw new Error("Unsupported field " + field);
        }
        return mutable;
      }
      function $5c0571aa5b6fb5da$var$cycleValue(value, amount, min, max, round = false) {
        if (round) {
          value += Math.sign(amount);
          if (value < min)
            value = max;
          let div = Math.abs(amount);
          if (amount > 0)
            value = Math.ceil(value / div) * div;
          else
            value = Math.floor(value / div) * div;
          if (value > max)
            value = min;
        } else {
          value += amount;
          if (value < min)
            value = max - (min - value - 1);
          else if (value > max)
            value = min + (value - max - 1);
        }
        return value;
      }
      function $5c0571aa5b6fb5da$export$96b1d28349274637(dateTime, duration) {
        let ms;
        if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {
          let res2 = $5c0571aa5b6fb5da$export$e16d8520af44a096((0, $4ae0260a69729f1d$export$b21e0b124e224484)(dateTime), {
            years: duration.years,
            months: duration.months,
            weeks: duration.weeks,
            days: duration.days
          });
          ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(res2, dateTime.timeZone);
        } else
          ms = (0, $4ae0260a69729f1d$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
        ms += duration.milliseconds || 0;
        ms += (duration.seconds || 0) * 1e3;
        ms += (duration.minutes || 0) * 6e4;
        ms += (duration.hours || 0) * 36e5;
        let res = (0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone);
        return (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(res, dateTime.calendar);
      }
      function $5c0571aa5b6fb5da$export$6814caac34ca03c7(dateTime, duration) {
        return $5c0571aa5b6fb5da$export$96b1d28349274637(dateTime, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));
      }
      function $5c0571aa5b6fb5da$export$9a297d111fc86b79(dateTime, field, amount, options) {
        switch (field) {
          case "hour": {
            let min = 0;
            let max = 23;
            if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
              let isPM = dateTime.hour >= 12;
              min = isPM ? 12 : 0;
              max = isPM ? 23 : 11;
            }
            let plainDateTime = (0, $4ae0260a69729f1d$export$b21e0b124e224484)(dateTime);
            let minDate = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)($5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(plainDateTime, {
              hour: min
            }), new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());
            let minAbsolute = [
              (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(minDate, dateTime.timeZone, "earlier"),
              (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(minDate, dateTime.timeZone, "later")
            ].filter((ms2) => (0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms2, dateTime.timeZone).day === minDate.day)[0];
            let maxDate = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)($5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(plainDateTime, {
              hour: max
            }), new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());
            let maxAbsolute = [
              (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, "earlier"),
              (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, "later")
            ].filter((ms2) => (0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms2, dateTime.timeZone).day === maxDate.day).pop();
            let ms = (0, $4ae0260a69729f1d$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
            let hours = Math.floor(ms / $5c0571aa5b6fb5da$var$ONE_HOUR);
            let remainder = ms % $5c0571aa5b6fb5da$var$ONE_HOUR;
            ms = $5c0571aa5b6fb5da$var$cycleValue(hours, amount, Math.floor(minAbsolute / $5c0571aa5b6fb5da$var$ONE_HOUR), Math.floor(maxAbsolute / $5c0571aa5b6fb5da$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $5c0571aa5b6fb5da$var$ONE_HOUR + remainder;
            return (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)((0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
          }
          case "minute":
          case "second":
          case "millisecond":
            return $5c0571aa5b6fb5da$export$dd02b3e0007dfe28(dateTime, field, amount, options);
          case "era":
          case "year":
          case "month":
          case "day": {
            let res = $5c0571aa5b6fb5da$export$d52ced6badfb9a4c((0, $4ae0260a69729f1d$export$b21e0b124e224484)(dateTime), field, amount, options);
            let ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(res, dateTime.timeZone);
            return (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)((0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
          }
          default:
            throw new Error("Unsupported field " + field);
        }
      }
      function $5c0571aa5b6fb5da$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
        let plainDateTime = (0, $4ae0260a69729f1d$export$b21e0b124e224484)(dateTime);
        let res = $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56($5c0571aa5b6fb5da$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);
        if (res.compare(plainDateTime) === 0)
          return dateTime;
        let ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);
        return (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)((0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
      }
      var $4c32e2d98e5a5134$var$TIME_RE = /^(\d{2})(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
      var $4c32e2d98e5a5134$var$DATE_RE = /^(\d{4})-(\d{2})-(\d{2})$/;
      var $4c32e2d98e5a5134$var$DATE_TIME_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
      var $4c32e2d98e5a5134$var$ZONED_DATE_TIME_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:([+-]\d{2})(?::?(\d{2}))?)?\[(.*?)\]$/;
      var $4c32e2d98e5a5134$var$ABSOLUTE_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:(?:([+-]\d{2})(?::?(\d{2}))?)|Z)$/;
      var $4c32e2d98e5a5134$var$DATE_TIME_DURATION_RE = new RegExp("^((?<negative>-)|\\+)?P((?<years>\\d*)Y)?((?<months>\\d*)M)?((?<weeks>\\d*)W)?((?<days>\\d*)D)?((?<time>T)((?<hours>\\d*[.,]?\\d{1,9})H)?((?<minutes>\\d*[.,]?\\d{1,9})M)?((?<seconds>\\d*[.,]?\\d{1,9})S)?)?$");
      var $4c32e2d98e5a5134$var$requiredDurationTimeGroups = [
        "hours",
        "minutes",
        "seconds"
      ];
      var $4c32e2d98e5a5134$var$requiredDurationGroups = [
        "years",
        "months",
        "weeks",
        "days",
        ...$4c32e2d98e5a5134$var$requiredDurationTimeGroups
      ];
      function $4c32e2d98e5a5134$export$c9698ec7f05a07e1(value) {
        let m = value.match($4c32e2d98e5a5134$var$TIME_RE);
        if (!m)
          throw new Error("Invalid ISO 8601 time string: " + value);
        return new (0, $625ad1e1f4c43bc1$export$680ea196effce5f)($4c32e2d98e5a5134$var$parseNumber(m[1], 0, 23), m[2] ? $4c32e2d98e5a5134$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $4c32e2d98e5a5134$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, Infinity) * 1e3 : 0);
      }
      function $4c32e2d98e5a5134$export$6b862160d295c8e(value) {
        let m = value.match($4c32e2d98e5a5134$var$DATE_RE);
        if (!m)
          throw new Error("Invalid ISO 8601 date string: " + value);
        let date = new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)($4c32e2d98e5a5134$var$parseNumber(m[1], 0, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1);
        date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
        return date;
      }
      function $4c32e2d98e5a5134$export$588937bcd60ade55(value) {
        let m = value.match($4c32e2d98e5a5134$var$DATE_TIME_RE);
        if (!m)
          throw new Error("Invalid ISO 8601 date time string: " + value);
        let date = new (0, $625ad1e1f4c43bc1$export$ca871e8dbb80966f)($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
        date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
        return date;
      }
      function $4c32e2d98e5a5134$export$fd7893f06e92a6a4(value, disambiguation) {
        let m = value.match($4c32e2d98e5a5134$var$ZONED_DATE_TIME_RE);
        if (!m)
          throw new Error("Invalid ISO 8601 date time string: " + value);
        let date = new (0, $625ad1e1f4c43bc1$export$d3b7288e7994edea)($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
        date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
        let plainDateTime = (0, $4ae0260a69729f1d$export$b21e0b124e224484)(date);
        let ms;
        if (m[8]) {
          var _m_;
          date.offset = $4c32e2d98e5a5134$var$parseNumber(m[8], -23, 23) * 36e5 + $4c32e2d98e5a5134$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : "0", 0, 59) * 6e4;
          ms = (0, $4ae0260a69729f1d$export$bd4fb2bc8bb06fb)(date) - date.offset;
          let absolutes = (0, $4ae0260a69729f1d$export$136f38efe7caf549)(plainDateTime, date.timeZone);
          if (!absolutes.includes(ms))
            throw new Error(`Offset ${$4c32e2d98e5a5134$var$offsetToString(date.offset)} is invalid for ${$4c32e2d98e5a5134$export$4223de14708adc63(date)} in ${date.timeZone}`);
        } else
          ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)((0, $4ae0260a69729f1d$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);
        return (0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, date.timeZone);
      }
      function $4c32e2d98e5a5134$export$5adfdab05168c219(value, timeZone) {
        let m = value.match($4c32e2d98e5a5134$var$ABSOLUTE_RE);
        if (!m)
          throw new Error("Invalid ISO 8601 date time string: " + value);
        let date = new (0, $625ad1e1f4c43bc1$export$d3b7288e7994edea)($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1e3 : 0);
        date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
        var _m_;
        if (m[8])
          date.offset = $4c32e2d98e5a5134$var$parseNumber(m[8], -23, 23) * 36e5 + $4c32e2d98e5a5134$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : "0", 0, 59) * 6e4;
        return (0, $4ae0260a69729f1d$export$538b00033cc11c75)(date, timeZone);
      }
      function $4c32e2d98e5a5134$export$8e384432362ed0f0(value) {
        return $4c32e2d98e5a5134$export$5adfdab05168c219(value, (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)());
      }
      function $4c32e2d98e5a5134$var$parseNumber(value, min, max) {
        let val = Number(value);
        if (val < min || val > max)
          throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);
        return val;
      }
      function $4c32e2d98e5a5134$export$f59dee82248f5ad4(time) {
        return `${String(time.hour).padStart(2, "0")}:${String(time.minute).padStart(2, "0")}:${String(time.second).padStart(2, "0")}${time.millisecond ? String(time.millisecond / 1e3).slice(1) : ""}`;
      }
      function $4c32e2d98e5a5134$export$60dfd74aa96791bd(date) {
        let gregorianDate = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(date, new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());
        return `${String(gregorianDate.year).padStart(4, "0")}-${String(gregorianDate.month).padStart(2, "0")}-${String(gregorianDate.day).padStart(2, "0")}`;
      }
      function $4c32e2d98e5a5134$export$4223de14708adc63(date) {
        return `${$4c32e2d98e5a5134$export$60dfd74aa96791bd(date)}T${$4c32e2d98e5a5134$export$f59dee82248f5ad4(date)}`;
      }
      function $4c32e2d98e5a5134$var$offsetToString(offset) {
        let sign = Math.sign(offset) < 0 ? "-" : "+";
        offset = Math.abs(offset);
        let offsetHours = Math.floor(offset / 36e5);
        let offsetMinutes = offset % 36e5 / 6e4;
        return `${sign}${String(offsetHours).padStart(2, "0")}:${String(offsetMinutes).padStart(2, "0")}`;
      }
      function $4c32e2d98e5a5134$export$bf79f1ebf4b18792(date) {
        return `${$4c32e2d98e5a5134$export$4223de14708adc63(date)}${$4c32e2d98e5a5134$var$offsetToString(date.offset)}[${date.timeZone}]`;
      }
      function $4c32e2d98e5a5134$export$ecae829bb3747ea6(value) {
        var _match_groups, _match_groups1, _match_groups2, _match_groups3, _match_groups4, _match_groups5, _match_groups6, _match_groups7, _match_groups8;
        const match = value.match($4c32e2d98e5a5134$var$DATE_TIME_DURATION_RE);
        if (!match)
          throw new Error(`Invalid ISO 8601 Duration string: ${value}`);
        const parseDurationGroup = (group, isNegative2, min, max) => {
          if (!group)
            return 0;
          try {
            const sign = isNegative2 ? -1 : 1;
            return sign * $4c32e2d98e5a5134$var$parseNumber(group.replace(",", "."), min, max);
          } catch (e) {
            throw new Error(`Invalid ISO 8601 Duration string: ${value}`);
          }
        };
        const isNegative = !!((_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups.negative);
        const hasRequiredGroups = $4c32e2d98e5a5134$var$requiredDurationGroups.some((group) => {
          var _match_groups9;
          return (_match_groups9 = match.groups) === null || _match_groups9 === void 0 ? void 0 : _match_groups9[group];
        });
        if (!hasRequiredGroups)
          throw new Error(`Invalid ISO 8601 Duration string: ${value}`);
        const durationStringIncludesTime = (_match_groups1 = match.groups) === null || _match_groups1 === void 0 ? void 0 : _match_groups1.time;
        if (durationStringIncludesTime) {
          const hasRequiredDurationTimeGroups = $4c32e2d98e5a5134$var$requiredDurationTimeGroups.some((group) => {
            var _match_groups9;
            return (_match_groups9 = match.groups) === null || _match_groups9 === void 0 ? void 0 : _match_groups9[group];
          });
          if (!hasRequiredDurationTimeGroups)
            throw new Error(`Invalid ISO 8601 Duration string: ${value}`);
        }
        const duration = {
          years: parseDurationGroup((_match_groups2 = match.groups) === null || _match_groups2 === void 0 ? void 0 : _match_groups2.years, isNegative, 0, 9999),
          months: parseDurationGroup((_match_groups3 = match.groups) === null || _match_groups3 === void 0 ? void 0 : _match_groups3.months, isNegative, 0, 12),
          weeks: parseDurationGroup((_match_groups4 = match.groups) === null || _match_groups4 === void 0 ? void 0 : _match_groups4.weeks, isNegative, 0, Infinity),
          days: parseDurationGroup((_match_groups5 = match.groups) === null || _match_groups5 === void 0 ? void 0 : _match_groups5.days, isNegative, 0, 31),
          hours: parseDurationGroup((_match_groups6 = match.groups) === null || _match_groups6 === void 0 ? void 0 : _match_groups6.hours, isNegative, 0, 23),
          minutes: parseDurationGroup((_match_groups7 = match.groups) === null || _match_groups7 === void 0 ? void 0 : _match_groups7.minutes, isNegative, 0, 59),
          seconds: parseDurationGroup((_match_groups8 = match.groups) === null || _match_groups8 === void 0 ? void 0 : _match_groups8.seconds, isNegative, 0, 59)
        };
        if (duration.hours % 1 !== 0 && (duration.minutes || duration.seconds))
          throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);
        if (duration.minutes % 1 !== 0 && duration.seconds)
          throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);
        return duration;
      }
      function $625ad1e1f4c43bc1$var$shiftArgs(args) {
        let calendar = typeof args[0] === "object" ? args.shift() : new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)();
        let era;
        if (typeof args[0] === "string")
          era = args.shift();
        else {
          let eras = calendar.getEras();
          era = eras[eras.length - 1];
        }
        let year = args.shift();
        let month = args.shift();
        let day = args.shift();
        return [
          calendar,
          era,
          year,
          month,
          day
        ];
      }
      var $625ad1e1f4c43bc1$var$_type = /* @__PURE__ */ new WeakMap();
      var $625ad1e1f4c43bc1$export$99faa760c7908e4f = class _$625ad1e1f4c43bc1$export$99faa760c7908e4f {
        /** Returns a copy of this date. */
        copy() {
          if (this.era)
            return new _$625ad1e1f4c43bc1$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);
          else
            return new _$625ad1e1f4c43bc1$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
        }
        /** Returns a new `CalendarDate` with the given duration added to it. */
        add(duration) {
          return (0, $5c0571aa5b6fb5da$export$e16d8520af44a096)(this, duration);
        }
        /** Returns a new `CalendarDate` with the given duration subtracted from it. */
        subtract(duration) {
          return (0, $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3)(this, duration);
        }
        /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */
        set(fields) {
          return (0, $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be)(this, fields);
        }
        /**
        * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
        * When the resulting value reaches the limits of the field, it wraps around.
        */
        cycle(field, amount, options) {
          return (0, $5c0571aa5b6fb5da$export$d52ced6badfb9a4c)(this, field, amount, options);
        }
        /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */
        toDate(timeZone) {
          return (0, $4ae0260a69729f1d$export$e67a095c620b86fe)(this, timeZone);
        }
        /** Converts the date to an ISO 8601 formatted string. */
        toString() {
          return (0, $4c32e2d98e5a5134$export$60dfd74aa96791bd)(this);
        }
        /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
        compare(b) {
          return (0, $1f0f7ebf1ae6c530$export$68781ddf31c0090f)(this, b);
        }
        constructor(...args) {
          (0, $kgI3C$swchelperscjs_class_private_field_initcjs._)(this, $625ad1e1f4c43bc1$var$_type, {
            writable: true,
            value: void 0
          });
          let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);
          this.calendar = calendar;
          this.era = era;
          this.year = year;
          this.month = month;
          this.day = day;
          (0, $5c0571aa5b6fb5da$export$c4e2ecac49351ef2)(this);
        }
      };
      var $625ad1e1f4c43bc1$var$_type1 = /* @__PURE__ */ new WeakMap();
      var $625ad1e1f4c43bc1$export$680ea196effce5f = class _$625ad1e1f4c43bc1$export$680ea196effce5f {
        /** Returns a copy of this time. */
        copy() {
          return new _$625ad1e1f4c43bc1$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
        }
        /** Returns a new `Time` with the given duration added to it. */
        add(duration) {
          return (0, $5c0571aa5b6fb5da$export$7ed87b6bc2506470)(this, duration);
        }
        /** Returns a new `Time` with the given duration subtracted from it. */
        subtract(duration) {
          return (0, $5c0571aa5b6fb5da$export$fe34d3a381cd7501)(this, duration);
        }
        /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */
        set(fields) {
          return (0, $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56)(this, fields);
        }
        /**
        * Returns a new `Time` with the given field adjusted by a specified amount.
        * When the resulting value reaches the limits of the field, it wraps around.
        */
        cycle(field, amount, options) {
          return (0, $5c0571aa5b6fb5da$export$dd02b3e0007dfe28)(this, field, amount, options);
        }
        /** Converts the time to an ISO 8601 formatted string. */
        toString() {
          return (0, $4c32e2d98e5a5134$export$f59dee82248f5ad4)(this);
        }
        /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */
        compare(b) {
          return (0, $1f0f7ebf1ae6c530$export$c19a80a9721b80f6)(this, b);
        }
        constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {
          (0, $kgI3C$swchelperscjs_class_private_field_initcjs._)(this, $625ad1e1f4c43bc1$var$_type1, {
            writable: true,
            value: void 0
          });
          this.hour = hour;
          this.minute = minute;
          this.second = second;
          this.millisecond = millisecond;
          (0, $5c0571aa5b6fb5da$export$7555de1e070510cb)(this);
        }
      };
      var $625ad1e1f4c43bc1$var$_type2 = /* @__PURE__ */ new WeakMap();
      var $625ad1e1f4c43bc1$export$ca871e8dbb80966f = class _$625ad1e1f4c43bc1$export$ca871e8dbb80966f {
        /** Returns a copy of this date. */
        copy() {
          if (this.era)
            return new _$625ad1e1f4c43bc1$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
          else
            return new _$625ad1e1f4c43bc1$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
        }
        /** Returns a new `CalendarDateTime` with the given duration added to it. */
        add(duration) {
          return (0, $5c0571aa5b6fb5da$export$e16d8520af44a096)(this, duration);
        }
        /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */
        subtract(duration) {
          return (0, $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3)(this, duration);
        }
        /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
        set(fields) {
          return (0, $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be)((0, $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56)(this, fields), fields);
        }
        /**
        * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
        * When the resulting value reaches the limits of the field, it wraps around.
        */
        cycle(field, amount, options) {
          switch (field) {
            case "era":
            case "year":
            case "month":
            case "day":
              return (0, $5c0571aa5b6fb5da$export$d52ced6badfb9a4c)(this, field, amount, options);
            default:
              return (0, $5c0571aa5b6fb5da$export$dd02b3e0007dfe28)(this, field, amount, options);
          }
        }
        /** Converts the date to a native JavaScript Date object in the given time zone. */
        toDate(timeZone, disambiguation) {
          return (0, $4ae0260a69729f1d$export$e67a095c620b86fe)(this, timeZone, disambiguation);
        }
        /** Converts the date to an ISO 8601 formatted string. */
        toString() {
          return (0, $4c32e2d98e5a5134$export$4223de14708adc63)(this);
        }
        /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
        compare(b) {
          let res = (0, $1f0f7ebf1ae6c530$export$68781ddf31c0090f)(this, b);
          if (res === 0)
            return (0, $1f0f7ebf1ae6c530$export$c19a80a9721b80f6)(this, (0, $4ae0260a69729f1d$export$b21e0b124e224484)(b));
          return res;
        }
        constructor(...args) {
          (0, $kgI3C$swchelperscjs_class_private_field_initcjs._)(this, $625ad1e1f4c43bc1$var$_type2, {
            writable: true,
            value: void 0
          });
          let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);
          this.calendar = calendar;
          this.era = era;
          this.year = year;
          this.month = month;
          this.day = day;
          this.hour = args.shift() || 0;
          this.minute = args.shift() || 0;
          this.second = args.shift() || 0;
          this.millisecond = args.shift() || 0;
          (0, $5c0571aa5b6fb5da$export$c4e2ecac49351ef2)(this);
        }
      };
      var $625ad1e1f4c43bc1$var$_type3 = /* @__PURE__ */ new WeakMap();
      var $625ad1e1f4c43bc1$export$d3b7288e7994edea = class _$625ad1e1f4c43bc1$export$d3b7288e7994edea {
        /** Returns a copy of this date. */
        copy() {
          if (this.era)
            return new _$625ad1e1f4c43bc1$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
          else
            return new _$625ad1e1f4c43bc1$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
        }
        /** Returns a new `ZonedDateTime` with the given duration added to it. */
        add(duration) {
          return (0, $5c0571aa5b6fb5da$export$96b1d28349274637)(this, duration);
        }
        /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */
        subtract(duration) {
          return (0, $5c0571aa5b6fb5da$export$6814caac34ca03c7)(this, duration);
        }
        /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */
        set(fields, disambiguation) {
          return (0, $5c0571aa5b6fb5da$export$31b5430eb18be4f8)(this, fields, disambiguation);
        }
        /**
        * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
        * When the resulting value reaches the limits of the field, it wraps around.
        */
        cycle(field, amount, options) {
          return (0, $5c0571aa5b6fb5da$export$9a297d111fc86b79)(this, field, amount, options);
        }
        /** Converts the date to a native JavaScript Date object. */
        toDate() {
          return (0, $4ae0260a69729f1d$export$83aac07b4c37b25)(this);
        }
        /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */
        toString() {
          return (0, $4c32e2d98e5a5134$export$bf79f1ebf4b18792)(this);
        }
        /** Converts the date to an ISO 8601 formatted string in UTC. */
        toAbsoluteString() {
          return this.toDate().toISOString();
        }
        /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */
        compare(b) {
          return this.toDate().getTime() - (0, $4ae0260a69729f1d$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();
        }
        constructor(...args) {
          (0, $kgI3C$swchelperscjs_class_private_field_initcjs._)(this, $625ad1e1f4c43bc1$var$_type3, {
            writable: true,
            value: void 0
          });
          let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);
          let timeZone = args.shift();
          let offset = args.shift();
          this.calendar = calendar;
          this.era = era;
          this.year = year;
          this.month = month;
          this.day = day;
          this.timeZone = timeZone;
          this.offset = offset;
          this.hour = args.shift() || 0;
          this.minute = args.shift() || 0;
          this.second = args.shift() || 0;
          this.millisecond = args.shift() || 0;
          (0, $5c0571aa5b6fb5da$export$c4e2ecac49351ef2)(this);
        }
      };
      var $b0ac0602ef646b2c$var$ERA_START_DATES = [
        [
          1868,
          9,
          8
        ],
        [
          1912,
          7,
          30
        ],
        [
          1926,
          12,
          25
        ],
        [
          1989,
          1,
          8
        ],
        [
          2019,
          5,
          1
        ]
      ];
      var $b0ac0602ef646b2c$var$ERA_END_DATES = [
        [
          1912,
          7,
          29
        ],
        [
          1926,
          12,
          24
        ],
        [
          1989,
          1,
          7
        ],
        [
          2019,
          4,
          30
        ]
      ];
      var $b0ac0602ef646b2c$var$ERA_ADDENDS = [
        1867,
        1911,
        1925,
        1988,
        2018
      ];
      var $b0ac0602ef646b2c$var$ERA_NAMES = [
        "meiji",
        "taisho",
        "showa",
        "heisei",
        "reiwa"
      ];
      function $b0ac0602ef646b2c$var$findEraFromGregorianDate(date) {
        const idx = $b0ac0602ef646b2c$var$ERA_START_DATES.findIndex(([year, month, day]) => {
          if (date.year < year)
            return true;
          if (date.year === year && date.month < month)
            return true;
          if (date.year === year && date.month === month && date.day < day)
            return true;
          return false;
        });
        if (idx === -1)
          return $b0ac0602ef646b2c$var$ERA_START_DATES.length - 1;
        if (idx === 0)
          return 0;
        return idx - 1;
      }
      function $b0ac0602ef646b2c$var$toGregorian(date) {
        let eraAddend = $b0ac0602ef646b2c$var$ERA_ADDENDS[$b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era)];
        if (!eraAddend)
          throw new Error("Unknown era: " + date.era);
        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);
      }
      var $b0ac0602ef646b2c$export$b746ab2b60cdffbf = class extends (0, $af14c9812fdceb33$export$80ee6245ec4f29ec) {
        fromJulianDay(jd) {
          let date = super.fromJulianDay(jd);
          let era = $b0ac0602ef646b2c$var$findEraFromGregorianDate(date);
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, $b0ac0602ef646b2c$var$ERA_NAMES[era], date.year - $b0ac0602ef646b2c$var$ERA_ADDENDS[era], date.month, date.day);
        }
        toJulianDay(date) {
          return super.toJulianDay($b0ac0602ef646b2c$var$toGregorian(date));
        }
        balanceDate(date) {
          let gregorianDate = $b0ac0602ef646b2c$var$toGregorian(date);
          let era = $b0ac0602ef646b2c$var$findEraFromGregorianDate(gregorianDate);
          if ($b0ac0602ef646b2c$var$ERA_NAMES[era] !== date.era) {
            date.era = $b0ac0602ef646b2c$var$ERA_NAMES[era];
            date.year = gregorianDate.year - $b0ac0602ef646b2c$var$ERA_ADDENDS[era];
          }
          this.constrainDate(date);
        }
        constrainDate(date) {
          let idx = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);
          let end = $b0ac0602ef646b2c$var$ERA_END_DATES[idx];
          if (end != null) {
            let [endYear, endMonth, endDay] = end;
            let maxYear = endYear - $b0ac0602ef646b2c$var$ERA_ADDENDS[idx];
            date.year = Math.max(1, Math.min(maxYear, date.year));
            if (date.year === maxYear) {
              date.month = Math.min(endMonth, date.month);
              if (date.month === endMonth)
                date.day = Math.min(endDay, date.day);
            }
          }
          if (date.year === 1 && idx >= 0) {
            let [, startMonth, startDay] = $b0ac0602ef646b2c$var$ERA_START_DATES[idx];
            date.month = Math.max(startMonth, date.month);
            if (date.month === startMonth)
              date.day = Math.max(startDay, date.day);
          }
        }
        getEras() {
          return $b0ac0602ef646b2c$var$ERA_NAMES;
        }
        getYearsInEra(date) {
          let era = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);
          let cur = $b0ac0602ef646b2c$var$ERA_START_DATES[era];
          let next = $b0ac0602ef646b2c$var$ERA_START_DATES[era + 1];
          if (next == null)
            return 9999 - cur[0] + 1;
          let years = next[0] - cur[0];
          if (date.month < next[1] || date.month === next[1] && date.day < next[2])
            years++;
          return years;
        }
        getDaysInMonth(date) {
          return super.getDaysInMonth($b0ac0602ef646b2c$var$toGregorian(date));
        }
        getMinimumMonthInYear(date) {
          let start = $b0ac0602ef646b2c$var$getMinimums(date);
          return start ? start[1] : 1;
        }
        getMinimumDayInMonth(date) {
          let start = $b0ac0602ef646b2c$var$getMinimums(date);
          return start && date.month === start[1] ? start[2] : 1;
        }
        constructor(...args) {
          super(...args);
          this.identifier = "japanese";
        }
      };
      function $b0ac0602ef646b2c$var$getMinimums(date) {
        if (date.year === 1) {
          let idx = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);
          return $b0ac0602ef646b2c$var$ERA_START_DATES[idx];
        }
      }
      var $561c4ef058278b74$var$BUDDHIST_ERA_START = -543;
      var $561c4ef058278b74$export$42d20a78301dee44 = class extends (0, $af14c9812fdceb33$export$80ee6245ec4f29ec) {
        fromJulianDay(jd) {
          let gregorianDate = super.fromJulianDay(jd);
          let year = (0, $af14c9812fdceb33$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, year - $561c4ef058278b74$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);
        }
        toJulianDay(date) {
          return super.toJulianDay($561c4ef058278b74$var$toGregorian(date));
        }
        getEras() {
          return [
            "BE"
          ];
        }
        getDaysInMonth(date) {
          return super.getDaysInMonth($561c4ef058278b74$var$toGregorian(date));
        }
        balanceDate() {
        }
        constructor(...args) {
          super(...args);
          this.identifier = "buddhist";
        }
      };
      function $561c4ef058278b74$var$toGregorian(date) {
        let [era, year] = (0, $af14c9812fdceb33$export$4475b7e617eb123c)(date.year + $561c4ef058278b74$var$BUDDHIST_ERA_START);
        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(era, year, date.month, date.day);
      }
      var $9cc5d3577ec40243$var$TAIWAN_ERA_START = 1911;
      function $9cc5d3577ec40243$var$gregorianYear(date) {
        return date.era === "minguo" ? date.year + $9cc5d3577ec40243$var$TAIWAN_ERA_START : 1 - date.year + $9cc5d3577ec40243$var$TAIWAN_ERA_START;
      }
      function $9cc5d3577ec40243$var$gregorianToTaiwan(year) {
        let y = year - $9cc5d3577ec40243$var$TAIWAN_ERA_START;
        if (y > 0)
          return [
            "minguo",
            y
          ];
        else
          return [
            "before_minguo",
            1 - y
          ];
      }
      var $9cc5d3577ec40243$export$65e01080afcb0799 = class extends (0, $af14c9812fdceb33$export$80ee6245ec4f29ec) {
        fromJulianDay(jd) {
          let date = super.fromJulianDay(jd);
          let extendedYear = (0, $af14c9812fdceb33$export$c36e0ecb2d4fa69d)(date.era, date.year);
          let [era, year] = $9cc5d3577ec40243$var$gregorianToTaiwan(extendedYear);
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, era, year, date.month, date.day);
        }
        toJulianDay(date) {
          return super.toJulianDay($9cc5d3577ec40243$var$toGregorian(date));
        }
        getEras() {
          return [
            "before_minguo",
            "minguo"
          ];
        }
        balanceDate(date) {
          let [era, year] = $9cc5d3577ec40243$var$gregorianToTaiwan($9cc5d3577ec40243$var$gregorianYear(date));
          date.era = era;
          date.year = year;
        }
        isInverseEra(date) {
          return date.era === "before_minguo";
        }
        getDaysInMonth(date) {
          return super.getDaysInMonth($9cc5d3577ec40243$var$toGregorian(date));
        }
        getYearsInEra(date) {
          return date.era === "before_minguo" ? 9999 : 9999 - $9cc5d3577ec40243$var$TAIWAN_ERA_START;
        }
        constructor(...args) {
          super(...args);
          this.identifier = "roc";
        }
      };
      function $9cc5d3577ec40243$var$toGregorian(date) {
        let [era, year] = (0, $af14c9812fdceb33$export$4475b7e617eb123c)($9cc5d3577ec40243$var$gregorianYear(date));
        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(era, year, date.month, date.day);
      }
      var $3c060181fc7249ae$var$PERSIAN_EPOCH = 1948321;
      function $3c060181fc7249ae$var$isLeapYear(year) {
        let y0 = year > 0 ? year - 474 : year - 473;
        let y1 = (0, $a5090d6430502238$export$842a2cf37af977e1)(y0, 2820) + 474;
        return (0, $a5090d6430502238$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;
      }
      function $3c060181fc7249ae$var$persianToJulianDay(year, month, day) {
        let y0 = year > 0 ? year - 474 : year - 473;
        let y1 = (0, $a5090d6430502238$export$842a2cf37af977e1)(y0, 2820) + 474;
        let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;
        return $3c060181fc7249ae$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;
      }
      var $3c060181fc7249ae$export$37fccdbfd14c5939 = class {
        fromJulianDay(jd) {
          let d0 = jd - $3c060181fc7249ae$var$persianToJulianDay(475, 1, 1);
          let n2820 = Math.floor(d0 / 1029983);
          let d1 = (0, $a5090d6430502238$export$842a2cf37af977e1)(d0, 1029983);
          let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);
          let year = 474 + 2820 * n2820 + y2820;
          if (year <= 0)
            year--;
          let yDay = jd - $3c060181fc7249ae$var$persianToJulianDay(year, 1, 1) + 1;
          let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);
          let day = jd - $3c060181fc7249ae$var$persianToJulianDay(year, month, 1) + 1;
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, year, month, day);
        }
        toJulianDay(date) {
          return $3c060181fc7249ae$var$persianToJulianDay(date.year, date.month, date.day);
        }
        getMonthsInYear() {
          return 12;
        }
        getDaysInMonth(date) {
          if (date.month <= 6)
            return 31;
          if (date.month <= 11)
            return 30;
          return $3c060181fc7249ae$var$isLeapYear(date.year) ? 30 : 29;
        }
        getEras() {
          return [
            "AP"
          ];
        }
        getYearsInEra() {
          return 9377;
        }
        constructor() {
          this.identifier = "persian";
        }
      };
      var $5f1dfa5c67609fe6$var$INDIAN_ERA_START = 78;
      var $5f1dfa5c67609fe6$var$INDIAN_YEAR_START = 80;
      var $5f1dfa5c67609fe6$export$39f31c639fa15726 = class extends (0, $af14c9812fdceb33$export$80ee6245ec4f29ec) {
        fromJulianDay(jd) {
          let date = super.fromJulianDay(jd);
          let indianYear = date.year - $5f1dfa5c67609fe6$var$INDIAN_ERA_START;
          let yDay = jd - (0, $af14c9812fdceb33$export$f297eb839006d339)(date.era, date.year, 1, 1);
          let leapMonth;
          if (yDay < $5f1dfa5c67609fe6$var$INDIAN_YEAR_START) {
            indianYear--;
            leapMonth = (0, $af14c9812fdceb33$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;
            yDay += leapMonth + 155 + 90 + 10;
          } else {
            leapMonth = (0, $af14c9812fdceb33$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;
            yDay -= $5f1dfa5c67609fe6$var$INDIAN_YEAR_START;
          }
          let indianMonth;
          let indianDay;
          if (yDay < leapMonth) {
            indianMonth = 1;
            indianDay = yDay + 1;
          } else {
            let mDay = yDay - leapMonth;
            if (mDay < 155) {
              indianMonth = Math.floor(mDay / 31) + 2;
              indianDay = mDay % 31 + 1;
            } else {
              mDay -= 155;
              indianMonth = Math.floor(mDay / 30) + 7;
              indianDay = mDay % 30 + 1;
            }
          }
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);
        }
        toJulianDay(date) {
          let extendedYear = date.year + $5f1dfa5c67609fe6$var$INDIAN_ERA_START;
          let [era, year] = (0, $af14c9812fdceb33$export$4475b7e617eb123c)(extendedYear);
          let leapMonth;
          let jd;
          if ((0, $af14c9812fdceb33$export$553d7fa8e3805fc0)(year)) {
            leapMonth = 31;
            jd = (0, $af14c9812fdceb33$export$f297eb839006d339)(era, year, 3, 21);
          } else {
            leapMonth = 30;
            jd = (0, $af14c9812fdceb33$export$f297eb839006d339)(era, year, 3, 22);
          }
          if (date.month === 1)
            return jd + date.day - 1;
          jd += leapMonth + Math.min(date.month - 2, 5) * 31;
          if (date.month >= 8)
            jd += (date.month - 7) * 30;
          jd += date.day - 1;
          return jd;
        }
        getDaysInMonth(date) {
          if (date.month === 1 && (0, $af14c9812fdceb33$export$553d7fa8e3805fc0)(date.year + $5f1dfa5c67609fe6$var$INDIAN_ERA_START))
            return 31;
          if (date.month >= 2 && date.month <= 6)
            return 31;
          return 30;
        }
        getYearsInEra() {
          return 9919;
        }
        getEras() {
          return [
            "saka"
          ];
        }
        balanceDate() {
        }
        constructor(...args) {
          super(...args);
          this.identifier = "indian";
        }
      };
      var $ecb2c4cc8c9aae25$var$CIVIL_EPOC = 1948440;
      var $ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC = 1948439;
      var $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START = 1300;
      var $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END = 1600;
      var $ecb2c4cc8c9aae25$var$UMALQURA_START_DAYS = 460322;
      function $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, month, day) {
        return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;
      }
      function $ecb2c4cc8c9aae25$var$julianDayToIslamic(calendar, epoch, jd) {
        let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);
        let month = Math.min(12, Math.ceil((jd - (29 + $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);
        let day = jd - $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, month, 1) + 1;
        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(calendar, year, month, day);
      }
      function $ecb2c4cc8c9aae25$var$isLeapYear(year) {
        return (14 + 11 * year) % 30 < 11;
      }
      var $ecb2c4cc8c9aae25$export$2066795aadd37bfc = class {
        fromJulianDay(jd) {
          return $ecb2c4cc8c9aae25$var$julianDayToIslamic(this, $ecb2c4cc8c9aae25$var$CIVIL_EPOC, jd);
        }
        toJulianDay(date) {
          return $ecb2c4cc8c9aae25$var$islamicToJulianDay($ecb2c4cc8c9aae25$var$CIVIL_EPOC, date.year, date.month, date.day);
        }
        getDaysInMonth(date) {
          let length = 29 + date.month % 2;
          if (date.month === 12 && $ecb2c4cc8c9aae25$var$isLeapYear(date.year))
            length++;
          return length;
        }
        getMonthsInYear() {
          return 12;
        }
        getDaysInYear(date) {
          return $ecb2c4cc8c9aae25$var$isLeapYear(date.year) ? 355 : 354;
        }
        getYearsInEra() {
          return 9665;
        }
        getEras() {
          return [
            "AH"
          ];
        }
        constructor() {
          this.identifier = "islamic-civil";
        }
      };
      var $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7 = class extends $ecb2c4cc8c9aae25$export$2066795aadd37bfc {
        fromJulianDay(jd) {
          return $ecb2c4cc8c9aae25$var$julianDayToIslamic(this, $ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC, jd);
        }
        toJulianDay(date) {
          return $ecb2c4cc8c9aae25$var$islamicToJulianDay($ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);
        }
        constructor(...args) {
          super(...args);
          this.identifier = "islamic-tbla";
        }
      };
      var $ecb2c4cc8c9aae25$var$UMALQURA_DATA = "qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=";
      var $ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH;
      var $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE;
      function $ecb2c4cc8c9aae25$var$umalquraYearStart(year) {
        return $ecb2c4cc8c9aae25$var$UMALQURA_START_DAYS + $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START];
      }
      function $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, month) {
        let idx = year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START;
        let mask = 1 << 11 - (month - 1);
        if (($ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0)
          return 29;
        else
          return 30;
      }
      function $ecb2c4cc8c9aae25$var$umalquraMonthStart(year, month) {
        let day = $ecb2c4cc8c9aae25$var$umalquraYearStart(year);
        for (let i = 1; i < month; i++)
          day += $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, i);
        return day;
      }
      function $ecb2c4cc8c9aae25$var$umalquraYearLength(year) {
        return $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year + 1 - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START] - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START];
      }
      var $ecb2c4cc8c9aae25$export$5baab4758c231076 = class extends $ecb2c4cc8c9aae25$export$2066795aadd37bfc {
        fromJulianDay(jd) {
          let days = jd - $ecb2c4cc8c9aae25$var$CIVIL_EPOC;
          let startDays = $ecb2c4cc8c9aae25$var$umalquraYearStart($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START);
          let endDays = $ecb2c4cc8c9aae25$var$umalquraYearStart($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END);
          if (days < startDays || days > endDays)
            return super.fromJulianDay(jd);
          else {
            let y = $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START - 1;
            let m = 1;
            let d = 1;
            while (d > 0) {
              y++;
              d = days - $ecb2c4cc8c9aae25$var$umalquraYearStart(y) + 1;
              let yearLength = $ecb2c4cc8c9aae25$var$umalquraYearLength(y);
              if (d === yearLength) {
                m = 12;
                break;
              } else if (d < yearLength) {
                let monthLength = $ecb2c4cc8c9aae25$var$umalquraMonthLength(y, m);
                m = 1;
                while (d > monthLength) {
                  d -= monthLength;
                  m++;
                  monthLength = $ecb2c4cc8c9aae25$var$umalquraMonthLength(y, m);
                }
                break;
              }
            }
            return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, y, m, days - $ecb2c4cc8c9aae25$var$umalquraMonthStart(y, m) + 1);
          }
        }
        toJulianDay(date) {
          if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END)
            return super.toJulianDay(date);
          return $ecb2c4cc8c9aae25$var$CIVIL_EPOC + $ecb2c4cc8c9aae25$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);
        }
        getDaysInMonth(date) {
          if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END)
            return super.getDaysInMonth(date);
          return $ecb2c4cc8c9aae25$var$umalquraMonthLength(date.year, date.month);
        }
        getDaysInYear(date) {
          if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END)
            return super.getDaysInYear(date);
          return $ecb2c4cc8c9aae25$var$umalquraYearLength(date.year);
        }
        constructor() {
          super();
          this.identifier = "islamic-umalqura";
          if (!$ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH)
            $ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($ecb2c4cc8c9aae25$var$UMALQURA_DATA), (c) => c.charCodeAt(0)).buffer);
          if (!$ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE) {
            $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START + 1);
            let yearStart = 0;
            for (let year = $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START; year <= $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END; year++) {
              $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START] = yearStart;
              for (let i = 1; i <= 12; i++)
                yearStart += $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, i);
            }
          }
        }
      };
      var $0f5324ee3bdd9396$var$HEBREW_EPOCH = 347997;
      var $0f5324ee3bdd9396$var$HOUR_PARTS = 1080;
      var $0f5324ee3bdd9396$var$DAY_PARTS = 24 * $0f5324ee3bdd9396$var$HOUR_PARTS;
      var $0f5324ee3bdd9396$var$MONTH_DAYS = 29;
      var $0f5324ee3bdd9396$var$MONTH_FRACT = 12 * $0f5324ee3bdd9396$var$HOUR_PARTS + 793;
      var $0f5324ee3bdd9396$var$MONTH_PARTS = $0f5324ee3bdd9396$var$MONTH_DAYS * $0f5324ee3bdd9396$var$DAY_PARTS + $0f5324ee3bdd9396$var$MONTH_FRACT;
      function $0f5324ee3bdd9396$var$isLeapYear(year) {
        return (0, $a5090d6430502238$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;
      }
      function $0f5324ee3bdd9396$var$hebrewDelay1(year) {
        let months = Math.floor((235 * year - 234) / 19);
        let parts = 12084 + 13753 * months;
        let day = months * 29 + Math.floor(parts / 25920);
        if ((0, $a5090d6430502238$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3)
          day += 1;
        return day;
      }
      function $0f5324ee3bdd9396$var$hebrewDelay2(year) {
        let last = $0f5324ee3bdd9396$var$hebrewDelay1(year - 1);
        let present = $0f5324ee3bdd9396$var$hebrewDelay1(year);
        let next = $0f5324ee3bdd9396$var$hebrewDelay1(year + 1);
        if (next - present === 356)
          return 2;
        if (present - last === 382)
          return 1;
        return 0;
      }
      function $0f5324ee3bdd9396$var$startOfYear(year) {
        return $0f5324ee3bdd9396$var$hebrewDelay1(year) + $0f5324ee3bdd9396$var$hebrewDelay2(year);
      }
      function $0f5324ee3bdd9396$var$getDaysInYear(year) {
        return $0f5324ee3bdd9396$var$startOfYear(year + 1) - $0f5324ee3bdd9396$var$startOfYear(year);
      }
      function $0f5324ee3bdd9396$var$getYearType(year) {
        let yearLength = $0f5324ee3bdd9396$var$getDaysInYear(year);
        if (yearLength > 380)
          yearLength -= 30;
        switch (yearLength) {
          case 353:
            return 0;
          case 354:
            return 1;
          case 355:
            return 2;
        }
      }
      function $0f5324ee3bdd9396$var$getDaysInMonth(year, month) {
        if (month >= 6 && !$0f5324ee3bdd9396$var$isLeapYear(year))
          month++;
        if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13)
          return 29;
        let yearType = $0f5324ee3bdd9396$var$getYearType(year);
        if (month === 2)
          return yearType === 2 ? 30 : 29;
        if (month === 3)
          return yearType === 0 ? 29 : 30;
        if (month === 6)
          return $0f5324ee3bdd9396$var$isLeapYear(year) ? 30 : 0;
        return 30;
      }
      var $0f5324ee3bdd9396$export$ca405048b8fb5af = class {
        fromJulianDay(jd) {
          let d = jd - $0f5324ee3bdd9396$var$HEBREW_EPOCH;
          let m = d * $0f5324ee3bdd9396$var$DAY_PARTS / $0f5324ee3bdd9396$var$MONTH_PARTS;
          let year = Math.floor((19 * m + 234) / 235) + 1;
          let ys = $0f5324ee3bdd9396$var$startOfYear(year);
          let dayOfYear = Math.floor(d - ys);
          while (dayOfYear < 1) {
            year--;
            ys = $0f5324ee3bdd9396$var$startOfYear(year);
            dayOfYear = Math.floor(d - ys);
          }
          let month = 1;
          let monthStart = 0;
          while (monthStart < dayOfYear) {
            monthStart += $0f5324ee3bdd9396$var$getDaysInMonth(year, month);
            month++;
          }
          month--;
          monthStart -= $0f5324ee3bdd9396$var$getDaysInMonth(year, month);
          let day = dayOfYear - monthStart;
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, year, month, day);
        }
        toJulianDay(date) {
          let jd = $0f5324ee3bdd9396$var$startOfYear(date.year);
          for (let month = 1; month < date.month; month++)
            jd += $0f5324ee3bdd9396$var$getDaysInMonth(date.year, month);
          return jd + date.day + $0f5324ee3bdd9396$var$HEBREW_EPOCH;
        }
        getDaysInMonth(date) {
          return $0f5324ee3bdd9396$var$getDaysInMonth(date.year, date.month);
        }
        getMonthsInYear(date) {
          return $0f5324ee3bdd9396$var$isLeapYear(date.year) ? 13 : 12;
        }
        getDaysInYear(date) {
          return $0f5324ee3bdd9396$var$getDaysInYear(date.year);
        }
        getYearsInEra() {
          return 9999;
        }
        getEras() {
          return [
            "AM"
          ];
        }
        balanceYearMonth(date, previousDate) {
          if (previousDate.year !== date.year) {
            if ($0f5324ee3bdd9396$var$isLeapYear(previousDate.year) && !$0f5324ee3bdd9396$var$isLeapYear(date.year) && previousDate.month > 6)
              date.month--;
            else if (!$0f5324ee3bdd9396$var$isLeapYear(previousDate.year) && $0f5324ee3bdd9396$var$isLeapYear(date.year) && previousDate.month > 6)
              date.month++;
          }
        }
        constructor() {
          this.identifier = "hebrew";
        }
      };
      var $4db04d1051af0f2f$var$ETHIOPIC_EPOCH = 1723856;
      var $4db04d1051af0f2f$var$COPTIC_EPOCH = 1824665;
      var $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA = 5500;
      function $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, month, day) {
        return epoch + 365 * year + Math.floor(year / 4) + 30 * (month - 1) + day - 1;
      }
      function $4db04d1051af0f2f$var$julianDayToCE(epoch, jd) {
        let year = Math.floor(4 * (jd - epoch) / 1461);
        let month = 1 + Math.floor((jd - $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);
        let day = jd + 1 - $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, month, 1);
        return [
          year,
          month,
          day
        ];
      }
      function $4db04d1051af0f2f$var$getLeapDay(year) {
        return Math.floor(year % 4 / 3);
      }
      function $4db04d1051af0f2f$var$getDaysInMonth(year, month) {
        if (month % 13 !== 0)
          return 30;
        else
          return $4db04d1051af0f2f$var$getLeapDay(year) + 5;
      }
      var $4db04d1051af0f2f$export$26ba6eab5e20cd7d = class {
        fromJulianDay(jd) {
          let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, jd);
          let era = "AM";
          if (year <= 0) {
            era = "AA";
            year += $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;
          }
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, era, year, month, day);
        }
        toJulianDay(date) {
          let year = date.year;
          if (date.era === "AA")
            year -= $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;
          return $4db04d1051af0f2f$var$ceToJulianDay($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, year, date.month, date.day);
        }
        getDaysInMonth(date) {
          return $4db04d1051af0f2f$var$getDaysInMonth(date.year, date.month);
        }
        getMonthsInYear() {
          return 13;
        }
        getDaysInYear(date) {
          return 365 + $4db04d1051af0f2f$var$getLeapDay(date.year);
        }
        getYearsInEra(date) {
          return date.era === "AA" ? 9999 : 9991;
        }
        getEras() {
          return [
            "AA",
            "AM"
          ];
        }
        constructor() {
          this.identifier = "ethiopic";
        }
      };
      var $4db04d1051af0f2f$export$d72e0c37005a4914 = class extends $4db04d1051af0f2f$export$26ba6eab5e20cd7d {
        fromJulianDay(jd) {
          let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, jd);
          year += $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, "AA", year, month, day);
        }
        getEras() {
          return [
            "AA"
          ];
        }
        getYearsInEra() {
          return 9999;
        }
        constructor(...args) {
          super(...args);
          this.identifier = "ethioaa";
        }
      };
      var $4db04d1051af0f2f$export$fe6243cbe1a4b7c1 = class extends $4db04d1051af0f2f$export$26ba6eab5e20cd7d {
        fromJulianDay(jd) {
          let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$COPTIC_EPOCH, jd);
          let era = "CE";
          if (year <= 0) {
            era = "BCE";
            year = 1 - year;
          }
          return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, era, year, month, day);
        }
        toJulianDay(date) {
          let year = date.year;
          if (date.era === "BCE")
            year = 1 - year;
          return $4db04d1051af0f2f$var$ceToJulianDay($4db04d1051af0f2f$var$COPTIC_EPOCH, year, date.month, date.day);
        }
        getDaysInMonth(date) {
          let year = date.year;
          if (date.era === "BCE")
            year = 1 - year;
          return $4db04d1051af0f2f$var$getDaysInMonth(year, date.month);
        }
        isInverseEra(date) {
          return date.era === "BCE";
        }
        balanceDate(date) {
          if (date.year <= 0) {
            date.era = date.era === "BCE" ? "CE" : "BCE";
            date.year = 1 - date.year;
          }
        }
        getEras() {
          return [
            "BCE",
            "CE"
          ];
        }
        getYearsInEra(date) {
          return date.era === "BCE" ? 9999 : 9715;
        }
        constructor(...args) {
          super(...args);
          this.identifier = "coptic";
        }
      };
      function $4922c0a5a69da0ba$export$dd0bbc9b26defe37(name) {
        switch (name) {
          case "buddhist":
            return new (0, $561c4ef058278b74$export$42d20a78301dee44)();
          case "ethiopic":
            return new (0, $4db04d1051af0f2f$export$26ba6eab5e20cd7d)();
          case "ethioaa":
            return new (0, $4db04d1051af0f2f$export$d72e0c37005a4914)();
          case "coptic":
            return new (0, $4db04d1051af0f2f$export$fe6243cbe1a4b7c1)();
          case "hebrew":
            return new (0, $0f5324ee3bdd9396$export$ca405048b8fb5af)();
          case "indian":
            return new (0, $5f1dfa5c67609fe6$export$39f31c639fa15726)();
          case "islamic-civil":
            return new (0, $ecb2c4cc8c9aae25$export$2066795aadd37bfc)();
          case "islamic-tbla":
            return new (0, $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7)();
          case "islamic-umalqura":
            return new (0, $ecb2c4cc8c9aae25$export$5baab4758c231076)();
          case "japanese":
            return new (0, $b0ac0602ef646b2c$export$b746ab2b60cdffbf)();
          case "persian":
            return new (0, $3c060181fc7249ae$export$37fccdbfd14c5939)();
          case "roc":
            return new (0, $9cc5d3577ec40243$export$65e01080afcb0799)();
          case "gregory":
          default:
            return new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)();
        }
      }
      var $8f23a04ae90a588b$var$formatterCache = /* @__PURE__ */ new Map();
      var $8f23a04ae90a588b$export$ad991b66133851cf = class {
        /** Formats a date as a string according to the locale and format options passed to the constructor. */
        format(value) {
          return this.formatter.format(value);
        }
        /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */
        formatToParts(value) {
          return this.formatter.formatToParts(value);
        }
        /** Formats a date range as a string. */
        formatRange(start, end) {
          if (typeof this.formatter.formatRange === "function")
            return this.formatter.formatRange(start, end);
          if (end < start)
            throw new RangeError("End date must be >= start date");
          return `${this.formatter.format(start)} \u2013 ${this.formatter.format(end)}`;
        }
        /** Formats a date range as an array of parts. */
        formatRangeToParts(start, end) {
          if (typeof this.formatter.formatRangeToParts === "function")
            return this.formatter.formatRangeToParts(start, end);
          if (end < start)
            throw new RangeError("End date must be >= start date");
          let startParts = this.formatter.formatToParts(start);
          let endParts = this.formatter.formatToParts(end);
          return [
            ...startParts.map((p) => __spreadProps(__spreadValues({}, p), {
              source: "startRange"
            })),
            {
              type: "literal",
              value: " \u2013 ",
              source: "shared"
            },
            ...endParts.map((p) => __spreadProps(__spreadValues({}, p), {
              source: "endRange"
            }))
          ];
        }
        /** Returns the resolved formatting options based on the values passed to the constructor. */
        resolvedOptions() {
          let resolvedOptions = this.formatter.resolvedOptions();
          if ($8f23a04ae90a588b$var$hasBuggyResolvedHourCycle()) {
            if (!this.resolvedHourCycle)
              this.resolvedHourCycle = $8f23a04ae90a588b$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
            resolvedOptions.hourCycle = this.resolvedHourCycle;
            resolvedOptions.hour12 = this.resolvedHourCycle === "h11" || this.resolvedHourCycle === "h12";
          }
          if (resolvedOptions.calendar === "ethiopic-amete-alem")
            resolvedOptions.calendar = "ethioaa";
          return resolvedOptions;
        }
        constructor(locale, options = {}) {
          this.formatter = $8f23a04ae90a588b$var$getCachedDateFormatter(locale, options);
          this.options = options;
        }
      };
      var $8f23a04ae90a588b$var$hour12Preferences = {
        true: {
          // Only Japanese uses the h11 style for 12 hour time. All others use h12.
          ja: "h11"
        },
        false: {}
      };
      function $8f23a04ae90a588b$var$getCachedDateFormatter(locale, options = {}) {
        if (typeof options.hour12 === "boolean" && $8f23a04ae90a588b$var$hasBuggyHour12Behavior()) {
          options = __spreadValues({}, options);
          let pref = $8f23a04ae90a588b$var$hour12Preferences[String(options.hour12)][locale.split("-")[0]];
          let defaultHourCycle = options.hour12 ? "h12" : "h23";
          options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
          delete options.hour12;
        }
        let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
        if ($8f23a04ae90a588b$var$formatterCache.has(cacheKey))
          return $8f23a04ae90a588b$var$formatterCache.get(cacheKey);
        let numberFormatter = new Intl.DateTimeFormat(locale, options);
        $8f23a04ae90a588b$var$formatterCache.set(cacheKey, numberFormatter);
        return numberFormatter;
      }
      var $8f23a04ae90a588b$var$_hasBuggyHour12Behavior = null;
      function $8f23a04ae90a588b$var$hasBuggyHour12Behavior() {
        if ($8f23a04ae90a588b$var$_hasBuggyHour12Behavior == null)
          $8f23a04ae90a588b$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat("en-US", {
            hour: "numeric",
            hour12: false
          }).format(new Date(2020, 2, 3, 0)) === "24";
        return $8f23a04ae90a588b$var$_hasBuggyHour12Behavior;
      }
      var $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle = null;
      function $8f23a04ae90a588b$var$hasBuggyResolvedHourCycle() {
        if ($8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle == null)
          $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat("fr", {
            hour: "numeric",
            hour12: false
          }).resolvedOptions().hourCycle === "h12";
        return $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle;
      }
      function $8f23a04ae90a588b$var$getResolvedHourCycle(locale, options) {
        if (!options.timeStyle && !options.hour)
          return void 0;
        locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, "");
        locale += (locale.includes("-u-") ? "" : "-u") + "-nu-latn";
        let formatter = $8f23a04ae90a588b$var$getCachedDateFormatter(locale, __spreadProps(__spreadValues({}, options), {
          timeZone: void 0
          // use local timezone
        }));
        let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p) => p.type === "hour").value, 10);
        let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p) => p.type === "hour").value, 10);
        if (min === 0 && max === 23)
          return "h23";
        if (min === 24 && max === 23)
          return "h24";
        if (min === 0 && max === 11)
          return "h11";
        if (min === 12 && max === 11)
          return "h12";
        throw new Error("Unexpected hour cycle result");
      }
    }
  });

  // node_modules/@react-stately/utils/dist/main.js
  var require_main6 = __commonJS({
    "node_modules/@react-stately/utils/dist/main.js"(exports, module) {
      var $kC0mY$react = require_react();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useControlledState", () => $8d8fdfab47455712$export$40bfa8c7b0832715);
      $parcel$export(module.exports, "clamp", () => $ac8e4d4816275668$export$7d15b64cf5a3a4c4);
      $parcel$export(module.exports, "snapValueToStep", () => $ac8e4d4816275668$export$cb6e0bb50bc19463);
      $parcel$export(module.exports, "toFixedNumber", () => $ac8e4d4816275668$export$b6268554fba451f);
      function $8d8fdfab47455712$export$40bfa8c7b0832715(value, defaultValue, onChange) {
        let [stateValue, setStateValue] = (0, $kC0mY$react.useState)(value || defaultValue);
        let isControlledRef = (0, $kC0mY$react.useRef)(value !== void 0);
        let isControlled = value !== void 0;
        (0, $kC0mY$react.useEffect)(() => {
          let wasControlled = isControlledRef.current;
          if (wasControlled !== isControlled)
            console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
          isControlledRef.current = isControlled;
        }, [
          isControlled
        ]);
        let currentValue = isControlled ? value : stateValue;
        let setValue = (0, $kC0mY$react.useCallback)((value2, ...args) => {
          let onChangeCaller = (value3, ...onChangeArgs) => {
            if (onChange) {
              if (!Object.is(currentValue, value3))
                onChange(value3, ...onChangeArgs);
            }
            if (!isControlled)
              currentValue = value3;
          };
          if (typeof value2 === "function") {
            console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
            let updateFunction = (oldValue, ...functionArgs) => {
              let interceptedValue = value2(isControlled ? currentValue : oldValue, ...functionArgs);
              onChangeCaller(interceptedValue, ...args);
              if (!isControlled)
                return interceptedValue;
              return oldValue;
            };
            setStateValue(updateFunction);
          } else {
            if (!isControlled)
              setStateValue(value2);
            onChangeCaller(value2, ...args);
          }
        }, [
          isControlled,
          currentValue,
          onChange
        ]);
        return [
          currentValue,
          setValue
        ];
      }
      function $ac8e4d4816275668$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
        let newValue = Math.min(Math.max(value, min), max);
        return newValue;
      }
      function $ac8e4d4816275668$export$cb6e0bb50bc19463(value, min, max, step) {
        min = Number(min);
        max = Number(max);
        let remainder = (value - (isNaN(min) ? 0 : min)) % step;
        let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;
        if (!isNaN(min)) {
          if (snappedValue < min)
            snappedValue = min;
          else if (!isNaN(max) && snappedValue > max)
            snappedValue = min + Math.floor((max - min) / step) * step;
        } else if (!isNaN(max) && snappedValue > max)
          snappedValue = Math.floor(max / step) * step;
        let string = step.toString();
        let index3 = string.indexOf(".");
        let precision = index3 >= 0 ? string.length - index3 : 0;
        if (precision > 0) {
          let pow = Math.pow(10, precision);
          snappedValue = Math.round(snappedValue * pow) / pow;
        }
        return snappedValue;
      }
      function $ac8e4d4816275668$export$b6268554fba451f(value, digits, base = 10) {
        const pow = Math.pow(base, digits);
        return Math.round(value * pow) / pow;
      }
    }
  });

  // node_modules/clsx/dist/clsx.js
  var require_clsx = __commonJS({
    "node_modules/clsx/dist/clsx.js"(exports, module) {
      function e(r2) {
        var o, t, f = "";
        if ("string" == typeof r2 || "number" == typeof r2)
          f += r2;
        else if ("object" == typeof r2)
          if (Array.isArray(r2))
            for (o = 0; o < r2.length; o++)
              r2[o] && (t = e(r2[o])) && (f && (f += " "), f += t);
          else
            for (o in r2)
              r2[o] && (f && (f += " "), f += o);
        return f;
      }
      function r() {
        for (var r2, o, t = 0, f = ""; t < arguments.length; )
          (r2 = arguments[t++]) && (o = e(r2)) && (f && (f += " "), f += o);
        return f;
      }
      module.exports = r, module.exports.clsx = r;
    }
  });

  // node_modules/@react-aria/utils/dist/main.js
  var require_main7 = __commonJS({
    "node_modules/@react-aria/utils/dist/main.js"(exports, module) {
      var $1Yh1N$reactstatelyutils = require_main6();
      var $1Yh1N$react = require_react();
      var $1Yh1N$reactariassr = require_main3();
      var $1Yh1N$clsx = require_clsx();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "useId", () => $8c61827343eed941$export$f680877a34711e37);
      $parcel$export(module.exports, "mergeIds", () => $8c61827343eed941$export$cd8c9cb68f842629);
      $parcel$export(module.exports, "useSlotId", () => $8c61827343eed941$export$b4cc09c592e8fdb8);
      $parcel$export(module.exports, "chain", () => $1e2191638e54f613$export$e08e3b67e392101e);
      $parcel$export(module.exports, "mergeProps", () => $f847cd1382ea7cd4$export$9d1611c77c2fe928);
      $parcel$export(module.exports, "mergeRefs", () => $f05dc24eafaeb7e2$export$c9058316764c140e);
      $parcel$export(module.exports, "filterDOMProps", () => $8d15d0e1797d4238$export$457c3d6518dd4c6f);
      $parcel$export(module.exports, "focusWithoutScrolling", () => $1117b6c0d4c4c164$export$de79e2c695e052f3);
      $parcel$export(module.exports, "getOffset", () => $16ec41ef3e36c19c$export$622cea445a1c5b7d);
      $parcel$export(module.exports, "openLink", () => $4068a0fae83b6d84$export$95185d699e05d4d7);
      $parcel$export(module.exports, "getSyntheticLinkProps", () => $4068a0fae83b6d84$export$51437d503373d223);
      $parcel$export(module.exports, "RouterProvider", () => $4068a0fae83b6d84$export$323e4fc2fa4753fb);
      $parcel$export(module.exports, "shouldClientNavigate", () => $4068a0fae83b6d84$export$efa8c9099e530235);
      $parcel$export(module.exports, "useRouter", () => $4068a0fae83b6d84$export$9a302a45f65d0572);
      $parcel$export(module.exports, "runAfterTransition", () => $e8117ebcab55be6a$export$24490316f764c430);
      $parcel$export(module.exports, "useDrag1D", () => $28ed3fb20343b78b$export$7bbed75feba39706);
      $parcel$export(module.exports, "useGlobalListeners", () => $4571ff54ac709100$export$4eaf04e54aa8eed6);
      $parcel$export(module.exports, "useLabels", () => $6ec78bde395c477d$export$d6875122194c7b44);
      $parcel$export(module.exports, "useObjectRef", () => $475b35fe72ba49b3$export$4338b53315abf666);
      $parcel$export(module.exports, "useUpdateEffect", () => $29293a6f5c75b37e$export$496315a1608d9602);
      $parcel$export(module.exports, "useLayoutEffect", () => $78605a5d7424e31b$export$e5c5a5f917a5871c);
      $parcel$export(module.exports, "useResizeObserver", () => $37733e1652f47193$export$683480f191c0e3ea);
      $parcel$export(module.exports, "useSyncRef", () => $6fc733991a9f977c$export$4debdb1a3f0fa79e);
      $parcel$export(module.exports, "getScrollParent", () => $d796e7157ac96470$export$cfa2225e87938781);
      $parcel$export(module.exports, "isScrollable", () => $d796e7157ac96470$export$2bb74740c4e19def);
      $parcel$export(module.exports, "useViewportSize", () => $8b24bab62f5c65ad$export$d699905dd57c73ca);
      $parcel$export(module.exports, "useDescription", () => $34da4502ea8120db$export$f8aeda7b10753fa1);
      $parcel$export(module.exports, "isMac", () => $9e20cff0af27e8cc$export$9ac100e40613ea10);
      $parcel$export(module.exports, "isIPhone", () => $9e20cff0af27e8cc$export$186c6964ca17d99);
      $parcel$export(module.exports, "isIPad", () => $9e20cff0af27e8cc$export$7bef049ce92e4224);
      $parcel$export(module.exports, "isIOS", () => $9e20cff0af27e8cc$export$fedb369cb70207f1);
      $parcel$export(module.exports, "isAppleDevice", () => $9e20cff0af27e8cc$export$e1865c3bedcd822b);
      $parcel$export(module.exports, "isWebKit", () => $9e20cff0af27e8cc$export$78551043582a6a98);
      $parcel$export(module.exports, "isChrome", () => $9e20cff0af27e8cc$export$6446a186d09e379e);
      $parcel$export(module.exports, "isAndroid", () => $9e20cff0af27e8cc$export$a11b0059900ceec8);
      $parcel$export(module.exports, "useEvent", () => $2a8c0bb1629926c8$export$90fc3a17d93f704c);
      $parcel$export(module.exports, "useValueEffect", () => $19a2307bfabafaf1$export$14d238f342723f25);
      $parcel$export(module.exports, "scrollIntoView", () => $449412113267a1fe$export$53a0910f038337bd);
      $parcel$export(module.exports, "scrollIntoViewport", () => $449412113267a1fe$export$c826860796309d1b);
      $parcel$export(module.exports, "clamp", () => $1Yh1N$reactstatelyutils.clamp);
      $parcel$export(module.exports, "snapValueToStep", () => $1Yh1N$reactstatelyutils.snapValueToStep);
      $parcel$export(module.exports, "isVirtualClick", () => $577e795361f19be9$export$60278871457622de);
      $parcel$export(module.exports, "isVirtualPointerEvent", () => $577e795361f19be9$export$29bf1b5f2c56cf63);
      $parcel$export(module.exports, "useEffectEvent", () => $1254e5bb94ac8761$export$7f54fc3180508a52);
      $parcel$export(module.exports, "useDeepMemo", () => $20e6e72fbf5dc81e$export$722debc0e56fea39);
      $parcel$export(module.exports, "useFormReset", () => $1f205e845604a423$export$5add1d006293d136);
      var $78605a5d7424e31b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? (0, $parcel$interopDefault($1Yh1N$react)).useLayoutEffect : () => {
      };
      function $1254e5bb94ac8761$export$7f54fc3180508a52(fn) {
        const ref = (0, $1Yh1N$react.useRef)(null);
        (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
          ref.current = fn;
        }, [
          fn
        ]);
        return (0, $1Yh1N$react.useCallback)((...args) => {
          const f = ref.current;
          return f(...args);
        }, []);
      }
      function $19a2307bfabafaf1$export$14d238f342723f25(defaultValue) {
        let [value, setValue] = (0, $1Yh1N$react.useState)(defaultValue);
        let effect = (0, $1Yh1N$react.useRef)(null);
        let nextRef = (0, $1254e5bb94ac8761$export$7f54fc3180508a52)(() => {
          let newValue = effect.current.next();
          if (newValue.done) {
            effect.current = null;
            return;
          }
          if (value === newValue.value)
            nextRef();
          else
            setValue(newValue.value);
        });
        (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
          if (effect.current)
            nextRef();
        });
        let queue = (0, $1254e5bb94ac8761$export$7f54fc3180508a52)((fn) => {
          effect.current = fn(value);
          nextRef();
        });
        return [
          value,
          queue
        ];
      }
      var $8c61827343eed941$var$idsUpdaterMap = /* @__PURE__ */ new Map();
      function $8c61827343eed941$export$f680877a34711e37(defaultId) {
        let [value, setValue] = (0, $1Yh1N$react.useState)(defaultId);
        let nextId = (0, $1Yh1N$react.useRef)(null);
        let res = (0, $1Yh1N$reactariassr.useSSRSafeId)(value);
        let updateValue = (0, $1Yh1N$react.useCallback)((val) => {
          nextId.current = val;
        }, []);
        $8c61827343eed941$var$idsUpdaterMap.set(res, updateValue);
        (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
          let r = res;
          return () => {
            $8c61827343eed941$var$idsUpdaterMap.delete(r);
          };
        }, [
          res
        ]);
        (0, $1Yh1N$react.useEffect)(() => {
          let newId = nextId.current;
          if (newId) {
            nextId.current = null;
            setValue(newId);
          }
        });
        return res;
      }
      function $8c61827343eed941$export$cd8c9cb68f842629(idA, idB) {
        if (idA === idB)
          return idA;
        let setIdA = $8c61827343eed941$var$idsUpdaterMap.get(idA);
        if (setIdA) {
          setIdA(idB);
          return idB;
        }
        let setIdB = $8c61827343eed941$var$idsUpdaterMap.get(idB);
        if (setIdB) {
          setIdB(idA);
          return idA;
        }
        return idB;
      }
      function $8c61827343eed941$export$b4cc09c592e8fdb8(depArray = []) {
        let id = $8c61827343eed941$export$f680877a34711e37();
        let [resolvedId, setResolvedId] = (0, $19a2307bfabafaf1$export$14d238f342723f25)(id);
        let updateId = (0, $1Yh1N$react.useCallback)(() => {
          setResolvedId(function* () {
            yield id;
            yield document.getElementById(id) ? id : void 0;
          });
        }, [
          id,
          setResolvedId
        ]);
        (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(updateId, [
          id,
          updateId,
          ...depArray
        ]);
        return resolvedId;
      }
      function $1e2191638e54f613$export$e08e3b67e392101e(...callbacks) {
        return (...args) => {
          for (let callback of callbacks)
            if (typeof callback === "function")
              callback(...args);
        };
      }
      function $f847cd1382ea7cd4$export$9d1611c77c2fe928(...args) {
        let result = __spreadValues({}, args[0]);
        for (let i = 1; i < args.length; i++) {
          let props = args[i];
          for (let key in props) {
            let a = result[key];
            let b = props[key];
            if (typeof a === "function" && typeof b === "function" && // This is a lot faster than a regex.
            key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
            65 && key.charCodeAt(2) <= /* 'Z' */
            90)
              result[key] = (0, $1e2191638e54f613$export$e08e3b67e392101e)(a, b);
            else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string")
              result[key] = (0, $parcel$interopDefault($1Yh1N$clsx))(a, b);
            else if (key === "id" && a && b)
              result.id = (0, $8c61827343eed941$export$cd8c9cb68f842629)(a, b);
            else
              result[key] = b !== void 0 ? b : a;
          }
        }
        return result;
      }
      function $f05dc24eafaeb7e2$export$c9058316764c140e(...refs) {
        if (refs.length === 1)
          return refs[0];
        return (value) => {
          for (let ref of refs) {
            if (typeof ref === "function")
              ref(value);
            else if (ref != null)
              ref.current = value;
          }
        };
      }
      var $8d15d0e1797d4238$var$DOMPropNames = /* @__PURE__ */ new Set([
        "id"
      ]);
      var $8d15d0e1797d4238$var$labelablePropNames = /* @__PURE__ */ new Set([
        "aria-label",
        "aria-labelledby",
        "aria-describedby",
        "aria-details"
      ]);
      var $8d15d0e1797d4238$var$linkPropNames = /* @__PURE__ */ new Set([
        "href",
        "target",
        "rel",
        "download",
        "ping",
        "referrerPolicy"
      ]);
      var $8d15d0e1797d4238$var$propRe = /^(data-.*)$/;
      function $8d15d0e1797d4238$export$457c3d6518dd4c6f(props, opts = {}) {
        let { labelable, isLink, propNames } = opts;
        let filteredProps = {};
        for (const prop in props)
          if (Object.prototype.hasOwnProperty.call(props, prop) && ($8d15d0e1797d4238$var$DOMPropNames.has(prop) || labelable && $8d15d0e1797d4238$var$labelablePropNames.has(prop) || isLink && $8d15d0e1797d4238$var$linkPropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $8d15d0e1797d4238$var$propRe.test(prop)))
            filteredProps[prop] = props[prop];
        return filteredProps;
      }
      function $1117b6c0d4c4c164$export$de79e2c695e052f3(element) {
        if ($1117b6c0d4c4c164$var$supportsPreventScroll())
          element.focus({
            preventScroll: true
          });
        else {
          let scrollableElements = $1117b6c0d4c4c164$var$getScrollableElements(element);
          element.focus();
          $1117b6c0d4c4c164$var$restoreScrollPosition(scrollableElements);
        }
      }
      var $1117b6c0d4c4c164$var$supportsPreventScrollCached = null;
      function $1117b6c0d4c4c164$var$supportsPreventScroll() {
        if ($1117b6c0d4c4c164$var$supportsPreventScrollCached == null) {
          $1117b6c0d4c4c164$var$supportsPreventScrollCached = false;
          try {
            var focusElem = document.createElement("div");
            focusElem.focus({
              get preventScroll() {
                $1117b6c0d4c4c164$var$supportsPreventScrollCached = true;
                return true;
              }
            });
          } catch (e) {
          }
        }
        return $1117b6c0d4c4c164$var$supportsPreventScrollCached;
      }
      function $1117b6c0d4c4c164$var$getScrollableElements(element) {
        var parent = element.parentNode;
        var scrollableElements = [];
        var rootScrollingElement = document.scrollingElement || document.documentElement;
        while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
          if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth)
            scrollableElements.push({
              element: parent,
              scrollTop: parent.scrollTop,
              scrollLeft: parent.scrollLeft
            });
          parent = parent.parentNode;
        }
        if (rootScrollingElement instanceof HTMLElement)
          scrollableElements.push({
            element: rootScrollingElement,
            scrollTop: rootScrollingElement.scrollTop,
            scrollLeft: rootScrollingElement.scrollLeft
          });
        return scrollableElements;
      }
      function $1117b6c0d4c4c164$var$restoreScrollPosition(scrollableElements) {
        for (let { element, scrollTop, scrollLeft } of scrollableElements) {
          element.scrollTop = scrollTop;
          element.scrollLeft = scrollLeft;
        }
      }
      function $16ec41ef3e36c19c$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
        let rect = element.getBoundingClientRect();
        if (reverse)
          return orientation === "horizontal" ? rect.right : rect.bottom;
        return orientation === "horizontal" ? rect.left : rect.top;
      }
      function $9e20cff0af27e8cc$var$testUserAgent(re) {
        var _window_navigator_userAgentData;
        if (typeof window === "undefined" || window.navigator == null)
          return false;
        return ((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand) => re.test(brand.brand))) || re.test(window.navigator.userAgent);
      }
      function $9e20cff0af27e8cc$var$testPlatform(re) {
        var _window_navigator_userAgentData;
        return typeof window !== "undefined" && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator["userAgentData"]) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
      }
      function $9e20cff0af27e8cc$export$9ac100e40613ea10() {
        return $9e20cff0af27e8cc$var$testPlatform(/^Mac/i);
      }
      function $9e20cff0af27e8cc$export$186c6964ca17d99() {
        return $9e20cff0af27e8cc$var$testPlatform(/^iPhone/i);
      }
      function $9e20cff0af27e8cc$export$7bef049ce92e4224() {
        return $9e20cff0af27e8cc$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
        $9e20cff0af27e8cc$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
      }
      function $9e20cff0af27e8cc$export$fedb369cb70207f1() {
        return $9e20cff0af27e8cc$export$186c6964ca17d99() || $9e20cff0af27e8cc$export$7bef049ce92e4224();
      }
      function $9e20cff0af27e8cc$export$e1865c3bedcd822b() {
        return $9e20cff0af27e8cc$export$9ac100e40613ea10() || $9e20cff0af27e8cc$export$fedb369cb70207f1();
      }
      function $9e20cff0af27e8cc$export$78551043582a6a98() {
        return $9e20cff0af27e8cc$var$testUserAgent(/AppleWebKit/i) && !$9e20cff0af27e8cc$export$6446a186d09e379e();
      }
      function $9e20cff0af27e8cc$export$6446a186d09e379e() {
        return $9e20cff0af27e8cc$var$testUserAgent(/Chrome/i);
      }
      function $9e20cff0af27e8cc$export$a11b0059900ceec8() {
        return $9e20cff0af27e8cc$var$testUserAgent(/Android/i);
      }
      function $9e20cff0af27e8cc$export$b7d78993b74f766d() {
        return $9e20cff0af27e8cc$var$testUserAgent(/Firefox/i);
      }
      var $4068a0fae83b6d84$var$RouterContext = /* @__PURE__ */ (0, $1Yh1N$react.createContext)({
        isNative: true,
        open: $4068a0fae83b6d84$var$openSyntheticLink
      });
      function $4068a0fae83b6d84$export$323e4fc2fa4753fb(props) {
        let { children, navigate } = props;
        let ctx = (0, $1Yh1N$react.useMemo)(() => ({
          isNative: false,
          open: (target, modifiers) => {
            $4068a0fae83b6d84$var$getSyntheticLink(target, (link) => {
              if ($4068a0fae83b6d84$export$efa8c9099e530235(link, modifiers))
                navigate(link.pathname + link.search + link.hash);
              else
                $4068a0fae83b6d84$export$95185d699e05d4d7(link, modifiers);
            });
          }
        }), [
          navigate
        ]);
        return /* @__PURE__ */ (0, $parcel$interopDefault($1Yh1N$react)).createElement($4068a0fae83b6d84$var$RouterContext.Provider, {
          value: ctx
        }, children);
      }
      function $4068a0fae83b6d84$export$9a302a45f65d0572() {
        return (0, $1Yh1N$react.useContext)($4068a0fae83b6d84$var$RouterContext);
      }
      function $4068a0fae83b6d84$export$efa8c9099e530235(link, modifiers) {
        let target = link.getAttribute("target");
        return (!target || target === "_self") && link.origin === location.origin && !link.hasAttribute("download") && !modifiers.metaKey && // open in new tab (mac)
        !modifiers.ctrlKey && // open in new tab (windows)
        !modifiers.altKey && // download
        !modifiers.shiftKey;
      }
      function $4068a0fae83b6d84$export$95185d699e05d4d7(target, modifiers, setOpening = true) {
        var _window_event, _window_event_type;
        let { metaKey, ctrlKey, altKey, shiftKey } = modifiers;
        if ((0, $9e20cff0af27e8cc$export$b7d78993b74f766d)() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith("key")) && target.target === "_blank") {
          if ((0, $9e20cff0af27e8cc$export$9ac100e40613ea10)())
            metaKey = true;
          else
            ctrlKey = true;
        }
        let event = (0, $9e20cff0af27e8cc$export$78551043582a6a98)() && (0, $9e20cff0af27e8cc$export$9ac100e40613ea10)() && !(0, $9e20cff0af27e8cc$export$7bef049ce92e4224)() && true ? new KeyboardEvent("keydown", {
          keyIdentifier: "Enter",
          metaKey,
          ctrlKey,
          altKey,
          shiftKey
        }) : new MouseEvent("click", {
          metaKey,
          ctrlKey,
          altKey,
          shiftKey,
          bubbles: true,
          cancelable: true
        });
        $4068a0fae83b6d84$export$95185d699e05d4d7.isOpening = setOpening;
        (0, $1117b6c0d4c4c164$export$de79e2c695e052f3)(target);
        target.dispatchEvent(event);
        $4068a0fae83b6d84$export$95185d699e05d4d7.isOpening = false;
      }
      $4068a0fae83b6d84$export$95185d699e05d4d7.isOpening = false;
      function $4068a0fae83b6d84$var$getSyntheticLink(target, open) {
        if (target instanceof HTMLAnchorElement)
          open(target);
        else if (target.hasAttribute("data-href")) {
          let link = document.createElement("a");
          link.href = target.getAttribute("data-href");
          if (target.hasAttribute("data-target"))
            link.target = target.getAttribute("data-target");
          if (target.hasAttribute("data-rel"))
            link.rel = target.getAttribute("data-rel");
          if (target.hasAttribute("data-download"))
            link.download = target.getAttribute("data-download");
          if (target.hasAttribute("data-ping"))
            link.ping = target.getAttribute("data-ping");
          if (target.hasAttribute("data-referrer-policy"))
            link.referrerPolicy = target.getAttribute("data-referrer-policy");
          target.appendChild(link);
          open(link);
          target.removeChild(link);
        }
      }
      function $4068a0fae83b6d84$var$openSyntheticLink(target, modifiers) {
        $4068a0fae83b6d84$var$getSyntheticLink(target, (link) => $4068a0fae83b6d84$export$95185d699e05d4d7(link, modifiers));
      }
      function $4068a0fae83b6d84$export$51437d503373d223(props) {
        return {
          "data-href": props.href,
          "data-target": props.target,
          "data-rel": props.rel,
          "data-download": props.download,
          "data-ping": props.ping,
          "data-referrer-policy": props.referrerPolicy
        };
      }
      var $e8117ebcab55be6a$var$transitionsByElement = /* @__PURE__ */ new Map();
      var $e8117ebcab55be6a$var$transitionCallbacks = /* @__PURE__ */ new Set();
      function $e8117ebcab55be6a$var$setupGlobalEvents() {
        if (typeof window === "undefined")
          return;
        let onTransitionStart = (e) => {
          let transitions = $e8117ebcab55be6a$var$transitionsByElement.get(e.target);
          if (!transitions) {
            transitions = /* @__PURE__ */ new Set();
            $e8117ebcab55be6a$var$transitionsByElement.set(e.target, transitions);
            e.target.addEventListener("transitioncancel", onTransitionEnd);
          }
          transitions.add(e.propertyName);
        };
        let onTransitionEnd = (e) => {
          let properties = $e8117ebcab55be6a$var$transitionsByElement.get(e.target);
          if (!properties)
            return;
          properties.delete(e.propertyName);
          if (properties.size === 0) {
            e.target.removeEventListener("transitioncancel", onTransitionEnd);
            $e8117ebcab55be6a$var$transitionsByElement.delete(e.target);
          }
          if ($e8117ebcab55be6a$var$transitionsByElement.size === 0) {
            for (let cb of $e8117ebcab55be6a$var$transitionCallbacks)
              cb();
            $e8117ebcab55be6a$var$transitionCallbacks.clear();
          }
        };
        document.body.addEventListener("transitionrun", onTransitionStart);
        document.body.addEventListener("transitionend", onTransitionEnd);
      }
      if (typeof document !== "undefined") {
        if (document.readyState !== "loading")
          $e8117ebcab55be6a$var$setupGlobalEvents();
        else
          document.addEventListener("DOMContentLoaded", $e8117ebcab55be6a$var$setupGlobalEvents);
      }
      function $e8117ebcab55be6a$export$24490316f764c430(fn) {
        requestAnimationFrame(() => {
          if ($e8117ebcab55be6a$var$transitionsByElement.size === 0)
            fn();
          else
            $e8117ebcab55be6a$var$transitionCallbacks.add(fn);
        });
      }
      var $28ed3fb20343b78b$var$draggingElements = [];
      function $28ed3fb20343b78b$export$7bbed75feba39706(props) {
        console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
        let { containerRef, reverse, orientation, onHover, onDrag, onPositionChange, onIncrement, onDecrement, onIncrementToMax, onDecrementToMin, onCollapseToggle } = props;
        let getPosition = (e) => orientation === "horizontal" ? e.clientX : e.clientY;
        let getNextOffset = (e) => {
          let containerOffset = (0, $16ec41ef3e36c19c$export$622cea445a1c5b7d)(containerRef.current, reverse, orientation);
          let mouseOffset = getPosition(e);
          let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
          return nextOffset;
        };
        let dragging = (0, $1Yh1N$react.useRef)(false);
        let prevPosition = (0, $1Yh1N$react.useRef)(0);
        let handlers = (0, $1Yh1N$react.useRef)({
          onPositionChange,
          onDrag
        });
        handlers.current.onDrag = onDrag;
        handlers.current.onPositionChange = onPositionChange;
        let onMouseDragged = (e) => {
          e.preventDefault();
          let nextOffset = getNextOffset(e);
          if (!dragging.current) {
            dragging.current = true;
            if (handlers.current.onDrag)
              handlers.current.onDrag(true);
            if (handlers.current.onPositionChange)
              handlers.current.onPositionChange(nextOffset);
          }
          if (prevPosition.current === nextOffset)
            return;
          prevPosition.current = nextOffset;
          if (onPositionChange)
            onPositionChange(nextOffset);
        };
        let onMouseUp = (e) => {
          const target = e.target;
          dragging.current = false;
          let nextOffset = getNextOffset(e);
          if (handlers.current.onDrag)
            handlers.current.onDrag(false);
          if (handlers.current.onPositionChange)
            handlers.current.onPositionChange(nextOffset);
          $28ed3fb20343b78b$var$draggingElements.splice($28ed3fb20343b78b$var$draggingElements.indexOf(target), 1);
          window.removeEventListener("mouseup", onMouseUp, false);
          window.removeEventListener("mousemove", onMouseDragged, false);
        };
        let onMouseDown = (e) => {
          const target = e.currentTarget;
          if ($28ed3fb20343b78b$var$draggingElements.some((elt) => target.contains(elt)))
            return;
          $28ed3fb20343b78b$var$draggingElements.push(target);
          window.addEventListener("mousemove", onMouseDragged, false);
          window.addEventListener("mouseup", onMouseUp, false);
        };
        let onMouseEnter = () => {
          if (onHover)
            onHover(true);
        };
        let onMouseOut = () => {
          if (onHover)
            onHover(false);
        };
        let onKeyDown = (e) => {
          switch (e.key) {
            case "Left":
            case "ArrowLeft":
              if (orientation === "horizontal") {
                e.preventDefault();
                if (onDecrement && !reverse)
                  onDecrement();
                else if (onIncrement && reverse)
                  onIncrement();
              }
              break;
            case "Up":
            case "ArrowUp":
              if (orientation === "vertical") {
                e.preventDefault();
                if (onDecrement && !reverse)
                  onDecrement();
                else if (onIncrement && reverse)
                  onIncrement();
              }
              break;
            case "Right":
            case "ArrowRight":
              if (orientation === "horizontal") {
                e.preventDefault();
                if (onIncrement && !reverse)
                  onIncrement();
                else if (onDecrement && reverse)
                  onDecrement();
              }
              break;
            case "Down":
            case "ArrowDown":
              if (orientation === "vertical") {
                e.preventDefault();
                if (onIncrement && !reverse)
                  onIncrement();
                else if (onDecrement && reverse)
                  onDecrement();
              }
              break;
            case "Home":
              e.preventDefault();
              if (onDecrementToMin)
                onDecrementToMin();
              break;
            case "End":
              e.preventDefault();
              if (onIncrementToMax)
                onIncrementToMax();
              break;
            case "Enter":
              e.preventDefault();
              if (onCollapseToggle)
                onCollapseToggle();
              break;
          }
        };
        return {
          onMouseDown,
          onMouseEnter,
          onMouseOut,
          onKeyDown
        };
      }
      function $4571ff54ac709100$export$4eaf04e54aa8eed6() {
        let globalListeners = (0, $1Yh1N$react.useRef)(/* @__PURE__ */ new Map());
        let addGlobalListener = (0, $1Yh1N$react.useCallback)((eventTarget, type, listener, options) => {
          let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
            globalListeners.current.delete(listener);
            listener(...args);
          } : listener;
          globalListeners.current.set(listener, {
            type,
            eventTarget,
            fn,
            options
          });
          eventTarget.addEventListener(type, listener, options);
        }, []);
        let removeGlobalListener = (0, $1Yh1N$react.useCallback)((eventTarget, type, listener, options) => {
          var _globalListeners_current_get;
          let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
          eventTarget.removeEventListener(type, fn, options);
          globalListeners.current.delete(listener);
        }, []);
        let removeAllGlobalListeners = (0, $1Yh1N$react.useCallback)(() => {
          globalListeners.current.forEach((value, key) => {
            removeGlobalListener(value.eventTarget, value.type, key, value.options);
          });
        }, [
          removeGlobalListener
        ]);
        (0, $1Yh1N$react.useEffect)(() => {
          return removeAllGlobalListeners;
        }, [
          removeAllGlobalListeners
        ]);
        return {
          addGlobalListener,
          removeGlobalListener,
          removeAllGlobalListeners
        };
      }
      function $6ec78bde395c477d$export$d6875122194c7b44(props, defaultLabel) {
        let { id, "aria-label": label, "aria-labelledby": labelledBy } = props;
        id = (0, $8c61827343eed941$export$f680877a34711e37)(id);
        if (labelledBy && label) {
          let ids = /* @__PURE__ */ new Set([
            id,
            ...labelledBy.trim().split(/\s+/)
          ]);
          labelledBy = [
            ...ids
          ].join(" ");
        } else if (labelledBy)
          labelledBy = labelledBy.trim().split(/\s+/).join(" ");
        if (!label && !labelledBy && defaultLabel)
          label = defaultLabel;
        return {
          id,
          "aria-label": label,
          "aria-labelledby": labelledBy
        };
      }
      function $475b35fe72ba49b3$export$4338b53315abf666(forwardedRef) {
        const objRef = (0, $1Yh1N$react.useRef)();
        return (0, $1Yh1N$react.useMemo)(() => ({
          get current() {
            return objRef.current;
          },
          set current(value) {
            objRef.current = value;
            if (typeof forwardedRef === "function")
              forwardedRef(value);
            else if (forwardedRef)
              forwardedRef.current = value;
          }
        }), [
          forwardedRef
        ]);
      }
      function $29293a6f5c75b37e$export$496315a1608d9602(effect, dependencies) {
        const isInitialMount = (0, $1Yh1N$react.useRef)(true);
        const lastDeps = (0, $1Yh1N$react.useRef)(null);
        (0, $1Yh1N$react.useEffect)(() => {
          isInitialMount.current = true;
          return () => {
            isInitialMount.current = false;
          };
        }, []);
        (0, $1Yh1N$react.useEffect)(() => {
          if (isInitialMount.current)
            isInitialMount.current = false;
          else if (!lastDeps.current || dependencies.some((dep, i) => !Object.is(dep, lastDeps[i])))
            effect();
          lastDeps.current = dependencies;
        }, dependencies);
      }
      function $37733e1652f47193$var$hasResizeObserver() {
        return typeof window.ResizeObserver !== "undefined";
      }
      function $37733e1652f47193$export$683480f191c0e3ea(options) {
        const { ref, onResize } = options;
        (0, $1Yh1N$react.useEffect)(() => {
          let element = ref === null || ref === void 0 ? void 0 : ref.current;
          if (!element)
            return;
          if (!$37733e1652f47193$var$hasResizeObserver()) {
            window.addEventListener("resize", onResize, false);
            return () => {
              window.removeEventListener("resize", onResize, false);
            };
          } else {
            const resizeObserverInstance = new window.ResizeObserver((entries) => {
              if (!entries.length)
                return;
              onResize();
            });
            resizeObserverInstance.observe(element);
            return () => {
              if (element)
                resizeObserverInstance.unobserve(element);
            };
          }
        }, [
          onResize,
          ref
        ]);
      }
      function $6fc733991a9f977c$export$4debdb1a3f0fa79e(context, ref) {
        (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
          if (context && context.ref && ref) {
            context.ref.current = ref.current;
            return () => {
              context.ref.current = null;
            };
          }
        });
      }
      function $d796e7157ac96470$export$cfa2225e87938781(node) {
        if ($d796e7157ac96470$export$2bb74740c4e19def(node))
          node = node.parentElement;
        while (node && !$d796e7157ac96470$export$2bb74740c4e19def(node))
          node = node.parentElement;
        return node || document.scrollingElement || document.documentElement;
      }
      function $d796e7157ac96470$export$2bb74740c4e19def(node) {
        let style = window.getComputedStyle(node);
        return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
      }
      var $8b24bab62f5c65ad$var$visualViewport = typeof document !== "undefined" && window.visualViewport;
      function $8b24bab62f5c65ad$export$d699905dd57c73ca() {
        let isSSR = (0, $1Yh1N$reactariassr.useIsSSR)();
        let [size, setSize] = (0, $1Yh1N$react.useState)(() => isSSR ? {
          width: 0,
          height: 0
        } : $8b24bab62f5c65ad$var$getViewportSize());
        (0, $1Yh1N$react.useEffect)(() => {
          let onResize = () => {
            setSize((size2) => {
              let newSize = $8b24bab62f5c65ad$var$getViewportSize();
              if (newSize.width === size2.width && newSize.height === size2.height)
                return size2;
              return newSize;
            });
          };
          if (!$8b24bab62f5c65ad$var$visualViewport)
            window.addEventListener("resize", onResize);
          else
            $8b24bab62f5c65ad$var$visualViewport.addEventListener("resize", onResize);
          return () => {
            if (!$8b24bab62f5c65ad$var$visualViewport)
              window.removeEventListener("resize", onResize);
            else
              $8b24bab62f5c65ad$var$visualViewport.removeEventListener("resize", onResize);
          };
        }, []);
        return size;
      }
      function $8b24bab62f5c65ad$var$getViewportSize() {
        return {
          width: ($8b24bab62f5c65ad$var$visualViewport === null || $8b24bab62f5c65ad$var$visualViewport === void 0 ? void 0 : $8b24bab62f5c65ad$var$visualViewport.width) || window.innerWidth,
          height: ($8b24bab62f5c65ad$var$visualViewport === null || $8b24bab62f5c65ad$var$visualViewport === void 0 ? void 0 : $8b24bab62f5c65ad$var$visualViewport.height) || window.innerHeight
        };
      }
      var $34da4502ea8120db$var$descriptionId = 0;
      var $34da4502ea8120db$var$descriptionNodes = /* @__PURE__ */ new Map();
      function $34da4502ea8120db$export$f8aeda7b10753fa1(description) {
        let [id, setId] = (0, $1Yh1N$react.useState)(void 0);
        (0, $78605a5d7424e31b$export$e5c5a5f917a5871c)(() => {
          if (!description)
            return;
          let desc = $34da4502ea8120db$var$descriptionNodes.get(description);
          if (!desc) {
            let id2 = `react-aria-description-${$34da4502ea8120db$var$descriptionId++}`;
            setId(id2);
            let node = document.createElement("div");
            node.id = id2;
            node.style.display = "none";
            node.textContent = description;
            document.body.appendChild(node);
            desc = {
              refCount: 0,
              element: node
            };
            $34da4502ea8120db$var$descriptionNodes.set(description, desc);
          } else
            setId(desc.element.id);
          desc.refCount++;
          return () => {
            if (--desc.refCount === 0) {
              desc.element.remove();
              $34da4502ea8120db$var$descriptionNodes.delete(description);
            }
          };
        }, [
          description
        ]);
        return {
          "aria-describedby": description ? id : void 0
        };
      }
      function $2a8c0bb1629926c8$export$90fc3a17d93f704c(ref, event, handler, options) {
        let handleEvent = (0, $1254e5bb94ac8761$export$7f54fc3180508a52)(handler);
        let isDisabled = handler == null;
        (0, $1Yh1N$react.useEffect)(() => {
          if (isDisabled)
            return;
          let element = ref.current;
          element.addEventListener(event, handleEvent, options);
          return () => {
            element.removeEventListener(event, handleEvent, options);
          };
        }, [
          ref,
          event,
          options,
          isDisabled,
          handleEvent
        ]);
      }
      function $449412113267a1fe$export$53a0910f038337bd(scrollView, element) {
        let offsetX = $449412113267a1fe$var$relativeOffset(scrollView, element, "left");
        let offsetY = $449412113267a1fe$var$relativeOffset(scrollView, element, "top");
        let width = element.offsetWidth;
        let height = element.offsetHeight;
        let x = scrollView.scrollLeft;
        let y = scrollView.scrollTop;
        let { borderTopWidth, borderLeftWidth } = getComputedStyle(scrollView);
        let borderAdjustedX = scrollView.scrollLeft + parseInt(borderLeftWidth, 10);
        let borderAdjustedY = scrollView.scrollTop + parseInt(borderTopWidth, 10);
        let maxX = borderAdjustedX + scrollView.clientWidth;
        let maxY = borderAdjustedY + scrollView.clientHeight;
        if (offsetX <= x)
          x = offsetX - parseInt(borderLeftWidth, 10);
        else if (offsetX + width > maxX)
          x += offsetX + width - maxX;
        if (offsetY <= borderAdjustedY)
          y = offsetY - parseInt(borderTopWidth, 10);
        else if (offsetY + height > maxY)
          y += offsetY + height - maxY;
        scrollView.scrollLeft = x;
        scrollView.scrollTop = y;
      }
      function $449412113267a1fe$var$relativeOffset(ancestor, child, axis) {
        const prop = axis === "left" ? "offsetLeft" : "offsetTop";
        let sum = 0;
        while (child.offsetParent) {
          sum += child[prop];
          if (child.offsetParent === ancestor)
            break;
          else if (child.offsetParent.contains(ancestor)) {
            sum -= ancestor[prop];
            break;
          }
          child = child.offsetParent;
        }
        return sum;
      }
      function $449412113267a1fe$export$c826860796309d1b(targetElement, opts) {
        if (document.contains(targetElement)) {
          let root = document.scrollingElement || document.documentElement;
          let isScrollPrevented = window.getComputedStyle(root).overflow === "hidden";
          if (!isScrollPrevented) {
            var _targetElement_scrollIntoView;
            let { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();
            targetElement === null || targetElement === void 0 ? void 0 : (_targetElement_scrollIntoView = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView === void 0 ? void 0 : _targetElement_scrollIntoView.call(targetElement, {
              block: "nearest"
            });
            let { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();
            if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {
              var _opts_containingElement, _opts_containingElement_scrollIntoView, _targetElement_scrollIntoView1;
              opts === null || opts === void 0 ? void 0 : (_opts_containingElement = opts.containingElement) === null || _opts_containingElement === void 0 ? void 0 : (_opts_containingElement_scrollIntoView = _opts_containingElement.scrollIntoView) === null || _opts_containingElement_scrollIntoView === void 0 ? void 0 : _opts_containingElement_scrollIntoView.call(_opts_containingElement, {
                block: "center",
                inline: "center"
              });
              (_targetElement_scrollIntoView1 = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView1 === void 0 ? void 0 : _targetElement_scrollIntoView1.call(targetElement, {
                block: "nearest"
              });
            }
          } else {
            let scrollParent = (0, $d796e7157ac96470$export$cfa2225e87938781)(targetElement);
            while (targetElement && scrollParent && targetElement !== root && scrollParent !== root) {
              $449412113267a1fe$export$53a0910f038337bd(scrollParent, targetElement);
              targetElement = scrollParent;
              scrollParent = (0, $d796e7157ac96470$export$cfa2225e87938781)(targetElement);
            }
          }
        }
      }
      function $577e795361f19be9$export$60278871457622de(event) {
        if (event.mozInputSource === 0 && event.isTrusted)
          return true;
        if ((0, $9e20cff0af27e8cc$export$a11b0059900ceec8)() && event.pointerType)
          return event.type === "click" && event.buttons === 1;
        return event.detail === 0 && !event.pointerType;
      }
      function $577e795361f19be9$export$29bf1b5f2c56cf63(event) {
        return !(0, $9e20cff0af27e8cc$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
      }
      function $20e6e72fbf5dc81e$export$722debc0e56fea39(value, isEqual) {
        let lastValue = (0, $1Yh1N$react.useRef)(null);
        if (value && lastValue.current && isEqual(value, lastValue.current))
          value = lastValue.current;
        lastValue.current = value;
        return value;
      }
      function $1f205e845604a423$export$5add1d006293d136(ref, initialValue, onReset) {
        let resetValue = (0, $1Yh1N$react.useRef)(initialValue);
        let handleReset = (0, $1254e5bb94ac8761$export$7f54fc3180508a52)(() => {
          if (onReset)
            onReset(resetValue.current);
        });
        (0, $1Yh1N$react.useEffect)(() => {
          var _ref_current;
          let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
          form === null || form === void 0 ? void 0 : form.addEventListener("reset", handleReset);
          return () => {
            form === null || form === void 0 ? void 0 : form.removeEventListener("reset", handleReset);
          };
        }, [
          ref,
          handleReset
        ]);
      }
    }
  });

  // node_modules/@internationalized/number/dist/main.js
  var require_main8 = __commonJS({
    "node_modules/@internationalized/number/dist/main.js"(exports, module) {
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "NumberFormatter", () => $0c1d5654b62fc485$export$cc77c4ff7e8673c5);
      $parcel$export(module.exports, "NumberParser", () => $d68f3f4c684426c6$export$cd11ab140839f11d);
      var $0c1d5654b62fc485$var$formatterCache = /* @__PURE__ */ new Map();
      var $0c1d5654b62fc485$var$supportsSignDisplay = false;
      try {
        $0c1d5654b62fc485$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
          signDisplay: "exceptZero"
        }).resolvedOptions().signDisplay === "exceptZero";
      } catch (e) {
      }
      var $0c1d5654b62fc485$var$supportsUnit = false;
      try {
        $0c1d5654b62fc485$var$supportsUnit = new Intl.NumberFormat("de-DE", {
          style: "unit",
          unit: "degree"
        }).resolvedOptions().style === "unit";
      } catch (e) {
      }
      var $0c1d5654b62fc485$var$UNITS = {
        degree: {
          narrow: {
            default: "\xB0",
            "ja-JP": " \u5EA6",
            "zh-TW": "\u5EA6",
            "sl-SI": " \xB0"
          }
        }
      };
      var $0c1d5654b62fc485$export$cc77c4ff7e8673c5 = class {
        /** Formats a number value as a string, according to the locale and options provided to the constructor. */
        format(value) {
          let res = "";
          if (!$0c1d5654b62fc485$var$supportsSignDisplay && this.options.signDisplay != null)
            res = $0c1d5654b62fc485$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
          else
            res = this.numberFormatter.format(value);
          if (this.options.style === "unit" && !$0c1d5654b62fc485$var$supportsUnit) {
            var _UNITS_unit;
            let { unit, unitDisplay = "short", locale } = this.resolvedOptions();
            let values = (_UNITS_unit = $0c1d5654b62fc485$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];
            res += values[locale] || values.default;
          }
          return res;
        }
        /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */
        formatToParts(value) {
          return this.numberFormatter.formatToParts(value);
        }
        /** Formats a number range as a string. */
        formatRange(start, end) {
          if (typeof this.numberFormatter.formatRange === "function")
            return this.numberFormatter.formatRange(start, end);
          if (end < start)
            throw new RangeError("End date must be >= start date");
          return `${this.format(start)} \u2013 ${this.format(end)}`;
        }
        /** Formats a number range as an array of parts. */
        formatRangeToParts(start, end) {
          if (typeof this.numberFormatter.formatRangeToParts === "function")
            return this.numberFormatter.formatRangeToParts(start, end);
          if (end < start)
            throw new RangeError("End date must be >= start date");
          let startParts = this.numberFormatter.formatToParts(start);
          let endParts = this.numberFormatter.formatToParts(end);
          return [
            ...startParts.map((p) => __spreadProps(__spreadValues({}, p), {
              source: "startRange"
            })),
            {
              type: "literal",
              value: " \u2013 ",
              source: "shared"
            },
            ...endParts.map((p) => __spreadProps(__spreadValues({}, p), {
              source: "endRange"
            }))
          ];
        }
        /** Returns the resolved formatting options based on the values passed to the constructor. */
        resolvedOptions() {
          let options = this.numberFormatter.resolvedOptions();
          if (!$0c1d5654b62fc485$var$supportsSignDisplay && this.options.signDisplay != null)
            options = __spreadProps(__spreadValues({}, options), {
              signDisplay: this.options.signDisplay
            });
          if (!$0c1d5654b62fc485$var$supportsUnit && this.options.style === "unit")
            options = __spreadProps(__spreadValues({}, options), {
              style: "unit",
              unit: this.options.unit,
              unitDisplay: this.options.unitDisplay
            });
          return options;
        }
        constructor(locale, options = {}) {
          this.numberFormatter = $0c1d5654b62fc485$var$getCachedNumberFormatter(locale, options);
          this.options = options;
        }
      };
      function $0c1d5654b62fc485$var$getCachedNumberFormatter(locale, options = {}) {
        let { numberingSystem } = options;
        if (numberingSystem && locale.indexOf("-u-nu-") === -1)
          locale = `${locale}-u-nu-${numberingSystem}`;
        if (options.style === "unit" && !$0c1d5654b62fc485$var$supportsUnit) {
          var _UNITS_unit;
          let { unit, unitDisplay = "short" } = options;
          if (!unit)
            throw new Error('unit option must be provided with style: "unit"');
          if (!((_UNITS_unit = $0c1d5654b62fc485$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay]))
            throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
          options = __spreadProps(__spreadValues({}, options), {
            style: "decimal"
          });
        }
        let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
        if ($0c1d5654b62fc485$var$formatterCache.has(cacheKey))
          return $0c1d5654b62fc485$var$formatterCache.get(cacheKey);
        let numberFormatter = new Intl.NumberFormat(locale, options);
        $0c1d5654b62fc485$var$formatterCache.set(cacheKey, numberFormatter);
        return numberFormatter;
      }
      function $0c1d5654b62fc485$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
        if (signDisplay === "auto")
          return numberFormat.format(num);
        else if (signDisplay === "never")
          return numberFormat.format(Math.abs(num));
        else {
          let needsPositiveSign = false;
          if (signDisplay === "always")
            needsPositiveSign = num > 0 || Object.is(num, 0);
          else if (signDisplay === "exceptZero") {
            if (Object.is(num, -0) || Object.is(num, 0))
              num = Math.abs(num);
            else
              needsPositiveSign = num > 0;
          }
          if (needsPositiveSign) {
            let negative = numberFormat.format(-num);
            let noSign = numberFormat.format(num);
            let minus = negative.replace(noSign, "").replace(/\u200e|\u061C/, "");
            if ([
              ...minus
            ].length !== 1)
              console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
            let positive = negative.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
            return positive;
          } else
            return numberFormat.format(num);
        }
      }
      var $d68f3f4c684426c6$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");
      var $d68f3f4c684426c6$var$NUMBERING_SYSTEMS = [
        "latn",
        "arab",
        "hanidec"
      ];
      var $d68f3f4c684426c6$export$cd11ab140839f11d = class {
        /**
        * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
        */
        parse(value) {
          return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
        }
        /**
        * Returns whether the given string could potentially be a valid number. This should be used to
        * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
        * of the minus/plus sign characters can be checked.
        */
        isValidPartialNumber(value, minValue, maxValue) {
          return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
        }
        /**
        * Returns a numbering system for which the given string is valid in the current locale.
        * If no numbering system could be detected, the default numbering system for the current
        * locale is returned.
        */
        getNumberingSystem(value) {
          return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
        }
        constructor(locale, options = {}) {
          this.locale = locale;
          this.options = options;
        }
      };
      var $d68f3f4c684426c6$var$numberParserCache = /* @__PURE__ */ new Map();
      function $d68f3f4c684426c6$var$getNumberParserImpl(locale, options, value) {
        let defaultParser = $d68f3f4c684426c6$var$getCachedNumberParser(locale, options);
        if (!locale.includes("-nu-") && !defaultParser.isValidPartialNumber(value)) {
          for (let numberingSystem of $d68f3f4c684426c6$var$NUMBERING_SYSTEMS)
            if (numberingSystem !== defaultParser.options.numberingSystem) {
              let parser = $d68f3f4c684426c6$var$getCachedNumberParser(locale + (locale.includes("-u-") ? "-nu-" : "-u-nu-") + numberingSystem, options);
              if (parser.isValidPartialNumber(value))
                return parser;
            }
        }
        return defaultParser;
      }
      function $d68f3f4c684426c6$var$getCachedNumberParser(locale, options) {
        let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
        let parser = $d68f3f4c684426c6$var$numberParserCache.get(cacheKey);
        if (!parser) {
          parser = new $d68f3f4c684426c6$var$NumberParserImpl(locale, options);
          $d68f3f4c684426c6$var$numberParserCache.set(cacheKey, parser);
        }
        return parser;
      }
      var $d68f3f4c684426c6$var$NumberParserImpl = class {
        parse(value) {
          let fullySanitizedValue = this.sanitize(value);
          fullySanitizedValue = $d68f3f4c684426c6$var$replaceAll(fullySanitizedValue, this.symbols.group, "").replace(this.symbols.decimal, ".").replace(this.symbols.minusSign, "-").replace(this.symbols.numeral, this.symbols.index);
          let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
          if (isNaN(newValue))
            return NaN;
          if (this.options.currencySign === "accounting" && $d68f3f4c684426c6$var$CURRENCY_SIGN_REGEX.test(value))
            newValue = -1 * newValue;
          if (this.options.style === "percent") {
            newValue /= 100;
            var _this_options_maximumFractionDigits;
            newValue = +newValue.toFixed(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2);
          }
          return newValue;
        }
        sanitize(value) {
          value = value.replace(this.symbols.literals, "");
          value = value.replace("-", this.symbols.minusSign);
          if (this.options.numberingSystem === "arab") {
            value = value.replace(",", this.symbols.decimal);
            value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
            value = $d68f3f4c684426c6$var$replaceAll(value, ".", this.symbols.group);
          }
          if (this.options.locale === "fr-FR")
            value = $d68f3f4c684426c6$var$replaceAll(value, ".", String.fromCharCode(8239));
          return value;
        }
        isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {
          value = this.sanitize(value);
          if (value.startsWith(this.symbols.minusSign) && minValue < 0)
            value = value.slice(this.symbols.minusSign.length);
          else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0)
            value = value.slice(this.symbols.plusSign.length);
          if (value.startsWith(this.symbols.group))
            return false;
          value = $d68f3f4c684426c6$var$replaceAll(value, this.symbols.group, "").replace(this.symbols.numeral, "").replace(this.symbols.decimal, "");
          return value.length === 0;
        }
        constructor(locale, options = {}) {
          this.formatter = new Intl.NumberFormat(locale, options);
          this.options = this.formatter.resolvedOptions();
          this.symbols = $d68f3f4c684426c6$var$getSymbols(this.formatter, this.options, options);
        }
      };
      var $d68f3f4c684426c6$var$nonLiteralParts = /* @__PURE__ */ new Set([
        "decimal",
        "fraction",
        "integer",
        "minusSign",
        "plusSign",
        "group"
      ]);
      var $d68f3f4c684426c6$var$pluralNumbers = [
        0,
        4,
        2,
        1,
        11,
        20,
        3,
        7,
        100,
        21,
        0.1,
        1.1
      ];
      function $d68f3f4c684426c6$var$getSymbols(formatter, intlOptions, originalOptions) {
        var _allParts_find, _posAllParts_find, _allParts_find1, _allParts_find2;
        let allParts = formatter.formatToParts(-10000.111);
        let posAllParts = formatter.formatToParts(10000.111);
        let pluralParts = $d68f3f4c684426c6$var$pluralNumbers.map((n) => formatter.formatToParts(n));
        var _allParts_find_value;
        let minusSign = (_allParts_find_value = (_allParts_find = allParts.find((p) => p.type === "minusSign")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : "-";
        let plusSign = (_posAllParts_find = posAllParts.find((p) => p.type === "plusSign")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;
        if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "exceptZero" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "always"))
          plusSign = "+";
        let decimal = (_allParts_find1 = allParts.find((p) => p.type === "decimal")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;
        let group = (_allParts_find2 = allParts.find((p) => p.type === "group")) === null || _allParts_find2 === void 0 ? void 0 : _allParts_find2.value;
        let allPartsLiterals = allParts.filter((p) => !$d68f3f4c684426c6$var$nonLiteralParts.has(p.type)).map((p) => $d68f3f4c684426c6$var$escapeRegex(p.value));
        let pluralPartsLiterals = pluralParts.flatMap((p) => p.filter((p2) => !$d68f3f4c684426c6$var$nonLiteralParts.has(p2.type)).map((p2) => $d68f3f4c684426c6$var$escapeRegex(p2.value)));
        let sortedLiterals = [
          .../* @__PURE__ */ new Set([
            ...allPartsLiterals,
            ...pluralPartsLiterals
          ])
        ].sort((a, b) => b.length - a.length);
        let literals = sortedLiterals.length === 0 ? new RegExp("[\\p{White_Space}]", "gu") : new RegExp(`${sortedLiterals.join("|")}|[\\p{White_Space}]`, "gu");
        let numerals = [
          ...new Intl.NumberFormat(intlOptions.locale, {
            useGrouping: false
          }).format(9876543210)
        ].reverse();
        let indexes = new Map(numerals.map((d, i) => [
          d,
          i
        ]));
        let numeral = new RegExp(`[${numerals.join("")}]`, "g");
        let index3 = (d) => String(indexes.get(d));
        return {
          minusSign,
          plusSign,
          decimal,
          group,
          literals,
          numeral,
          index: index3
        };
      }
      function $d68f3f4c684426c6$var$replaceAll(str, find, replace) {
        if (str.replaceAll)
          return str.replaceAll(find, replace);
        return str.split(find).join(replace);
      }
      function $d68f3f4c684426c6$var$escapeRegex(string) {
        return string.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
    }
  });

  // node_modules/@react-aria/i18n/dist/real-main.js
  var require_real_main = __commonJS({
    "node_modules/@react-aria/i18n/dist/real-main.js"(exports, module) {
      var $87SwK$react = require_react();
      var $87SwK$reactariassr = require_main3();
      var $87SwK$internationalizedstring = require_main4();
      var $87SwK$internationalizeddate = require_main5();
      var $87SwK$reactariautils = require_main7();
      var $87SwK$internationalizednumber = require_main8();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "I18nProvider", () => $47fa5ec5ff482271$export$a54013f0d02a8f82);
      $parcel$export(module.exports, "useLocale", () => $47fa5ec5ff482271$export$43bb16f9c6d9e3f7);
      $parcel$export(module.exports, "useMessageFormatter", () => $227f31f0c647c5fc$exports.useMessageFormatter);
      $parcel$export(module.exports, "useLocalizedStringFormatter", () => $fc53663969a3d00a$export$f12b703ca79dfbb1);
      $parcel$export(module.exports, "useListFormatter", () => $cb6a3e7d490e97a4$export$a2f47a3d2973640);
      $parcel$export(module.exports, "useDateFormatter", () => $b80c530ff2e20243$export$85fd5fdf27bacc79);
      $parcel$export(module.exports, "useNumberFormatter", () => $fea93c5b7c90d9f4$export$b7a616150fdb9f44);
      $parcel$export(module.exports, "useCollator", () => $27a5ce66022270ad$export$a16aca283550c30d);
      $parcel$export(module.exports, "useFilter", () => $832d079b867c7223$export$3274cf84b703fff);
      var $4d65847630a056a8$var$RTL_SCRIPTS = /* @__PURE__ */ new Set([
        "Arab",
        "Syrc",
        "Samr",
        "Mand",
        "Thaa",
        "Mend",
        "Nkoo",
        "Adlm",
        "Rohg",
        "Hebr"
      ]);
      var $4d65847630a056a8$var$RTL_LANGS = /* @__PURE__ */ new Set([
        "ae",
        "ar",
        "arc",
        "bcc",
        "bqi",
        "ckb",
        "dv",
        "fa",
        "glk",
        "he",
        "ku",
        "mzn",
        "nqo",
        "pnb",
        "ps",
        "sd",
        "ug",
        "ur",
        "yi"
      ]);
      function $4d65847630a056a8$export$702d680b21cbd764(locale) {
        if (Intl.Locale) {
          let script = new Intl.Locale(locale).maximize().script;
          return $4d65847630a056a8$var$RTL_SCRIPTS.has(script);
        }
        let lang = locale.split("-")[0];
        return $4d65847630a056a8$var$RTL_LANGS.has(lang);
      }
      function $2919bdec75484e64$export$f09106e7c6677ec5() {
        let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
        try {
          Intl.DateTimeFormat.supportedLocalesOf([
            locale
          ]);
        } catch (_err) {
          locale = "en-US";
        }
        return {
          locale,
          direction: (0, $4d65847630a056a8$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
        };
      }
      var $2919bdec75484e64$var$currentLocale = $2919bdec75484e64$export$f09106e7c6677ec5();
      var $2919bdec75484e64$var$listeners = /* @__PURE__ */ new Set();
      function $2919bdec75484e64$var$updateLocale() {
        $2919bdec75484e64$var$currentLocale = $2919bdec75484e64$export$f09106e7c6677ec5();
        for (let listener of $2919bdec75484e64$var$listeners)
          listener($2919bdec75484e64$var$currentLocale);
      }
      function $2919bdec75484e64$export$188ec29ebc2bdc3a() {
        let isSSR = (0, $87SwK$reactariassr.useIsSSR)();
        let [defaultLocale, setDefaultLocale] = (0, $87SwK$react.useState)($2919bdec75484e64$var$currentLocale);
        (0, $87SwK$react.useEffect)(() => {
          if ($2919bdec75484e64$var$listeners.size === 0)
            window.addEventListener("languagechange", $2919bdec75484e64$var$updateLocale);
          $2919bdec75484e64$var$listeners.add(setDefaultLocale);
          return () => {
            $2919bdec75484e64$var$listeners.delete(setDefaultLocale);
            if ($2919bdec75484e64$var$listeners.size === 0)
              window.removeEventListener("languagechange", $2919bdec75484e64$var$updateLocale);
          };
        }, []);
        if (isSSR)
          return {
            locale: "en-US",
            direction: "ltr"
          };
        return defaultLocale;
      }
      var $47fa5ec5ff482271$var$I18nContext = /* @__PURE__ */ (0, $parcel$interopDefault($87SwK$react)).createContext(null);
      function $47fa5ec5ff482271$export$a54013f0d02a8f82(props) {
        let { locale, children } = props;
        let defaultLocale = (0, $2919bdec75484e64$export$188ec29ebc2bdc3a)();
        let value = locale ? {
          locale,
          direction: (0, $4d65847630a056a8$export$702d680b21cbd764)(locale) ? "rtl" : "ltr"
        } : defaultLocale;
        return /* @__PURE__ */ (0, $parcel$interopDefault($87SwK$react)).createElement($47fa5ec5ff482271$var$I18nContext.Provider, {
          value
        }, children);
      }
      function $47fa5ec5ff482271$export$43bb16f9c6d9e3f7() {
        let defaultLocale = (0, $2919bdec75484e64$export$188ec29ebc2bdc3a)();
        let context = (0, $87SwK$react.useContext)($47fa5ec5ff482271$var$I18nContext);
        return context || defaultLocale;
      }
      var $227f31f0c647c5fc$exports = {};
      var $fc53663969a3d00a$var$cache = /* @__PURE__ */ new WeakMap();
      function $fc53663969a3d00a$var$getCachedDictionary(strings) {
        let dictionary = $fc53663969a3d00a$var$cache.get(strings);
        if (!dictionary) {
          dictionary = new (0, $87SwK$internationalizedstring.LocalizedStringDictionary)(strings);
          $fc53663969a3d00a$var$cache.set(strings, dictionary);
        }
        return dictionary;
      }
      function $fc53663969a3d00a$export$f12b703ca79dfbb1(strings) {
        let { locale } = (0, $47fa5ec5ff482271$export$43bb16f9c6d9e3f7)();
        let dictionary = (0, $87SwK$react.useMemo)(() => $fc53663969a3d00a$var$getCachedDictionary(strings), [
          strings
        ]);
        return (0, $87SwK$react.useMemo)(() => new (0, $87SwK$internationalizedstring.LocalizedStringFormatter)(locale, dictionary), [
          locale,
          dictionary
        ]);
      }
      function $cb6a3e7d490e97a4$export$a2f47a3d2973640(options = {}) {
        let { locale } = (0, $47fa5ec5ff482271$export$43bb16f9c6d9e3f7)();
        return (0, $87SwK$react.useMemo)(() => new Intl.ListFormat(locale, options), [
          locale,
          options
        ]);
      }
      function $b80c530ff2e20243$export$85fd5fdf27bacc79(options) {
        options = (0, $87SwK$reactariautils.useDeepMemo)(options, $b80c530ff2e20243$var$isEqual);
        let { locale } = (0, $47fa5ec5ff482271$export$43bb16f9c6d9e3f7)();
        return (0, $87SwK$react.useMemo)(() => new (0, $87SwK$internationalizeddate.DateFormatter)(locale, options), [
          locale,
          options
        ]);
      }
      function $b80c530ff2e20243$var$isEqual(a, b) {
        if (a === b)
          return true;
        let aKeys = Object.keys(a);
        let bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length)
          return false;
        for (let key of aKeys) {
          if (b[key] !== a[key])
            return false;
        }
        return true;
      }
      function $fea93c5b7c90d9f4$export$b7a616150fdb9f44(options = {}) {
        let { locale } = (0, $47fa5ec5ff482271$export$43bb16f9c6d9e3f7)();
        return (0, $87SwK$react.useMemo)(() => new (0, $87SwK$internationalizednumber.NumberFormatter)(locale, options), [
          locale,
          options
        ]);
      }
      var $27a5ce66022270ad$var$cache = /* @__PURE__ */ new Map();
      function $27a5ce66022270ad$export$a16aca283550c30d(options) {
        let { locale } = (0, $47fa5ec5ff482271$export$43bb16f9c6d9e3f7)();
        let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : "");
        if ($27a5ce66022270ad$var$cache.has(cacheKey))
          return $27a5ce66022270ad$var$cache.get(cacheKey);
        let formatter = new Intl.Collator(locale, options);
        $27a5ce66022270ad$var$cache.set(cacheKey, formatter);
        return formatter;
      }
      function $832d079b867c7223$export$3274cf84b703fff(options) {
        let collator = (0, $27a5ce66022270ad$export$a16aca283550c30d)(__spreadValues({
          usage: "search"
        }, options));
        let startsWith = (0, $87SwK$react.useCallback)((string, substring) => {
          if (substring.length === 0)
            return true;
          string = string.normalize("NFC");
          substring = substring.normalize("NFC");
          return collator.compare(string.slice(0, substring.length), substring) === 0;
        }, [
          collator
        ]);
        let endsWith = (0, $87SwK$react.useCallback)((string, substring) => {
          if (substring.length === 0)
            return true;
          string = string.normalize("NFC");
          substring = substring.normalize("NFC");
          return collator.compare(string.slice(-substring.length), substring) === 0;
        }, [
          collator
        ]);
        let contains = (0, $87SwK$react.useCallback)((string, substring) => {
          if (substring.length === 0)
            return true;
          string = string.normalize("NFC");
          substring = substring.normalize("NFC");
          let scan = 0;
          let sliceLen = substring.length;
          for (; scan + sliceLen <= string.length; scan++) {
            let slice = string.slice(scan, scan + sliceLen);
            if (collator.compare(substring, slice) === 0)
              return true;
          }
          return false;
        }, [
          collator
        ]);
        return (0, $87SwK$react.useMemo)(() => ({
          startsWith,
          endsWith,
          contains
        }), [
          startsWith,
          endsWith,
          contains
        ]);
      }
    }
  });

  // node_modules/tslib/tslib.es6.mjs
  var tslib_es6_exports = {};
  __export(tslib_es6_exports, {
    __addDisposableResource: () => __addDisposableResource,
    __assign: () => __assign,
    __asyncDelegator: () => __asyncDelegator,
    __asyncGenerator: () => __asyncGenerator,
    __asyncValues: () => __asyncValues,
    __await: () => __await2,
    __awaiter: () => __awaiter,
    __classPrivateFieldGet: () => __classPrivateFieldGet,
    __classPrivateFieldIn: () => __classPrivateFieldIn,
    __classPrivateFieldSet: () => __classPrivateFieldSet,
    __createBinding: () => __createBinding,
    __decorate: () => __decorate,
    __disposeResources: () => __disposeResources,
    __esDecorate: () => __esDecorate,
    __exportStar: () => __exportStar,
    __extends: () => __extends,
    __generator: () => __generator,
    __importDefault: () => __importDefault,
    __importStar: () => __importStar,
    __makeTemplateObject: () => __makeTemplateObject,
    __metadata: () => __metadata,
    __param: () => __param,
    __propKey: () => __propKey,
    __read: () => __read,
    __rest: () => __rest,
    __runInitializers: () => __runInitializers,
    __setFunctionName: () => __setFunctionName,
    __spread: () => __spread,
    __spreadArray: () => __spreadArray,
    __spreadArrays: () => __spreadArrays,
    __values: () => __values,
    default: () => tslib_es6_default
  });
  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __rest(s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
          t[p[i]] = s[p[i]];
      }
    return t;
  }
  function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __param(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  }
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== void 0 && typeof f !== "function")
        throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn)
        context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access)
        context.access[p] = contextIn.access[p];
      context.addInitializer = function(f) {
        if (done)
          throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
        if (result === void 0)
          continue;
        if (result === null || typeof result !== "object")
          throw new TypeError("Object expected");
        if (_ = accept(result.get))
          descriptor.get = _;
        if (_ = accept(result.set))
          descriptor.set = _;
        if (_ = accept(result.init))
          initializers.unshift(_);
      } else if (_ = accept(result)) {
        if (kind === "field")
          initializers.unshift(_);
        else
          descriptor[key] = _;
      }
    }
    if (target)
      Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
  }
  function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
  }
  function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol")
      name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
  }
  function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __exportStar(m, o) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
        __createBinding(o, m, p);
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i["return"]))
          m.call(i);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
    return ar;
  }
  function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++)
      s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
        r[k] = a[j];
    return r;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await2(v) {
    return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i;
    function verb(n) {
      if (g[n])
        i[n] = function(v) {
          return new Promise(function(a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if (f(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  }
  function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
      return this;
    }, i;
    function verb(n, f) {
      i[n] = o[n] ? function(v) {
        return (p = !p) ? { value: __await2(o[n](v)), done: false } : f ? f(v) : v;
      } : f;
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
  }
  function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", { value: raw });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  }
  function __importStar(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  }
  function __importDefault(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  }
  function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  }
  function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  }
  function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
      throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
  }
  function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
      if (typeof value !== "object" && typeof value !== "function")
        throw new TypeError("Object expected.");
      var dispose;
      if (async) {
        if (!Symbol.asyncDispose)
          throw new TypeError("Symbol.asyncDispose is not defined.");
        dispose = value[Symbol.asyncDispose];
      }
      if (dispose === void 0) {
        if (!Symbol.dispose)
          throw new TypeError("Symbol.dispose is not defined.");
        dispose = value[Symbol.dispose];
      }
      if (typeof dispose !== "function")
        throw new TypeError("Object not disposable.");
      env.stack.push({ value, dispose, async });
    } else if (async) {
      env.stack.push({ async: true });
    }
    return value;
  }
  function __disposeResources(env) {
    function fail(e) {
      env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
      env.hasError = true;
    }
    function next() {
      while (env.stack.length) {
        var rec = env.stack.pop();
        try {
          var result = rec.dispose && rec.dispose.call(rec.value);
          if (rec.async)
            return Promise.resolve(result).then(next, function(e) {
              fail(e);
              return next();
            });
        } catch (e) {
          fail(e);
        }
      }
      if (env.hasError)
        throw env.error;
    }
    return next();
  }
  var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
  var init_tslib_es6 = __esm({
    "node_modules/tslib/tslib.es6.mjs"() {
      extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
      };
      tslib_es6_default = {
        __extends,
        __assign,
        __rest,
        __decorate,
        __param,
        __metadata,
        __awaiter,
        __generator,
        __createBinding,
        __exportStar,
        __values,
        __read,
        __spread,
        __spreadArrays,
        __spreadArray,
        __await: __await2,
        __asyncGenerator,
        __asyncDelegator,
        __asyncValues,
        __makeTemplateObject,
        __importStar,
        __importDefault,
        __classPrivateFieldGet,
        __classPrivateFieldSet,
        __classPrivateFieldIn,
        __addDisposableResource,
        __disposeResources
      };
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/error.js
  var require_error = __commonJS({
    "node_modules/@formatjs/icu-messageformat-parser/error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ErrorKind = void 0;
      var ErrorKind;
      (function(ErrorKind2) {
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
        ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
        ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
        ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
        ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
        ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
        ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
        ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
        ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
        ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
        ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
        ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
        ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
        ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
        ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
        ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
        ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
        ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
      })(ErrorKind = exports.ErrorKind || (exports.ErrorKind = {}));
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/types.js
  var require_types = __commonJS({
    "node_modules/@formatjs/icu-messageformat-parser/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createNumberElement = exports.createLiteralElement = exports.isDateTimeSkeleton = exports.isNumberSkeleton = exports.isTagElement = exports.isPoundElement = exports.isPluralElement = exports.isSelectElement = exports.isTimeElement = exports.isDateElement = exports.isNumberElement = exports.isArgumentElement = exports.isLiteralElement = exports.SKELETON_TYPE = exports.TYPE = void 0;
      var TYPE;
      (function(TYPE2) {
        TYPE2[TYPE2["literal"] = 0] = "literal";
        TYPE2[TYPE2["argument"] = 1] = "argument";
        TYPE2[TYPE2["number"] = 2] = "number";
        TYPE2[TYPE2["date"] = 3] = "date";
        TYPE2[TYPE2["time"] = 4] = "time";
        TYPE2[TYPE2["select"] = 5] = "select";
        TYPE2[TYPE2["plural"] = 6] = "plural";
        TYPE2[TYPE2["pound"] = 7] = "pound";
        TYPE2[TYPE2["tag"] = 8] = "tag";
      })(TYPE = exports.TYPE || (exports.TYPE = {}));
      var SKELETON_TYPE;
      (function(SKELETON_TYPE2) {
        SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
        SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
      })(SKELETON_TYPE = exports.SKELETON_TYPE || (exports.SKELETON_TYPE = {}));
      function isLiteralElement(el) {
        return el.type === TYPE.literal;
      }
      exports.isLiteralElement = isLiteralElement;
      function isArgumentElement(el) {
        return el.type === TYPE.argument;
      }
      exports.isArgumentElement = isArgumentElement;
      function isNumberElement(el) {
        return el.type === TYPE.number;
      }
      exports.isNumberElement = isNumberElement;
      function isDateElement(el) {
        return el.type === TYPE.date;
      }
      exports.isDateElement = isDateElement;
      function isTimeElement(el) {
        return el.type === TYPE.time;
      }
      exports.isTimeElement = isTimeElement;
      function isSelectElement(el) {
        return el.type === TYPE.select;
      }
      exports.isSelectElement = isSelectElement;
      function isPluralElement(el) {
        return el.type === TYPE.plural;
      }
      exports.isPluralElement = isPluralElement;
      function isPoundElement(el) {
        return el.type === TYPE.pound;
      }
      exports.isPoundElement = isPoundElement;
      function isTagElement(el) {
        return el.type === TYPE.tag;
      }
      exports.isTagElement = isTagElement;
      function isNumberSkeleton(el) {
        return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
      }
      exports.isNumberSkeleton = isNumberSkeleton;
      function isDateTimeSkeleton(el) {
        return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
      }
      exports.isDateTimeSkeleton = isDateTimeSkeleton;
      function createLiteralElement(value) {
        return {
          type: TYPE.literal,
          value
        };
      }
      exports.createLiteralElement = createLiteralElement;
      function createNumberElement(value, style) {
        return {
          type: TYPE.number,
          value,
          style
        };
      }
      exports.createNumberElement = createNumberElement;
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/regex.generated.js
  var require_regex_generated = __commonJS({
    "node_modules/@formatjs/icu-messageformat-parser/regex.generated.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WHITE_SPACE_REGEX = exports.SPACE_SEPARATOR_REGEX = void 0;
      exports.SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
      exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;
    }
  });

  // node_modules/@formatjs/icu-skeleton-parser/date-time.js
  var require_date_time = __commonJS({
    "node_modules/@formatjs/icu-skeleton-parser/date-time.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseDateTimeSkeleton = void 0;
      var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
      function parseDateTimeSkeleton(skeleton) {
        var result = {};
        skeleton.replace(DATE_TIME_REGEX, function(match) {
          var len = match.length;
          switch (match[0]) {
            case "G":
              result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
              break;
            case "y":
              result.year = len === 2 ? "2-digit" : "numeric";
              break;
            case "Y":
            case "u":
            case "U":
            case "r":
              throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
            case "q":
            case "Q":
              throw new RangeError("`q/Q` (quarter) patterns are not supported");
            case "M":
            case "L":
              result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
              break;
            case "w":
            case "W":
              throw new RangeError("`w/W` (week) patterns are not supported");
            case "d":
              result.day = ["numeric", "2-digit"][len - 1];
              break;
            case "D":
            case "F":
            case "g":
              throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
            case "E":
              result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
              break;
            case "e":
              if (len < 4) {
                throw new RangeError("`e..eee` (weekday) patterns are not supported");
              }
              result.weekday = ["short", "long", "narrow", "short"][len - 4];
              break;
            case "c":
              if (len < 4) {
                throw new RangeError("`c..ccc` (weekday) patterns are not supported");
              }
              result.weekday = ["short", "long", "narrow", "short"][len - 4];
              break;
            case "a":
              result.hour12 = true;
              break;
            case "b":
            case "B":
              throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
            case "h":
              result.hourCycle = "h12";
              result.hour = ["numeric", "2-digit"][len - 1];
              break;
            case "H":
              result.hourCycle = "h23";
              result.hour = ["numeric", "2-digit"][len - 1];
              break;
            case "K":
              result.hourCycle = "h11";
              result.hour = ["numeric", "2-digit"][len - 1];
              break;
            case "k":
              result.hourCycle = "h24";
              result.hour = ["numeric", "2-digit"][len - 1];
              break;
            case "j":
            case "J":
            case "C":
              throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
            case "m":
              result.minute = ["numeric", "2-digit"][len - 1];
              break;
            case "s":
              result.second = ["numeric", "2-digit"][len - 1];
              break;
            case "S":
            case "A":
              throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
            case "z":
              result.timeZoneName = len < 4 ? "short" : "long";
              break;
            case "Z":
            case "O":
            case "v":
            case "V":
            case "X":
            case "x":
              throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
          }
          return "";
        });
        return result;
      }
      exports.parseDateTimeSkeleton = parseDateTimeSkeleton;
    }
  });

  // node_modules/@formatjs/icu-skeleton-parser/regex.generated.js
  var require_regex_generated2 = __commonJS({
    "node_modules/@formatjs/icu-skeleton-parser/regex.generated.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WHITE_SPACE_REGEX = void 0;
      exports.WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;
    }
  });

  // node_modules/@formatjs/icu-skeleton-parser/number.js
  var require_number = __commonJS({
    "node_modules/@formatjs/icu-skeleton-parser/number.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parseNumberSkeleton = exports.parseNumberSkeletonFromString = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var regex_generated_1 = require_regex_generated2();
      function parseNumberSkeletonFromString(skeleton) {
        if (skeleton.length === 0) {
          throw new Error("Number skeleton cannot be empty");
        }
        var stringTokens = skeleton.split(regex_generated_1.WHITE_SPACE_REGEX).filter(function(x) {
          return x.length > 0;
        });
        var tokens = [];
        for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
          var stringToken = stringTokens_1[_i];
          var stemAndOptions = stringToken.split("/");
          if (stemAndOptions.length === 0) {
            throw new Error("Invalid number skeleton");
          }
          var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
          for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
            var option = options_1[_a];
            if (option.length === 0) {
              throw new Error("Invalid number skeleton");
            }
          }
          tokens.push({ stem, options });
        }
        return tokens;
      }
      exports.parseNumberSkeletonFromString = parseNumberSkeletonFromString;
      function icuUnitToEcma(unit) {
        return unit.replace(/^(.*?)-/, "");
      }
      var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
      var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
      var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
      var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
      function parseSignificantPrecision(str) {
        var result = {};
        if (str[str.length - 1] === "r") {
          result.roundingPriority = "morePrecision";
        } else if (str[str.length - 1] === "s") {
          result.roundingPriority = "lessPrecision";
        }
        str.replace(SIGNIFICANT_PRECISION_REGEX, function(_, g1, g2) {
          if (typeof g2 !== "string") {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length;
          } else if (g2 === "+") {
            result.minimumSignificantDigits = g1.length;
          } else if (g1[0] === "#") {
            result.maximumSignificantDigits = g1.length;
          } else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length + (typeof g2 === "string" ? g2.length : 0);
          }
          return "";
        });
        return result;
      }
      function parseSign(str) {
        switch (str) {
          case "sign-auto":
            return {
              signDisplay: "auto"
            };
          case "sign-accounting":
          case "()":
            return {
              currencySign: "accounting"
            };
          case "sign-always":
          case "+!":
            return {
              signDisplay: "always"
            };
          case "sign-accounting-always":
          case "()!":
            return {
              signDisplay: "always",
              currencySign: "accounting"
            };
          case "sign-except-zero":
          case "+?":
            return {
              signDisplay: "exceptZero"
            };
          case "sign-accounting-except-zero":
          case "()?":
            return {
              signDisplay: "exceptZero",
              currencySign: "accounting"
            };
          case "sign-never":
          case "+_":
            return {
              signDisplay: "never"
            };
        }
      }
      function parseConciseScientificAndEngineeringStem(stem) {
        var result;
        if (stem[0] === "E" && stem[1] === "E") {
          result = {
            notation: "engineering"
          };
          stem = stem.slice(2);
        } else if (stem[0] === "E") {
          result = {
            notation: "scientific"
          };
          stem = stem.slice(1);
        }
        if (result) {
          var signDisplay = stem.slice(0, 2);
          if (signDisplay === "+!") {
            result.signDisplay = "always";
            stem = stem.slice(2);
          } else if (signDisplay === "+?") {
            result.signDisplay = "exceptZero";
            stem = stem.slice(2);
          }
          if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
            throw new Error("Malformed concise eng/scientific notation");
          }
          result.minimumIntegerDigits = stem.length;
        }
        return result;
      }
      function parseNotationOptions(opt) {
        var result = {};
        var signOpts = parseSign(opt);
        if (signOpts) {
          return signOpts;
        }
        return result;
      }
      function parseNumberSkeleton(tokens) {
        var result = {};
        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
          var token = tokens_1[_i];
          switch (token.stem) {
            case "percent":
            case "%":
              result.style = "percent";
              continue;
            case "%x100":
              result.style = "percent";
              result.scale = 100;
              continue;
            case "currency":
              result.style = "currency";
              result.currency = token.options[0];
              continue;
            case "group-off":
            case ",_":
              result.useGrouping = false;
              continue;
            case "precision-integer":
            case ".":
              result.maximumFractionDigits = 0;
              continue;
            case "measure-unit":
            case "unit":
              result.style = "unit";
              result.unit = icuUnitToEcma(token.options[0]);
              continue;
            case "compact-short":
            case "K":
              result.notation = "compact";
              result.compactDisplay = "short";
              continue;
            case "compact-long":
            case "KK":
              result.notation = "compact";
              result.compactDisplay = "long";
              continue;
            case "scientific":
              result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), { notation: "scientific" }), token.options.reduce(function(all, opt2) {
                return tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt2));
              }, {}));
              continue;
            case "engineering":
              result = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, result), { notation: "engineering" }), token.options.reduce(function(all, opt2) {
                return tslib_1.__assign(tslib_1.__assign({}, all), parseNotationOptions(opt2));
              }, {}));
              continue;
            case "notation-simple":
              result.notation = "standard";
              continue;
            case "unit-width-narrow":
              result.currencyDisplay = "narrowSymbol";
              result.unitDisplay = "narrow";
              continue;
            case "unit-width-short":
              result.currencyDisplay = "code";
              result.unitDisplay = "short";
              continue;
            case "unit-width-full-name":
              result.currencyDisplay = "name";
              result.unitDisplay = "long";
              continue;
            case "unit-width-iso-code":
              result.currencyDisplay = "symbol";
              continue;
            case "scale":
              result.scale = parseFloat(token.options[0]);
              continue;
            case "integer-width":
              if (token.options.length > 1) {
                throw new RangeError("integer-width stems only accept a single optional option");
              }
              token.options[0].replace(INTEGER_WIDTH_REGEX, function(_, g1, g2, g3, g4, g5) {
                if (g1) {
                  result.minimumIntegerDigits = g2.length;
                } else if (g3 && g4) {
                  throw new Error("We currently do not support maximum integer digits");
                } else if (g5) {
                  throw new Error("We currently do not support exact integer digits");
                }
                return "";
              });
              continue;
          }
          if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
            result.minimumIntegerDigits = token.stem.length;
            continue;
          }
          if (FRACTION_PRECISION_REGEX.test(token.stem)) {
            if (token.options.length > 1) {
              throw new RangeError("Fraction-precision stems only accept a single optional option");
            }
            token.stem.replace(FRACTION_PRECISION_REGEX, function(_, g1, g2, g3, g4, g5) {
              if (g2 === "*") {
                result.minimumFractionDigits = g1.length;
              } else if (g3 && g3[0] === "#") {
                result.maximumFractionDigits = g3.length;
              } else if (g4 && g5) {
                result.minimumFractionDigits = g4.length;
                result.maximumFractionDigits = g4.length + g5.length;
              } else {
                result.minimumFractionDigits = g1.length;
                result.maximumFractionDigits = g1.length;
              }
              return "";
            });
            var opt = token.options[0];
            if (opt === "w") {
              result = tslib_1.__assign(tslib_1.__assign({}, result), { trailingZeroDisplay: "stripIfInteger" });
            } else if (opt) {
              result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(opt));
            }
            continue;
          }
          if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
            result = tslib_1.__assign(tslib_1.__assign({}, result), parseSignificantPrecision(token.stem));
            continue;
          }
          var signOpts = parseSign(token.stem);
          if (signOpts) {
            result = tslib_1.__assign(tslib_1.__assign({}, result), signOpts);
          }
          var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
          if (conciseScientificAndEngineeringOpts) {
            result = tslib_1.__assign(tslib_1.__assign({}, result), conciseScientificAndEngineeringOpts);
          }
        }
        return result;
      }
      exports.parseNumberSkeleton = parseNumberSkeleton;
    }
  });

  // node_modules/@formatjs/icu-skeleton-parser/index.js
  var require_icu_skeleton_parser = __commonJS({
    "node_modules/@formatjs/icu-skeleton-parser/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      tslib_1.__exportStar(require_date_time(), exports);
      tslib_1.__exportStar(require_number(), exports);
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/time-data.generated.js
  var require_time_data_generated = __commonJS({
    "node_modules/@formatjs/icu-messageformat-parser/time-data.generated.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.timeData = void 0;
      exports.timeData = {
        "001": [
          "H",
          "h"
        ],
        "AC": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "AD": [
          "H",
          "hB"
        ],
        "AE": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "AF": [
          "H",
          "hb",
          "hB",
          "h"
        ],
        "AG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "AI": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "AL": [
          "h",
          "H",
          "hB"
        ],
        "AM": [
          "H",
          "hB"
        ],
        "AO": [
          "H",
          "hB"
        ],
        "AR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "AS": [
          "h",
          "H"
        ],
        "AT": [
          "H",
          "hB"
        ],
        "AU": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "AW": [
          "H",
          "hB"
        ],
        "AX": [
          "H"
        ],
        "AZ": [
          "H",
          "hB",
          "h"
        ],
        "BA": [
          "H",
          "hB",
          "h"
        ],
        "BB": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BD": [
          "h",
          "hB",
          "H"
        ],
        "BE": [
          "H",
          "hB"
        ],
        "BF": [
          "H",
          "hB"
        ],
        "BG": [
          "H",
          "hB",
          "h"
        ],
        "BH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "BJ": [
          "H",
          "hB"
        ],
        "BL": [
          "H",
          "hB"
        ],
        "BM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BN": [
          "hb",
          "hB",
          "h",
          "H"
        ],
        "BO": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "BQ": [
          "H"
        ],
        "BR": [
          "H",
          "hB"
        ],
        "BS": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "BT": [
          "h",
          "H"
        ],
        "BW": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "BZ": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CA": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "CC": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CD": [
          "hB",
          "H"
        ],
        "CF": [
          "H",
          "h",
          "hB"
        ],
        "CG": [
          "H",
          "hB"
        ],
        "CH": [
          "H",
          "hB",
          "h"
        ],
        "CI": [
          "H",
          "hB"
        ],
        "CK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CL": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CM": [
          "H",
          "h",
          "hB"
        ],
        "CN": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "CO": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "CP": [
          "H"
        ],
        "CR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CU": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "CV": [
          "H",
          "hB"
        ],
        "CX": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "CY": [
          "h",
          "H",
          "hb",
          "hB"
        ],
        "CZ": [
          "H"
        ],
        "DE": [
          "H",
          "hB"
        ],
        "DG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "DJ": [
          "h",
          "H"
        ],
        "DK": [
          "H"
        ],
        "DM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "DO": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "DZ": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "EA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "EC": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "EE": [
          "H",
          "hB"
        ],
        "EG": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "EH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "ER": [
          "h",
          "H"
        ],
        "ES": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "ET": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "FI": [
          "H"
        ],
        "FJ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "FK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "FM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "FR": [
          "H",
          "hB"
        ],
        "GA": [
          "H",
          "hB"
        ],
        "GB": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GD": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GE": [
          "H",
          "hB",
          "h"
        ],
        "GF": [
          "H",
          "hB"
        ],
        "GG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GH": [
          "h",
          "H"
        ],
        "GI": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "GM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GN": [
          "H",
          "hB"
        ],
        "GP": [
          "H",
          "hB"
        ],
        "GQ": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "GR": [
          "h",
          "H",
          "hb",
          "hB"
        ],
        "GT": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "GU": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "GW": [
          "H",
          "hB"
        ],
        "GY": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "HK": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "HN": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "HR": [
          "H",
          "hB"
        ],
        "IC": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "ID": [
          "H"
        ],
        "IE": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IL": [
          "H",
          "hB"
        ],
        "IM": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IN": [
          "h",
          "H"
        ],
        "IO": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "IQ": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "IR": [
          "hB",
          "H"
        ],
        "IS": [
          "H"
        ],
        "IT": [
          "H",
          "hB"
        ],
        "JE": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "JM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "JO": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "JP": [
          "H",
          "h",
          "K"
        ],
        "KE": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "KG": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "KH": [
          "hB",
          "h",
          "H",
          "hb"
        ],
        "KI": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KM": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "KN": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KP": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "KR": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "KW": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "KY": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "KZ": [
          "H",
          "hB"
        ],
        "LA": [
          "H",
          "hb",
          "hB",
          "h"
        ],
        "LB": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "LC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "LI": [
          "H",
          "hB",
          "h"
        ],
        "LK": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "LR": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "LS": [
          "h",
          "H"
        ],
        "LT": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "LU": [
          "H",
          "h",
          "hB"
        ],
        "LV": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "LY": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "MA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "MC": [
          "H",
          "hB"
        ],
        "MD": [
          "H",
          "hB"
        ],
        "ME": [
          "H",
          "hB",
          "h"
        ],
        "MF": [
          "H",
          "hB"
        ],
        "MH": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MK": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "ML": [
          "H"
        ],
        "MM": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "MN": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "MO": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "MP": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MQ": [
          "H",
          "hB"
        ],
        "MR": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "MS": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "MW": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "MX": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "MY": [
          "hb",
          "hB",
          "h",
          "H"
        ],
        "MZ": [
          "H",
          "hB"
        ],
        "NA": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "NC": [
          "H",
          "hB"
        ],
        "NE": [
          "H"
        ],
        "NF": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NG": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NI": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "NL": [
          "H",
          "hB"
        ],
        "NP": [
          "H",
          "h",
          "hB"
        ],
        "NR": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NU": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "NZ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "OM": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "PA": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "PE": [
          "H",
          "hB",
          "h",
          "hb"
        ],
        "PF": [
          "H",
          "h",
          "hB"
        ],
        "PG": [
          "h",
          "H"
        ],
        "PH": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "PK": [
          "h",
          "hB",
          "H"
        ],
        "PM": [
          "H",
          "hB"
        ],
        "PN": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "PR": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "PS": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "PT": [
          "H",
          "hB"
        ],
        "PW": [
          "h",
          "H"
        ],
        "PY": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "QA": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "RE": [
          "H",
          "hB"
        ],
        "RO": [
          "H",
          "hB"
        ],
        "RS": [
          "H",
          "hB",
          "h"
        ],
        "RU": [
          "H"
        ],
        "SA": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SB": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SC": [
          "H",
          "h",
          "hB"
        ],
        "SD": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SE": [
          "H"
        ],
        "SG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SH": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "SI": [
          "H",
          "hB"
        ],
        "SJ": [
          "H"
        ],
        "SK": [
          "H"
        ],
        "SL": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "SM": [
          "H",
          "h",
          "hB"
        ],
        "SN": [
          "H",
          "h",
          "hB"
        ],
        "SO": [
          "h",
          "H"
        ],
        "SR": [
          "H",
          "hB"
        ],
        "SS": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "ST": [
          "H",
          "hB"
        ],
        "SV": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "SX": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "SY": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "SZ": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "TA": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "TC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "TD": [
          "h",
          "H",
          "hB"
        ],
        "TF": [
          "H",
          "h",
          "hB"
        ],
        "TG": [
          "H",
          "hB"
        ],
        "TL": [
          "H",
          "hB",
          "hb",
          "h"
        ],
        "TN": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "TO": [
          "h",
          "H"
        ],
        "TR": [
          "H",
          "hB"
        ],
        "TT": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "TW": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "TZ": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "UA": [
          "H",
          "hB",
          "h"
        ],
        "UG": [
          "hB",
          "hb",
          "H",
          "h"
        ],
        "UM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "US": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "UY": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "UZ": [
          "H",
          "hB",
          "h"
        ],
        "VA": [
          "H",
          "h",
          "hB"
        ],
        "VC": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VE": [
          "h",
          "H",
          "hB",
          "hb"
        ],
        "VG": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VI": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "VU": [
          "h",
          "H"
        ],
        "WF": [
          "H",
          "hB"
        ],
        "WS": [
          "h",
          "H"
        ],
        "XK": [
          "H",
          "hB",
          "h"
        ],
        "YE": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "YT": [
          "H",
          "hB"
        ],
        "ZA": [
          "H",
          "h",
          "hb",
          "hB"
        ],
        "ZM": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "af-ZA": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "ar-001": [
          "h",
          "hB",
          "hb",
          "H"
        ],
        "ca-ES": [
          "H",
          "h",
          "hB"
        ],
        "en-001": [
          "h",
          "hb",
          "H",
          "hB"
        ],
        "es-BO": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-BR": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-EC": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-ES": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-GQ": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "es-PE": [
          "H",
          "h",
          "hB",
          "hb"
        ],
        "fr-CA": [
          "H",
          "h",
          "hB"
        ],
        "gl-ES": [
          "H",
          "h",
          "hB"
        ],
        "gu-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "hi-IN": [
          "hB",
          "h",
          "H"
        ],
        "it-CH": [
          "H",
          "h",
          "hB"
        ],
        "it-IT": [
          "H",
          "h",
          "hB"
        ],
        "kn-IN": [
          "hB",
          "h",
          "H"
        ],
        "ml-IN": [
          "hB",
          "h",
          "H"
        ],
        "mr-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "pa-IN": [
          "hB",
          "hb",
          "h",
          "H"
        ],
        "ta-IN": [
          "hB",
          "h",
          "hb",
          "H"
        ],
        "te-IN": [
          "hB",
          "h",
          "H"
        ],
        "zu-ZA": [
          "H",
          "hB",
          "hb",
          "h"
        ]
      };
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/date-time-pattern-generator.js
  var require_date_time_pattern_generator = __commonJS({
    "node_modules/@formatjs/icu-messageformat-parser/date-time-pattern-generator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getBestPattern = void 0;
      var time_data_generated_1 = require_time_data_generated();
      function getBestPattern(skeleton, locale) {
        var skeletonCopy = "";
        for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
          var patternChar = skeleton.charAt(patternPos);
          if (patternChar === "j") {
            var extraLength = 0;
            while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
              extraLength++;
              patternPos++;
            }
            var hourLen = 1 + (extraLength & 1);
            var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
            var dayPeriodChar = "a";
            var hourChar = getDefaultHourSymbolFromLocale(locale);
            if (hourChar == "H" || hourChar == "k") {
              dayPeriodLen = 0;
            }
            while (dayPeriodLen-- > 0) {
              skeletonCopy += dayPeriodChar;
            }
            while (hourLen-- > 0) {
              skeletonCopy = hourChar + skeletonCopy;
            }
          } else if (patternChar === "J") {
            skeletonCopy += "H";
          } else {
            skeletonCopy += patternChar;
          }
        }
        return skeletonCopy;
      }
      exports.getBestPattern = getBestPattern;
      function getDefaultHourSymbolFromLocale(locale) {
        var hourCycle = locale.hourCycle;
        if (hourCycle === void 0 && // @ts-ignore hourCycle(s) is not identified yet
        locale.hourCycles && // @ts-ignore
        locale.hourCycles.length) {
          hourCycle = locale.hourCycles[0];
        }
        if (hourCycle) {
          switch (hourCycle) {
            case "h24":
              return "k";
            case "h23":
              return "H";
            case "h12":
              return "h";
            case "h11":
              return "K";
            default:
              throw new Error("Invalid hourCycle");
          }
        }
        var languageTag = locale.language;
        var regionTag;
        if (languageTag !== "root") {
          regionTag = locale.maximize().region;
        }
        var hourCycles = time_data_generated_1.timeData[regionTag || ""] || time_data_generated_1.timeData[languageTag || ""] || time_data_generated_1.timeData["".concat(languageTag, "-001")] || time_data_generated_1.timeData["001"];
        return hourCycles[0];
      }
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/parser.js
  var require_parser = __commonJS({
    "node_modules/@formatjs/icu-messageformat-parser/parser.js"(exports) {
      "use strict";
      var _a;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Parser = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var error_1 = require_error();
      var types_1 = require_types();
      var regex_generated_1 = require_regex_generated();
      var icu_skeleton_parser_1 = require_icu_skeleton_parser();
      var date_time_pattern_generator_1 = require_date_time_pattern_generator();
      var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(regex_generated_1.SPACE_SEPARATOR_REGEX.source, "*"));
      var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(regex_generated_1.SPACE_SEPARATOR_REGEX.source, "*$"));
      function createLocation(start, end) {
        return { start, end };
      }
      var hasNativeStartsWith = !!String.prototype.startsWith && "_a".startsWith("a", 1);
      var hasNativeFromCodePoint = !!String.fromCodePoint;
      var hasNativeFromEntries = !!Object.fromEntries;
      var hasNativeCodePointAt = !!String.prototype.codePointAt;
      var hasTrimStart = !!String.prototype.trimStart;
      var hasTrimEnd = !!String.prototype.trimEnd;
      var hasNativeIsSafeInteger = !!Number.isSafeInteger;
      var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n) {
        return typeof n === "number" && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 9007199254740991;
      };
      var REGEX_SUPPORTS_U_AND_Y = true;
      try {
        re = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
        REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec("a")) === null || _a === void 0 ? void 0 : _a[0]) === "a";
      } catch (_) {
        REGEX_SUPPORTS_U_AND_Y = false;
      }
      var re;
      var startsWith = hasNativeStartsWith ? (
        // Native
        function startsWith2(s, search, position) {
          return s.startsWith(search, position);
        }
      ) : (
        // For IE11
        function startsWith2(s, search, position) {
          return s.slice(position, position + search.length) === search;
        }
      );
      var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : (
        // IE11
        function fromCodePoint2() {
          var codePoints = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            codePoints[_i] = arguments[_i];
          }
          var elements = "";
          var length = codePoints.length;
          var i = 0;
          var code;
          while (length > i) {
            code = codePoints[i++];
            if (code > 1114111)
              throw RangeError(code + " is not a valid code point");
            elements += code < 65536 ? String.fromCharCode(code) : String.fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
          }
          return elements;
        }
      );
      var fromEntries = (
        // native
        hasNativeFromEntries ? Object.fromEntries : (
          // Ponyfill
          function fromEntries2(entries) {
            var obj = {};
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
              var _a2 = entries_1[_i], k = _a2[0], v = _a2[1];
              obj[k] = v;
            }
            return obj;
          }
        )
      );
      var codePointAt = hasNativeCodePointAt ? (
        // Native
        function codePointAt2(s, index3) {
          return s.codePointAt(index3);
        }
      ) : (
        // IE 11
        function codePointAt2(s, index3) {
          var size = s.length;
          if (index3 < 0 || index3 >= size) {
            return void 0;
          }
          var first = s.charCodeAt(index3);
          var second;
          return first < 55296 || first > 56319 || index3 + 1 === size || (second = s.charCodeAt(index3 + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
        }
      );
      var trimStart = hasTrimStart ? (
        // Native
        function trimStart2(s) {
          return s.trimStart();
        }
      ) : (
        // Ponyfill
        function trimStart2(s) {
          return s.replace(SPACE_SEPARATOR_START_REGEX, "");
        }
      );
      var trimEnd = hasTrimEnd ? (
        // Native
        function trimEnd2(s) {
          return s.trimEnd();
        }
      ) : (
        // Ponyfill
        function trimEnd2(s) {
          return s.replace(SPACE_SEPARATOR_END_REGEX, "");
        }
      );
      function RE(s, flag) {
        return new RegExp(s, flag);
      }
      var matchIdentifierAtIndex;
      if (REGEX_SUPPORTS_U_AND_Y) {
        IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
        matchIdentifierAtIndex = function matchIdentifierAtIndex2(s, index3) {
          var _a2;
          IDENTIFIER_PREFIX_RE_1.lastIndex = index3;
          var match = IDENTIFIER_PREFIX_RE_1.exec(s);
          return (_a2 = match[1]) !== null && _a2 !== void 0 ? _a2 : "";
        };
      } else {
        matchIdentifierAtIndex = function matchIdentifierAtIndex2(s, index3) {
          var match = [];
          while (true) {
            var c = codePointAt(s, index3);
            if (c === void 0 || _isWhiteSpace(c) || _isPatternSyntax(c)) {
              break;
            }
            match.push(c);
            index3 += c >= 65536 ? 2 : 1;
          }
          return fromCodePoint.apply(void 0, match);
        };
      }
      var IDENTIFIER_PREFIX_RE_1;
      var Parser = (
        /** @class */
        function() {
          function Parser2(message, options) {
            if (options === void 0) {
              options = {};
            }
            this.message = message;
            this.position = { offset: 0, line: 1, column: 1 };
            this.ignoreTag = !!options.ignoreTag;
            this.locale = options.locale;
            this.requiresOtherClause = !!options.requiresOtherClause;
            this.shouldParseSkeletons = !!options.shouldParseSkeletons;
          }
          Parser2.prototype.parse = function() {
            if (this.offset() !== 0) {
              throw Error("parser can only be used once");
            }
            return this.parseMessage(0, "", false);
          };
          Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
            var elements = [];
            while (!this.isEOF()) {
              var char = this.char();
              if (char === 123) {
                var result = this.parseArgument(nestingLevel, expectingCloseTag);
                if (result.err) {
                  return result;
                }
                elements.push(result.val);
              } else if (char === 125 && nestingLevel > 0) {
                break;
              } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
                var position = this.clonePosition();
                this.bump();
                elements.push({
                  type: types_1.TYPE.pound,
                  location: createLocation(position, this.clonePosition())
                });
              } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
                if (expectingCloseTag) {
                  break;
                } else {
                  return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
                }
              } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
                var result = this.parseTag(nestingLevel, parentArgType);
                if (result.err) {
                  return result;
                }
                elements.push(result.val);
              } else {
                var result = this.parseLiteral(nestingLevel, parentArgType);
                if (result.err) {
                  return result;
                }
                elements.push(result.val);
              }
            }
            return { val: elements, err: null };
          };
          Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
            var startPosition = this.clonePosition();
            this.bump();
            var tagName = this.parseTagName();
            this.bumpSpace();
            if (this.bumpIf("/>")) {
              return {
                val: {
                  type: types_1.TYPE.literal,
                  value: "<".concat(tagName, "/>"),
                  location: createLocation(startPosition, this.clonePosition())
                },
                err: null
              };
            } else if (this.bumpIf(">")) {
              var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
              if (childrenResult.err) {
                return childrenResult;
              }
              var children = childrenResult.val;
              var endTagStartPosition = this.clonePosition();
              if (this.bumpIf("</")) {
                if (this.isEOF() || !_isAlpha(this.char())) {
                  return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                }
                var closingTagNameStartPosition = this.clonePosition();
                var closingTagName = this.parseTagName();
                if (tagName !== closingTagName) {
                  return this.error(error_1.ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
                }
                this.bumpSpace();
                if (!this.bumpIf(">")) {
                  return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                }
                return {
                  val: {
                    type: types_1.TYPE.tag,
                    value: tagName,
                    children,
                    location: createLocation(startPosition, this.clonePosition())
                  },
                  err: null
                };
              } else {
                return this.error(error_1.ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
              }
            } else {
              return this.error(error_1.ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
            }
          };
          Parser2.prototype.parseTagName = function() {
            var startOffset = this.offset();
            this.bump();
            while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
              this.bump();
            }
            return this.message.slice(startOffset, this.offset());
          };
          Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
            var start = this.clonePosition();
            var value = "";
            while (true) {
              var parseQuoteResult = this.tryParseQuote(parentArgType);
              if (parseQuoteResult) {
                value += parseQuoteResult;
                continue;
              }
              var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
              if (parseUnquotedResult) {
                value += parseUnquotedResult;
                continue;
              }
              var parseLeftAngleResult = this.tryParseLeftAngleBracket();
              if (parseLeftAngleResult) {
                value += parseLeftAngleResult;
                continue;
              }
              break;
            }
            var location2 = createLocation(start, this.clonePosition());
            return {
              val: { type: types_1.TYPE.literal, value, location: location2 },
              err: null
            };
          };
          Parser2.prototype.tryParseLeftAngleBracket = function() {
            if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || // If at the opening tag or closing tag position, bail.
            !_isAlphaOrSlash(this.peek() || 0))) {
              this.bump();
              return "<";
            }
            return null;
          };
          Parser2.prototype.tryParseQuote = function(parentArgType) {
            if (this.isEOF() || this.char() !== 39) {
              return null;
            }
            switch (this.peek()) {
              case 39:
                this.bump();
                this.bump();
                return "'";
              case 123:
              case 60:
              case 62:
              case 125:
                break;
              case 35:
                if (parentArgType === "plural" || parentArgType === "selectordinal") {
                  break;
                }
                return null;
              default:
                return null;
            }
            this.bump();
            var codePoints = [this.char()];
            this.bump();
            while (!this.isEOF()) {
              var ch = this.char();
              if (ch === 39) {
                if (this.peek() === 39) {
                  codePoints.push(39);
                  this.bump();
                } else {
                  this.bump();
                  break;
                }
              } else {
                codePoints.push(ch);
              }
              this.bump();
            }
            return fromCodePoint.apply(void 0, codePoints);
          };
          Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
            if (this.isEOF()) {
              return null;
            }
            var ch = this.char();
            if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch === 125 && nestingLevel > 0) {
              return null;
            } else {
              this.bump();
              return fromCodePoint(ch);
            }
          };
          Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
            var openingBracePosition = this.clonePosition();
            this.bump();
            this.bumpSpace();
            if (this.isEOF()) {
              return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            if (this.char() === 125) {
              this.bump();
              return this.error(error_1.ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
            var value = this.parseIdentifierIfPossible().value;
            if (!value) {
              return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
            this.bumpSpace();
            if (this.isEOF()) {
              return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            switch (this.char()) {
              case 125: {
                this.bump();
                return {
                  val: {
                    type: types_1.TYPE.argument,
                    // value does not include the opening and closing braces.
                    value,
                    location: createLocation(openingBracePosition, this.clonePosition())
                  },
                  err: null
                };
              }
              case 44: {
                this.bump();
                this.bumpSpace();
                if (this.isEOF()) {
                  return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
                }
                return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
              }
              default:
                return this.error(error_1.ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
          };
          Parser2.prototype.parseIdentifierIfPossible = function() {
            var startingPosition = this.clonePosition();
            var startOffset = this.offset();
            var value = matchIdentifierAtIndex(this.message, startOffset);
            var endOffset = startOffset + value.length;
            this.bumpTo(endOffset);
            var endPosition = this.clonePosition();
            var location2 = createLocation(startingPosition, endPosition);
            return { value, location: location2 };
          };
          Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
            var _a2;
            var typeStartPosition = this.clonePosition();
            var argType = this.parseIdentifierIfPossible().value;
            var typeEndPosition = this.clonePosition();
            switch (argType) {
              case "":
                return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
              case "number":
              case "date":
              case "time": {
                this.bumpSpace();
                var styleAndLocation = null;
                if (this.bumpIf(",")) {
                  this.bumpSpace();
                  var styleStartPosition = this.clonePosition();
                  var result = this.parseSimpleArgStyleIfPossible();
                  if (result.err) {
                    return result;
                  }
                  var style = trimEnd(result.val);
                  if (style.length === 0) {
                    return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                  }
                  var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                  styleAndLocation = { style, styleLocation };
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                  return argCloseResult;
                }
                var location_1 = createLocation(openingBracePosition, this.clonePosition());
                if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
                  var skeleton = trimStart(styleAndLocation.style.slice(2));
                  if (argType === "number") {
                    var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                    if (result.err) {
                      return result;
                    }
                    return {
                      val: { type: types_1.TYPE.number, value, location: location_1, style: result.val },
                      err: null
                    };
                  } else {
                    if (skeleton.length === 0) {
                      return this.error(error_1.ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                    }
                    var dateTimePattern = skeleton;
                    if (this.locale) {
                      dateTimePattern = (0, date_time_pattern_generator_1.getBestPattern)(skeleton, this.locale);
                    }
                    var style = {
                      type: types_1.SKELETON_TYPE.dateTime,
                      pattern: dateTimePattern,
                      location: styleAndLocation.styleLocation,
                      parsedOptions: this.shouldParseSkeletons ? (0, icu_skeleton_parser_1.parseDateTimeSkeleton)(dateTimePattern) : {}
                    };
                    var type = argType === "date" ? types_1.TYPE.date : types_1.TYPE.time;
                    return {
                      val: { type, value, location: location_1, style },
                      err: null
                    };
                  }
                }
                return {
                  val: {
                    type: argType === "number" ? types_1.TYPE.number : argType === "date" ? types_1.TYPE.date : types_1.TYPE.time,
                    value,
                    location: location_1,
                    style: (_a2 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a2 !== void 0 ? _a2 : null
                  },
                  err: null
                };
              }
              case "plural":
              case "selectordinal":
              case "select": {
                var typeEndPosition_1 = this.clonePosition();
                this.bumpSpace();
                if (!this.bumpIf(",")) {
                  return this.error(error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, tslib_1.__assign({}, typeEndPosition_1)));
                }
                this.bumpSpace();
                var identifierAndLocation = this.parseIdentifierIfPossible();
                var pluralOffset = 0;
                if (argType !== "select" && identifierAndLocation.value === "offset") {
                  if (!this.bumpIf(":")) {
                    return this.error(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                  }
                  this.bumpSpace();
                  var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                  if (result.err) {
                    return result;
                  }
                  this.bumpSpace();
                  identifierAndLocation = this.parseIdentifierIfPossible();
                  pluralOffset = result.val;
                }
                var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
                if (optionsResult.err) {
                  return optionsResult;
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                  return argCloseResult;
                }
                var location_2 = createLocation(openingBracePosition, this.clonePosition());
                if (argType === "select") {
                  return {
                    val: {
                      type: types_1.TYPE.select,
                      value,
                      options: fromEntries(optionsResult.val),
                      location: location_2
                    },
                    err: null
                  };
                } else {
                  return {
                    val: {
                      type: types_1.TYPE.plural,
                      value,
                      options: fromEntries(optionsResult.val),
                      offset: pluralOffset,
                      pluralType: argType === "plural" ? "cardinal" : "ordinal",
                      location: location_2
                    },
                    err: null
                  };
                }
              }
              default:
                return this.error(error_1.ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            }
          };
          Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
            if (this.isEOF() || this.char() !== 125) {
              return this.error(error_1.ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            this.bump();
            return { val: true, err: null };
          };
          Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
            var nestedBraces = 0;
            var startPosition = this.clonePosition();
            while (!this.isEOF()) {
              var ch = this.char();
              switch (ch) {
                case 39: {
                  this.bump();
                  var apostrophePosition = this.clonePosition();
                  if (!this.bumpUntil("'")) {
                    return this.error(error_1.ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                  }
                  this.bump();
                  break;
                }
                case 123: {
                  nestedBraces += 1;
                  this.bump();
                  break;
                }
                case 125: {
                  if (nestedBraces > 0) {
                    nestedBraces -= 1;
                  } else {
                    return {
                      val: this.message.slice(startPosition.offset, this.offset()),
                      err: null
                    };
                  }
                  break;
                }
                default:
                  this.bump();
                  break;
              }
            }
            return {
              val: this.message.slice(startPosition.offset, this.offset()),
              err: null
            };
          };
          Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location2) {
            var tokens = [];
            try {
              tokens = (0, icu_skeleton_parser_1.parseNumberSkeletonFromString)(skeleton);
            } catch (e) {
              return this.error(error_1.ErrorKind.INVALID_NUMBER_SKELETON, location2);
            }
            return {
              val: {
                type: types_1.SKELETON_TYPE.number,
                tokens,
                location: location2,
                parsedOptions: this.shouldParseSkeletons ? (0, icu_skeleton_parser_1.parseNumberSkeleton)(tokens) : {}
              },
              err: null
            };
          };
          Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
            var _a2;
            var hasOtherClause = false;
            var options = [];
            var parsedSelectors = /* @__PURE__ */ new Set();
            var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
            while (true) {
              if (selector.length === 0) {
                var startPosition = this.clonePosition();
                if (parentArgType !== "select" && this.bumpIf("=")) {
                  var result = this.tryParseDecimalInteger(error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, error_1.ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                  if (result.err) {
                    return result;
                  }
                  selectorLocation = createLocation(startPosition, this.clonePosition());
                  selector = this.message.slice(startPosition.offset, this.offset());
                } else {
                  break;
                }
              }
              if (parsedSelectors.has(selector)) {
                return this.error(parentArgType === "select" ? error_1.ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : error_1.ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
              }
              if (selector === "other") {
                hasOtherClause = true;
              }
              this.bumpSpace();
              var openingBracePosition = this.clonePosition();
              if (!this.bumpIf("{")) {
                return this.error(parentArgType === "select" ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
              }
              var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
              if (fragmentResult.err) {
                return fragmentResult;
              }
              var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
              if (argCloseResult.err) {
                return argCloseResult;
              }
              options.push([
                selector,
                {
                  value: fragmentResult.val,
                  location: createLocation(openingBracePosition, this.clonePosition())
                }
              ]);
              parsedSelectors.add(selector);
              this.bumpSpace();
              _a2 = this.parseIdentifierIfPossible(), selector = _a2.value, selectorLocation = _a2.location;
            }
            if (options.length === 0) {
              return this.error(parentArgType === "select" ? error_1.ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : error_1.ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
            }
            if (this.requiresOtherClause && !hasOtherClause) {
              return this.error(error_1.ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            return { val: options, err: null };
          };
          Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
            var sign = 1;
            var startingPosition = this.clonePosition();
            if (this.bumpIf("+")) {
            } else if (this.bumpIf("-")) {
              sign = -1;
            }
            var hasDigits = false;
            var decimal = 0;
            while (!this.isEOF()) {
              var ch = this.char();
              if (ch >= 48 && ch <= 57) {
                hasDigits = true;
                decimal = decimal * 10 + (ch - 48);
                this.bump();
              } else {
                break;
              }
            }
            var location2 = createLocation(startingPosition, this.clonePosition());
            if (!hasDigits) {
              return this.error(expectNumberError, location2);
            }
            decimal *= sign;
            if (!isSafeInteger(decimal)) {
              return this.error(invalidNumberError, location2);
            }
            return { val: decimal, err: null };
          };
          Parser2.prototype.offset = function() {
            return this.position.offset;
          };
          Parser2.prototype.isEOF = function() {
            return this.offset() === this.message.length;
          };
          Parser2.prototype.clonePosition = function() {
            return {
              offset: this.position.offset,
              line: this.position.line,
              column: this.position.column
            };
          };
          Parser2.prototype.char = function() {
            var offset = this.position.offset;
            if (offset >= this.message.length) {
              throw Error("out of bound");
            }
            var code = codePointAt(this.message, offset);
            if (code === void 0) {
              throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
            }
            return code;
          };
          Parser2.prototype.error = function(kind, location2) {
            return {
              val: null,
              err: {
                kind,
                message: this.message,
                location: location2
              }
            };
          };
          Parser2.prototype.bump = function() {
            if (this.isEOF()) {
              return;
            }
            var code = this.char();
            if (code === 10) {
              this.position.line += 1;
              this.position.column = 1;
              this.position.offset += 1;
            } else {
              this.position.column += 1;
              this.position.offset += code < 65536 ? 1 : 2;
            }
          };
          Parser2.prototype.bumpIf = function(prefix) {
            if (startsWith(this.message, prefix, this.offset())) {
              for (var i = 0; i < prefix.length; i++) {
                this.bump();
              }
              return true;
            }
            return false;
          };
          Parser2.prototype.bumpUntil = function(pattern) {
            var currentOffset = this.offset();
            var index3 = this.message.indexOf(pattern, currentOffset);
            if (index3 >= 0) {
              this.bumpTo(index3);
              return true;
            } else {
              this.bumpTo(this.message.length);
              return false;
            }
          };
          Parser2.prototype.bumpTo = function(targetOffset) {
            if (this.offset() > targetOffset) {
              throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
            }
            targetOffset = Math.min(targetOffset, this.message.length);
            while (true) {
              var offset = this.offset();
              if (offset === targetOffset) {
                break;
              }
              if (offset > targetOffset) {
                throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
              }
              this.bump();
              if (this.isEOF()) {
                break;
              }
            }
          };
          Parser2.prototype.bumpSpace = function() {
            while (!this.isEOF() && _isWhiteSpace(this.char())) {
              this.bump();
            }
          };
          Parser2.prototype.peek = function() {
            if (this.isEOF()) {
              return null;
            }
            var code = this.char();
            var offset = this.offset();
            var nextCode = this.message.charCodeAt(offset + (code >= 65536 ? 2 : 1));
            return nextCode !== null && nextCode !== void 0 ? nextCode : null;
          };
          return Parser2;
        }()
      );
      exports.Parser = Parser;
      function _isAlpha(codepoint) {
        return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
      }
      function _isAlphaOrSlash(codepoint) {
        return _isAlpha(codepoint) || codepoint === 47;
      }
      function _isPotentialElementNameChar(c) {
        return c === 45 || c === 46 || c >= 48 && c <= 57 || c === 95 || c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 183 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 893 || c >= 895 && c <= 8191 || c >= 8204 && c <= 8205 || c >= 8255 && c <= 8256 || c >= 8304 && c <= 8591 || c >= 11264 && c <= 12271 || c >= 12289 && c <= 55295 || c >= 63744 && c <= 64975 || c >= 65008 && c <= 65533 || c >= 65536 && c <= 983039;
      }
      function _isWhiteSpace(c) {
        return c >= 9 && c <= 13 || c === 32 || c === 133 || c >= 8206 && c <= 8207 || c === 8232 || c === 8233;
      }
      function _isPatternSyntax(c) {
        return c >= 33 && c <= 35 || c === 36 || c >= 37 && c <= 39 || c === 40 || c === 41 || c === 42 || c === 43 || c === 44 || c === 45 || c >= 46 && c <= 47 || c >= 58 && c <= 59 || c >= 60 && c <= 62 || c >= 63 && c <= 64 || c === 91 || c === 92 || c === 93 || c === 94 || c === 96 || c === 123 || c === 124 || c === 125 || c === 126 || c === 161 || c >= 162 && c <= 165 || c === 166 || c === 167 || c === 169 || c === 171 || c === 172 || c === 174 || c === 176 || c === 177 || c === 182 || c === 187 || c === 191 || c === 215 || c === 247 || c >= 8208 && c <= 8213 || c >= 8214 && c <= 8215 || c === 8216 || c === 8217 || c === 8218 || c >= 8219 && c <= 8220 || c === 8221 || c === 8222 || c === 8223 || c >= 8224 && c <= 8231 || c >= 8240 && c <= 8248 || c === 8249 || c === 8250 || c >= 8251 && c <= 8254 || c >= 8257 && c <= 8259 || c === 8260 || c === 8261 || c === 8262 || c >= 8263 && c <= 8273 || c === 8274 || c === 8275 || c >= 8277 && c <= 8286 || c >= 8592 && c <= 8596 || c >= 8597 && c <= 8601 || c >= 8602 && c <= 8603 || c >= 8604 && c <= 8607 || c === 8608 || c >= 8609 && c <= 8610 || c === 8611 || c >= 8612 && c <= 8613 || c === 8614 || c >= 8615 && c <= 8621 || c === 8622 || c >= 8623 && c <= 8653 || c >= 8654 && c <= 8655 || c >= 8656 && c <= 8657 || c === 8658 || c === 8659 || c === 8660 || c >= 8661 && c <= 8691 || c >= 8692 && c <= 8959 || c >= 8960 && c <= 8967 || c === 8968 || c === 8969 || c === 8970 || c === 8971 || c >= 8972 && c <= 8991 || c >= 8992 && c <= 8993 || c >= 8994 && c <= 9e3 || c === 9001 || c === 9002 || c >= 9003 && c <= 9083 || c === 9084 || c >= 9085 && c <= 9114 || c >= 9115 && c <= 9139 || c >= 9140 && c <= 9179 || c >= 9180 && c <= 9185 || c >= 9186 && c <= 9254 || c >= 9255 && c <= 9279 || c >= 9280 && c <= 9290 || c >= 9291 && c <= 9311 || c >= 9472 && c <= 9654 || c === 9655 || c >= 9656 && c <= 9664 || c === 9665 || c >= 9666 && c <= 9719 || c >= 9720 && c <= 9727 || c >= 9728 && c <= 9838 || c === 9839 || c >= 9840 && c <= 10087 || c === 10088 || c === 10089 || c === 10090 || c === 10091 || c === 10092 || c === 10093 || c === 10094 || c === 10095 || c === 10096 || c === 10097 || c === 10098 || c === 10099 || c === 10100 || c === 10101 || c >= 10132 && c <= 10175 || c >= 10176 && c <= 10180 || c === 10181 || c === 10182 || c >= 10183 && c <= 10213 || c === 10214 || c === 10215 || c === 10216 || c === 10217 || c === 10218 || c === 10219 || c === 10220 || c === 10221 || c === 10222 || c === 10223 || c >= 10224 && c <= 10239 || c >= 10240 && c <= 10495 || c >= 10496 && c <= 10626 || c === 10627 || c === 10628 || c === 10629 || c === 10630 || c === 10631 || c === 10632 || c === 10633 || c === 10634 || c === 10635 || c === 10636 || c === 10637 || c === 10638 || c === 10639 || c === 10640 || c === 10641 || c === 10642 || c === 10643 || c === 10644 || c === 10645 || c === 10646 || c === 10647 || c === 10648 || c >= 10649 && c <= 10711 || c === 10712 || c === 10713 || c === 10714 || c === 10715 || c >= 10716 && c <= 10747 || c === 10748 || c === 10749 || c >= 10750 && c <= 11007 || c >= 11008 && c <= 11055 || c >= 11056 && c <= 11076 || c >= 11077 && c <= 11078 || c >= 11079 && c <= 11084 || c >= 11085 && c <= 11123 || c >= 11124 && c <= 11125 || c >= 11126 && c <= 11157 || c === 11158 || c >= 11159 && c <= 11263 || c >= 11776 && c <= 11777 || c === 11778 || c === 11779 || c === 11780 || c === 11781 || c >= 11782 && c <= 11784 || c === 11785 || c === 11786 || c === 11787 || c === 11788 || c === 11789 || c >= 11790 && c <= 11798 || c === 11799 || c >= 11800 && c <= 11801 || c === 11802 || c === 11803 || c === 11804 || c === 11805 || c >= 11806 && c <= 11807 || c === 11808 || c === 11809 || c === 11810 || c === 11811 || c === 11812 || c === 11813 || c === 11814 || c === 11815 || c === 11816 || c === 11817 || c >= 11818 && c <= 11822 || c === 11823 || c >= 11824 && c <= 11833 || c >= 11834 && c <= 11835 || c >= 11836 && c <= 11839 || c === 11840 || c === 11841 || c === 11842 || c >= 11843 && c <= 11855 || c >= 11856 && c <= 11857 || c === 11858 || c >= 11859 && c <= 11903 || c >= 12289 && c <= 12291 || c === 12296 || c === 12297 || c === 12298 || c === 12299 || c === 12300 || c === 12301 || c === 12302 || c === 12303 || c === 12304 || c === 12305 || c >= 12306 && c <= 12307 || c === 12308 || c === 12309 || c === 12310 || c === 12311 || c === 12312 || c === 12313 || c === 12314 || c === 12315 || c === 12316 || c === 12317 || c >= 12318 && c <= 12319 || c === 12320 || c === 12336 || c === 64830 || c === 64831 || c >= 65093 && c <= 65094;
      }
    }
  });

  // node_modules/@formatjs/icu-messageformat-parser/index.js
  var require_icu_messageformat_parser = __commonJS({
    "node_modules/@formatjs/icu-messageformat-parser/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports._Parser = exports.parse = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var error_1 = require_error();
      var parser_1 = require_parser();
      var types_1 = require_types();
      function pruneLocation(els) {
        els.forEach(function(el) {
          delete el.location;
          if ((0, types_1.isSelectElement)(el) || (0, types_1.isPluralElement)(el)) {
            for (var k in el.options) {
              delete el.options[k].location;
              pruneLocation(el.options[k].value);
            }
          } else if ((0, types_1.isNumberElement)(el) && (0, types_1.isNumberSkeleton)(el.style)) {
            delete el.style.location;
          } else if (((0, types_1.isDateElement)(el) || (0, types_1.isTimeElement)(el)) && (0, types_1.isDateTimeSkeleton)(el.style)) {
            delete el.style.location;
          } else if ((0, types_1.isTagElement)(el)) {
            pruneLocation(el.children);
          }
        });
      }
      function parse(message, opts) {
        if (opts === void 0) {
          opts = {};
        }
        opts = tslib_1.__assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
        var result = new parser_1.Parser(message, opts).parse();
        if (result.err) {
          var error = SyntaxError(error_1.ErrorKind[result.err.kind]);
          error.location = result.err.location;
          error.originalMessage = result.err.message;
          throw error;
        }
        if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
          pruneLocation(result.val);
        }
        return result.val;
      }
      exports.parse = parse;
      tslib_1.__exportStar(require_types(), exports);
      exports._Parser = parser_1.Parser;
    }
  });

  // node_modules/@formatjs/fast-memoize/index.js
  var require_fast_memoize = __commonJS({
    "node_modules/@formatjs/fast-memoize/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.strategies = exports.memoize = void 0;
      function memoize(fn, options) {
        var cache = options && options.cache ? options.cache : cacheDefault;
        var serializer = options && options.serializer ? options.serializer : serializerDefault;
        var strategy = options && options.strategy ? options.strategy : strategyDefault;
        return strategy(fn, {
          cache,
          serializer
        });
      }
      exports.memoize = memoize;
      function isPrimitive(value) {
        return value == null || typeof value === "number" || typeof value === "boolean";
      }
      function monadic(fn, cache, serializer, arg) {
        var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === "undefined") {
          computedValue = fn.call(this, arg);
          cache.set(cacheKey, computedValue);
        }
        return computedValue;
      }
      function variadic(fn, cache, serializer) {
        var args = Array.prototype.slice.call(arguments, 3);
        var cacheKey = serializer(args);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === "undefined") {
          computedValue = fn.apply(this, args);
          cache.set(cacheKey, computedValue);
        }
        return computedValue;
      }
      function assemble(fn, context, strategy, cache, serialize) {
        return strategy.bind(context, fn, cache, serialize);
      }
      function strategyDefault(fn, options) {
        var strategy = fn.length === 1 ? monadic : variadic;
        return assemble(fn, this, strategy, options.cache.create(), options.serializer);
      }
      function strategyVariadic(fn, options) {
        return assemble(fn, this, variadic, options.cache.create(), options.serializer);
      }
      function strategyMonadic(fn, options) {
        return assemble(fn, this, monadic, options.cache.create(), options.serializer);
      }
      var serializerDefault = function() {
        return JSON.stringify(arguments);
      };
      function ObjectWithoutPrototypeCache() {
        this.cache = /* @__PURE__ */ Object.create(null);
      }
      ObjectWithoutPrototypeCache.prototype.get = function(key) {
        return this.cache[key];
      };
      ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
        this.cache[key] = value;
      };
      var cacheDefault = {
        create: function create() {
          return new ObjectWithoutPrototypeCache();
        }
      };
      exports.strategies = {
        variadic: strategyVariadic,
        monadic: strategyMonadic
      };
    }
  });

  // node_modules/intl-messageformat/src/error.js
  var require_error2 = __commonJS({
    "node_modules/intl-messageformat/src/error.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.MissingValueError = exports.InvalidValueTypeError = exports.InvalidValueError = exports.FormatError = exports.ErrorCode = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var ErrorCode;
      (function(ErrorCode2) {
        ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
        ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
        ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
      })(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
      var FormatError = (
        /** @class */
        function(_super) {
          tslib_1.__extends(FormatError2, _super);
          function FormatError2(msg, code, originalMessage) {
            var _this = _super.call(this, msg) || this;
            _this.code = code;
            _this.originalMessage = originalMessage;
            return _this;
          }
          FormatError2.prototype.toString = function() {
            return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
          };
          return FormatError2;
        }(Error)
      );
      exports.FormatError = FormatError;
      var InvalidValueError = (
        /** @class */
        function(_super) {
          tslib_1.__extends(InvalidValueError2, _super);
          function InvalidValueError2(variableId, value, options, originalMessage) {
            return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
          }
          return InvalidValueError2;
        }(FormatError)
      );
      exports.InvalidValueError = InvalidValueError;
      var InvalidValueTypeError = (
        /** @class */
        function(_super) {
          tslib_1.__extends(InvalidValueTypeError2, _super);
          function InvalidValueTypeError2(value, type, originalMessage) {
            return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
          }
          return InvalidValueTypeError2;
        }(FormatError)
      );
      exports.InvalidValueTypeError = InvalidValueTypeError;
      var MissingValueError = (
        /** @class */
        function(_super) {
          tslib_1.__extends(MissingValueError2, _super);
          function MissingValueError2(variableId, originalMessage) {
            return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
          }
          return MissingValueError2;
        }(FormatError)
      );
      exports.MissingValueError = MissingValueError;
    }
  });

  // node_modules/intl-messageformat/src/formatters.js
  var require_formatters = __commonJS({
    "node_modules/intl-messageformat/src/formatters.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.formatToParts = exports.isFormatXMLElementFn = exports.PART_TYPE = void 0;
      var icu_messageformat_parser_1 = require_icu_messageformat_parser();
      var error_1 = require_error2();
      var PART_TYPE;
      (function(PART_TYPE2) {
        PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
        PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
      })(PART_TYPE = exports.PART_TYPE || (exports.PART_TYPE = {}));
      function mergeLiteral(parts) {
        if (parts.length < 2) {
          return parts;
        }
        return parts.reduce(function(all, part) {
          var lastPart = all[all.length - 1];
          if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
            all.push(part);
          } else {
            lastPart.value += part.value;
          }
          return all;
        }, []);
      }
      function isFormatXMLElementFn(el) {
        return typeof el === "function";
      }
      exports.isFormatXMLElementFn = isFormatXMLElementFn;
      function formatToParts(els, locales, formatters, formats, values, currentPluralValue, originalMessage) {
        if (els.length === 1 && (0, icu_messageformat_parser_1.isLiteralElement)(els[0])) {
          return [
            {
              type: PART_TYPE.literal,
              value: els[0].value
            }
          ];
        }
        var result = [];
        for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
          var el = els_1[_i];
          if ((0, icu_messageformat_parser_1.isLiteralElement)(el)) {
            result.push({
              type: PART_TYPE.literal,
              value: el.value
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isPoundElement)(el)) {
            if (typeof currentPluralValue === "number") {
              result.push({
                type: PART_TYPE.literal,
                value: formatters.getNumberFormat(locales).format(currentPluralValue)
              });
            }
            continue;
          }
          var varName = el.value;
          if (!(values && varName in values)) {
            throw new error_1.MissingValueError(varName, originalMessage);
          }
          var value = values[varName];
          if ((0, icu_messageformat_parser_1.isArgumentElement)(el)) {
            if (!value || typeof value === "string" || typeof value === "number") {
              value = typeof value === "string" || typeof value === "number" ? String(value) : "";
            }
            result.push({
              type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
              value
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isDateElement)(el)) {
            var style = typeof el.style === "string" ? formats.date[el.style] : (0, icu_messageformat_parser_1.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : void 0;
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getDateTimeFormat(locales, style).format(value)
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isTimeElement)(el)) {
            var style = typeof el.style === "string" ? formats.time[el.style] : (0, icu_messageformat_parser_1.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getDateTimeFormat(locales, style).format(value)
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isNumberElement)(el)) {
            var style = typeof el.style === "string" ? formats.number[el.style] : (0, icu_messageformat_parser_1.isNumberSkeleton)(el.style) ? el.style.parsedOptions : void 0;
            if (style && style.scale) {
              value = value * (style.scale || 1);
            }
            result.push({
              type: PART_TYPE.literal,
              value: formatters.getNumberFormat(locales, style).format(value)
            });
            continue;
          }
          if ((0, icu_messageformat_parser_1.isTagElement)(el)) {
            var children = el.children, value_1 = el.value;
            var formatFn = values[value_1];
            if (!isFormatXMLElementFn(formatFn)) {
              throw new error_1.InvalidValueTypeError(value_1, "function", originalMessage);
            }
            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
            var chunks = formatFn(parts.map(function(p) {
              return p.value;
            }));
            if (!Array.isArray(chunks)) {
              chunks = [chunks];
            }
            result.push.apply(result, chunks.map(function(c) {
              return {
                type: typeof c === "string" ? PART_TYPE.literal : PART_TYPE.object,
                value: c
              };
            }));
          }
          if ((0, icu_messageformat_parser_1.isSelectElement)(el)) {
            var opt = el.options[value] || el.options.other;
            if (!opt) {
              throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
            continue;
          }
          if ((0, icu_messageformat_parser_1.isPluralElement)(el)) {
            var opt = el.options["=".concat(value)];
            if (!opt) {
              if (!Intl.PluralRules) {
                throw new error_1.FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', error_1.ErrorCode.MISSING_INTL_API, originalMessage);
              }
              var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
              opt = el.options[rule] || el.options.other;
            }
            if (!opt) {
              throw new error_1.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
            continue;
          }
        }
        return mergeLiteral(result);
      }
      exports.formatToParts = formatToParts;
    }
  });

  // node_modules/intl-messageformat/src/core.js
  var require_core = __commonJS({
    "node_modules/intl-messageformat/src/core.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IntlMessageFormat = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var icu_messageformat_parser_1 = require_icu_messageformat_parser();
      var fast_memoize_1 = require_fast_memoize();
      var formatters_1 = require_formatters();
      function mergeConfig(c1, c2) {
        if (!c2) {
          return c1;
        }
        return tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function(all, k) {
          all[k] = tslib_1.__assign(tslib_1.__assign({}, c1[k]), c2[k] || {});
          return all;
        }, {}));
      }
      function mergeConfigs(defaultConfig, configs) {
        if (!configs) {
          return defaultConfig;
        }
        return Object.keys(defaultConfig).reduce(function(all, k) {
          all[k] = mergeConfig(defaultConfig[k], configs[k]);
          return all;
        }, tslib_1.__assign({}, defaultConfig));
      }
      function createFastMemoizeCache(store) {
        return {
          create: function() {
            return {
              get: function(key) {
                return store[key];
              },
              set: function(key, value) {
                store[key] = value;
              }
            };
          }
        };
      }
      function createDefaultFormatters(cache) {
        if (cache === void 0) {
          cache = {
            number: {},
            dateTime: {},
            pluralRules: {}
          };
        }
        return {
          getNumberFormat: (0, fast_memoize_1.memoize)(function() {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new ((_a = Intl.NumberFormat).bind.apply(_a, tslib_1.__spreadArray([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.number),
            strategy: fast_memoize_1.strategies.variadic
          }),
          getDateTimeFormat: (0, fast_memoize_1.memoize)(function() {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, tslib_1.__spreadArray([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.dateTime),
            strategy: fast_memoize_1.strategies.variadic
          }),
          getPluralRules: (0, fast_memoize_1.memoize)(function() {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            return new ((_a = Intl.PluralRules).bind.apply(_a, tslib_1.__spreadArray([void 0], args, false)))();
          }, {
            cache: createFastMemoizeCache(cache.pluralRules),
            strategy: fast_memoize_1.strategies.variadic
          })
        };
      }
      var IntlMessageFormat = exports.IntlMessageFormat = /** @class */
      function() {
        function IntlMessageFormat2(message, locales, overrideFormats, opts) {
          if (locales === void 0) {
            locales = IntlMessageFormat2.defaultLocale;
          }
          var _this = this;
          this.formatterCache = {
            number: {},
            dateTime: {},
            pluralRules: {}
          };
          this.format = function(values) {
            var parts = _this.formatToParts(values);
            if (parts.length === 1) {
              return parts[0].value;
            }
            var result = parts.reduce(function(all, part) {
              if (!all.length || part.type !== formatters_1.PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
                all.push(part.value);
              } else {
                all[all.length - 1] += part.value;
              }
              return all;
            }, []);
            if (result.length <= 1) {
              return result[0] || "";
            }
            return result;
          };
          this.formatToParts = function(values) {
            return (0, formatters_1.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, void 0, _this.message);
          };
          this.resolvedOptions = function() {
            var _a2;
            return {
              locale: ((_a2 = _this.resolvedLocale) === null || _a2 === void 0 ? void 0 : _a2.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
            };
          };
          this.getAst = function() {
            return _this.ast;
          };
          this.locales = locales;
          this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
          if (typeof message === "string") {
            this.message = message;
            if (!IntlMessageFormat2.__parse) {
              throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
            }
            var _a = opts || {}, formatters = _a.formatters, parseOpts = tslib_1.__rest(_a, ["formatters"]);
            this.ast = IntlMessageFormat2.__parse(message, tslib_1.__assign(tslib_1.__assign({}, parseOpts), { locale: this.resolvedLocale }));
          } else {
            this.ast = message;
          }
          if (!Array.isArray(this.ast)) {
            throw new TypeError("A message must be provided as a String or AST.");
          }
          this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
          this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
        }
        Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
          get: function() {
            if (!IntlMessageFormat2.memoizedDefaultLocale) {
              IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
            }
            return IntlMessageFormat2.memoizedDefaultLocale;
          },
          enumerable: false,
          configurable: true
        });
        IntlMessageFormat2.memoizedDefaultLocale = null;
        IntlMessageFormat2.resolveLocale = function(locales) {
          if (typeof Intl.Locale === "undefined") {
            return;
          }
          var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
          if (supportedLocales.length > 0) {
            return new Intl.Locale(supportedLocales[0]);
          }
          return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
        };
        IntlMessageFormat2.__parse = icu_messageformat_parser_1.parse;
        IntlMessageFormat2.formats = {
          number: {
            integer: {
              maximumFractionDigits: 0
            },
            currency: {
              style: "currency"
            },
            percent: {
              style: "percent"
            }
          },
          date: {
            short: {
              month: "numeric",
              day: "numeric",
              year: "2-digit"
            },
            medium: {
              month: "short",
              day: "numeric",
              year: "numeric"
            },
            long: {
              month: "long",
              day: "numeric",
              year: "numeric"
            },
            full: {
              weekday: "long",
              month: "long",
              day: "numeric",
              year: "numeric"
            }
          },
          time: {
            short: {
              hour: "numeric",
              minute: "numeric"
            },
            medium: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric"
            },
            long: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              timeZoneName: "short"
            },
            full: {
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              timeZoneName: "short"
            }
          }
        };
        return IntlMessageFormat2;
      }();
    }
  });

  // node_modules/intl-messageformat/index.js
  var require_intl_messageformat = __commonJS({
    "node_modules/intl-messageformat/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var core_1 = require_core();
      tslib_1.__exportStar(require_formatters(), exports);
      tslib_1.__exportStar(require_core(), exports);
      tslib_1.__exportStar(require_error2(), exports);
      exports.default = core_1.IntlMessageFormat;
    }
  });

  // node_modules/@internationalized/message/dist/main.js
  var require_main9 = __commonJS({
    "node_modules/@internationalized/message/dist/main.js"(exports, module) {
      var $g9nQA$intlmessageformat = require_intl_messageformat();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "MessageDictionary", () => $9a5a7b8408290694$export$64839e615120df17);
      $parcel$export(module.exports, "MessageFormatter", () => $7a31ee9993c13f0b$export$526ebc05ff964723);
      var $9a5a7b8408290694$export$64839e615120df17 = class {
        getStringForLocale(key, locale) {
          let strings = this.messages[locale];
          if (!strings) {
            strings = $9a5a7b8408290694$var$getStringsForLocale(locale, this.messages, this.defaultLocale);
            this.messages[locale] = strings;
          }
          let string = strings[key];
          if (!string)
            throw new Error(`Could not find intl message ${key} in ${locale} locale`);
          return string;
        }
        constructor(messages, defaultLocale = "en-US") {
          this.messages = __spreadValues({}, messages);
          this.defaultLocale = defaultLocale;
        }
      };
      function $9a5a7b8408290694$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
        if (strings[locale])
          return strings[locale];
        let language = $9a5a7b8408290694$var$getLanguage(locale);
        if (strings[language])
          return strings[language];
        for (let key in strings) {
          if (key.startsWith(language + "-"))
            return strings[key];
        }
        return strings[defaultLocale];
      }
      function $9a5a7b8408290694$var$getLanguage(locale) {
        if (Intl.Locale)
          return new Intl.Locale(locale).language;
        return locale.split("-")[0];
      }
      var $7a31ee9993c13f0b$export$526ebc05ff964723 = class {
        format(key, variables) {
          let message = this.cache[key];
          if (!message) {
            let msg = this.messages.getStringForLocale(key, this.locale);
            if (!msg)
              throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);
            message = new (0, $parcel$interopDefault($g9nQA$intlmessageformat))(msg, this.locale);
            this.cache[key] = message;
          }
          let varCopy;
          if (variables)
            varCopy = Object.keys(variables).reduce((acc, key2) => {
              acc[key2] = variables[key2] == null ? false : variables[key2];
              return acc;
            }, {});
          return message.format(varCopy);
        }
        constructor(locale, messages) {
          this.locale = locale;
          this.messages = messages;
          this.cache = {};
        }
      };
    }
  });

  // node_modules/@react-aria/i18n/dist/useMessageFormatter.js
  var require_useMessageFormatter = __commonJS({
    "node_modules/@react-aria/i18n/dist/useMessageFormatter.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.useMessageFormatter = useMessageFormatter;
      var _message = require_main9();
      var _react = require_react();
      var _i18n = require_main10();
      var cache = /* @__PURE__ */ new WeakMap();
      function getCachedDictionary(strings) {
        let dictionary = cache.get(strings);
        if (!dictionary) {
          dictionary = new _message.MessageDictionary(strings);
          cache.set(strings, dictionary);
        }
        return dictionary;
      }
      function useMessageFormatter(strings) {
        let {
          locale
        } = (0, _i18n.useLocale)();
        let dictionary = (0, _react.useMemo)(() => getCachedDictionary(strings), [strings]);
        let formatter = (0, _react.useMemo)(() => new _message.MessageFormatter(locale, dictionary), [locale, dictionary]);
        return (0, _react.useCallback)((key, variables) => formatter.format(key, variables), [formatter]);
      }
    }
  });

  // node_modules/@react-aria/i18n/dist/main.js
  var require_main10 = __commonJS({
    "node_modules/@react-aria/i18n/dist/main.js"(exports, module) {
      module.exports = require_real_main();
      Object.defineProperties(module.exports, Object.getOwnPropertyDescriptors(require_useMessageFormatter()));
    }
  });

  // node_modules/@swc/helpers/cjs/_class_apply_descriptor_get.cjs
  var require_class_apply_descriptor_get = __commonJS({
    "node_modules/@swc/helpers/cjs/_class_apply_descriptor_get.cjs"(exports) {
      "use strict";
      exports._ = exports._class_apply_descriptor_get = _class_apply_descriptor_get;
      function _class_apply_descriptor_get(receiver, descriptor) {
        if (descriptor.get)
          return descriptor.get.call(receiver);
        return descriptor.value;
      }
    }
  });

  // node_modules/@swc/helpers/cjs/_class_extract_field_descriptor.cjs
  var require_class_extract_field_descriptor = __commonJS({
    "node_modules/@swc/helpers/cjs/_class_extract_field_descriptor.cjs"(exports) {
      "use strict";
      exports._ = exports._class_extract_field_descriptor = _class_extract_field_descriptor;
      function _class_extract_field_descriptor(receiver, privateMap, action) {
        if (!privateMap.has(receiver))
          throw new TypeError("attempted to " + action + " private field on non-instance");
        return privateMap.get(receiver);
      }
    }
  });

  // node_modules/@swc/helpers/cjs/_class_private_field_get.cjs
  var require_class_private_field_get = __commonJS({
    "node_modules/@swc/helpers/cjs/_class_private_field_get.cjs"(exports) {
      "use strict";
      var _class_apply_descriptor_get = require_class_apply_descriptor_get();
      var _class_extract_field_descriptor = require_class_extract_field_descriptor();
      exports._ = exports._class_private_field_get = _class_private_field_get;
      function _class_private_field_get(receiver, privateMap) {
        var descriptor = _class_extract_field_descriptor._(receiver, privateMap, "get");
        return _class_apply_descriptor_get._(receiver, descriptor);
      }
    }
  });

  // node_modules/@swc/helpers/cjs/_class_apply_descriptor_set.cjs
  var require_class_apply_descriptor_set = __commonJS({
    "node_modules/@swc/helpers/cjs/_class_apply_descriptor_set.cjs"(exports) {
      "use strict";
      exports._ = exports._class_apply_descriptor_set = _class_apply_descriptor_set;
      function _class_apply_descriptor_set(receiver, descriptor, value) {
        if (descriptor.set)
          descriptor.set.call(receiver, value);
        else {
          if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
          }
          descriptor.value = value;
        }
      }
    }
  });

  // node_modules/@swc/helpers/cjs/_class_private_field_set.cjs
  var require_class_private_field_set = __commonJS({
    "node_modules/@swc/helpers/cjs/_class_private_field_set.cjs"(exports) {
      "use strict";
      var _class_apply_descriptor_set = require_class_apply_descriptor_set();
      var _class_extract_field_descriptor = require_class_extract_field_descriptor();
      exports._ = exports._class_private_field_set = _class_private_field_set;
      function _class_private_field_set(receiver, privateMap, value) {
        var descriptor = _class_extract_field_descriptor._(receiver, privateMap, "set");
        _class_apply_descriptor_set._(receiver, descriptor, value);
        return value;
      }
    }
  });

  // node_modules/@react-aria/interactions/dist/main.js
  var require_main11 = __commonJS({
    "node_modules/@react-aria/interactions/dist/main.js"(exports, module) {
      var $goTMa$reactariautils = require_main7();
      var $goTMa$react = require_react();
      var $goTMa$swchelperscjs_class_private_field_getcjs = require_class_private_field_get();
      var $goTMa$swchelperscjs_class_private_field_initcjs = require_class_private_field_init();
      var $goTMa$swchelperscjs_class_private_field_setcjs = require_class_private_field_set();
      var $goTMa$reactariassr = require_main3();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "Pressable", () => $e1dbec26039c051d$export$27c701ed9e449e99);
      $parcel$export(module.exports, "PressResponder", () => $3596bae48579386f$export$3351871ee4b288b8);
      $parcel$export(module.exports, "ClearPressResponder", () => $3596bae48579386f$export$cf75428e0b9ed1ea);
      $parcel$export(module.exports, "useFocus", () => $5cb73d0ce355b0dc$export$f8168d8dd8fd66e6);
      $parcel$export(module.exports, "isFocusVisible", () => $e77252a287ef94ab$export$b9b3dfddab17db27);
      $parcel$export(module.exports, "getInteractionModality", () => $e77252a287ef94ab$export$630ff653c5ada6a9);
      $parcel$export(module.exports, "setInteractionModality", () => $e77252a287ef94ab$export$8397ddfc504fdb9a);
      $parcel$export(module.exports, "useInteractionModality", () => $e77252a287ef94ab$export$98e20ec92f614cfe);
      $parcel$export(module.exports, "useFocusVisible", () => $e77252a287ef94ab$export$ffd9e5021c1fb2d6);
      $parcel$export(module.exports, "useFocusVisibleListener", () => $e77252a287ef94ab$export$ec71b4b83ac08ec3);
      $parcel$export(module.exports, "useFocusWithin", () => $d16842bbd0359d1b$export$420e68273165f4ec);
      $parcel$export(module.exports, "useHover", () => $ffbc150311c75f01$export$ae780daf29e6d456);
      $parcel$export(module.exports, "useInteractOutside", () => $edcfa848c42f94f4$export$872b660ac5a1ff98);
      $parcel$export(module.exports, "useKeyboard", () => $892d64db2a3c53b0$export$8f71654801c2f7cd);
      $parcel$export(module.exports, "useMove", () => $c09386fc48fa427d$export$36da96379f79f245);
      $parcel$export(module.exports, "usePress", () => $0294ea432cd92340$export$45712eceda6fad21);
      $parcel$export(module.exports, "useScrollWheel", () => $a3dbce0aed7087e2$export$2123ff2b87c81ca);
      $parcel$export(module.exports, "useLongPress", () => $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9);
      var $f7e14e656343df57$var$state = "default";
      var $f7e14e656343df57$var$savedUserSelect = "";
      var $f7e14e656343df57$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
      function $f7e14e656343df57$export$16a4697467175487(target) {
        if ((0, $goTMa$reactariautils.isIOS)()) {
          if ($f7e14e656343df57$var$state === "default") {
            $f7e14e656343df57$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
            document.documentElement.style.webkitUserSelect = "none";
          }
          $f7e14e656343df57$var$state = "disabled";
        } else if (target instanceof HTMLElement || target instanceof SVGElement) {
          $f7e14e656343df57$var$modifiedElementMap.set(target, target.style.userSelect);
          target.style.userSelect = "none";
        }
      }
      function $f7e14e656343df57$export$b0d6fa1ab32e3295(target) {
        if ((0, $goTMa$reactariautils.isIOS)()) {
          if ($f7e14e656343df57$var$state !== "disabled")
            return;
          $f7e14e656343df57$var$state = "restoring";
          setTimeout(() => {
            (0, $goTMa$reactariautils.runAfterTransition)(() => {
              if ($f7e14e656343df57$var$state === "restoring") {
                if (document.documentElement.style.webkitUserSelect === "none")
                  document.documentElement.style.webkitUserSelect = $f7e14e656343df57$var$savedUserSelect || "";
                $f7e14e656343df57$var$savedUserSelect = "";
                $f7e14e656343df57$var$state = "default";
              }
            });
          }, 300);
        } else if (target instanceof HTMLElement || target instanceof SVGElement) {
          if (target && $f7e14e656343df57$var$modifiedElementMap.has(target)) {
            let targetOldUserSelect = $f7e14e656343df57$var$modifiedElementMap.get(target);
            if (target.style.userSelect === "none")
              target.style.userSelect = targetOldUserSelect;
            if (target.getAttribute("style") === "")
              target.removeAttribute("style");
            $f7e14e656343df57$var$modifiedElementMap.delete(target);
          }
        }
      }
      var $01d3f539e91688c8$export$5165eccb35aaadb5 = (0, $parcel$interopDefault($goTMa$react)).createContext(null);
      $01d3f539e91688c8$export$5165eccb35aaadb5.displayName = "PressResponderContext";
      function $0294ea432cd92340$var$usePressResponderContext(props) {
        let context = (0, $goTMa$react.useContext)((0, $01d3f539e91688c8$export$5165eccb35aaadb5));
        if (context) {
          let _a = context, { register } = _a, contextProps = __objRest(_a, ["register"]);
          props = (0, $goTMa$reactariautils.mergeProps)(contextProps, props);
          register();
        }
        (0, $goTMa$reactariautils.useSyncRef)(context, props.ref);
        return props;
      }
      var $0294ea432cd92340$var$_shouldStopPropagation = /* @__PURE__ */ new WeakMap();
      var $0294ea432cd92340$var$PressEvent = class {
        continuePropagation() {
          (0, $goTMa$swchelperscjs_class_private_field_setcjs._)(this, $0294ea432cd92340$var$_shouldStopPropagation, false);
        }
        get shouldStopPropagation() {
          return (0, $goTMa$swchelperscjs_class_private_field_getcjs._)(this, $0294ea432cd92340$var$_shouldStopPropagation);
        }
        constructor(type, pointerType, originalEvent) {
          (0, $goTMa$swchelperscjs_class_private_field_initcjs._)(this, $0294ea432cd92340$var$_shouldStopPropagation, {
            writable: true,
            value: void 0
          });
          (0, $goTMa$swchelperscjs_class_private_field_setcjs._)(this, $0294ea432cd92340$var$_shouldStopPropagation, true);
          this.type = type;
          this.pointerType = pointerType;
          this.target = originalEvent.currentTarget;
          this.shiftKey = originalEvent.shiftKey;
          this.metaKey = originalEvent.metaKey;
          this.ctrlKey = originalEvent.ctrlKey;
          this.altKey = originalEvent.altKey;
        }
      };
      var $0294ea432cd92340$var$LINK_CLICKED = Symbol("linkClicked");
      function $0294ea432cd92340$export$45712eceda6fad21(props) {
        let _a = $0294ea432cd92340$var$usePressResponderContext(props), {
          onPress,
          onPressChange,
          onPressStart,
          onPressEnd,
          onPressUp,
          isDisabled,
          isPressed: isPressedProp,
          preventFocusOnPress,
          shouldCancelOnPointerExit,
          allowTextSelectionOnPress,
          ref: _
        } = _a, domProps = __objRest(_a, [
          "onPress",
          "onPressChange",
          "onPressStart",
          "onPressEnd",
          "onPressUp",
          "isDisabled",
          "isPressed",
          "preventFocusOnPress",
          "shouldCancelOnPointerExit",
          "allowTextSelectionOnPress",
          // eslint-disable-next-line @typescript-eslint/no-unused-vars
          "ref"
        ]);
        let [isPressed, setPressed] = (0, $goTMa$react.useState)(false);
        let ref = (0, $goTMa$react.useRef)({
          isPressed: false,
          ignoreEmulatedMouseEvents: false,
          ignoreClickAfterPress: false,
          didFirePressStart: false,
          isTriggeringEvent: false,
          activePointerId: null,
          target: null,
          isOverTarget: false,
          pointerType: null
        });
        let { addGlobalListener, removeAllGlobalListeners } = (0, $goTMa$reactariautils.useGlobalListeners)();
        let triggerPressStart = (0, $goTMa$reactariautils.useEffectEvent)((originalEvent, pointerType) => {
          let state = ref.current;
          if (isDisabled || state.didFirePressStart)
            return;
          let shouldStopPropagation = true;
          state.isTriggeringEvent = true;
          if (onPressStart) {
            let event = new $0294ea432cd92340$var$PressEvent("pressstart", pointerType, originalEvent);
            onPressStart(event);
            shouldStopPropagation = event.shouldStopPropagation;
          }
          if (onPressChange)
            onPressChange(true);
          state.isTriggeringEvent = false;
          state.didFirePressStart = true;
          setPressed(true);
          return shouldStopPropagation;
        });
        let triggerPressEnd = (0, $goTMa$reactariautils.useEffectEvent)((originalEvent, pointerType, wasPressed = true) => {
          let state = ref.current;
          if (!state.didFirePressStart)
            return;
          state.ignoreClickAfterPress = true;
          state.didFirePressStart = false;
          state.isTriggeringEvent = true;
          let shouldStopPropagation = true;
          if (onPressEnd) {
            let event = new $0294ea432cd92340$var$PressEvent("pressend", pointerType, originalEvent);
            onPressEnd(event);
            shouldStopPropagation = event.shouldStopPropagation;
          }
          if (onPressChange)
            onPressChange(false);
          setPressed(false);
          if (onPress && wasPressed && !isDisabled) {
            let event = new $0294ea432cd92340$var$PressEvent("press", pointerType, originalEvent);
            onPress(event);
            shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);
          }
          state.isTriggeringEvent = false;
          return shouldStopPropagation;
        });
        let triggerPressUp = (0, $goTMa$reactariautils.useEffectEvent)((originalEvent, pointerType) => {
          let state = ref.current;
          if (isDisabled)
            return;
          if (onPressUp) {
            state.isTriggeringEvent = true;
            let event = new $0294ea432cd92340$var$PressEvent("pressup", pointerType, originalEvent);
            onPressUp(event);
            state.isTriggeringEvent = false;
            return event.shouldStopPropagation;
          }
          return true;
        });
        let cancel = (0, $goTMa$reactariautils.useEffectEvent)((e) => {
          let state = ref.current;
          if (state.isPressed) {
            if (state.isOverTarget)
              triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
            state.isPressed = false;
            state.isOverTarget = false;
            state.activePointerId = null;
            state.pointerType = null;
            removeAllGlobalListeners();
            if (!allowTextSelectionOnPress)
              (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)(state.target);
          }
        });
        let cancelOnPointerExit = (0, $goTMa$reactariautils.useEffectEvent)((e) => {
          if (shouldCancelOnPointerExit)
            cancel(e);
        });
        let pressProps = (0, $goTMa$react.useMemo)(() => {
          let state = ref.current;
          let pressProps2 = {
            onKeyDown(e) {
              if ($0294ea432cd92340$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
                if ($0294ea432cd92340$var$shouldPreventDefaultKeyboard(e.target, e.key))
                  e.preventDefault();
                let shouldStopPropagation = true;
                if (!state.isPressed && !e.repeat) {
                  state.target = e.currentTarget;
                  state.isPressed = true;
                  shouldStopPropagation = triggerPressStart(e, "keyboard");
                  addGlobalListener(document, "keyup", onKeyUp, false);
                }
                if (shouldStopPropagation)
                  e.stopPropagation();
                if (e.metaKey && (0, $goTMa$reactariautils.isMac)())
                  state.metaKeyEvents.set(e.key, e.nativeEvent);
              } else if (e.key === "Meta")
                state.metaKeyEvents = /* @__PURE__ */ new Map();
            },
            onKeyUp(e) {
              if ($0294ea432cd92340$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && !e.repeat && e.currentTarget.contains(e.target))
                triggerPressUp($0294ea432cd92340$var$createEvent(state.target, e), "keyboard");
            },
            onClick(e) {
              if (e && !e.currentTarget.contains(e.target))
                return;
              if (e && e.button === 0 && !state.isTriggeringEvent && !(0, $goTMa$reactariautils.openLink).isOpening) {
                let shouldStopPropagation = true;
                if (isDisabled)
                  e.preventDefault();
                if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === "virtual" || (0, $goTMa$reactariautils.isVirtualClick)(e.nativeEvent))) {
                  if (!isDisabled && !preventFocusOnPress)
                    (0, $goTMa$reactariautils.focusWithoutScrolling)(e.currentTarget);
                  let stopPressStart = triggerPressStart(e, "virtual");
                  let stopPressUp = triggerPressUp(e, "virtual");
                  let stopPressEnd = triggerPressEnd(e, "virtual");
                  shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;
                }
                state.ignoreEmulatedMouseEvents = false;
                state.ignoreClickAfterPress = false;
                if (shouldStopPropagation)
                  e.stopPropagation();
              }
            }
          };
          let onKeyUp = (e) => {
            var _state_metaKeyEvents;
            if (state.isPressed && $0294ea432cd92340$var$isValidKeyboardEvent(e, state.target)) {
              var _state_metaKeyEvents1;
              if ($0294ea432cd92340$var$shouldPreventDefaultKeyboard(e.target, e.key))
                e.preventDefault();
              let target = e.target;
              let shouldStopPropagation = triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), "keyboard", state.target.contains(target));
              removeAllGlobalListeners();
              if (shouldStopPropagation)
                e.stopPropagation();
              if (e.key !== "Enter" && $0294ea432cd92340$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$0294ea432cd92340$var$LINK_CLICKED]) {
                e[$0294ea432cd92340$var$LINK_CLICKED] = true;
                (0, $goTMa$reactariautils.openLink)(state.target, e, false);
              }
              state.isPressed = false;
              (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);
            } else if (e.key === "Meta" && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {
              let events = state.metaKeyEvents;
              state.metaKeyEvents = null;
              for (let event of events.values())
                state.target.dispatchEvent(new KeyboardEvent("keyup", event));
            }
          };
          if (typeof PointerEvent !== "undefined") {
            pressProps2.onPointerDown = (e) => {
              if (e.button !== 0 || !e.currentTarget.contains(e.target))
                return;
              if ((0, $goTMa$reactariautils.isVirtualPointerEvent)(e.nativeEvent)) {
                state.pointerType = "virtual";
                return;
              }
              if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
                e.preventDefault();
              state.pointerType = e.pointerType;
              let shouldStopPropagation = true;
              if (!state.isPressed) {
                state.isPressed = true;
                state.isOverTarget = true;
                state.activePointerId = e.pointerId;
                state.target = e.currentTarget;
                if (!isDisabled && !preventFocusOnPress)
                  (0, $goTMa$reactariautils.focusWithoutScrolling)(e.currentTarget);
                if (!allowTextSelectionOnPress)
                  (0, $f7e14e656343df57$export$16a4697467175487)(state.target);
                shouldStopPropagation = triggerPressStart(e, state.pointerType);
                addGlobalListener(document, "pointermove", onPointerMove, false);
                addGlobalListener(document, "pointerup", onPointerUp, false);
                addGlobalListener(document, "pointercancel", onPointerCancel, false);
              }
              if (shouldStopPropagation)
                e.stopPropagation();
            };
            pressProps2.onMouseDown = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              if (e.button === 0) {
                if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
                  e.preventDefault();
                e.stopPropagation();
              }
            };
            pressProps2.onPointerUp = (e) => {
              if (!e.currentTarget.contains(e.target) || state.pointerType === "virtual")
                return;
              if (e.button === 0 && $0294ea432cd92340$var$isOverTarget(e, e.currentTarget))
                triggerPressUp(e, state.pointerType || e.pointerType);
            };
            let onPointerMove = (e) => {
              if (e.pointerId !== state.activePointerId)
                return;
              if ($0294ea432cd92340$var$isOverTarget(e, state.target)) {
                if (!state.isOverTarget) {
                  state.isOverTarget = true;
                  triggerPressStart($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
                }
              } else if (state.isOverTarget) {
                state.isOverTarget = false;
                triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
                cancelOnPointerExit(e);
              }
            };
            let onPointerUp = (e) => {
              if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
                if ($0294ea432cd92340$var$isOverTarget(e, state.target))
                  triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
                else if (state.isOverTarget)
                  triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
                state.isPressed = false;
                state.isOverTarget = false;
                state.activePointerId = null;
                state.pointerType = null;
                removeAllGlobalListeners();
                if (!allowTextSelectionOnPress)
                  (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)(state.target);
              }
            };
            let onPointerCancel = (e) => {
              cancel(e);
            };
            pressProps2.onDragStart = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              cancel(e);
            };
          } else {
            pressProps2.onMouseDown = (e) => {
              if (e.button !== 0 || !e.currentTarget.contains(e.target))
                return;
              if ($0294ea432cd92340$var$shouldPreventDefault(e.currentTarget))
                e.preventDefault();
              if (state.ignoreEmulatedMouseEvents) {
                e.stopPropagation();
                return;
              }
              state.isPressed = true;
              state.isOverTarget = true;
              state.target = e.currentTarget;
              state.pointerType = (0, $goTMa$reactariautils.isVirtualClick)(e.nativeEvent) ? "virtual" : "mouse";
              if (!isDisabled && !preventFocusOnPress)
                (0, $goTMa$reactariautils.focusWithoutScrolling)(e.currentTarget);
              let shouldStopPropagation = triggerPressStart(e, state.pointerType);
              if (shouldStopPropagation)
                e.stopPropagation();
              addGlobalListener(document, "mouseup", onMouseUp, false);
            };
            pressProps2.onMouseEnter = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              let shouldStopPropagation = true;
              if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
                state.isOverTarget = true;
                shouldStopPropagation = triggerPressStart(e, state.pointerType);
              }
              if (shouldStopPropagation)
                e.stopPropagation();
            };
            pressProps2.onMouseLeave = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              let shouldStopPropagation = true;
              if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
                state.isOverTarget = false;
                shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
                cancelOnPointerExit(e);
              }
              if (shouldStopPropagation)
                e.stopPropagation();
            };
            pressProps2.onMouseUp = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              if (!state.ignoreEmulatedMouseEvents && e.button === 0)
                triggerPressUp(e, state.pointerType || "mouse");
            };
            let onMouseUp = (e) => {
              if (e.button !== 0)
                return;
              state.isPressed = false;
              removeAllGlobalListeners();
              if (state.ignoreEmulatedMouseEvents) {
                state.ignoreEmulatedMouseEvents = false;
                return;
              }
              if ($0294ea432cd92340$var$isOverTarget(e, state.target))
                triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType);
              else if (state.isOverTarget)
                triggerPressEnd($0294ea432cd92340$var$createEvent(state.target, e), state.pointerType, false);
              state.isOverTarget = false;
            };
            pressProps2.onTouchStart = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              let touch = $0294ea432cd92340$var$getTouchFromEvent(e.nativeEvent);
              if (!touch)
                return;
              state.activePointerId = touch.identifier;
              state.ignoreEmulatedMouseEvents = true;
              state.isOverTarget = true;
              state.isPressed = true;
              state.target = e.currentTarget;
              state.pointerType = "touch";
              if (!isDisabled && !preventFocusOnPress)
                (0, $goTMa$reactariautils.focusWithoutScrolling)(e.currentTarget);
              if (!allowTextSelectionOnPress)
                (0, $f7e14e656343df57$export$16a4697467175487)(state.target);
              let shouldStopPropagation = triggerPressStart(e, state.pointerType);
              if (shouldStopPropagation)
                e.stopPropagation();
              addGlobalListener(window, "scroll", onScroll, true);
            };
            pressProps2.onTouchMove = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              if (!state.isPressed) {
                e.stopPropagation();
                return;
              }
              let touch = $0294ea432cd92340$var$getTouchById(e.nativeEvent, state.activePointerId);
              let shouldStopPropagation = true;
              if (touch && $0294ea432cd92340$var$isOverTarget(touch, e.currentTarget)) {
                if (!state.isOverTarget) {
                  state.isOverTarget = true;
                  shouldStopPropagation = triggerPressStart(e, state.pointerType);
                }
              } else if (state.isOverTarget) {
                state.isOverTarget = false;
                shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
                cancelOnPointerExit(e);
              }
              if (shouldStopPropagation)
                e.stopPropagation();
            };
            pressProps2.onTouchEnd = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              if (!state.isPressed) {
                e.stopPropagation();
                return;
              }
              let touch = $0294ea432cd92340$var$getTouchById(e.nativeEvent, state.activePointerId);
              let shouldStopPropagation = true;
              if (touch && $0294ea432cd92340$var$isOverTarget(touch, e.currentTarget)) {
                triggerPressUp(e, state.pointerType);
                shouldStopPropagation = triggerPressEnd(e, state.pointerType);
              } else if (state.isOverTarget)
                shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
              if (shouldStopPropagation)
                e.stopPropagation();
              state.isPressed = false;
              state.activePointerId = null;
              state.isOverTarget = false;
              state.ignoreEmulatedMouseEvents = true;
              if (!allowTextSelectionOnPress)
                (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)(state.target);
              removeAllGlobalListeners();
            };
            pressProps2.onTouchCancel = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              e.stopPropagation();
              if (state.isPressed)
                cancel(e);
            };
            let onScroll = (e) => {
              if (state.isPressed && e.target.contains(state.target))
                cancel({
                  currentTarget: state.target,
                  shiftKey: false,
                  ctrlKey: false,
                  metaKey: false,
                  altKey: false
                });
            };
            pressProps2.onDragStart = (e) => {
              if (!e.currentTarget.contains(e.target))
                return;
              cancel(e);
            };
          }
          return pressProps2;
        }, [
          addGlobalListener,
          isDisabled,
          preventFocusOnPress,
          removeAllGlobalListeners,
          allowTextSelectionOnPress,
          cancel,
          cancelOnPointerExit,
          triggerPressEnd,
          triggerPressStart,
          triggerPressUp
        ]);
        (0, $goTMa$react.useEffect)(() => {
          return () => {
            if (!allowTextSelectionOnPress)
              (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)(ref.current.target);
          };
        }, [
          allowTextSelectionOnPress
        ]);
        return {
          isPressed: isPressedProp || isPressed,
          pressProps: (0, $goTMa$reactariautils.mergeProps)(domProps, pressProps)
        };
      }
      function $0294ea432cd92340$var$isHTMLAnchorLink(target) {
        return target.tagName === "A" && target.hasAttribute("href");
      }
      function $0294ea432cd92340$var$isValidKeyboardEvent(event, currentTarget) {
        const { key, code } = event;
        const element = currentTarget;
        const role = element.getAttribute("role");
        return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && !(element instanceof HTMLInputElement && !$0294ea432cd92340$var$isValidInputKey(element, key) || element instanceof HTMLTextAreaElement || element.isContentEditable) && // Links should only trigger with Enter key
        !((role === "link" || !role && $0294ea432cd92340$var$isHTMLAnchorLink(element)) && key !== "Enter");
      }
      function $0294ea432cd92340$var$getTouchFromEvent(event) {
        const { targetTouches } = event;
        if (targetTouches.length > 0)
          return targetTouches[0];
        return null;
      }
      function $0294ea432cd92340$var$getTouchById(event, pointerId) {
        const changedTouches = event.changedTouches;
        for (let i = 0; i < changedTouches.length; i++) {
          const touch = changedTouches[i];
          if (touch.identifier === pointerId)
            return touch;
        }
        return null;
      }
      function $0294ea432cd92340$var$createEvent(target, e) {
        return {
          currentTarget: target,
          shiftKey: e.shiftKey,
          ctrlKey: e.ctrlKey,
          metaKey: e.metaKey,
          altKey: e.altKey
        };
      }
      function $0294ea432cd92340$var$getPointClientRect(point) {
        let offsetX = point.width / 2 || point.radiusX || 0;
        let offsetY = point.height / 2 || point.radiusY || 0;
        return {
          top: point.clientY - offsetY,
          right: point.clientX + offsetX,
          bottom: point.clientY + offsetY,
          left: point.clientX - offsetX
        };
      }
      function $0294ea432cd92340$var$areRectanglesOverlapping(a, b) {
        if (a.left > b.right || b.left > a.right)
          return false;
        if (a.top > b.bottom || b.top > a.bottom)
          return false;
        return true;
      }
      function $0294ea432cd92340$var$isOverTarget(point, target) {
        let rect = target.getBoundingClientRect();
        let pointRect = $0294ea432cd92340$var$getPointClientRect(point);
        return $0294ea432cd92340$var$areRectanglesOverlapping(rect, pointRect);
      }
      function $0294ea432cd92340$var$shouldPreventDefault(target) {
        return !(target instanceof HTMLElement) || !target.hasAttribute("draggable");
      }
      function $0294ea432cd92340$var$shouldPreventDefaultKeyboard(target, key) {
        if (target instanceof HTMLInputElement)
          return !$0294ea432cd92340$var$isValidInputKey(target, key);
        if (target instanceof HTMLButtonElement)
          return target.type !== "submit" && target.type !== "reset";
        if ($0294ea432cd92340$var$isHTMLAnchorLink(target))
          return false;
        return true;
      }
      var $0294ea432cd92340$var$nonTextInputTypes = /* @__PURE__ */ new Set([
        "checkbox",
        "radio",
        "range",
        "color",
        "file",
        "image",
        "button",
        "submit",
        "reset"
      ]);
      function $0294ea432cd92340$var$isValidInputKey(target, key) {
        return target.type === "checkbox" || target.type === "radio" ? key === " " : $0294ea432cd92340$var$nonTextInputTypes.has(target.type);
      }
      var $e1dbec26039c051d$export$27c701ed9e449e99 = /* @__PURE__ */ (0, $parcel$interopDefault($goTMa$react)).forwardRef((_a, ref) => {
        var _b = _a, { children } = _b, props = __objRest(_b, ["children"]);
        let newRef = (0, $goTMa$react.useRef)();
        ref = ref !== null && ref !== void 0 ? ref : newRef;
        let { pressProps } = (0, $0294ea432cd92340$export$45712eceda6fad21)(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        let child = (0, $parcel$interopDefault($goTMa$react)).Children.only(children);
        return /* @__PURE__ */ (0, $parcel$interopDefault($goTMa$react)).cloneElement(
          child,
          // @ts-ignore
          __spreadValues({
            ref
          }, (0, $goTMa$reactariautils.mergeProps)(child.props, pressProps))
        );
      });
      var $3596bae48579386f$export$3351871ee4b288b8 = /* @__PURE__ */ (0, $parcel$interopDefault($goTMa$react)).forwardRef((_a, ref) => {
        var _b = _a, { children } = _b, props = __objRest(_b, ["children"]);
        let isRegistered = (0, $goTMa$react.useRef)(false);
        let prevContext = (0, $goTMa$react.useContext)((0, $01d3f539e91688c8$export$5165eccb35aaadb5));
        let context = (0, $goTMa$reactariautils.mergeProps)(prevContext || {}, __spreadProps(__spreadValues({}, props), {
          ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
          register() {
            isRegistered.current = true;
            if (prevContext)
              prevContext.register();
          }
        }));
        (0, $goTMa$reactariautils.useSyncRef)(prevContext, ref);
        (0, $goTMa$react.useEffect)(() => {
          if (!isRegistered.current) {
            console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
            isRegistered.current = true;
          }
        }, []);
        return /* @__PURE__ */ (0, $parcel$interopDefault($goTMa$react)).createElement((0, $01d3f539e91688c8$export$5165eccb35aaadb5).Provider, {
          value: context
        }, children);
      });
      function $3596bae48579386f$export$cf75428e0b9ed1ea({ children }) {
        return /* @__PURE__ */ (0, $parcel$interopDefault($goTMa$react)).createElement((0, $01d3f539e91688c8$export$5165eccb35aaadb5).Provider, {
          value: void 0
        }, children);
      }
      var $625cf83917e112ad$export$905e7fc544a71f36 = class {
        isDefaultPrevented() {
          return this.nativeEvent.defaultPrevented;
        }
        preventDefault() {
          this.defaultPrevented = true;
          this.nativeEvent.preventDefault();
        }
        stopPropagation() {
          this.nativeEvent.stopPropagation();
          this.isPropagationStopped = () => true;
        }
        isPropagationStopped() {
          return false;
        }
        persist() {
        }
        constructor(type, nativeEvent) {
          this.nativeEvent = nativeEvent;
          this.target = nativeEvent.target;
          this.currentTarget = nativeEvent.currentTarget;
          this.relatedTarget = nativeEvent.relatedTarget;
          this.bubbles = nativeEvent.bubbles;
          this.cancelable = nativeEvent.cancelable;
          this.defaultPrevented = nativeEvent.defaultPrevented;
          this.eventPhase = nativeEvent.eventPhase;
          this.isTrusted = nativeEvent.isTrusted;
          this.timeStamp = nativeEvent.timeStamp;
          this.type = type;
        }
      };
      function $625cf83917e112ad$export$715c682d09d639cc(onBlur) {
        let stateRef = (0, $goTMa$react.useRef)({
          isFocused: false,
          observer: null
        });
        (0, $goTMa$reactariautils.useLayoutEffect)(() => {
          const state = stateRef.current;
          return () => {
            if (state.observer) {
              state.observer.disconnect();
              state.observer = null;
            }
          };
        }, []);
        let dispatchBlur = (0, $goTMa$reactariautils.useEffectEvent)((e) => {
          onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
        });
        return (0, $goTMa$react.useCallback)((e) => {
          if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
            stateRef.current.isFocused = true;
            let target = e.target;
            let onBlurHandler = (e2) => {
              stateRef.current.isFocused = false;
              if (target.disabled)
                dispatchBlur(new $625cf83917e112ad$export$905e7fc544a71f36("blur", e2));
              if (stateRef.current.observer) {
                stateRef.current.observer.disconnect();
                stateRef.current.observer = null;
              }
            };
            target.addEventListener("focusout", onBlurHandler, {
              once: true
            });
            stateRef.current.observer = new MutationObserver(() => {
              if (stateRef.current.isFocused && target.disabled) {
                stateRef.current.observer.disconnect();
                let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
                target.dispatchEvent(new FocusEvent("blur", {
                  relatedTarget: relatedTargetEl
                }));
                target.dispatchEvent(new FocusEvent("focusout", {
                  bubbles: true,
                  relatedTarget: relatedTargetEl
                }));
              }
            });
            stateRef.current.observer.observe(target, {
              attributes: true,
              attributeFilter: [
                "disabled"
              ]
            });
          }
        }, [
          dispatchBlur
        ]);
      }
      function $5cb73d0ce355b0dc$export$f8168d8dd8fd66e6(props) {
        let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
        const onBlur = (0, $goTMa$react.useCallback)((e) => {
          if (e.target === e.currentTarget) {
            if (onBlurProp)
              onBlurProp(e);
            if (onFocusChange)
              onFocusChange(false);
            return true;
          }
        }, [
          onBlurProp,
          onFocusChange
        ]);
        const onSyntheticFocus = (0, $625cf83917e112ad$export$715c682d09d639cc)(onBlur);
        const onFocus = (0, $goTMa$react.useCallback)((e) => {
          if (e.target === e.currentTarget && document.activeElement === e.target) {
            if (onFocusProp)
              onFocusProp(e);
            if (onFocusChange)
              onFocusChange(true);
            onSyntheticFocus(e);
          }
        }, [
          onFocusChange,
          onFocusProp,
          onSyntheticFocus
        ]);
        return {
          focusProps: {
            onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
            onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : void 0
          }
        };
      }
      var $e77252a287ef94ab$var$currentModality = null;
      var $e77252a287ef94ab$var$changeHandlers = /* @__PURE__ */ new Set();
      var $e77252a287ef94ab$var$hasSetupGlobalListeners = false;
      var $e77252a287ef94ab$var$hasEventBeforeFocus = false;
      var $e77252a287ef94ab$var$hasBlurredWindowRecently = false;
      var $e77252a287ef94ab$var$FOCUS_VISIBLE_INPUT_KEYS = {
        Tab: true,
        Escape: true
      };
      function $e77252a287ef94ab$var$triggerChangeHandlers(modality, e) {
        for (let handler of $e77252a287ef94ab$var$changeHandlers)
          handler(modality, e);
      }
      function $e77252a287ef94ab$var$isValidKey(e) {
        return !(e.metaKey || !(0, $goTMa$reactariautils.isMac)() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
      }
      function $e77252a287ef94ab$var$handleKeyboardEvent(e) {
        $e77252a287ef94ab$var$hasEventBeforeFocus = true;
        if ($e77252a287ef94ab$var$isValidKey(e)) {
          $e77252a287ef94ab$var$currentModality = "keyboard";
          $e77252a287ef94ab$var$triggerChangeHandlers("keyboard", e);
        }
      }
      function $e77252a287ef94ab$var$handlePointerEvent(e) {
        $e77252a287ef94ab$var$currentModality = "pointer";
        if (e.type === "mousedown" || e.type === "pointerdown") {
          $e77252a287ef94ab$var$hasEventBeforeFocus = true;
          $e77252a287ef94ab$var$triggerChangeHandlers("pointer", e);
        }
      }
      function $e77252a287ef94ab$var$handleClickEvent(e) {
        if ((0, $goTMa$reactariautils.isVirtualClick)(e)) {
          $e77252a287ef94ab$var$hasEventBeforeFocus = true;
          $e77252a287ef94ab$var$currentModality = "virtual";
        }
      }
      function $e77252a287ef94ab$var$handleFocusEvent(e) {
        if (e.target === window || e.target === document)
          return;
        if (!$e77252a287ef94ab$var$hasEventBeforeFocus && !$e77252a287ef94ab$var$hasBlurredWindowRecently) {
          $e77252a287ef94ab$var$currentModality = "virtual";
          $e77252a287ef94ab$var$triggerChangeHandlers("virtual", e);
        }
        $e77252a287ef94ab$var$hasEventBeforeFocus = false;
        $e77252a287ef94ab$var$hasBlurredWindowRecently = false;
      }
      function $e77252a287ef94ab$var$handleWindowBlur() {
        $e77252a287ef94ab$var$hasEventBeforeFocus = false;
        $e77252a287ef94ab$var$hasBlurredWindowRecently = true;
      }
      function $e77252a287ef94ab$var$setupGlobalFocusEvents() {
        if (typeof window === "undefined" || $e77252a287ef94ab$var$hasSetupGlobalListeners)
          return;
        let focus = HTMLElement.prototype.focus;
        HTMLElement.prototype.focus = function() {
          $e77252a287ef94ab$var$hasEventBeforeFocus = true;
          focus.apply(this, arguments);
        };
        document.addEventListener("keydown", $e77252a287ef94ab$var$handleKeyboardEvent, true);
        document.addEventListener("keyup", $e77252a287ef94ab$var$handleKeyboardEvent, true);
        document.addEventListener("click", $e77252a287ef94ab$var$handleClickEvent, true);
        window.addEventListener("focus", $e77252a287ef94ab$var$handleFocusEvent, true);
        window.addEventListener("blur", $e77252a287ef94ab$var$handleWindowBlur, false);
        if (typeof PointerEvent !== "undefined") {
          document.addEventListener("pointerdown", $e77252a287ef94ab$var$handlePointerEvent, true);
          document.addEventListener("pointermove", $e77252a287ef94ab$var$handlePointerEvent, true);
          document.addEventListener("pointerup", $e77252a287ef94ab$var$handlePointerEvent, true);
        } else {
          document.addEventListener("mousedown", $e77252a287ef94ab$var$handlePointerEvent, true);
          document.addEventListener("mousemove", $e77252a287ef94ab$var$handlePointerEvent, true);
          document.addEventListener("mouseup", $e77252a287ef94ab$var$handlePointerEvent, true);
        }
        $e77252a287ef94ab$var$hasSetupGlobalListeners = true;
      }
      if (typeof document !== "undefined") {
        if (document.readyState !== "loading")
          $e77252a287ef94ab$var$setupGlobalFocusEvents();
        else
          document.addEventListener("DOMContentLoaded", $e77252a287ef94ab$var$setupGlobalFocusEvents);
      }
      function $e77252a287ef94ab$export$b9b3dfddab17db27() {
        return $e77252a287ef94ab$var$currentModality !== "pointer";
      }
      function $e77252a287ef94ab$export$630ff653c5ada6a9() {
        return $e77252a287ef94ab$var$currentModality;
      }
      function $e77252a287ef94ab$export$8397ddfc504fdb9a(modality) {
        $e77252a287ef94ab$var$currentModality = modality;
        $e77252a287ef94ab$var$triggerChangeHandlers(modality, null);
      }
      function $e77252a287ef94ab$export$98e20ec92f614cfe() {
        $e77252a287ef94ab$var$setupGlobalFocusEvents();
        let [modality, setModality] = (0, $goTMa$react.useState)($e77252a287ef94ab$var$currentModality);
        (0, $goTMa$react.useEffect)(() => {
          let handler = () => {
            setModality($e77252a287ef94ab$var$currentModality);
          };
          $e77252a287ef94ab$var$changeHandlers.add(handler);
          return () => {
            $e77252a287ef94ab$var$changeHandlers.delete(handler);
          };
        }, []);
        return (0, $goTMa$reactariassr.useIsSSR)() ? null : modality;
      }
      function $e77252a287ef94ab$var$isKeyboardFocusEvent(isTextInput, modality, e) {
        return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !$e77252a287ef94ab$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
      }
      function $e77252a287ef94ab$export$ffd9e5021c1fb2d6(props = {}) {
        let { isTextInput, autoFocus } = props;
        let [isFocusVisibleState, setFocusVisible] = (0, $goTMa$react.useState)(autoFocus || $e77252a287ef94ab$export$b9b3dfddab17db27());
        $e77252a287ef94ab$export$ec71b4b83ac08ec3((isFocusVisible) => {
          setFocusVisible(isFocusVisible);
        }, [
          isTextInput
        ], {
          isTextInput
        });
        return {
          isFocusVisible: isFocusVisibleState
        };
      }
      function $e77252a287ef94ab$export$ec71b4b83ac08ec3(fn, deps, opts) {
        $e77252a287ef94ab$var$setupGlobalFocusEvents();
        (0, $goTMa$react.useEffect)(() => {
          let handler = (modality, e) => {
            if (!$e77252a287ef94ab$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e))
              return;
            fn($e77252a287ef94ab$export$b9b3dfddab17db27());
          };
          $e77252a287ef94ab$var$changeHandlers.add(handler);
          return () => {
            $e77252a287ef94ab$var$changeHandlers.delete(handler);
          };
        }, deps);
      }
      function $d16842bbd0359d1b$export$420e68273165f4ec(props) {
        let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
        let state = (0, $goTMa$react.useRef)({
          isFocusWithin: false
        });
        let onBlur = (0, $goTMa$react.useCallback)((e) => {
          if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
            state.current.isFocusWithin = false;
            if (onBlurWithin)
              onBlurWithin(e);
            if (onFocusWithinChange)
              onFocusWithinChange(false);
          }
        }, [
          onBlurWithin,
          onFocusWithinChange,
          state
        ]);
        let onSyntheticFocus = (0, $625cf83917e112ad$export$715c682d09d639cc)(onBlur);
        let onFocus = (0, $goTMa$react.useCallback)((e) => {
          if (!state.current.isFocusWithin && document.activeElement === e.target) {
            if (onFocusWithin)
              onFocusWithin(e);
            if (onFocusWithinChange)
              onFocusWithinChange(true);
            state.current.isFocusWithin = true;
            onSyntheticFocus(e);
          }
        }, [
          onFocusWithin,
          onFocusWithinChange,
          onSyntheticFocus
        ]);
        if (isDisabled)
          return {
            focusWithinProps: {
              onFocus: null,
              onBlur: null
            }
          };
        return {
          focusWithinProps: {
            onFocus,
            onBlur
          }
        };
      }
      var $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;
      var $ffbc150311c75f01$var$hoverCount = 0;
      function $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents() {
        $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = true;
        setTimeout(() => {
          $ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents = false;
        }, 50);
      }
      function $ffbc150311c75f01$var$handleGlobalPointerEvent(e) {
        if (e.pointerType === "touch")
          $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents();
      }
      function $ffbc150311c75f01$var$setupGlobalTouchEvents() {
        if (typeof document === "undefined")
          return;
        if (typeof PointerEvent !== "undefined")
          document.addEventListener("pointerup", $ffbc150311c75f01$var$handleGlobalPointerEvent);
        else
          document.addEventListener("touchend", $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);
        $ffbc150311c75f01$var$hoverCount++;
        return () => {
          $ffbc150311c75f01$var$hoverCount--;
          if ($ffbc150311c75f01$var$hoverCount > 0)
            return;
          if (typeof PointerEvent !== "undefined")
            document.removeEventListener("pointerup", $ffbc150311c75f01$var$handleGlobalPointerEvent);
          else
            document.removeEventListener("touchend", $ffbc150311c75f01$var$setGlobalIgnoreEmulatedMouseEvents);
        };
      }
      function $ffbc150311c75f01$export$ae780daf29e6d456(props) {
        let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props;
        let [isHovered, setHovered] = (0, $goTMa$react.useState)(false);
        let state = (0, $goTMa$react.useRef)({
          isHovered: false,
          ignoreEmulatedMouseEvents: false,
          pointerType: "",
          target: null
        }).current;
        (0, $goTMa$react.useEffect)($ffbc150311c75f01$var$setupGlobalTouchEvents, []);
        let { hoverProps, triggerHoverEnd } = (0, $goTMa$react.useMemo)(() => {
          let triggerHoverStart = (event, pointerType) => {
            state.pointerType = pointerType;
            if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target))
              return;
            state.isHovered = true;
            let target = event.currentTarget;
            state.target = target;
            if (onHoverStart)
              onHoverStart({
                type: "hoverstart",
                target,
                pointerType
              });
            if (onHoverChange)
              onHoverChange(true);
            setHovered(true);
          };
          let triggerHoverEnd2 = (event, pointerType) => {
            state.pointerType = "";
            state.target = null;
            if (pointerType === "touch" || !state.isHovered)
              return;
            state.isHovered = false;
            let target = event.currentTarget;
            if (onHoverEnd)
              onHoverEnd({
                type: "hoverend",
                target,
                pointerType
              });
            if (onHoverChange)
              onHoverChange(false);
            setHovered(false);
          };
          let hoverProps2 = {};
          if (typeof PointerEvent !== "undefined") {
            hoverProps2.onPointerEnter = (e) => {
              if ($ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse")
                return;
              triggerHoverStart(e, e.pointerType);
            };
            hoverProps2.onPointerLeave = (e) => {
              if (!isDisabled && e.currentTarget.contains(e.target))
                triggerHoverEnd2(e, e.pointerType);
            };
          } else {
            hoverProps2.onTouchStart = () => {
              state.ignoreEmulatedMouseEvents = true;
            };
            hoverProps2.onMouseEnter = (e) => {
              if (!state.ignoreEmulatedMouseEvents && !$ffbc150311c75f01$var$globalIgnoreEmulatedMouseEvents)
                triggerHoverStart(e, "mouse");
              state.ignoreEmulatedMouseEvents = false;
            };
            hoverProps2.onMouseLeave = (e) => {
              if (!isDisabled && e.currentTarget.contains(e.target))
                triggerHoverEnd2(e, "mouse");
            };
          }
          return {
            hoverProps: hoverProps2,
            triggerHoverEnd: triggerHoverEnd2
          };
        }, [
          onHoverStart,
          onHoverChange,
          onHoverEnd,
          isDisabled,
          state
        ]);
        (0, $goTMa$react.useEffect)(() => {
          if (isDisabled)
            triggerHoverEnd({
              currentTarget: state.target
            }, state.pointerType);
        }, [
          isDisabled
        ]);
        return {
          hoverProps,
          isHovered
        };
      }
      function $edcfa848c42f94f4$export$872b660ac5a1ff98(props) {
        let { ref, onInteractOutside, isDisabled, onInteractOutsideStart } = props;
        let stateRef = (0, $goTMa$react.useRef)({
          isPointerDown: false,
          ignoreEmulatedMouseEvents: false
        });
        let onPointerDown = (0, $goTMa$reactariautils.useEffectEvent)((e) => {
          if (onInteractOutside && $edcfa848c42f94f4$var$isValidEvent(e, ref)) {
            if (onInteractOutsideStart)
              onInteractOutsideStart(e);
            stateRef.current.isPointerDown = true;
          }
        });
        let triggerInteractOutside = (0, $goTMa$reactariautils.useEffectEvent)((e) => {
          if (onInteractOutside)
            onInteractOutside(e);
        });
        (0, $goTMa$react.useEffect)(() => {
          let state = stateRef.current;
          if (isDisabled)
            return;
          if (typeof PointerEvent !== "undefined") {
            let onPointerUp = (e) => {
              if (state.isPointerDown && $edcfa848c42f94f4$var$isValidEvent(e, ref))
                triggerInteractOutside(e);
              state.isPointerDown = false;
            };
            document.addEventListener("pointerdown", onPointerDown, true);
            document.addEventListener("pointerup", onPointerUp, true);
            return () => {
              document.removeEventListener("pointerdown", onPointerDown, true);
              document.removeEventListener("pointerup", onPointerUp, true);
            };
          } else {
            let onMouseUp = (e) => {
              if (state.ignoreEmulatedMouseEvents)
                state.ignoreEmulatedMouseEvents = false;
              else if (state.isPointerDown && $edcfa848c42f94f4$var$isValidEvent(e, ref))
                triggerInteractOutside(e);
              state.isPointerDown = false;
            };
            let onTouchEnd = (e) => {
              state.ignoreEmulatedMouseEvents = true;
              if (state.isPointerDown && $edcfa848c42f94f4$var$isValidEvent(e, ref))
                triggerInteractOutside(e);
              state.isPointerDown = false;
            };
            document.addEventListener("mousedown", onPointerDown, true);
            document.addEventListener("mouseup", onMouseUp, true);
            document.addEventListener("touchstart", onPointerDown, true);
            document.addEventListener("touchend", onTouchEnd, true);
            return () => {
              document.removeEventListener("mousedown", onPointerDown, true);
              document.removeEventListener("mouseup", onMouseUp, true);
              document.removeEventListener("touchstart", onPointerDown, true);
              document.removeEventListener("touchend", onTouchEnd, true);
            };
          }
        }, [
          ref,
          isDisabled,
          onPointerDown,
          triggerInteractOutside
        ]);
      }
      function $edcfa848c42f94f4$var$isValidEvent(event, ref) {
        if (event.button > 0)
          return false;
        if (event.target) {
          const ownerDocument = event.target.ownerDocument;
          if (!ownerDocument || !ownerDocument.documentElement.contains(event.target))
            return false;
          if (event.target.closest("[data-react-aria-top-layer]"))
            return false;
        }
        return ref.current && !ref.current.contains(event.target);
      }
      function $951fbcbbca8db6ce$export$48d1ea6320830260(handler) {
        if (!handler)
          return;
        let shouldStopPropagation = true;
        return (e) => {
          let event = __spreadProps(__spreadValues({}, e), {
            preventDefault() {
              e.preventDefault();
            },
            isDefaultPrevented() {
              return e.isDefaultPrevented();
            },
            stopPropagation() {
              console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
            },
            continuePropagation() {
              shouldStopPropagation = false;
            }
          });
          handler(event);
          if (shouldStopPropagation)
            e.stopPropagation();
        };
      }
      function $892d64db2a3c53b0$export$8f71654801c2f7cd(props) {
        return {
          keyboardProps: props.isDisabled ? {} : {
            onKeyDown: (0, $951fbcbbca8db6ce$export$48d1ea6320830260)(props.onKeyDown),
            onKeyUp: (0, $951fbcbbca8db6ce$export$48d1ea6320830260)(props.onKeyUp)
          }
        };
      }
      function $c09386fc48fa427d$export$36da96379f79f245(props) {
        let { onMoveStart, onMove, onMoveEnd } = props;
        let state = (0, $goTMa$react.useRef)({
          didMove: false,
          lastPosition: null,
          id: null
        });
        let { addGlobalListener, removeGlobalListener } = (0, $goTMa$reactariautils.useGlobalListeners)();
        let move = (0, $goTMa$reactariautils.useEffectEvent)((originalEvent, pointerType, deltaX, deltaY) => {
          if (deltaX === 0 && deltaY === 0)
            return;
          if (!state.current.didMove) {
            state.current.didMove = true;
            onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
              type: "movestart",
              pointerType,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
          }
          onMove({
            type: "move",
            pointerType,
            deltaX,
            deltaY,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
        });
        let end = (0, $goTMa$reactariautils.useEffectEvent)((originalEvent, pointerType) => {
          (0, $f7e14e656343df57$export$b0d6fa1ab32e3295)();
          if (state.current.didMove)
            onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
              type: "moveend",
              pointerType,
              shiftKey: originalEvent.shiftKey,
              metaKey: originalEvent.metaKey,
              ctrlKey: originalEvent.ctrlKey,
              altKey: originalEvent.altKey
            });
        });
        let moveProps = (0, $goTMa$react.useMemo)(() => {
          let moveProps2 = {};
          let start = () => {
            (0, $f7e14e656343df57$export$16a4697467175487)();
            state.current.didMove = false;
          };
          if (typeof PointerEvent === "undefined") {
            let onMouseMove = (e) => {
              if (e.button === 0) {
                move(e, "mouse", e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
                state.current.lastPosition = {
                  pageX: e.pageX,
                  pageY: e.pageY
                };
              }
            };
            let onMouseUp = (e) => {
              if (e.button === 0) {
                end(e, "mouse");
                removeGlobalListener(window, "mousemove", onMouseMove, false);
                removeGlobalListener(window, "mouseup", onMouseUp, false);
              }
            };
            moveProps2.onMouseDown = (e) => {
              if (e.button === 0) {
                start();
                e.stopPropagation();
                e.preventDefault();
                state.current.lastPosition = {
                  pageX: e.pageX,
                  pageY: e.pageY
                };
                addGlobalListener(window, "mousemove", onMouseMove, false);
                addGlobalListener(window, "mouseup", onMouseUp, false);
              }
            };
            let onTouchMove = (e) => {
              let touch = [
                ...e.changedTouches
              ].findIndex(({ identifier }) => identifier === state.current.id);
              if (touch >= 0) {
                let { pageX, pageY } = e.changedTouches[touch];
                move(e, "touch", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
                state.current.lastPosition = {
                  pageX,
                  pageY
                };
              }
            };
            let onTouchEnd = (e) => {
              let touch = [
                ...e.changedTouches
              ].findIndex(({ identifier }) => identifier === state.current.id);
              if (touch >= 0) {
                end(e, "touch");
                state.current.id = null;
                removeGlobalListener(window, "touchmove", onTouchMove);
                removeGlobalListener(window, "touchend", onTouchEnd);
                removeGlobalListener(window, "touchcancel", onTouchEnd);
              }
            };
            moveProps2.onTouchStart = (e) => {
              if (e.changedTouches.length === 0 || state.current.id != null)
                return;
              let { pageX, pageY, identifier } = e.changedTouches[0];
              start();
              e.stopPropagation();
              e.preventDefault();
              state.current.lastPosition = {
                pageX,
                pageY
              };
              state.current.id = identifier;
              addGlobalListener(window, "touchmove", onTouchMove, false);
              addGlobalListener(window, "touchend", onTouchEnd, false);
              addGlobalListener(window, "touchcancel", onTouchEnd, false);
            };
          } else {
            let onPointerMove = (e) => {
              if (e.pointerId === state.current.id) {
                let pointerType = e.pointerType || "mouse";
                move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
                state.current.lastPosition = {
                  pageX: e.pageX,
                  pageY: e.pageY
                };
              }
            };
            let onPointerUp = (e) => {
              if (e.pointerId === state.current.id) {
                let pointerType = e.pointerType || "mouse";
                end(e, pointerType);
                state.current.id = null;
                removeGlobalListener(window, "pointermove", onPointerMove, false);
                removeGlobalListener(window, "pointerup", onPointerUp, false);
                removeGlobalListener(window, "pointercancel", onPointerUp, false);
              }
            };
            moveProps2.onPointerDown = (e) => {
              if (e.button === 0 && state.current.id == null) {
                start();
                e.stopPropagation();
                e.preventDefault();
                state.current.lastPosition = {
                  pageX: e.pageX,
                  pageY: e.pageY
                };
                state.current.id = e.pointerId;
                addGlobalListener(window, "pointermove", onPointerMove, false);
                addGlobalListener(window, "pointerup", onPointerUp, false);
                addGlobalListener(window, "pointercancel", onPointerUp, false);
              }
            };
          }
          let triggerKeyboardMove = (e, deltaX, deltaY) => {
            start();
            move(e, "keyboard", deltaX, deltaY);
            end(e, "keyboard");
          };
          moveProps2.onKeyDown = (e) => {
            switch (e.key) {
              case "Left":
              case "ArrowLeft":
                e.preventDefault();
                e.stopPropagation();
                triggerKeyboardMove(e, -1, 0);
                break;
              case "Right":
              case "ArrowRight":
                e.preventDefault();
                e.stopPropagation();
                triggerKeyboardMove(e, 1, 0);
                break;
              case "Up":
              case "ArrowUp":
                e.preventDefault();
                e.stopPropagation();
                triggerKeyboardMove(e, 0, -1);
                break;
              case "Down":
              case "ArrowDown":
                e.preventDefault();
                e.stopPropagation();
                triggerKeyboardMove(e, 0, 1);
                break;
            }
          };
          return moveProps2;
        }, [
          state,
          addGlobalListener,
          removeGlobalListener,
          move,
          end
        ]);
        return {
          moveProps
        };
      }
      function $a3dbce0aed7087e2$export$2123ff2b87c81ca(props, ref) {
        let { onScroll, isDisabled } = props;
        let onScrollHandler = (0, $goTMa$react.useCallback)((e) => {
          if (e.ctrlKey)
            return;
          e.preventDefault();
          e.stopPropagation();
          if (onScroll)
            onScroll({
              deltaX: e.deltaX,
              deltaY: e.deltaY
            });
        }, [
          onScroll
        ]);
        (0, $goTMa$reactariautils.useEvent)(ref, "wheel", isDisabled ? null : onScrollHandler);
      }
      var $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD = 500;
      function $3cd7b5d0eebf0ca9$export$c24ed0104d07eab9(props) {
        let { isDisabled, onLongPressStart, onLongPressEnd, onLongPress, threshold = $3cd7b5d0eebf0ca9$var$DEFAULT_THRESHOLD, accessibilityDescription } = props;
        const timeRef = (0, $goTMa$react.useRef)(null);
        let { addGlobalListener, removeGlobalListener } = (0, $goTMa$reactariautils.useGlobalListeners)();
        let { pressProps } = (0, $0294ea432cd92340$export$45712eceda6fad21)({
          isDisabled,
          onPressStart(e) {
            e.continuePropagation();
            if (e.pointerType === "mouse" || e.pointerType === "touch") {
              if (onLongPressStart)
                onLongPressStart(__spreadProps(__spreadValues({}, e), {
                  type: "longpressstart"
                }));
              timeRef.current = setTimeout(() => {
                e.target.dispatchEvent(new PointerEvent("pointercancel", {
                  bubbles: true
                }));
                if (onLongPress)
                  onLongPress(__spreadProps(__spreadValues({}, e), {
                    type: "longpress"
                  }));
                timeRef.current = null;
              }, threshold);
              if (e.pointerType === "touch") {
                let onContextMenu = (e2) => {
                  e2.preventDefault();
                };
                addGlobalListener(e.target, "contextmenu", onContextMenu, {
                  once: true
                });
                addGlobalListener(window, "pointerup", () => {
                  setTimeout(() => {
                    removeGlobalListener(e.target, "contextmenu", onContextMenu);
                  }, 30);
                }, {
                  once: true
                });
              }
            }
          },
          onPressEnd(e) {
            if (timeRef.current)
              clearTimeout(timeRef.current);
            if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch"))
              onLongPressEnd(__spreadProps(__spreadValues({}, e), {
                type: "longpressend"
              }));
          }
        });
        let descriptionProps = (0, $goTMa$reactariautils.useDescription)(onLongPress && !isDisabled ? accessibilityDescription : null);
        return {
          longPressProps: (0, $goTMa$reactariautils.mergeProps)(pressProps, descriptionProps)
        };
      }
    }
  });

  // node_modules/@react-aria/focus/dist/main.js
  var require_main12 = __commonJS({
    "node_modules/@react-aria/focus/dist/main.js"(exports, module) {
      var $aB6Cp$react = require_react();
      var $aB6Cp$reactariautils = require_main7();
      var $aB6Cp$reactariainteractions = require_main11();
      var $aB6Cp$clsx = require_clsx();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "FocusScope", () => $a7a032acae3ddda9$export$20e40289641fbbb6);
      $parcel$export(module.exports, "useFocusManager", () => $a7a032acae3ddda9$export$10c5169755ce7bd7);
      $parcel$export(module.exports, "getFocusableTreeWalker", () => $a7a032acae3ddda9$export$2d6ec8fc375ceafa);
      $parcel$export(module.exports, "createFocusManager", () => $a7a032acae3ddda9$export$c5251b9e124bf29);
      $parcel$export(module.exports, "isElementInChildOfActiveScope", () => $a7a032acae3ddda9$export$1258395f99bf9cbf);
      $parcel$export(module.exports, "FocusRing", () => $dfd8c70b928eb1b3$export$1a38b4ad7f578e1d);
      $parcel$export(module.exports, "FocusableProvider", () => $fb504d83237fd6ac$export$13f3202a3e5ddd5);
      $parcel$export(module.exports, "useFocusable", () => $fb504d83237fd6ac$export$4c014de7c8940b4c);
      $parcel$export(module.exports, "useFocusRing", () => $581a96d6eb128c1b$export$4e328f61c538687f);
      $parcel$export(module.exports, "focusSafely", () => $1c7f9157d722357d$export$80f3e147d781571c);
      $parcel$export(module.exports, "useHasTabbableChild", () => $259c6413a286f2e6$export$eac1895992b9f3d6);
      function $1c7f9157d722357d$export$80f3e147d781571c(element) {
        if ((0, $aB6Cp$reactariainteractions.getInteractionModality)() === "virtual") {
          let lastFocusedElement = document.activeElement;
          (0, $aB6Cp$reactariautils.runAfterTransition)(() => {
            if (document.activeElement === lastFocusedElement && document.contains(element))
              (0, $aB6Cp$reactariautils.focusWithoutScrolling)(element);
          });
        } else
          (0, $aB6Cp$reactariautils.focusWithoutScrolling)(element);
      }
      function $d5156037ad898a4d$var$isStyleVisible(element) {
        if (!(element instanceof HTMLElement) && !(element instanceof SVGElement))
          return false;
        let { display, visibility } = element.style;
        let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
        if (isVisible) {
          const { getComputedStyle: getComputedStyle2 } = element.ownerDocument.defaultView;
          let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle2(element);
          isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
        }
        return isVisible;
      }
      function $d5156037ad898a4d$var$isAttributeVisible(element, childElement) {
        return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
      }
      function $d5156037ad898a4d$export$e989c0fffaa6b27a(element, childElement) {
        return element.nodeName !== "#comment" && $d5156037ad898a4d$var$isStyleVisible(element) && $d5156037ad898a4d$var$isAttributeVisible(element, childElement) && (!element.parentElement || $d5156037ad898a4d$export$e989c0fffaa6b27a(element.parentElement, element));
      }
      var $a7a032acae3ddda9$var$FocusContext = /* @__PURE__ */ (0, $parcel$interopDefault($aB6Cp$react)).createContext(null);
      var $a7a032acae3ddda9$var$activeScope = null;
      function $a7a032acae3ddda9$export$20e40289641fbbb6(props) {
        let { children, contain, restoreFocus, autoFocus } = props;
        let startRef = (0, $aB6Cp$react.useRef)();
        let endRef = (0, $aB6Cp$react.useRef)();
        let scopeRef = (0, $aB6Cp$react.useRef)([]);
        let { parentNode } = (0, $aB6Cp$react.useContext)($a7a032acae3ddda9$var$FocusContext) || {};
        let node = (0, $aB6Cp$react.useMemo)(() => new $a7a032acae3ddda9$var$TreeNode({
          scopeRef
        }), [
          scopeRef
        ]);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          let parent = parentNode || $a7a032acae3ddda9$export$d06fae2ee68b101e.root;
          if ($a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $a7a032acae3ddda9$var$activeScope && !$a7a032acae3ddda9$var$isAncestorScope($a7a032acae3ddda9$var$activeScope, parent.scopeRef)) {
            let activeNode = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode($a7a032acae3ddda9$var$activeScope);
            if (activeNode)
              parent = activeNode;
          }
          parent.addChild(node);
          $a7a032acae3ddda9$export$d06fae2ee68b101e.addNode(node);
        }, [
          node,
          parentNode
        ]);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          let node2 = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef);
          node2.contain = contain;
        }, [
          contain
        ]);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          let node2 = startRef.current.nextSibling;
          let nodes = [];
          while (node2 && node2 !== endRef.current) {
            nodes.push(node2);
            node2 = node2.nextSibling;
          }
          scopeRef.current = nodes;
        }, [
          children
        ]);
        $a7a032acae3ddda9$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
        $a7a032acae3ddda9$var$useFocusContainment(scopeRef, contain);
        $a7a032acae3ddda9$var$useRestoreFocus(scopeRef, restoreFocus, contain);
        $a7a032acae3ddda9$var$useAutoFocus(scopeRef, autoFocus);
        (0, $aB6Cp$react.useEffect)(() => {
          if (scopeRef) {
            let activeElement = document.activeElement;
            let scope = null;
            if ($a7a032acae3ddda9$var$isElementInScope(activeElement, scopeRef.current)) {
              for (let node2 of $a7a032acae3ddda9$export$d06fae2ee68b101e.traverse())
                if ($a7a032acae3ddda9$var$isElementInScope(activeElement, node2.scopeRef.current))
                  scope = node2;
              if (scope === $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef))
                $a7a032acae3ddda9$var$activeScope = scope.scopeRef;
            }
            return () => {
              let parentScope = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).parent.scopeRef;
              if ((scopeRef === $a7a032acae3ddda9$var$activeScope || $a7a032acae3ddda9$var$isAncestorScope(scopeRef, $a7a032acae3ddda9$var$activeScope)) && (!parentScope || $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(parentScope)))
                $a7a032acae3ddda9$var$activeScope = parentScope;
              $a7a032acae3ddda9$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
            };
          }
        }, [
          scopeRef
        ]);
        let focusManager = (0, $aB6Cp$react.useMemo)(() => $a7a032acae3ddda9$var$createFocusManagerForScope(scopeRef), []);
        let value = (0, $aB6Cp$react.useMemo)(() => ({
          focusManager,
          parentNode: node
        }), [
          node,
          focusManager
        ]);
        return /* @__PURE__ */ (0, $parcel$interopDefault($aB6Cp$react)).createElement($a7a032acae3ddda9$var$FocusContext.Provider, {
          value
        }, /* @__PURE__ */ (0, $parcel$interopDefault($aB6Cp$react)).createElement("span", {
          "data-focus-scope-start": true,
          hidden: true,
          ref: startRef
        }), children, /* @__PURE__ */ (0, $parcel$interopDefault($aB6Cp$react)).createElement("span", {
          "data-focus-scope-end": true,
          hidden: true,
          ref: endRef
        }));
      }
      function $a7a032acae3ddda9$export$10c5169755ce7bd7() {
        var _useContext;
        return (_useContext = (0, $aB6Cp$react.useContext)($a7a032acae3ddda9$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;
      }
      function $a7a032acae3ddda9$var$createFocusManagerForScope(scopeRef) {
        return {
          focusNext(opts = {}) {
            let scope = scopeRef.current;
            let { from, tabbable, wrap, accept } = opts;
            let node = from || document.activeElement;
            let sentinel = scope[0].previousElementSibling;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
              tabbable,
              accept
            }, scope);
            walker.currentNode = $a7a032acae3ddda9$var$isElementInScope(node, scope) ? node : sentinel;
            let nextNode = walker.nextNode();
            if (!nextNode && wrap) {
              walker.currentNode = sentinel;
              nextNode = walker.nextNode();
            }
            if (nextNode)
              $a7a032acae3ddda9$var$focusElement(nextNode, true);
            return nextNode;
          },
          focusPrevious(opts = {}) {
            let scope = scopeRef.current;
            let { from, tabbable, wrap, accept } = opts;
            let node = from || document.activeElement;
            let sentinel = scope[scope.length - 1].nextElementSibling;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
              tabbable,
              accept
            }, scope);
            walker.currentNode = $a7a032acae3ddda9$var$isElementInScope(node, scope) ? node : sentinel;
            let previousNode = walker.previousNode();
            if (!previousNode && wrap) {
              walker.currentNode = sentinel;
              previousNode = walker.previousNode();
            }
            if (previousNode)
              $a7a032acae3ddda9$var$focusElement(previousNode, true);
            return previousNode;
          },
          focusFirst(opts = {}) {
            let scope = scopeRef.current;
            let { tabbable, accept } = opts;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
              tabbable,
              accept
            }, scope);
            walker.currentNode = scope[0].previousElementSibling;
            let nextNode = walker.nextNode();
            if (nextNode)
              $a7a032acae3ddda9$var$focusElement(nextNode, true);
            return nextNode;
          },
          focusLast(opts = {}) {
            let scope = scopeRef.current;
            let { tabbable, accept } = opts;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
              tabbable,
              accept
            }, scope);
            walker.currentNode = scope[scope.length - 1].nextElementSibling;
            let previousNode = walker.previousNode();
            if (previousNode)
              $a7a032acae3ddda9$var$focusElement(previousNode, true);
            return previousNode;
          }
        };
      }
      var $a7a032acae3ddda9$var$focusableElements = [
        "input:not([disabled]):not([type=hidden])",
        "select:not([disabled])",
        "textarea:not([disabled])",
        "button:not([disabled])",
        "a[href]",
        "area[href]",
        "summary",
        "iframe",
        "object",
        "embed",
        "audio[controls]",
        "video[controls]",
        "[contenteditable]"
      ];
      var $a7a032acae3ddda9$var$FOCUSABLE_ELEMENT_SELECTOR = $a7a032acae3ddda9$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
      $a7a032acae3ddda9$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
      var $a7a032acae3ddda9$var$TABBABLE_ELEMENT_SELECTOR = $a7a032acae3ddda9$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
      function $a7a032acae3ddda9$var$getScopeRoot(scope) {
        return scope[0].parentElement;
      }
      function $a7a032acae3ddda9$var$shouldContainFocus(scopeRef) {
        let scope = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode($a7a032acae3ddda9$var$activeScope);
        while (scope && scope.scopeRef !== scopeRef) {
          if (scope.contain)
            return false;
          scope = scope.parent;
        }
        return true;
      }
      function $a7a032acae3ddda9$var$useFocusContainment(scopeRef, contain) {
        let focusedNode = (0, $aB6Cp$react.useRef)();
        let raf = (0, $aB6Cp$react.useRef)(null);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          let scope = scopeRef.current;
          if (!contain) {
            if (raf.current) {
              cancelAnimationFrame(raf.current);
              raf.current = null;
            }
            return;
          }
          let onKeyDown = (e) => {
            if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$a7a032acae3ddda9$var$shouldContainFocus(scopeRef))
              return;
            let focusedElement = document.activeElement;
            let scope2 = scopeRef.current;
            if (!$a7a032acae3ddda9$var$isElementInScope(focusedElement, scope2))
              return;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope2), {
              tabbable: true
            }, scope2);
            walker.currentNode = focusedElement;
            let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            if (!nextElement) {
              walker.currentNode = e.shiftKey ? scope2[scope2.length - 1].nextElementSibling : scope2[0].previousElementSibling;
              nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            }
            e.preventDefault();
            if (nextElement)
              $a7a032acae3ddda9$var$focusElement(nextElement, true);
          };
          let onFocus = (e) => {
            if ((!$a7a032acae3ddda9$var$activeScope || $a7a032acae3ddda9$var$isAncestorScope($a7a032acae3ddda9$var$activeScope, scopeRef)) && $a7a032acae3ddda9$var$isElementInScope(e.target, scopeRef.current)) {
              $a7a032acae3ddda9$var$activeScope = scopeRef;
              focusedNode.current = e.target;
            } else if ($a7a032acae3ddda9$var$shouldContainFocus(scopeRef) && !$a7a032acae3ddda9$var$isElementInChildScope(e.target, scopeRef)) {
              if (focusedNode.current)
                focusedNode.current.focus();
              else if ($a7a032acae3ddda9$var$activeScope)
                $a7a032acae3ddda9$var$focusFirstInScope($a7a032acae3ddda9$var$activeScope.current);
            } else if ($a7a032acae3ddda9$var$shouldContainFocus(scopeRef))
              focusedNode.current = e.target;
          };
          let onBlur = (e) => {
            if (raf.current)
              cancelAnimationFrame(raf.current);
            raf.current = requestAnimationFrame(() => {
              if ($a7a032acae3ddda9$var$shouldContainFocus(scopeRef) && !$a7a032acae3ddda9$var$isElementInChildScope(document.activeElement, scopeRef)) {
                $a7a032acae3ddda9$var$activeScope = scopeRef;
                if (document.body.contains(e.target)) {
                  focusedNode.current = e.target;
                  focusedNode.current.focus();
                } else if ($a7a032acae3ddda9$var$activeScope)
                  $a7a032acae3ddda9$var$focusFirstInScope($a7a032acae3ddda9$var$activeScope.current);
              }
            });
          };
          document.addEventListener("keydown", onKeyDown, false);
          document.addEventListener("focusin", onFocus, false);
          scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
          scope.forEach((element) => element.addEventListener("focusout", onBlur, false));
          return () => {
            document.removeEventListener("keydown", onKeyDown, false);
            document.removeEventListener("focusin", onFocus, false);
            scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
            scope.forEach((element) => element.removeEventListener("focusout", onBlur, false));
          };
        }, [
          scopeRef,
          contain
        ]);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          return () => {
            if (raf.current)
              cancelAnimationFrame(raf.current);
          };
        }, [
          raf
        ]);
      }
      function $a7a032acae3ddda9$var$isElementInAnyScope(element) {
        return $a7a032acae3ddda9$var$isElementInChildScope(element);
      }
      function $a7a032acae3ddda9$var$isElementInScope(element, scope) {
        return scope.some((node) => node.contains(element));
      }
      function $a7a032acae3ddda9$var$isElementInChildScope(element, scope = null) {
        if (element instanceof Element && element.closest("[data-react-aria-top-layer]"))
          return true;
        for (let { scopeRef: s } of $a7a032acae3ddda9$export$d06fae2ee68b101e.traverse($a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scope))) {
          if ($a7a032acae3ddda9$var$isElementInScope(element, s.current))
            return true;
        }
        return false;
      }
      function $a7a032acae3ddda9$export$1258395f99bf9cbf(element) {
        return $a7a032acae3ddda9$var$isElementInChildScope(element, $a7a032acae3ddda9$var$activeScope);
      }
      function $a7a032acae3ddda9$var$isAncestorScope(ancestor, scope) {
        var _focusScopeTree_getTreeNode;
        let parent = (_focusScopeTree_getTreeNode = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
        while (parent) {
          if (parent.scopeRef === ancestor)
            return true;
          parent = parent.parent;
        }
        return false;
      }
      function $a7a032acae3ddda9$var$focusElement(element, scroll = false) {
        if (element != null && !scroll)
          try {
            (0, $1c7f9157d722357d$export$80f3e147d781571c)(element);
          } catch (err) {
          }
        else if (element != null)
          try {
            element.focus();
          } catch (err) {
          }
      }
      function $a7a032acae3ddda9$var$focusFirstInScope(scope, tabbable = true) {
        let sentinel = scope[0].previousElementSibling;
        let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
          tabbable
        }, scope);
        walker.currentNode = sentinel;
        let nextNode = walker.nextNode();
        if (tabbable && !nextNode) {
          walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa($a7a032acae3ddda9$var$getScopeRoot(scope), {
            tabbable: false
          }, scope);
          walker.currentNode = sentinel;
          nextNode = walker.nextNode();
        }
        $a7a032acae3ddda9$var$focusElement(nextNode);
      }
      function $a7a032acae3ddda9$var$useAutoFocus(scopeRef, autoFocus) {
        const autoFocusRef = (0, $parcel$interopDefault($aB6Cp$react)).useRef(autoFocus);
        (0, $aB6Cp$react.useEffect)(() => {
          if (autoFocusRef.current) {
            $a7a032acae3ddda9$var$activeScope = scopeRef;
            if (!$a7a032acae3ddda9$var$isElementInScope(document.activeElement, $a7a032acae3ddda9$var$activeScope.current))
              $a7a032acae3ddda9$var$focusFirstInScope(scopeRef.current);
          }
          autoFocusRef.current = false;
        }, [
          scopeRef
        ]);
      }
      function $a7a032acae3ddda9$var$useActiveScopeTracker(scopeRef, restore, contain) {
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          if (restore || contain)
            return;
          let scope = scopeRef.current;
          let onFocus = (e) => {
            let target = e.target;
            if ($a7a032acae3ddda9$var$isElementInScope(target, scopeRef.current))
              $a7a032acae3ddda9$var$activeScope = scopeRef;
            else if (!$a7a032acae3ddda9$var$isElementInAnyScope(target))
              $a7a032acae3ddda9$var$activeScope = null;
          };
          document.addEventListener("focusin", onFocus, false);
          scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
          return () => {
            document.removeEventListener("focusin", onFocus, false);
            scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
          };
        }, [
          scopeRef,
          restore,
          contain
        ]);
      }
      function $a7a032acae3ddda9$var$shouldRestoreFocus(scopeRef) {
        let scope = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode($a7a032acae3ddda9$var$activeScope);
        while (scope && scope.scopeRef !== scopeRef) {
          if (scope.nodeToRestore)
            return false;
          scope = scope.parent;
        }
        return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
      }
      function $a7a032acae3ddda9$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
        const nodeToRestoreRef = (0, $aB6Cp$react.useRef)(typeof document !== "undefined" ? document.activeElement : null);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          let scope = scopeRef.current;
          if (!restoreFocus || contain)
            return;
          let onFocus = () => {
            if ((!$a7a032acae3ddda9$var$activeScope || $a7a032acae3ddda9$var$isAncestorScope($a7a032acae3ddda9$var$activeScope, scopeRef)) && $a7a032acae3ddda9$var$isElementInScope(document.activeElement, scopeRef.current))
              $a7a032acae3ddda9$var$activeScope = scopeRef;
          };
          document.addEventListener("focusin", onFocus, false);
          scope.forEach((element) => element.addEventListener("focusin", onFocus, false));
          return () => {
            document.removeEventListener("focusin", onFocus, false);
            scope.forEach((element) => element.removeEventListener("focusin", onFocus, false));
          };
        }, [
          scopeRef,
          contain
        ]);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          if (!restoreFocus)
            return;
          let onKeyDown = (e) => {
            if (e.key !== "Tab" || e.altKey || e.ctrlKey || e.metaKey || !$a7a032acae3ddda9$var$shouldContainFocus(scopeRef))
              return;
            let focusedElement = document.activeElement;
            if (!$a7a032acae3ddda9$var$isElementInScope(focusedElement, scopeRef.current))
              return;
            let nodeToRestore = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(document.body, {
              tabbable: true
            });
            walker.currentNode = focusedElement;
            let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {
              nodeToRestore = null;
              $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = null;
            }
            if ((!nextElement || !$a7a032acae3ddda9$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
              walker.currentNode = nodeToRestore;
              do
                nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
              while ($a7a032acae3ddda9$var$isElementInScope(nextElement, scopeRef.current));
              e.preventDefault();
              e.stopPropagation();
              if (nextElement)
                $a7a032acae3ddda9$var$focusElement(nextElement, true);
              else if (!$a7a032acae3ddda9$var$isElementInAnyScope(nodeToRestore))
                focusedElement.blur();
              else
                $a7a032acae3ddda9$var$focusElement(nodeToRestore, true);
            }
          };
          if (!contain)
            document.addEventListener("keydown", onKeyDown, true);
          return () => {
            if (!contain)
              document.removeEventListener("keydown", onKeyDown, true);
          };
        }, [
          scopeRef,
          restoreFocus,
          contain
        ]);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          if (!restoreFocus)
            return;
          $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;
          return () => {
            let nodeToRestore = $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(scopeRef).nodeToRestore;
            if (restoreFocus && nodeToRestore && // eslint-disable-next-line react-hooks/exhaustive-deps
            ($a7a032acae3ddda9$var$isElementInScope(document.activeElement, scopeRef.current) || document.activeElement === document.body && $a7a032acae3ddda9$var$shouldRestoreFocus(scopeRef))) {
              let clonedTree = $a7a032acae3ddda9$export$d06fae2ee68b101e.clone();
              requestAnimationFrame(() => {
                if (document.activeElement === document.body) {
                  let treeNode = clonedTree.getTreeNode(scopeRef);
                  while (treeNode) {
                    if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {
                      $a7a032acae3ddda9$var$focusElement(treeNode.nodeToRestore);
                      return;
                    }
                    treeNode = treeNode.parent;
                  }
                  treeNode = clonedTree.getTreeNode(scopeRef);
                  while (treeNode) {
                    if (treeNode.scopeRef && $a7a032acae3ddda9$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {
                      $a7a032acae3ddda9$var$focusFirstInScope(treeNode.scopeRef.current, true);
                      return;
                    }
                    treeNode = treeNode.parent;
                  }
                }
              });
            }
          };
        }, [
          scopeRef,
          restoreFocus
        ]);
      }
      function $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, opts, scope) {
        let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $a7a032acae3ddda9$var$TABBABLE_ELEMENT_SELECTOR : $a7a032acae3ddda9$var$FOCUSABLE_ELEMENT_SELECTOR;
        let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
          acceptNode(node) {
            var _opts_from;
            if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node))
              return NodeFilter.FILTER_REJECT;
            if (node.matches(selector) && (0, $d5156037ad898a4d$export$e989c0fffaa6b27a)(node) && (!scope || $a7a032acae3ddda9$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node)))
              return NodeFilter.FILTER_ACCEPT;
            return NodeFilter.FILTER_SKIP;
          }
        });
        if (opts === null || opts === void 0 ? void 0 : opts.from)
          walker.currentNode = opts.from;
        return walker;
      }
      function $a7a032acae3ddda9$export$c5251b9e124bf29(ref, defaultOptions = {}) {
        return {
          focusNext(opts = {}) {
            let root = ref.current;
            if (!root)
              return;
            let { from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept } = opts;
            let node = from || document.activeElement;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, {
              tabbable,
              accept
            });
            if (root.contains(node))
              walker.currentNode = node;
            let nextNode = walker.nextNode();
            if (!nextNode && wrap) {
              walker.currentNode = root;
              nextNode = walker.nextNode();
            }
            if (nextNode)
              $a7a032acae3ddda9$var$focusElement(nextNode, true);
            return nextNode;
          },
          focusPrevious(opts = defaultOptions) {
            let root = ref.current;
            if (!root)
              return;
            let { from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept } = opts;
            let node = from || document.activeElement;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, {
              tabbable,
              accept
            });
            if (root.contains(node))
              walker.currentNode = node;
            else {
              let next = $a7a032acae3ddda9$var$last(walker);
              if (next)
                $a7a032acae3ddda9$var$focusElement(next, true);
              return next;
            }
            let previousNode = walker.previousNode();
            if (!previousNode && wrap) {
              walker.currentNode = root;
              previousNode = $a7a032acae3ddda9$var$last(walker);
            }
            if (previousNode)
              $a7a032acae3ddda9$var$focusElement(previousNode, true);
            return previousNode;
          },
          focusFirst(opts = defaultOptions) {
            let root = ref.current;
            if (!root)
              return;
            let { tabbable = defaultOptions.tabbable, accept = defaultOptions.accept } = opts;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, {
              tabbable,
              accept
            });
            let nextNode = walker.nextNode();
            if (nextNode)
              $a7a032acae3ddda9$var$focusElement(nextNode, true);
            return nextNode;
          },
          focusLast(opts = defaultOptions) {
            let root = ref.current;
            if (!root)
              return;
            let { tabbable = defaultOptions.tabbable, accept = defaultOptions.accept } = opts;
            let walker = $a7a032acae3ddda9$export$2d6ec8fc375ceafa(root, {
              tabbable,
              accept
            });
            let next = $a7a032acae3ddda9$var$last(walker);
            if (next)
              $a7a032acae3ddda9$var$focusElement(next, true);
            return next;
          }
        };
      }
      function $a7a032acae3ddda9$var$last(walker) {
        let next;
        let last;
        do {
          last = walker.lastChild();
          if (last)
            next = last;
        } while (last);
        return next;
      }
      var $a7a032acae3ddda9$var$Tree = class _$a7a032acae3ddda9$var$Tree {
        get size() {
          return this.fastMap.size;
        }
        getTreeNode(data) {
          return this.fastMap.get(data);
        }
        addTreeNode(scopeRef, parent, nodeToRestore) {
          let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
          let node = new $a7a032acae3ddda9$var$TreeNode({
            scopeRef
          });
          parentNode.addChild(node);
          node.parent = parentNode;
          this.fastMap.set(scopeRef, node);
          if (nodeToRestore)
            node.nodeToRestore = nodeToRestore;
        }
        addNode(node) {
          this.fastMap.set(node.scopeRef, node);
        }
        removeTreeNode(scopeRef) {
          if (scopeRef === null)
            return;
          let node = this.fastMap.get(scopeRef);
          let parentNode = node.parent;
          for (let current of this.traverse())
            if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef.current && $a7a032acae3ddda9$var$isElementInScope(current.nodeToRestore, node.scopeRef.current))
              current.nodeToRestore = node.nodeToRestore;
          let children = node.children;
          parentNode.removeChild(node);
          if (children.size > 0)
            children.forEach((child) => parentNode.addChild(child));
          this.fastMap.delete(node.scopeRef);
        }
        // Pre Order Depth First
        *traverse(node = this.root) {
          if (node.scopeRef != null)
            yield node;
          if (node.children.size > 0)
            for (let child of node.children)
              yield* __yieldStar(this.traverse(child));
        }
        clone() {
          let newTree = new _$a7a032acae3ddda9$var$Tree();
          for (let node of this.traverse())
            newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);
          return newTree;
        }
        constructor() {
          this.fastMap = /* @__PURE__ */ new Map();
          this.root = new $a7a032acae3ddda9$var$TreeNode({
            scopeRef: null
          });
          this.fastMap.set(null, this.root);
        }
      };
      var $a7a032acae3ddda9$var$TreeNode = class {
        addChild(node) {
          this.children.add(node);
          node.parent = this;
        }
        removeChild(node) {
          this.children.delete(node);
          node.parent = void 0;
        }
        constructor(props) {
          this.children = /* @__PURE__ */ new Set();
          this.contain = false;
          this.scopeRef = props.scopeRef;
        }
      };
      var $a7a032acae3ddda9$export$d06fae2ee68b101e = new $a7a032acae3ddda9$var$Tree();
      function $581a96d6eb128c1b$export$4e328f61c538687f(props = {}) {
        let { autoFocus = false, isTextInput, within } = props;
        let state = (0, $aB6Cp$react.useRef)({
          isFocused: false,
          isFocusVisible: autoFocus || (0, $aB6Cp$reactariainteractions.isFocusVisible)()
        });
        let [isFocused, setFocused] = (0, $aB6Cp$react.useState)(false);
        let [isFocusVisibleState, setFocusVisible] = (0, $aB6Cp$react.useState)(() => state.current.isFocused && state.current.isFocusVisible);
        let updateState = (0, $aB6Cp$react.useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
        let onFocusChange = (0, $aB6Cp$react.useCallback)((isFocused2) => {
          state.current.isFocused = isFocused2;
          setFocused(isFocused2);
          updateState();
        }, [
          updateState
        ]);
        (0, $aB6Cp$reactariainteractions.useFocusVisibleListener)((isFocusVisible) => {
          state.current.isFocusVisible = isFocusVisible;
          updateState();
        }, [], {
          isTextInput
        });
        let { focusProps } = (0, $aB6Cp$reactariainteractions.useFocus)({
          isDisabled: within,
          onFocusChange
        });
        let { focusWithinProps } = (0, $aB6Cp$reactariainteractions.useFocusWithin)({
          isDisabled: !within,
          onFocusWithinChange: onFocusChange
        });
        return {
          isFocused,
          isFocusVisible: isFocusVisibleState,
          focusProps: within ? focusWithinProps : focusProps
        };
      }
      function $dfd8c70b928eb1b3$export$1a38b4ad7f578e1d(props) {
        let { children, focusClass, focusRingClass } = props;
        let { isFocused, isFocusVisible, focusProps } = (0, $581a96d6eb128c1b$export$4e328f61c538687f)(props);
        let child = (0, $parcel$interopDefault($aB6Cp$react)).Children.only(children);
        return /* @__PURE__ */ (0, $parcel$interopDefault($aB6Cp$react)).cloneElement(child, (0, $aB6Cp$reactariautils.mergeProps)(child.props, __spreadProps(__spreadValues({}, focusProps), {
          className: (0, $parcel$interopDefault($aB6Cp$clsx))({
            [focusClass || ""]: isFocused,
            [focusRingClass || ""]: isFocusVisible
          })
        })));
      }
      var $fb504d83237fd6ac$var$FocusableContext = /* @__PURE__ */ (0, $parcel$interopDefault($aB6Cp$react)).createContext(null);
      function $fb504d83237fd6ac$var$useFocusableContext(ref) {
        let context = (0, $aB6Cp$react.useContext)($fb504d83237fd6ac$var$FocusableContext) || {};
        (0, $aB6Cp$reactariautils.useSyncRef)(context, ref);
        let _a = context, { ref: _ } = _a, otherProps = __objRest(_a, ["ref"]);
        return otherProps;
      }
      function $fb504d83237fd6ac$var$FocusableProvider(props, ref) {
        let _a = props, { children } = _a, otherProps = __objRest(_a, ["children"]);
        let context = __spreadProps(__spreadValues({}, otherProps), {
          ref
        });
        return /* @__PURE__ */ (0, $parcel$interopDefault($aB6Cp$react)).createElement($fb504d83237fd6ac$var$FocusableContext.Provider, {
          value: context
        }, children);
      }
      var $fb504d83237fd6ac$export$13f3202a3e5ddd5 = /* @__PURE__ */ (0, $parcel$interopDefault($aB6Cp$react)).forwardRef($fb504d83237fd6ac$var$FocusableProvider);
      function $fb504d83237fd6ac$export$4c014de7c8940b4c(props, domRef) {
        let { focusProps } = (0, $aB6Cp$reactariainteractions.useFocus)(props);
        let { keyboardProps } = (0, $aB6Cp$reactariainteractions.useKeyboard)(props);
        let interactions = (0, $aB6Cp$reactariautils.mergeProps)(focusProps, keyboardProps);
        let domProps = $fb504d83237fd6ac$var$useFocusableContext(domRef);
        let interactionProps = props.isDisabled ? {} : domProps;
        let autoFocusRef = (0, $aB6Cp$react.useRef)(props.autoFocus);
        (0, $aB6Cp$react.useEffect)(() => {
          if (autoFocusRef.current && domRef.current)
            (0, $1c7f9157d722357d$export$80f3e147d781571c)(domRef.current);
          autoFocusRef.current = false;
        }, [
          domRef
        ]);
        return {
          focusableProps: (0, $aB6Cp$reactariautils.mergeProps)(__spreadProps(__spreadValues({}, interactions), {
            tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : void 0
          }), interactionProps)
        };
      }
      function $259c6413a286f2e6$export$eac1895992b9f3d6(ref, options) {
        let isDisabled = options === null || options === void 0 ? void 0 : options.isDisabled;
        let [hasTabbableChild, setHasTabbableChild] = (0, $aB6Cp$react.useState)(false);
        (0, $aB6Cp$reactariautils.useLayoutEffect)(() => {
          if ((ref === null || ref === void 0 ? void 0 : ref.current) && !isDisabled) {
            let update = () => {
              if (ref.current) {
                let walker = (0, $a7a032acae3ddda9$export$2d6ec8fc375ceafa)(ref.current, {
                  tabbable: true
                });
                setHasTabbableChild(!!walker.nextNode());
              }
            };
            update();
            let observer = new MutationObserver(update);
            observer.observe(ref.current, {
              subtree: true,
              childList: true,
              attributes: true,
              attributeFilter: [
                "tabIndex",
                "disabled"
              ]
            });
            return () => {
              observer.disconnect();
            };
          }
        });
        return isDisabled ? false : hasTabbableChild;
      }
    }
  });

  // node_modules/@react-aria/visually-hidden/dist/main.js
  var require_main13 = __commonJS({
    "node_modules/@react-aria/visually-hidden/dist/main.js"(exports, module) {
      var $2Agrv$reactariautils = require_main7();
      var $2Agrv$react = require_react();
      var $2Agrv$reactariainteractions = require_main11();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "useVisuallyHidden", () => $b5c81b25cdf7a43c$export$a966af930f325cab);
      $parcel$export(module.exports, "VisuallyHidden", () => $b5c81b25cdf7a43c$export$439d29a4e110a164);
      var $b5c81b25cdf7a43c$var$styles = {
        border: 0,
        clip: "rect(0 0 0 0)",
        clipPath: "inset(50%)",
        height: "1px",
        margin: "-1px",
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        width: "1px",
        whiteSpace: "nowrap"
      };
      function $b5c81b25cdf7a43c$export$a966af930f325cab(props = {}) {
        let { style, isFocusable } = props;
        let [isFocused, setFocused] = (0, $2Agrv$react.useState)(false);
        let { focusWithinProps } = (0, $2Agrv$reactariainteractions.useFocusWithin)({
          isDisabled: !isFocusable,
          onFocusWithinChange: (val) => setFocused(val)
        });
        let combinedStyles = (0, $2Agrv$react.useMemo)(() => {
          if (isFocused)
            return style;
          else if (style)
            return __spreadValues(__spreadValues({}, $b5c81b25cdf7a43c$var$styles), style);
          else
            return $b5c81b25cdf7a43c$var$styles;
        }, [
          isFocused
        ]);
        return {
          visuallyHiddenProps: __spreadProps(__spreadValues({}, focusWithinProps), {
            style: combinedStyles
          })
        };
      }
      function $b5c81b25cdf7a43c$export$439d29a4e110a164(props) {
        let _a = props, { children, elementType: Element2 = "div", isFocusable, style } = _a, otherProps = __objRest(_a, ["children", "elementType", "isFocusable", "style"]);
        let { visuallyHiddenProps } = $b5c81b25cdf7a43c$export$a966af930f325cab(props);
        return /* @__PURE__ */ (0, $parcel$interopDefault($2Agrv$react)).createElement(Element2, (0, $2Agrv$reactariautils.mergeProps)(otherProps, visuallyHiddenProps), children);
      }
    }
  });

  // node_modules/@react-aria/overlays/dist/main.js
  var require_main14 = __commonJS({
    "node_modules/@react-aria/overlays/dist/main.js"(exports, module) {
      var $6Zb2x$react = require_react();
      var $6Zb2x$reactariautils = require_main7();
      var $6Zb2x$reactariai18n = require_main10();
      var $6Zb2x$reactariafocus = require_main12();
      var $6Zb2x$reactariainteractions = require_main11();
      var $6Zb2x$reactdom = require_react_dom();
      var $6Zb2x$reactariassr = require_main3();
      var $6Zb2x$reactariavisuallyhidden = require_main13();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "useOverlayPosition", () => $cd94b4896dd97759$export$d39e1813b3bdd0e1);
      $parcel$export(module.exports, "useOverlay", () => $82711f9cb668ecdb$export$ea8f71083e90600f);
      $parcel$export(module.exports, "useOverlayTrigger", () => $b4878eb6316f670a$export$f9d5c8beee7d008d);
      $parcel$export(module.exports, "usePreventScroll", () => $5c2f5cd01815d369$export$ee0f7cc6afcd1c18);
      $parcel$export(module.exports, "ModalProvider", () => $0775ea8ea6a0565e$export$178405afcd8c5eb);
      $parcel$export(module.exports, "useModalProvider", () => $0775ea8ea6a0565e$export$d9aaed4c3ece1bc0);
      $parcel$export(module.exports, "OverlayProvider", () => $0775ea8ea6a0565e$export$bf688221f59024e5);
      $parcel$export(module.exports, "OverlayContainer", () => $0775ea8ea6a0565e$export$b47c3594eab58386);
      $parcel$export(module.exports, "useModal", () => $0775ea8ea6a0565e$export$33ffd74ebf07f060);
      $parcel$export(module.exports, "DismissButton", () => $f69bb3e6457495cc$export$2317d149ed6f78c4);
      $parcel$export(module.exports, "ariaHideOutside", () => $08ef1685902b6011$export$1c3ebcada18427bf);
      $parcel$export(module.exports, "usePopover", () => $6c2dfcdee3e15e20$export$542a6fd13ac93354);
      $parcel$export(module.exports, "useModalOverlay", () => $11b7e0b04b421e95$export$dbc0f175b25fb0fb);
      $parcel$export(module.exports, "Overlay", () => $745edbb83ab4296f$export$c6fdb837b070b4ff);
      $parcel$export(module.exports, "useOverlayFocusContain", () => $745edbb83ab4296f$export$14c98a7594375490);
      var $5935ba4d7da2c103$var$AXIS = {
        top: "top",
        bottom: "top",
        left: "left",
        right: "left"
      };
      var $5935ba4d7da2c103$var$FLIPPED_DIRECTION = {
        top: "bottom",
        bottom: "top",
        left: "right",
        right: "left"
      };
      var $5935ba4d7da2c103$var$CROSS_AXIS = {
        top: "left",
        left: "top"
      };
      var $5935ba4d7da2c103$var$AXIS_SIZE = {
        top: "height",
        left: "width"
      };
      var $5935ba4d7da2c103$var$TOTAL_SIZE = {
        width: "totalWidth",
        height: "totalHeight"
      };
      var $5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE = {};
      var $5935ba4d7da2c103$var$visualViewport = typeof document !== "undefined" && window.visualViewport;
      function $5935ba4d7da2c103$var$getContainerDimensions(containerNode) {
        let width = 0, height = 0, totalWidth = 0, totalHeight = 0, top = 0, left = 0;
        let scroll = {};
        if (containerNode.tagName === "BODY") {
          let documentElement = document.documentElement;
          totalWidth = documentElement.clientWidth;
          totalHeight = documentElement.clientHeight;
          var _visualViewport_width;
          width = (_visualViewport_width = $5935ba4d7da2c103$var$visualViewport === null || $5935ba4d7da2c103$var$visualViewport === void 0 ? void 0 : $5935ba4d7da2c103$var$visualViewport.width) !== null && _visualViewport_width !== void 0 ? _visualViewport_width : totalWidth;
          var _visualViewport_height;
          height = (_visualViewport_height = $5935ba4d7da2c103$var$visualViewport === null || $5935ba4d7da2c103$var$visualViewport === void 0 ? void 0 : $5935ba4d7da2c103$var$visualViewport.height) !== null && _visualViewport_height !== void 0 ? _visualViewport_height : totalHeight;
          scroll.top = documentElement.scrollTop || containerNode.scrollTop;
          scroll.left = documentElement.scrollLeft || containerNode.scrollLeft;
        } else {
          ({ width, height, top, left } = $5935ba4d7da2c103$var$getOffset(containerNode));
          scroll.top = containerNode.scrollTop;
          scroll.left = containerNode.scrollLeft;
          totalWidth = width;
          totalHeight = height;
        }
        return {
          width,
          height,
          totalWidth,
          totalHeight,
          scroll,
          top,
          left
        };
      }
      function $5935ba4d7da2c103$var$getScroll(node) {
        return {
          top: node.scrollTop,
          left: node.scrollLeft,
          width: node.scrollWidth,
          height: node.scrollHeight
        };
      }
      function $5935ba4d7da2c103$var$getDelta(axis, offset, size, boundaryDimensions, containerDimensions, padding) {
        let containerScroll = containerDimensions.scroll[axis];
        let boundaryHeight = boundaryDimensions[$5935ba4d7da2c103$var$AXIS_SIZE[axis]];
        let startEdgeOffset = offset - padding - containerScroll;
        let endEdgeOffset = offset + padding - containerScroll + size;
        if (startEdgeOffset < 0)
          return -startEdgeOffset;
        else if (endEdgeOffset > boundaryHeight)
          return Math.max(boundaryHeight - endEdgeOffset, -startEdgeOffset);
        else
          return 0;
      }
      function $5935ba4d7da2c103$var$getMargins(node) {
        let style = window.getComputedStyle(node);
        return {
          top: parseInt(style.marginTop, 10) || 0,
          bottom: parseInt(style.marginBottom, 10) || 0,
          left: parseInt(style.marginLeft, 10) || 0,
          right: parseInt(style.marginRight, 10) || 0
        };
      }
      function $5935ba4d7da2c103$var$parsePlacement(input) {
        if ($5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE[input])
          return $5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE[input];
        let [placement, crossPlacement] = input.split(" ");
        let axis = $5935ba4d7da2c103$var$AXIS[placement] || "right";
        let crossAxis = $5935ba4d7da2c103$var$CROSS_AXIS[axis];
        if (!$5935ba4d7da2c103$var$AXIS[crossPlacement])
          crossPlacement = "center";
        let size = $5935ba4d7da2c103$var$AXIS_SIZE[axis];
        let crossSize = $5935ba4d7da2c103$var$AXIS_SIZE[crossAxis];
        $5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE[input] = {
          placement,
          crossPlacement,
          axis,
          crossAxis,
          size,
          crossSize
        };
        return $5935ba4d7da2c103$var$PARSED_PLACEMENT_CACHE[input];
      }
      function $5935ba4d7da2c103$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset) {
        let { placement, crossPlacement, axis, crossAxis, size, crossSize } = placementInfo;
        let position = {};
        position[crossAxis] = childOffset[crossAxis];
        if (crossPlacement === "center")
          position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;
        else if (crossPlacement !== crossAxis)
          position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
        position[crossAxis] += crossOffset;
        const minPosition = childOffset[crossAxis] - overlaySize[crossSize] + arrowSize + arrowBoundaryOffset;
        const maxPosition = childOffset[crossAxis] + childOffset[crossSize] - arrowSize - arrowBoundaryOffset;
        position[crossAxis] = (0, $6Zb2x$reactariautils.clamp)(position[crossAxis], minPosition, maxPosition);
        if (placement === axis) {
          const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[$5935ba4d7da2c103$var$TOTAL_SIZE[size]];
          position[$5935ba4d7da2c103$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
        } else
          position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
        return position;
      }
      function $5935ba4d7da2c103$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {
        return position.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position.top) - (margins.top + margins.bottom + padding)) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding));
      }
      function $5935ba4d7da2c103$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
        let { placement, axis, size } = placementInfo;
        if (placement === axis)
          return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$5935ba4d7da2c103$var$FLIPPED_DIRECTION[axis]] - padding);
        return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[$5935ba4d7da2c103$var$FLIPPED_DIRECTION[axis]] - padding);
      }
      function $5935ba4d7da2c103$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, userSetMaxHeight, arrowSize, arrowBoundaryOffset) {
        let placementInfo = $5935ba4d7da2c103$var$parsePlacement(placementInput);
        let { size, crossAxis, crossSize, placement, crossPlacement } = placementInfo;
        let position = $5935ba4d7da2c103$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
        let normalizedOffset = offset;
        let space = $5935ba4d7da2c103$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);
        if (flip && scrollSize[size] > space) {
          let flippedPlacementInfo = $5935ba4d7da2c103$var$parsePlacement(`${$5935ba4d7da2c103$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
          let flippedPosition = $5935ba4d7da2c103$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
          let flippedSpace = $5935ba4d7da2c103$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);
          if (flippedSpace > space) {
            placementInfo = flippedPlacementInfo;
            position = flippedPosition;
            normalizedOffset = offset;
          }
        }
        let delta = $5935ba4d7da2c103$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, containerDimensions, padding);
        position[crossAxis] += delta;
        let maxHeight = $5935ba4d7da2c103$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);
        if (userSetMaxHeight && userSetMaxHeight < maxHeight)
          maxHeight = userSetMaxHeight;
        overlaySize.height = Math.min(overlaySize.height, maxHeight);
        position = $5935ba4d7da2c103$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
        delta = $5935ba4d7da2c103$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, containerDimensions, padding);
        position[crossAxis] += delta;
        let arrowPosition = {};
        let preferredArrowPosition = childOffset[crossAxis] + 0.5 * childOffset[crossSize] - overlaySize[crossAxis];
        const arrowMinPosition = arrowSize / 2 + arrowBoundaryOffset;
        const arrowMaxPosition = overlaySize[crossSize] - arrowSize / 2 - arrowBoundaryOffset;
        const arrowOverlappingChildMinEdge = childOffset[crossAxis] - overlaySize[crossAxis] + arrowSize / 2;
        const arrowOverlappingChildMaxEdge = childOffset[crossAxis] + childOffset[crossSize] - overlaySize[crossAxis] - arrowSize / 2;
        const arrowPositionOverlappingChild = (0, $6Zb2x$reactariautils.clamp)(preferredArrowPosition, arrowOverlappingChildMinEdge, arrowOverlappingChildMaxEdge);
        arrowPosition[crossAxis] = (0, $6Zb2x$reactariautils.clamp)(arrowPositionOverlappingChild, arrowMinPosition, arrowMaxPosition);
        return {
          position,
          maxHeight,
          arrowOffsetLeft: arrowPosition.left,
          arrowOffsetTop: arrowPosition.top,
          placement: placementInfo.placement
        };
      }
      function $5935ba4d7da2c103$export$b3ceb0cbf1056d98(opts) {
        let { placement, targetNode, overlayNode, scrollNode, padding, shouldFlip, boundaryElement, offset, crossOffset, maxHeight, arrowSize = 0, arrowBoundaryOffset = 0 } = opts;
        let container = overlayNode instanceof HTMLElement ? $5935ba4d7da2c103$var$getContainingBlock(overlayNode) : document.documentElement;
        let isViewportContainer = container === document.documentElement;
        const containerPositionStyle = window.getComputedStyle(container).position;
        let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== "static";
        let childOffset = isViewportContainer ? $5935ba4d7da2c103$var$getOffset(targetNode) : $5935ba4d7da2c103$var$getPosition(targetNode, container);
        if (!isViewportContainer) {
          let { marginTop, marginLeft } = window.getComputedStyle(targetNode);
          childOffset.top += parseInt(marginTop, 10) || 0;
          childOffset.left += parseInt(marginLeft, 10) || 0;
        }
        let overlaySize = $5935ba4d7da2c103$var$getOffset(overlayNode);
        let margins = $5935ba4d7da2c103$var$getMargins(overlayNode);
        overlaySize.width += margins.left + margins.right;
        overlaySize.height += margins.top + margins.bottom;
        let scrollSize = $5935ba4d7da2c103$var$getScroll(scrollNode);
        let boundaryDimensions = $5935ba4d7da2c103$var$getContainerDimensions(boundaryElement);
        let containerDimensions = $5935ba4d7da2c103$var$getContainerDimensions(container);
        let containerOffsetWithBoundary = boundaryElement.tagName === "BODY" ? $5935ba4d7da2c103$var$getOffset(container) : $5935ba4d7da2c103$var$getPosition(container, boundaryElement);
        return $5935ba4d7da2c103$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, maxHeight, arrowSize, arrowBoundaryOffset);
      }
      function $5935ba4d7da2c103$var$getOffset(node) {
        let { top, left, width, height } = node.getBoundingClientRect();
        let { scrollTop, scrollLeft, clientTop, clientLeft } = document.documentElement;
        return {
          top: top + scrollTop - clientTop,
          left: left + scrollLeft - clientLeft,
          width,
          height
        };
      }
      function $5935ba4d7da2c103$var$getPosition(node, parent) {
        let style = window.getComputedStyle(node);
        let offset;
        if (style.position === "fixed") {
          let { top, left, width, height } = node.getBoundingClientRect();
          offset = {
            top,
            left,
            width,
            height
          };
        } else {
          offset = $5935ba4d7da2c103$var$getOffset(node);
          let parentOffset = $5935ba4d7da2c103$var$getOffset(parent);
          let parentStyle = window.getComputedStyle(parent);
          parentOffset.top += (parseInt(parentStyle.borderTopWidth, 10) || 0) - parent.scrollTop;
          parentOffset.left += (parseInt(parentStyle.borderLeftWidth, 10) || 0) - parent.scrollLeft;
          offset.top -= parentOffset.top;
          offset.left -= parentOffset.left;
        }
        offset.top -= parseInt(style.marginTop, 10) || 0;
        offset.left -= parseInt(style.marginLeft, 10) || 0;
        return offset;
      }
      function $5935ba4d7da2c103$var$getContainingBlock(node) {
        let offsetParent = node.offsetParent;
        if (offsetParent && offsetParent === document.body && window.getComputedStyle(offsetParent).position === "static" && !$5935ba4d7da2c103$var$isContainingBlock(offsetParent))
          offsetParent = document.documentElement;
        if (offsetParent == null) {
          offsetParent = node.parentElement;
          while (offsetParent && !$5935ba4d7da2c103$var$isContainingBlock(offsetParent))
            offsetParent = offsetParent.parentElement;
        }
        return offsetParent || document.documentElement;
      }
      function $5935ba4d7da2c103$var$isContainingBlock(node) {
        let style = window.getComputedStyle(node);
        return style.transform !== "none" || /transform|perspective/.test(style.willChange) || style.filter !== "none" || style.contain === "paint" || // @ts-ignore
        "backdropFilter" in style && style.backdropFilter !== "none" || // @ts-ignore
        "WebkitBackdropFilter" in style && style.WebkitBackdropFilter !== "none";
      }
      var $9a8aa1b0b336ea3a$export$f6211563215e3b37 = /* @__PURE__ */ new WeakMap();
      function $9a8aa1b0b336ea3a$export$18fc8428861184da(opts) {
        let { triggerRef, isOpen, onClose } = opts;
        (0, $6Zb2x$react.useEffect)(() => {
          if (!isOpen || onClose === null)
            return;
          let onScroll = (e) => {
            let target = e.target;
            if (!triggerRef.current || target instanceof Node && !target.contains(triggerRef.current))
              return;
            let onCloseHandler = onClose || $9a8aa1b0b336ea3a$export$f6211563215e3b37.get(triggerRef.current);
            if (onCloseHandler)
              onCloseHandler();
          };
          window.addEventListener("scroll", onScroll, true);
          return () => {
            window.removeEventListener("scroll", onScroll, true);
          };
        }, [
          isOpen,
          onClose,
          triggerRef
        ]);
      }
      var $cd94b4896dd97759$var$visualViewport = typeof document !== "undefined" && window.visualViewport;
      function $cd94b4896dd97759$export$d39e1813b3bdd0e1(props) {
        let { direction } = (0, $6Zb2x$reactariai18n.useLocale)();
        let { arrowSize = 0, targetRef, overlayRef, scrollRef = overlayRef, placement = "bottom", containerPadding = 12, shouldFlip = true, boundaryElement = typeof document !== "undefined" ? document.body : null, offset = 0, crossOffset = 0, shouldUpdatePosition = true, isOpen = true, onClose, maxHeight, arrowBoundaryOffset = 0 } = props;
        let [position, setPosition] = (0, $6Zb2x$react.useState)({
          position: {},
          arrowOffsetLeft: void 0,
          arrowOffsetTop: void 0,
          maxHeight: void 0,
          placement: void 0
        });
        let deps = [
          shouldUpdatePosition,
          placement,
          overlayRef.current,
          targetRef.current,
          scrollRef.current,
          containerPadding,
          shouldFlip,
          boundaryElement,
          offset,
          crossOffset,
          isOpen,
          direction,
          maxHeight,
          arrowBoundaryOffset,
          arrowSize
        ];
        let updatePosition = (0, $6Zb2x$react.useCallback)(() => {
          if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement)
            return;
          let position2 = (0, $5935ba4d7da2c103$export$b3ceb0cbf1056d98)({
            placement: $cd94b4896dd97759$var$translateRTL(placement, direction),
            overlayNode: overlayRef.current,
            targetNode: targetRef.current,
            scrollNode: scrollRef.current,
            padding: containerPadding,
            shouldFlip,
            boundaryElement,
            offset,
            crossOffset,
            maxHeight,
            arrowSize,
            arrowBoundaryOffset
          });
          Object.keys(position2.position).forEach((key) => overlayRef.current.style[key] = position2.position[key] + "px");
          overlayRef.current.style.maxHeight = position2.maxHeight != null ? position2.maxHeight + "px" : void 0;
          setPosition(position2);
        }, deps);
        (0, $6Zb2x$reactariautils.useLayoutEffect)(updatePosition, deps);
        $cd94b4896dd97759$var$useResize(updatePosition);
        (0, $6Zb2x$reactariautils.useResizeObserver)({
          ref: overlayRef,
          onResize: updatePosition
        });
        let isResizing = (0, $6Zb2x$react.useRef)(false);
        (0, $6Zb2x$reactariautils.useLayoutEffect)(() => {
          let timeout;
          let onResize = () => {
            isResizing.current = true;
            clearTimeout(timeout);
            timeout = setTimeout(() => {
              isResizing.current = false;
            }, 500);
            updatePosition();
          };
          $cd94b4896dd97759$var$visualViewport === null || $cd94b4896dd97759$var$visualViewport === void 0 ? void 0 : $cd94b4896dd97759$var$visualViewport.addEventListener("resize", onResize);
          $cd94b4896dd97759$var$visualViewport === null || $cd94b4896dd97759$var$visualViewport === void 0 ? void 0 : $cd94b4896dd97759$var$visualViewport.addEventListener("scroll", onResize);
          return () => {
            $cd94b4896dd97759$var$visualViewport === null || $cd94b4896dd97759$var$visualViewport === void 0 ? void 0 : $cd94b4896dd97759$var$visualViewport.removeEventListener("resize", onResize);
            $cd94b4896dd97759$var$visualViewport === null || $cd94b4896dd97759$var$visualViewport === void 0 ? void 0 : $cd94b4896dd97759$var$visualViewport.removeEventListener("scroll", onResize);
          };
        }, [
          updatePosition
        ]);
        let close = (0, $6Zb2x$react.useCallback)(() => {
          if (!isResizing.current)
            onClose();
        }, [
          onClose,
          isResizing
        ]);
        (0, $9a8aa1b0b336ea3a$export$18fc8428861184da)({
          triggerRef: targetRef,
          isOpen,
          onClose: onClose && close
        });
        return {
          overlayProps: {
            style: __spreadProps(__spreadValues({
              position: "absolute",
              zIndex: 1e5
            }, position.position), {
              maxHeight: position.maxHeight
            })
          },
          placement: position.placement,
          arrowProps: {
            "aria-hidden": "true",
            role: "presentation",
            style: {
              left: position.arrowOffsetLeft,
              top: position.arrowOffsetTop
            }
          },
          updatePosition
        };
      }
      function $cd94b4896dd97759$var$useResize(onResize) {
        (0, $6Zb2x$reactariautils.useLayoutEffect)(() => {
          window.addEventListener("resize", onResize, false);
          return () => {
            window.removeEventListener("resize", onResize, false);
          };
        }, [
          onResize
        ]);
      }
      function $cd94b4896dd97759$var$translateRTL(position, direction) {
        if (direction === "rtl")
          return position.replace("start", "right").replace("end", "left");
        return position.replace("start", "left").replace("end", "right");
      }
      var $82711f9cb668ecdb$var$visibleOverlays = [];
      function $82711f9cb668ecdb$export$ea8f71083e90600f(props, ref) {
        let { onClose, shouldCloseOnBlur, isOpen, isDismissable = false, isKeyboardDismissDisabled = false, shouldCloseOnInteractOutside } = props;
        (0, $6Zb2x$react.useEffect)(() => {
          if (isOpen)
            $82711f9cb668ecdb$var$visibleOverlays.push(ref);
          return () => {
            let index3 = $82711f9cb668ecdb$var$visibleOverlays.indexOf(ref);
            if (index3 >= 0)
              $82711f9cb668ecdb$var$visibleOverlays.splice(index3, 1);
          };
        }, [
          isOpen,
          ref
        ]);
        let onHide = () => {
          if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref && onClose)
            onClose();
        };
        let onInteractOutsideStart = (e) => {
          if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
            if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref) {
              e.stopPropagation();
              e.preventDefault();
            }
          }
        };
        let onInteractOutside = (e) => {
          if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
            if ($82711f9cb668ecdb$var$visibleOverlays[$82711f9cb668ecdb$var$visibleOverlays.length - 1] === ref) {
              e.stopPropagation();
              e.preventDefault();
            }
            onHide();
          }
        };
        let onKeyDown = (e) => {
          if (e.key === "Escape" && !isKeyboardDismissDisabled) {
            e.stopPropagation();
            e.preventDefault();
            onHide();
          }
        };
        (0, $6Zb2x$reactariainteractions.useInteractOutside)({
          ref,
          onInteractOutside: isDismissable ? onInteractOutside : null,
          onInteractOutsideStart
        });
        let { focusWithinProps } = (0, $6Zb2x$reactariainteractions.useFocusWithin)({
          isDisabled: !shouldCloseOnBlur,
          onBlurWithin: (e) => {
            if (!e.relatedTarget || (0, $6Zb2x$reactariafocus.isElementInChildOfActiveScope)(e.relatedTarget))
              return;
            if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget))
              onClose();
          }
        });
        let onPointerDownUnderlay = (e) => {
          if (e.target === e.currentTarget)
            e.preventDefault();
        };
        return {
          overlayProps: __spreadValues({
            onKeyDown
          }, focusWithinProps),
          underlayProps: {
            onPointerDown: onPointerDownUnderlay
          }
        };
      }
      function $b4878eb6316f670a$export$f9d5c8beee7d008d(props, state, ref) {
        let { type } = props;
        let { isOpen } = state;
        (0, $6Zb2x$react.useEffect)(() => {
          if (ref && ref.current)
            (0, $9a8aa1b0b336ea3a$export$f6211563215e3b37).set(ref.current, state.close);
        });
        let ariaHasPopup = void 0;
        if (type === "menu")
          ariaHasPopup = true;
        else if (type === "listbox")
          ariaHasPopup = "listbox";
        let overlayId = (0, $6Zb2x$reactariautils.useId)();
        return {
          triggerProps: {
            "aria-haspopup": ariaHasPopup,
            "aria-expanded": isOpen,
            "aria-controls": isOpen ? overlayId : null,
            onPress: state.toggle
          },
          overlayProps: {
            id: overlayId
          }
        };
      }
      var $5c2f5cd01815d369$var$visualViewport = typeof document !== "undefined" && window.visualViewport;
      var $5c2f5cd01815d369$var$nonTextInputTypes = /* @__PURE__ */ new Set([
        "checkbox",
        "radio",
        "range",
        "color",
        "file",
        "image",
        "button",
        "submit",
        "reset"
      ]);
      var $5c2f5cd01815d369$var$preventScrollCount = 0;
      var $5c2f5cd01815d369$var$restore;
      function $5c2f5cd01815d369$export$ee0f7cc6afcd1c18(options = {}) {
        let { isDisabled } = options;
        (0, $6Zb2x$reactariautils.useLayoutEffect)(() => {
          if (isDisabled)
            return;
          $5c2f5cd01815d369$var$preventScrollCount++;
          if ($5c2f5cd01815d369$var$preventScrollCount === 1) {
            if ((0, $6Zb2x$reactariautils.isIOS)())
              $5c2f5cd01815d369$var$restore = $5c2f5cd01815d369$var$preventScrollMobileSafari();
            else
              $5c2f5cd01815d369$var$restore = $5c2f5cd01815d369$var$preventScrollStandard();
          }
          return () => {
            $5c2f5cd01815d369$var$preventScrollCount--;
            if ($5c2f5cd01815d369$var$preventScrollCount === 0)
              $5c2f5cd01815d369$var$restore();
          };
        }, [
          isDisabled
        ]);
      }
      function $5c2f5cd01815d369$var$preventScrollStandard() {
        return (0, $6Zb2x$reactariautils.chain)($5c2f5cd01815d369$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), $5c2f5cd01815d369$var$setStyle(document.documentElement, "overflow", "hidden"));
      }
      function $5c2f5cd01815d369$var$preventScrollMobileSafari() {
        let scrollable;
        let lastY = 0;
        let onTouchStart = (e) => {
          scrollable = (0, $6Zb2x$reactariautils.getScrollParent)(e.target);
          if (scrollable === document.documentElement && scrollable === document.body)
            return;
          lastY = e.changedTouches[0].pageY;
        };
        let onTouchMove = (e) => {
          if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {
            e.preventDefault();
            return;
          }
          let y = e.changedTouches[0].pageY;
          let scrollTop = scrollable.scrollTop;
          let bottom = scrollable.scrollHeight - scrollable.clientHeight;
          if (bottom === 0)
            return;
          if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY)
            e.preventDefault();
          lastY = y;
        };
        let onTouchEnd = (e) => {
          let target = e.target;
          if ($5c2f5cd01815d369$var$willOpenKeyboard(target) && target !== document.activeElement) {
            e.preventDefault();
            target.style.transform = "translateY(-2000px)";
            target.focus();
            requestAnimationFrame(() => {
              target.style.transform = "";
            });
          }
        };
        let onFocus = (e) => {
          let target = e.target;
          if ($5c2f5cd01815d369$var$willOpenKeyboard(target)) {
            target.style.transform = "translateY(-2000px)";
            requestAnimationFrame(() => {
              target.style.transform = "";
              if ($5c2f5cd01815d369$var$visualViewport) {
                if ($5c2f5cd01815d369$var$visualViewport.height < window.innerHeight)
                  requestAnimationFrame(() => {
                    $5c2f5cd01815d369$var$scrollIntoView(target);
                  });
                else
                  $5c2f5cd01815d369$var$visualViewport.addEventListener("resize", () => $5c2f5cd01815d369$var$scrollIntoView(target), {
                    once: true
                  });
              }
            });
          }
        };
        let onWindowScroll = () => {
          window.scrollTo(0, 0);
        };
        let scrollX = window.pageXOffset;
        let scrollY = window.pageYOffset;
        let restoreStyles = (0, $6Zb2x$reactariautils.chain)($5c2f5cd01815d369$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), $5c2f5cd01815d369$var$setStyle(document.documentElement, "overflow", "hidden"), $5c2f5cd01815d369$var$setStyle(document.body, "marginTop", `-${scrollY}px`));
        window.scrollTo(0, 0);
        let removeEvents = (0, $6Zb2x$reactariautils.chain)($5c2f5cd01815d369$var$addEvent(document, "touchstart", onTouchStart, {
          passive: false,
          capture: true
        }), $5c2f5cd01815d369$var$addEvent(document, "touchmove", onTouchMove, {
          passive: false,
          capture: true
        }), $5c2f5cd01815d369$var$addEvent(document, "touchend", onTouchEnd, {
          passive: false,
          capture: true
        }), $5c2f5cd01815d369$var$addEvent(document, "focus", onFocus, true), $5c2f5cd01815d369$var$addEvent(window, "scroll", onWindowScroll));
        return () => {
          restoreStyles();
          removeEvents();
          window.scrollTo(scrollX, scrollY);
        };
      }
      function $5c2f5cd01815d369$var$setStyle(element, style, value) {
        let cur = element.style[style];
        element.style[style] = value;
        return () => {
          element.style[style] = cur;
        };
      }
      function $5c2f5cd01815d369$var$addEvent(target, event, handler, options) {
        target.addEventListener(event, handler, options);
        return () => {
          target.removeEventListener(event, handler, options);
        };
      }
      function $5c2f5cd01815d369$var$scrollIntoView(target) {
        let root = document.scrollingElement || document.documentElement;
        while (target && target !== root) {
          let scrollable = (0, $6Zb2x$reactariautils.getScrollParent)(target);
          if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {
            let scrollableTop = scrollable.getBoundingClientRect().top;
            let targetTop = target.getBoundingClientRect().top;
            if (targetTop > scrollableTop + target.clientHeight)
              scrollable.scrollTop += targetTop - scrollableTop;
          }
          target = scrollable.parentElement;
        }
      }
      function $5c2f5cd01815d369$var$willOpenKeyboard(target) {
        return target instanceof HTMLInputElement && !$5c2f5cd01815d369$var$nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;
      }
      var $0775ea8ea6a0565e$var$Context = /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createContext(null);
      function $0775ea8ea6a0565e$export$178405afcd8c5eb(props) {
        let { children } = props;
        let parent = (0, $6Zb2x$react.useContext)($0775ea8ea6a0565e$var$Context);
        let [modalCount, setModalCount] = (0, $6Zb2x$react.useState)(0);
        let context = (0, $6Zb2x$react.useMemo)(() => ({
          parent,
          modalCount,
          addModal() {
            setModalCount((count2) => count2 + 1);
            if (parent)
              parent.addModal();
          },
          removeModal() {
            setModalCount((count2) => count2 - 1);
            if (parent)
              parent.removeModal();
          }
        }), [
          parent,
          modalCount
        ]);
        return /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement($0775ea8ea6a0565e$var$Context.Provider, {
          value: context
        }, children);
      }
      function $0775ea8ea6a0565e$export$d9aaed4c3ece1bc0() {
        let context = (0, $6Zb2x$react.useContext)($0775ea8ea6a0565e$var$Context);
        return {
          modalProviderProps: {
            "aria-hidden": context && context.modalCount > 0 ? true : null
          }
        };
      }
      function $0775ea8ea6a0565e$var$OverlayContainerDOM(props) {
        let { modalProviderProps } = $0775ea8ea6a0565e$export$d9aaed4c3ece1bc0();
        return /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement("div", __spreadValues(__spreadValues({
          "data-overlay-container": true
        }, props), modalProviderProps));
      }
      function $0775ea8ea6a0565e$export$bf688221f59024e5(props) {
        return /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement($0775ea8ea6a0565e$export$178405afcd8c5eb, null, /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement($0775ea8ea6a0565e$var$OverlayContainerDOM, props));
      }
      function $0775ea8ea6a0565e$export$b47c3594eab58386(props) {
        let isSSR = (0, $6Zb2x$reactariassr.useIsSSR)();
        let _a = props, { portalContainer = isSSR ? null : document.body } = _a, rest = __objRest(_a, ["portalContainer"]);
        (0, $parcel$interopDefault($6Zb2x$react)).useEffect(() => {
          if (portalContainer === null || portalContainer === void 0 ? void 0 : portalContainer.closest("[data-overlay-container]"))
            throw new Error("An OverlayContainer must not be inside another container. Please change the portalContainer prop.");
        }, [
          portalContainer
        ]);
        if (!portalContainer)
          return null;
        let contents = /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement($0775ea8ea6a0565e$export$bf688221f59024e5, rest);
        return /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$reactdom)).createPortal(contents, portalContainer);
      }
      function $0775ea8ea6a0565e$export$33ffd74ebf07f060(options) {
        let context = (0, $6Zb2x$react.useContext)($0775ea8ea6a0565e$var$Context);
        if (!context)
          throw new Error("Modal is not contained within a provider");
        (0, $6Zb2x$react.useEffect)(() => {
          if ((options === null || options === void 0 ? void 0 : options.isDisabled) || !context || !context.parent)
            return;
          context.parent.addModal();
          return () => {
            if (context && context.parent)
              context.parent.removeModal();
          };
        }, [
          context,
          context.parent,
          options === null || options === void 0 ? void 0 : options.isDisabled
        ]);
        return {
          modalProps: {
            "data-ismodal": !(options === null || options === void 0 ? void 0 : options.isDisabled)
          }
        };
      }
      var $90f032faf016e1fb$exports = {};
      var $4393d9b86d3ad278$exports = {};
      $4393d9b86d3ad278$exports = {
        "dismiss": `\u062A\u062C\u0627\u0647\u0644`
      };
      var $254224013ae06959$exports = {};
      $254224013ae06959$exports = {
        "dismiss": `\u041E\u0442\u0445\u0432\u044A\u0440\u043B\u044F\u043D\u0435`
      };
      var $55d3567b59d09782$exports = {};
      $55d3567b59d09782$exports = {
        "dismiss": `Odstranit`
      };
      var $0e419a7be7773c16$exports = {};
      $0e419a7be7773c16$exports = {
        "dismiss": `Luk`
      };
      var $be606513c8356c34$exports = {};
      $be606513c8356c34$exports = {
        "dismiss": `Schlie\xDFen`
      };
      var $7d99787e5bd26f87$exports = {};
      $7d99787e5bd26f87$exports = {
        "dismiss": `\u0391\u03C0\u03CC\u03C1\u03C1\u03B9\u03C8\u03B7`
      };
      var $0360f2a6534752c1$exports = {};
      $0360f2a6534752c1$exports = {
        "dismiss": `Dismiss`
      };
      var $92bf4fdecfeb6a61$exports = {};
      $92bf4fdecfeb6a61$exports = {
        "dismiss": `Descartar`
      };
      var $7c02fa9b9c598043$exports = {};
      $7c02fa9b9c598043$exports = {
        "dismiss": `L\xF5peta`
      };
      var $ba53535dcca59343$exports = {};
      $ba53535dcca59343$exports = {
        "dismiss": `Hylk\xE4\xE4`
      };
      var $2fbbcddf7d252cb7$exports = {};
      $2fbbcddf7d252cb7$exports = {
        "dismiss": `Rejeter`
      };
      var $0a1f0520e07d3596$exports = {};
      $0a1f0520e07d3596$exports = {
        "dismiss": `\u05D4\u05EA\u05E2\u05DC\u05DD`
      };
      var $f7be5df1487823a9$exports = {};
      $f7be5df1487823a9$exports = {
        "dismiss": `Odbaci`
      };
      var $8dbe4363bfbba3f9$exports = {};
      $8dbe4363bfbba3f9$exports = {
        "dismiss": `Elutas\xEDt\xE1s`
      };
      var $90a445da1ad273e7$exports = {};
      $90a445da1ad273e7$exports = {
        "dismiss": `Ignora`
      };
      var $e1ebf18259c9b1ee$exports = {};
      $e1ebf18259c9b1ee$exports = {
        "dismiss": `\u9589\u3058\u308B`
      };
      var $765893642f3b4f72$exports = {};
      $765893642f3b4f72$exports = {
        "dismiss": `\uBB34\uC2DC`
      };
      var $af73ba24f63febd1$exports = {};
      $af73ba24f63febd1$exports = {
        "dismiss": `Atmesti`
      };
      var $97aac9f6740ee412$exports = {};
      $97aac9f6740ee412$exports = {
        "dismiss": `Ner\u0101d\u012Bt`
      };
      var $92fbe76e196d7e0a$exports = {};
      $92fbe76e196d7e0a$exports = {
        "dismiss": `Lukk`
      };
      var $44399897afb701ce$exports = {};
      $44399897afb701ce$exports = {
        "dismiss": `Negeren`
      };
      var $d679e258664d7384$exports = {};
      $d679e258664d7384$exports = {
        "dismiss": `Zignoruj`
      };
      var $b51fc2992648966b$exports = {};
      $b51fc2992648966b$exports = {
        "dismiss": `Descartar`
      };
      var $6abbc540dcd5f78c$exports = {};
      $6abbc540dcd5f78c$exports = {
        "dismiss": `Dispensar`
      };
      var $6cbc0c9bf574473b$exports = {};
      $6cbc0c9bf574473b$exports = {
        "dismiss": `Revocare`
      };
      var $009edbe58be6525b$exports = {};
      $009edbe58be6525b$exports = {
        "dismiss": `\u041F\u0440\u043E\u043F\u0443\u0441\u0442\u0438\u0442\u044C`
      };
      var $01cf6095489e78f7$exports = {};
      $01cf6095489e78f7$exports = {
        "dismiss": `Zru\u0161i\u0165`
      };
      var $33fd5a1a3753e83f$exports = {};
      $33fd5a1a3753e83f$exports = {
        "dismiss": `Opusti`
      };
      var $6b9373a558e74e84$exports = {};
      $6b9373a558e74e84$exports = {
        "dismiss": `Odbaci`
      };
      var $90008194c3db7fce$exports = {};
      $90008194c3db7fce$exports = {
        "dismiss": `Avvisa`
      };
      var $e29d21290b4ce15c$exports = {};
      $e29d21290b4ce15c$exports = {
        "dismiss": `Kapat`
      };
      var $96139c59e8ba3f85$exports = {};
      $96139c59e8ba3f85$exports = {
        "dismiss": `\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438`
      };
      var $052554192ea8e826$exports = {};
      $052554192ea8e826$exports = {
        "dismiss": `\u53D6\u6D88`
      };
      var $3f3b5d798a5abdbc$exports = {};
      $3f3b5d798a5abdbc$exports = {
        "dismiss": `\u95DC\u9589`
      };
      $90f032faf016e1fb$exports = {
        "ar-AE": $4393d9b86d3ad278$exports,
        "bg-BG": $254224013ae06959$exports,
        "cs-CZ": $55d3567b59d09782$exports,
        "da-DK": $0e419a7be7773c16$exports,
        "de-DE": $be606513c8356c34$exports,
        "el-GR": $7d99787e5bd26f87$exports,
        "en-US": $0360f2a6534752c1$exports,
        "es-ES": $92bf4fdecfeb6a61$exports,
        "et-EE": $7c02fa9b9c598043$exports,
        "fi-FI": $ba53535dcca59343$exports,
        "fr-FR": $2fbbcddf7d252cb7$exports,
        "he-IL": $0a1f0520e07d3596$exports,
        "hr-HR": $f7be5df1487823a9$exports,
        "hu-HU": $8dbe4363bfbba3f9$exports,
        "it-IT": $90a445da1ad273e7$exports,
        "ja-JP": $e1ebf18259c9b1ee$exports,
        "ko-KR": $765893642f3b4f72$exports,
        "lt-LT": $af73ba24f63febd1$exports,
        "lv-LV": $97aac9f6740ee412$exports,
        "nb-NO": $92fbe76e196d7e0a$exports,
        "nl-NL": $44399897afb701ce$exports,
        "pl-PL": $d679e258664d7384$exports,
        "pt-BR": $b51fc2992648966b$exports,
        "pt-PT": $6abbc540dcd5f78c$exports,
        "ro-RO": $6cbc0c9bf574473b$exports,
        "ru-RU": $009edbe58be6525b$exports,
        "sk-SK": $01cf6095489e78f7$exports,
        "sl-SI": $33fd5a1a3753e83f$exports,
        "sr-SP": $6b9373a558e74e84$exports,
        "sv-SE": $90008194c3db7fce$exports,
        "tr-TR": $e29d21290b4ce15c$exports,
        "uk-UA": $96139c59e8ba3f85$exports,
        "zh-CN": $052554192ea8e826$exports,
        "zh-TW": $3f3b5d798a5abdbc$exports
      };
      function $f69bb3e6457495cc$export$2317d149ed6f78c4(props) {
        let _a = props, { onDismiss } = _a, otherProps = __objRest(_a, ["onDismiss"]);
        let stringFormatter = (0, $6Zb2x$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($90f032faf016e1fb$exports)));
        let labels = (0, $6Zb2x$reactariautils.useLabels)(otherProps, stringFormatter.format("dismiss"));
        let onClick = () => {
          if (onDismiss)
            onDismiss();
        };
        return /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement((0, $6Zb2x$reactariavisuallyhidden.VisuallyHidden), null, /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement("button", __spreadProps(__spreadValues({}, labels), {
          tabIndex: -1,
          onClick
        })));
      }
      var $08ef1685902b6011$var$refCountMap = /* @__PURE__ */ new WeakMap();
      var $08ef1685902b6011$var$observerStack = [];
      function $08ef1685902b6011$export$1c3ebcada18427bf(targets, root = document.body) {
        let visibleNodes = new Set(targets);
        let hiddenNodes = /* @__PURE__ */ new Set();
        let walk = (root2) => {
          for (let element of root2.querySelectorAll("[data-live-announcer], [data-react-aria-top-layer]"))
            visibleNodes.add(element);
          let acceptNode = (node) => {
            if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute("role") !== "row")
              return NodeFilter.FILTER_REJECT;
            for (let target of visibleNodes) {
              if (node.contains(target))
                return NodeFilter.FILTER_SKIP;
            }
            return NodeFilter.FILTER_ACCEPT;
          };
          let walker = document.createTreeWalker(root2, NodeFilter.SHOW_ELEMENT, {
            acceptNode
          });
          let acceptRoot = acceptNode(root2);
          if (acceptRoot === NodeFilter.FILTER_ACCEPT)
            hide(root2);
          if (acceptRoot !== NodeFilter.FILTER_REJECT) {
            let node = walker.nextNode();
            while (node != null) {
              hide(node);
              node = walker.nextNode();
            }
          }
        };
        let hide = (node) => {
          var _refCountMap_get;
          let refCount = (_refCountMap_get = $08ef1685902b6011$var$refCountMap.get(node)) !== null && _refCountMap_get !== void 0 ? _refCountMap_get : 0;
          if (node.getAttribute("aria-hidden") === "true" && refCount === 0)
            return;
          if (refCount === 0)
            node.setAttribute("aria-hidden", "true");
          hiddenNodes.add(node);
          $08ef1685902b6011$var$refCountMap.set(node, refCount + 1);
        };
        if ($08ef1685902b6011$var$observerStack.length)
          $08ef1685902b6011$var$observerStack[$08ef1685902b6011$var$observerStack.length - 1].disconnect();
        walk(root);
        let observer = new MutationObserver((changes) => {
          for (let change of changes) {
            if (change.type !== "childList" || change.addedNodes.length === 0)
              continue;
            if (![
              ...visibleNodes,
              ...hiddenNodes
            ].some((node) => node.contains(change.target))) {
              for (let node of change.removedNodes)
                if (node instanceof Element) {
                  visibleNodes.delete(node);
                  hiddenNodes.delete(node);
                }
              for (let node of change.addedNodes) {
                if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === "true" || node.dataset.reactAriaTopLayer === "true"))
                  visibleNodes.add(node);
                else if (node instanceof Element)
                  walk(node);
              }
            }
          }
        });
        observer.observe(root, {
          childList: true,
          subtree: true
        });
        let observerWrapper = {
          observe() {
            observer.observe(root, {
              childList: true,
              subtree: true
            });
          },
          disconnect() {
            observer.disconnect();
          }
        };
        $08ef1685902b6011$var$observerStack.push(observerWrapper);
        return () => {
          observer.disconnect();
          for (let node of hiddenNodes) {
            let count2 = $08ef1685902b6011$var$refCountMap.get(node);
            if (count2 === 1) {
              node.removeAttribute("aria-hidden");
              $08ef1685902b6011$var$refCountMap.delete(node);
            } else
              $08ef1685902b6011$var$refCountMap.set(node, count2 - 1);
          }
          if (observerWrapper === $08ef1685902b6011$var$observerStack[$08ef1685902b6011$var$observerStack.length - 1]) {
            $08ef1685902b6011$var$observerStack.pop();
            if ($08ef1685902b6011$var$observerStack.length)
              $08ef1685902b6011$var$observerStack[$08ef1685902b6011$var$observerStack.length - 1].observe();
          } else
            $08ef1685902b6011$var$observerStack.splice($08ef1685902b6011$var$observerStack.indexOf(observerWrapper), 1);
        };
      }
      function $6c2dfcdee3e15e20$export$542a6fd13ac93354(props, state) {
        let _a = props, { triggerRef, popoverRef, isNonModal, isKeyboardDismissDisabled } = _a, otherProps = __objRest(_a, ["triggerRef", "popoverRef", "isNonModal", "isKeyboardDismissDisabled"]);
        let { overlayProps, underlayProps } = (0, $82711f9cb668ecdb$export$ea8f71083e90600f)({
          isOpen: state.isOpen,
          onClose: state.close,
          shouldCloseOnBlur: true,
          isDismissable: !isNonModal,
          isKeyboardDismissDisabled
        }, popoverRef);
        let { overlayProps: positionProps, arrowProps, placement } = (0, $cd94b4896dd97759$export$d39e1813b3bdd0e1)(__spreadProps(__spreadValues({}, otherProps), {
          targetRef: triggerRef,
          overlayRef: popoverRef,
          isOpen: state.isOpen,
          onClose: null
        }));
        (0, $5c2f5cd01815d369$export$ee0f7cc6afcd1c18)({
          isDisabled: isNonModal
        });
        (0, $6Zb2x$reactariautils.useLayoutEffect)(() => {
          if (state.isOpen && !isNonModal && popoverRef.current)
            return (0, $08ef1685902b6011$export$1c3ebcada18427bf)([
              popoverRef.current
            ]);
        }, [
          isNonModal,
          state.isOpen,
          popoverRef
        ]);
        return {
          popoverProps: (0, $6Zb2x$reactariautils.mergeProps)(overlayProps, positionProps),
          arrowProps,
          underlayProps,
          placement
        };
      }
      var $745edbb83ab4296f$export$a2200b96afd16271 = /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createContext(null);
      function $745edbb83ab4296f$export$c6fdb837b070b4ff(props) {
        let isSSR = (0, $6Zb2x$reactariassr.useIsSSR)();
        let { portalContainer = isSSR ? null : document.body, isExiting } = props;
        let [contain, setContain] = (0, $6Zb2x$react.useState)(false);
        let contextValue = (0, $6Zb2x$react.useMemo)(() => ({
          contain,
          setContain
        }), [
          contain,
          setContain
        ]);
        if (!portalContainer)
          return null;
        let contents = props.children;
        if (!props.disableFocusManagement)
          contents = /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement((0, $6Zb2x$reactariafocus.FocusScope), {
            restoreFocus: true,
            contain: contain && !isExiting
          }, contents);
        contents = /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement($745edbb83ab4296f$export$a2200b96afd16271.Provider, {
          value: contextValue
        }, /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$react)).createElement((0, $6Zb2x$reactariainteractions.ClearPressResponder), null, contents));
        return /* @__PURE__ */ (0, $parcel$interopDefault($6Zb2x$reactdom)).createPortal(contents, portalContainer);
      }
      function $745edbb83ab4296f$export$14c98a7594375490() {
        let ctx = (0, $6Zb2x$react.useContext)($745edbb83ab4296f$export$a2200b96afd16271);
        let setContain = ctx === null || ctx === void 0 ? void 0 : ctx.setContain;
        (0, $6Zb2x$reactariautils.useLayoutEffect)(() => {
          setContain === null || setContain === void 0 ? void 0 : setContain(true);
        }, [
          setContain
        ]);
      }
      function $11b7e0b04b421e95$export$dbc0f175b25fb0fb(props, state, ref) {
        let { overlayProps, underlayProps } = (0, $82711f9cb668ecdb$export$ea8f71083e90600f)(__spreadProps(__spreadValues({}, props), {
          isOpen: state.isOpen,
          onClose: state.close
        }), ref);
        (0, $5c2f5cd01815d369$export$ee0f7cc6afcd1c18)({
          isDisabled: !state.isOpen
        });
        (0, $745edbb83ab4296f$export$14c98a7594375490)();
        (0, $6Zb2x$react.useEffect)(() => {
          if (state.isOpen)
            return (0, $08ef1685902b6011$export$1c3ebcada18427bf)([
              ref.current
            ]);
        }, [
          state.isOpen,
          ref
        ]);
        return {
          modalProps: (0, $6Zb2x$reactariautils.mergeProps)(overlayProps),
          underlayProps
        };
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React3 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/tailwind-merge/dist/tailwind-merge.cjs.development.js
  var require_tailwind_merge_cjs_development = __commonJS({
    "node_modules/tailwind-merge/dist/tailwind-merge.cjs.development.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function twJoin() {
        var index3 = 0;
        var argument;
        var resolvedValue;
        var string = "";
        while (index3 < arguments.length) {
          if (argument = arguments[index3++]) {
            if (resolvedValue = toValue(argument)) {
              string && (string += " ");
              string += resolvedValue;
            }
          }
        }
        return string;
      }
      function toValue(mix) {
        if (typeof mix === "string") {
          return mix;
        }
        var resolvedValue;
        var string = "";
        for (var k = 0; k < mix.length; k++) {
          if (mix[k]) {
            if (resolvedValue = toValue(mix[k])) {
              string && (string += " ");
              string += resolvedValue;
            }
          }
        }
        return string;
      }
      var CLASS_PART_SEPARATOR = "-";
      function createClassUtils(config) {
        var classMap = createClassMap(config);
        var conflictingClassGroups = config.conflictingClassGroups, _config$conflictingCl = config.conflictingClassGroupModifiers, conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;
        function getClassGroupId(className) {
          var classParts = className.split(CLASS_PART_SEPARATOR);
          if (classParts[0] === "" && classParts.length !== 1) {
            classParts.shift();
          }
          return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
        }
        function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
          var conflicts = conflictingClassGroups[classGroupId] || [];
          if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
            return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);
          }
          return conflicts;
        }
        return {
          getClassGroupId,
          getConflictingClassGroupIds
        };
      }
      function getGroupRecursive(classParts, classPartObject) {
        var _a;
        if (classParts.length === 0) {
          return classPartObject.classGroupId;
        }
        var currentClassPart = classParts[0];
        var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
        var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
        if (classGroupFromNextClassPart) {
          return classGroupFromNextClassPart;
        }
        if (classPartObject.validators.length === 0) {
          return void 0;
        }
        var classRest = classParts.join(CLASS_PART_SEPARATOR);
        return (_a = classPartObject.validators.find(function(_ref) {
          var validator = _ref.validator;
          return validator(classRest);
        })) == null ? void 0 : _a.classGroupId;
      }
      var arbitraryPropertyRegex = /^\[(.+)\]$/;
      function getGroupIdForArbitraryProperty(className) {
        if (arbitraryPropertyRegex.test(className)) {
          var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
          var property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
          if (property) {
            return "arbitrary.." + property;
          }
        }
      }
      function createClassMap(config) {
        var theme = config.theme, prefix = config.prefix;
        var classMap = {
          nextPart: /* @__PURE__ */ new Map(),
          validators: []
        };
        var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
        prefixedClassGroupEntries.forEach(function(_ref2) {
          var classGroupId = _ref2[0], classGroup = _ref2[1];
          processClassesRecursively(classGroup, classMap, classGroupId, theme);
        });
        return classMap;
      }
      function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
        classGroup.forEach(function(classDefinition) {
          if (typeof classDefinition === "string") {
            var classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
            classPartObjectToEdit.classGroupId = classGroupId;
            return;
          }
          if (typeof classDefinition === "function") {
            if (isThemeGetter(classDefinition)) {
              processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
              return;
            }
            classPartObject.validators.push({
              validator: classDefinition,
              classGroupId
            });
            return;
          }
          Object.entries(classDefinition).forEach(function(_ref3) {
            var key = _ref3[0], classGroup2 = _ref3[1];
            processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
          });
        });
      }
      function getPart(classPartObject, path) {
        var currentClassPartObject = classPartObject;
        path.split(CLASS_PART_SEPARATOR).forEach(function(pathPart) {
          if (!currentClassPartObject.nextPart.has(pathPart)) {
            currentClassPartObject.nextPart.set(pathPart, {
              nextPart: /* @__PURE__ */ new Map(),
              validators: []
            });
          }
          currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
        });
        return currentClassPartObject;
      }
      function isThemeGetter(func) {
        return func.isThemeGetter;
      }
      function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
        if (!prefix) {
          return classGroupEntries;
        }
        return classGroupEntries.map(function(_ref4) {
          var classGroupId = _ref4[0], classGroup = _ref4[1];
          var prefixedClassGroup = classGroup.map(function(classDefinition) {
            if (typeof classDefinition === "string") {
              return prefix + classDefinition;
            }
            if (typeof classDefinition === "object") {
              return Object.fromEntries(Object.entries(classDefinition).map(function(_ref5) {
                var key = _ref5[0], value = _ref5[1];
                return [prefix + key, value];
              }));
            }
            return classDefinition;
          });
          return [classGroupId, prefixedClassGroup];
        });
      }
      function createLruCache(maxCacheSize) {
        if (maxCacheSize < 1) {
          return {
            get: function get() {
              return void 0;
            },
            set: function set() {
            }
          };
        }
        var cacheSize = 0;
        var cache = /* @__PURE__ */ new Map();
        var previousCache = /* @__PURE__ */ new Map();
        function update(key, value) {
          cache.set(key, value);
          cacheSize++;
          if (cacheSize > maxCacheSize) {
            cacheSize = 0;
            previousCache = cache;
            cache = /* @__PURE__ */ new Map();
          }
        }
        return {
          get: function get(key) {
            var value = cache.get(key);
            if (value !== void 0) {
              return value;
            }
            if ((value = previousCache.get(key)) !== void 0) {
              update(key, value);
              return value;
            }
          },
          set: function set(key, value) {
            if (cache.has(key)) {
              cache.set(key, value);
            } else {
              update(key, value);
            }
          }
        };
      }
      var IMPORTANT_MODIFIER = "!";
      function createSplitModifiers(config) {
        var separator = config.separator || ":";
        var isSeparatorSingleCharacter = separator.length === 1;
        var firstSeparatorCharacter = separator[0];
        var separatorLength = separator.length;
        return function splitModifiers(className) {
          var modifiers = [];
          var bracketDepth = 0;
          var modifierStart = 0;
          var postfixModifierPosition;
          for (var index3 = 0; index3 < className.length; index3++) {
            var currentCharacter = className[index3];
            if (bracketDepth === 0) {
              if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index3, index3 + separatorLength) === separator)) {
                modifiers.push(className.slice(modifierStart, index3));
                modifierStart = index3 + separatorLength;
                continue;
              }
              if (currentCharacter === "/") {
                postfixModifierPosition = index3;
                continue;
              }
            }
            if (currentCharacter === "[") {
              bracketDepth++;
            } else if (currentCharacter === "]") {
              bracketDepth--;
            }
          }
          var baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
          var hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
          var baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
          var maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
          return {
            modifiers,
            hasImportantModifier,
            baseClassName,
            maybePostfixModifierPosition
          };
        };
      }
      function sortModifiers(modifiers) {
        if (modifiers.length <= 1) {
          return modifiers;
        }
        var sortedModifiers = [];
        var unsortedModifiers = [];
        modifiers.forEach(function(modifier) {
          var isArbitraryVariant = modifier[0] === "[";
          if (isArbitraryVariant) {
            sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort().concat([modifier]));
            unsortedModifiers = [];
          } else {
            unsortedModifiers.push(modifier);
          }
        });
        sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort());
        return sortedModifiers;
      }
      function createConfigUtils(config) {
        return __spreadValues({
          cache: createLruCache(config.cacheSize),
          splitModifiers: createSplitModifiers(config)
        }, createClassUtils(config));
      }
      var SPLIT_CLASSES_REGEX = /\s+/;
      function mergeClassList(classList, configUtils) {
        var splitModifiers = configUtils.splitModifiers, getClassGroupId = configUtils.getClassGroupId, getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
        var classGroupsInConflict = /* @__PURE__ */ new Set();
        return classList.trim().split(SPLIT_CLASSES_REGEX).map(function(originalClassName) {
          var _splitModifiers = splitModifiers(originalClassName), modifiers = _splitModifiers.modifiers, hasImportantModifier = _splitModifiers.hasImportantModifier, baseClassName = _splitModifiers.baseClassName, maybePostfixModifierPosition = _splitModifiers.maybePostfixModifierPosition;
          var classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
          var hasPostfixModifier = Boolean(maybePostfixModifierPosition);
          if (!classGroupId) {
            if (!maybePostfixModifierPosition) {
              return {
                isTailwindClass: false,
                originalClassName
              };
            }
            classGroupId = getClassGroupId(baseClassName);
            if (!classGroupId) {
              return {
                isTailwindClass: false,
                originalClassName
              };
            }
            hasPostfixModifier = false;
          }
          var variantModifier = sortModifiers(modifiers).join(":");
          var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
          return {
            isTailwindClass: true,
            modifierId,
            classGroupId,
            originalClassName,
            hasPostfixModifier
          };
        }).reverse().filter(function(parsed) {
          if (!parsed.isTailwindClass) {
            return true;
          }
          var modifierId = parsed.modifierId, classGroupId = parsed.classGroupId, hasPostfixModifier = parsed.hasPostfixModifier;
          var classId = modifierId + classGroupId;
          if (classGroupsInConflict.has(classId)) {
            return false;
          }
          classGroupsInConflict.add(classId);
          getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(function(group) {
            return classGroupsInConflict.add(modifierId + group);
          });
          return true;
        }).reverse().map(function(parsed) {
          return parsed.originalClassName;
        }).join(" ");
      }
      function createTailwindMerge() {
        for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {
          createConfig[_key] = arguments[_key];
        }
        var configUtils;
        var cacheGet;
        var cacheSet;
        var functionToCall = initTailwindMerge;
        function initTailwindMerge(classList) {
          var firstCreateConfig = createConfig[0], restCreateConfig = createConfig.slice(1);
          var config = restCreateConfig.reduce(function(previousConfig, createConfigCurrent) {
            return createConfigCurrent(previousConfig);
          }, firstCreateConfig());
          configUtils = createConfigUtils(config);
          cacheGet = configUtils.cache.get;
          cacheSet = configUtils.cache.set;
          functionToCall = tailwindMerge;
          return tailwindMerge(classList);
        }
        function tailwindMerge(classList) {
          var cachedResult = cacheGet(classList);
          if (cachedResult) {
            return cachedResult;
          }
          var result = mergeClassList(classList, configUtils);
          cacheSet(classList, result);
          return result;
        }
        return function callTailwindMerge() {
          return functionToCall(twJoin.apply(null, arguments));
        };
      }
      function fromTheme(key) {
        var themeGetter = function themeGetter2(theme) {
          return theme[key] || [];
        };
        themeGetter.isThemeGetter = true;
        return themeGetter;
      }
      var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
      var fractionRegex = /^\d+\/\d+$/;
      var stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
      var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
      var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
      var shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
      function isLength(value) {
        return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value) || isArbitraryLength(value);
      }
      function isArbitraryLength(value) {
        return getIsArbitraryValue(value, "length", isLengthOnly);
      }
      function isArbitrarySize(value) {
        return getIsArbitraryValue(value, "size", isNever);
      }
      function isArbitraryPosition(value) {
        return getIsArbitraryValue(value, "position", isNever);
      }
      function isArbitraryUrl(value) {
        return getIsArbitraryValue(value, "url", isUrl);
      }
      function isArbitraryNumber(value) {
        return getIsArbitraryValue(value, "number", isNumber);
      }
      var isArbitraryWeight = isArbitraryNumber;
      function isNumber(value) {
        return !Number.isNaN(Number(value));
      }
      function isPercent(value) {
        return value.endsWith("%") && isNumber(value.slice(0, -1));
      }
      function isInteger(value) {
        return isIntegerOnly(value) || getIsArbitraryValue(value, "number", isIntegerOnly);
      }
      function isArbitraryValue(value) {
        return arbitraryValueRegex.test(value);
      }
      function isAny() {
        return true;
      }
      function isTshirtSize(value) {
        return tshirtUnitRegex.test(value);
      }
      function isArbitraryShadow(value) {
        return getIsArbitraryValue(value, "", isShadow);
      }
      function getIsArbitraryValue(value, label, testValue) {
        var result = arbitraryValueRegex.exec(value);
        if (result) {
          if (result[1]) {
            return result[1] === label;
          }
          return testValue(result[2]);
        }
        return false;
      }
      function isLengthOnly(value) {
        return lengthUnitRegex.test(value);
      }
      function isNever() {
        return false;
      }
      function isUrl(value) {
        return value.startsWith("url(");
      }
      function isIntegerOnly(value) {
        return Number.isInteger(Number(value));
      }
      function isShadow(value) {
        return shadowRegex.test(value);
      }
      var validators = {
        __proto__: null,
        isAny,
        isArbitraryLength,
        isArbitraryNumber,
        isArbitraryPosition,
        isArbitraryShadow,
        isArbitrarySize,
        isArbitraryUrl,
        isArbitraryValue,
        isArbitraryWeight,
        isInteger,
        isLength,
        isNumber,
        isPercent,
        isTshirtSize
      };
      function getDefaultConfig() {
        var colors = fromTheme("colors");
        var spacing = fromTheme("spacing");
        var blur = fromTheme("blur");
        var brightness = fromTheme("brightness");
        var borderColor = fromTheme("borderColor");
        var borderRadius = fromTheme("borderRadius");
        var borderSpacing = fromTheme("borderSpacing");
        var borderWidth = fromTheme("borderWidth");
        var contrast = fromTheme("contrast");
        var grayscale = fromTheme("grayscale");
        var hueRotate = fromTheme("hueRotate");
        var invert = fromTheme("invert");
        var gap = fromTheme("gap");
        var gradientColorStops = fromTheme("gradientColorStops");
        var gradientColorStopPositions = fromTheme("gradientColorStopPositions");
        var inset = fromTheme("inset");
        var margin = fromTheme("margin");
        var opacity = fromTheme("opacity");
        var padding = fromTheme("padding");
        var saturate = fromTheme("saturate");
        var scale = fromTheme("scale");
        var sepia = fromTheme("sepia");
        var skew = fromTheme("skew");
        var space = fromTheme("space");
        var translate = fromTheme("translate");
        var getOverscroll = function getOverscroll2() {
          return ["auto", "contain", "none"];
        };
        var getOverflow = function getOverflow2() {
          return ["auto", "hidden", "clip", "visible", "scroll"];
        };
        var getSpacingWithAutoAndArbitrary = function getSpacingWithAutoAndArbitrary2() {
          return ["auto", isArbitraryValue, spacing];
        };
        var getSpacingWithArbitrary = function getSpacingWithArbitrary2() {
          return [isArbitraryValue, spacing];
        };
        var getLengthWithEmpty = function getLengthWithEmpty2() {
          return ["", isLength];
        };
        var getNumberWithAutoAndArbitrary = function getNumberWithAutoAndArbitrary2() {
          return ["auto", isNumber, isArbitraryValue];
        };
        var getPositions = function getPositions2() {
          return ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
        };
        var getLineStyles = function getLineStyles2() {
          return ["solid", "dashed", "dotted", "double", "none"];
        };
        var getBlendModes = function getBlendModes2() {
          return ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"];
        };
        var getAlign = function getAlign2() {
          return ["start", "end", "center", "between", "around", "evenly", "stretch"];
        };
        var getZeroAndEmpty = function getZeroAndEmpty2() {
          return ["", "0", isArbitraryValue];
        };
        var getBreaks = function getBreaks2() {
          return ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
        };
        var getNumber = function getNumber2() {
          return [isNumber, isArbitraryNumber];
        };
        var getNumberAndArbitrary = function getNumberAndArbitrary2() {
          return [isNumber, isArbitraryValue];
        };
        return {
          cacheSize: 500,
          theme: {
            colors: [isAny],
            spacing: [isLength],
            blur: ["none", "", isTshirtSize, isArbitraryValue],
            brightness: getNumber(),
            borderColor: [colors],
            borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
            borderSpacing: getSpacingWithArbitrary(),
            borderWidth: getLengthWithEmpty(),
            contrast: getNumber(),
            grayscale: getZeroAndEmpty(),
            hueRotate: getNumberAndArbitrary(),
            invert: getZeroAndEmpty(),
            gap: getSpacingWithArbitrary(),
            gradientColorStops: [colors],
            gradientColorStopPositions: [isPercent, isArbitraryLength],
            inset: getSpacingWithAutoAndArbitrary(),
            margin: getSpacingWithAutoAndArbitrary(),
            opacity: getNumber(),
            padding: getSpacingWithArbitrary(),
            saturate: getNumber(),
            scale: getNumber(),
            sepia: getZeroAndEmpty(),
            skew: getNumberAndArbitrary(),
            space: getSpacingWithArbitrary(),
            translate: getSpacingWithArbitrary()
          },
          classGroups: {
            // Layout
            /**
             * Aspect Ratio
             * @see https://tailwindcss.com/docs/aspect-ratio
             */
            aspect: [{
              aspect: ["auto", "square", "video", isArbitraryValue]
            }],
            /**
             * Container
             * @see https://tailwindcss.com/docs/container
             */
            container: ["container"],
            /**
             * Columns
             * @see https://tailwindcss.com/docs/columns
             */
            columns: [{
              columns: [isTshirtSize]
            }],
            /**
             * Break After
             * @see https://tailwindcss.com/docs/break-after
             */
            "break-after": [{
              "break-after": getBreaks()
            }],
            /**
             * Break Before
             * @see https://tailwindcss.com/docs/break-before
             */
            "break-before": [{
              "break-before": getBreaks()
            }],
            /**
             * Break Inside
             * @see https://tailwindcss.com/docs/break-inside
             */
            "break-inside": [{
              "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
            }],
            /**
             * Box Decoration Break
             * @see https://tailwindcss.com/docs/box-decoration-break
             */
            "box-decoration": [{
              "box-decoration": ["slice", "clone"]
            }],
            /**
             * Box Sizing
             * @see https://tailwindcss.com/docs/box-sizing
             */
            box: [{
              box: ["border", "content"]
            }],
            /**
             * Display
             * @see https://tailwindcss.com/docs/display
             */
            display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
            /**
             * Floats
             * @see https://tailwindcss.com/docs/float
             */
            "float": [{
              "float": ["right", "left", "none"]
            }],
            /**
             * Clear
             * @see https://tailwindcss.com/docs/clear
             */
            clear: [{
              clear: ["left", "right", "both", "none"]
            }],
            /**
             * Isolation
             * @see https://tailwindcss.com/docs/isolation
             */
            isolation: ["isolate", "isolation-auto"],
            /**
             * Object Fit
             * @see https://tailwindcss.com/docs/object-fit
             */
            "object-fit": [{
              object: ["contain", "cover", "fill", "none", "scale-down"]
            }],
            /**
             * Object Position
             * @see https://tailwindcss.com/docs/object-position
             */
            "object-position": [{
              object: [].concat(getPositions(), [isArbitraryValue])
            }],
            /**
             * Overflow
             * @see https://tailwindcss.com/docs/overflow
             */
            overflow: [{
              overflow: getOverflow()
            }],
            /**
             * Overflow X
             * @see https://tailwindcss.com/docs/overflow
             */
            "overflow-x": [{
              "overflow-x": getOverflow()
            }],
            /**
             * Overflow Y
             * @see https://tailwindcss.com/docs/overflow
             */
            "overflow-y": [{
              "overflow-y": getOverflow()
            }],
            /**
             * Overscroll Behavior
             * @see https://tailwindcss.com/docs/overscroll-behavior
             */
            overscroll: [{
              overscroll: getOverscroll()
            }],
            /**
             * Overscroll Behavior X
             * @see https://tailwindcss.com/docs/overscroll-behavior
             */
            "overscroll-x": [{
              "overscroll-x": getOverscroll()
            }],
            /**
             * Overscroll Behavior Y
             * @see https://tailwindcss.com/docs/overscroll-behavior
             */
            "overscroll-y": [{
              "overscroll-y": getOverscroll()
            }],
            /**
             * Position
             * @see https://tailwindcss.com/docs/position
             */
            position: ["static", "fixed", "absolute", "relative", "sticky"],
            /**
             * Top / Right / Bottom / Left
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            inset: [{
              inset: [inset]
            }],
            /**
             * Right / Left
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            "inset-x": [{
              "inset-x": [inset]
            }],
            /**
             * Top / Bottom
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            "inset-y": [{
              "inset-y": [inset]
            }],
            /**
             * Start
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            start: [{
              start: [inset]
            }],
            /**
             * End
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            end: [{
              end: [inset]
            }],
            /**
             * Top
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            top: [{
              top: [inset]
            }],
            /**
             * Right
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            right: [{
              right: [inset]
            }],
            /**
             * Bottom
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            bottom: [{
              bottom: [inset]
            }],
            /**
             * Left
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            left: [{
              left: [inset]
            }],
            /**
             * Visibility
             * @see https://tailwindcss.com/docs/visibility
             */
            visibility: ["visible", "invisible", "collapse"],
            /**
             * Z-Index
             * @see https://tailwindcss.com/docs/z-index
             */
            z: [{
              z: ["auto", isInteger]
            }],
            // Flexbox and Grid
            /**
             * Flex Basis
             * @see https://tailwindcss.com/docs/flex-basis
             */
            basis: [{
              basis: getSpacingWithAutoAndArbitrary()
            }],
            /**
             * Flex Direction
             * @see https://tailwindcss.com/docs/flex-direction
             */
            "flex-direction": [{
              flex: ["row", "row-reverse", "col", "col-reverse"]
            }],
            /**
             * Flex Wrap
             * @see https://tailwindcss.com/docs/flex-wrap
             */
            "flex-wrap": [{
              flex: ["wrap", "wrap-reverse", "nowrap"]
            }],
            /**
             * Flex
             * @see https://tailwindcss.com/docs/flex
             */
            flex: [{
              flex: ["1", "auto", "initial", "none", isArbitraryValue]
            }],
            /**
             * Flex Grow
             * @see https://tailwindcss.com/docs/flex-grow
             */
            grow: [{
              grow: getZeroAndEmpty()
            }],
            /**
             * Flex Shrink
             * @see https://tailwindcss.com/docs/flex-shrink
             */
            shrink: [{
              shrink: getZeroAndEmpty()
            }],
            /**
             * Order
             * @see https://tailwindcss.com/docs/order
             */
            order: [{
              order: ["first", "last", "none", isInteger]
            }],
            /**
             * Grid Template Columns
             * @see https://tailwindcss.com/docs/grid-template-columns
             */
            "grid-cols": [{
              "grid-cols": [isAny]
            }],
            /**
             * Grid Column Start / End
             * @see https://tailwindcss.com/docs/grid-column
             */
            "col-start-end": [{
              col: ["auto", {
                span: ["full", isInteger]
              }, isArbitraryValue]
            }],
            /**
             * Grid Column Start
             * @see https://tailwindcss.com/docs/grid-column
             */
            "col-start": [{
              "col-start": getNumberWithAutoAndArbitrary()
            }],
            /**
             * Grid Column End
             * @see https://tailwindcss.com/docs/grid-column
             */
            "col-end": [{
              "col-end": getNumberWithAutoAndArbitrary()
            }],
            /**
             * Grid Template Rows
             * @see https://tailwindcss.com/docs/grid-template-rows
             */
            "grid-rows": [{
              "grid-rows": [isAny]
            }],
            /**
             * Grid Row Start / End
             * @see https://tailwindcss.com/docs/grid-row
             */
            "row-start-end": [{
              row: ["auto", {
                span: [isInteger]
              }, isArbitraryValue]
            }],
            /**
             * Grid Row Start
             * @see https://tailwindcss.com/docs/grid-row
             */
            "row-start": [{
              "row-start": getNumberWithAutoAndArbitrary()
            }],
            /**
             * Grid Row End
             * @see https://tailwindcss.com/docs/grid-row
             */
            "row-end": [{
              "row-end": getNumberWithAutoAndArbitrary()
            }],
            /**
             * Grid Auto Flow
             * @see https://tailwindcss.com/docs/grid-auto-flow
             */
            "grid-flow": [{
              "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
            }],
            /**
             * Grid Auto Columns
             * @see https://tailwindcss.com/docs/grid-auto-columns
             */
            "auto-cols": [{
              "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
            }],
            /**
             * Grid Auto Rows
             * @see https://tailwindcss.com/docs/grid-auto-rows
             */
            "auto-rows": [{
              "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
            }],
            /**
             * Gap
             * @see https://tailwindcss.com/docs/gap
             */
            gap: [{
              gap: [gap]
            }],
            /**
             * Gap X
             * @see https://tailwindcss.com/docs/gap
             */
            "gap-x": [{
              "gap-x": [gap]
            }],
            /**
             * Gap Y
             * @see https://tailwindcss.com/docs/gap
             */
            "gap-y": [{
              "gap-y": [gap]
            }],
            /**
             * Justify Content
             * @see https://tailwindcss.com/docs/justify-content
             */
            "justify-content": [{
              justify: ["normal"].concat(getAlign())
            }],
            /**
             * Justify Items
             * @see https://tailwindcss.com/docs/justify-items
             */
            "justify-items": [{
              "justify-items": ["start", "end", "center", "stretch"]
            }],
            /**
             * Justify Self
             * @see https://tailwindcss.com/docs/justify-self
             */
            "justify-self": [{
              "justify-self": ["auto", "start", "end", "center", "stretch"]
            }],
            /**
             * Align Content
             * @see https://tailwindcss.com/docs/align-content
             */
            "align-content": [{
              content: ["normal"].concat(getAlign(), ["baseline"])
            }],
            /**
             * Align Items
             * @see https://tailwindcss.com/docs/align-items
             */
            "align-items": [{
              items: ["start", "end", "center", "baseline", "stretch"]
            }],
            /**
             * Align Self
             * @see https://tailwindcss.com/docs/align-self
             */
            "align-self": [{
              self: ["auto", "start", "end", "center", "stretch", "baseline"]
            }],
            /**
             * Place Content
             * @see https://tailwindcss.com/docs/place-content
             */
            "place-content": [{
              "place-content": [].concat(getAlign(), ["baseline"])
            }],
            /**
             * Place Items
             * @see https://tailwindcss.com/docs/place-items
             */
            "place-items": [{
              "place-items": ["start", "end", "center", "baseline", "stretch"]
            }],
            /**
             * Place Self
             * @see https://tailwindcss.com/docs/place-self
             */
            "place-self": [{
              "place-self": ["auto", "start", "end", "center", "stretch"]
            }],
            // Spacing
            /**
             * Padding
             * @see https://tailwindcss.com/docs/padding
             */
            p: [{
              p: [padding]
            }],
            /**
             * Padding X
             * @see https://tailwindcss.com/docs/padding
             */
            px: [{
              px: [padding]
            }],
            /**
             * Padding Y
             * @see https://tailwindcss.com/docs/padding
             */
            py: [{
              py: [padding]
            }],
            /**
             * Padding Start
             * @see https://tailwindcss.com/docs/padding
             */
            ps: [{
              ps: [padding]
            }],
            /**
             * Padding End
             * @see https://tailwindcss.com/docs/padding
             */
            pe: [{
              pe: [padding]
            }],
            /**
             * Padding Top
             * @see https://tailwindcss.com/docs/padding
             */
            pt: [{
              pt: [padding]
            }],
            /**
             * Padding Right
             * @see https://tailwindcss.com/docs/padding
             */
            pr: [{
              pr: [padding]
            }],
            /**
             * Padding Bottom
             * @see https://tailwindcss.com/docs/padding
             */
            pb: [{
              pb: [padding]
            }],
            /**
             * Padding Left
             * @see https://tailwindcss.com/docs/padding
             */
            pl: [{
              pl: [padding]
            }],
            /**
             * Margin
             * @see https://tailwindcss.com/docs/margin
             */
            m: [{
              m: [margin]
            }],
            /**
             * Margin X
             * @see https://tailwindcss.com/docs/margin
             */
            mx: [{
              mx: [margin]
            }],
            /**
             * Margin Y
             * @see https://tailwindcss.com/docs/margin
             */
            my: [{
              my: [margin]
            }],
            /**
             * Margin Start
             * @see https://tailwindcss.com/docs/margin
             */
            ms: [{
              ms: [margin]
            }],
            /**
             * Margin End
             * @see https://tailwindcss.com/docs/margin
             */
            me: [{
              me: [margin]
            }],
            /**
             * Margin Top
             * @see https://tailwindcss.com/docs/margin
             */
            mt: [{
              mt: [margin]
            }],
            /**
             * Margin Right
             * @see https://tailwindcss.com/docs/margin
             */
            mr: [{
              mr: [margin]
            }],
            /**
             * Margin Bottom
             * @see https://tailwindcss.com/docs/margin
             */
            mb: [{
              mb: [margin]
            }],
            /**
             * Margin Left
             * @see https://tailwindcss.com/docs/margin
             */
            ml: [{
              ml: [margin]
            }],
            /**
             * Space Between X
             * @see https://tailwindcss.com/docs/space
             */
            "space-x": [{
              "space-x": [space]
            }],
            /**
             * Space Between X Reverse
             * @see https://tailwindcss.com/docs/space
             */
            "space-x-reverse": ["space-x-reverse"],
            /**
             * Space Between Y
             * @see https://tailwindcss.com/docs/space
             */
            "space-y": [{
              "space-y": [space]
            }],
            /**
             * Space Between Y Reverse
             * @see https://tailwindcss.com/docs/space
             */
            "space-y-reverse": ["space-y-reverse"],
            // Sizing
            /**
             * Width
             * @see https://tailwindcss.com/docs/width
             */
            w: [{
              w: ["auto", "min", "max", "fit", isArbitraryValue, spacing]
            }],
            /**
             * Min-Width
             * @see https://tailwindcss.com/docs/min-width
             */
            "min-w": [{
              "min-w": ["min", "max", "fit", isArbitraryValue, isLength]
            }],
            /**
             * Max-Width
             * @see https://tailwindcss.com/docs/max-width
             */
            "max-w": [{
              "max-w": ["0", "none", "full", "min", "max", "fit", "prose", {
                screen: [isTshirtSize]
              }, isTshirtSize, isArbitraryValue]
            }],
            /**
             * Height
             * @see https://tailwindcss.com/docs/height
             */
            h: [{
              h: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
            }],
            /**
             * Min-Height
             * @see https://tailwindcss.com/docs/min-height
             */
            "min-h": [{
              "min-h": ["min", "max", "fit", isArbitraryValue, isLength]
            }],
            /**
             * Max-Height
             * @see https://tailwindcss.com/docs/max-height
             */
            "max-h": [{
              "max-h": [isArbitraryValue, spacing, "min", "max", "fit"]
            }],
            // Typography
            /**
             * Font Size
             * @see https://tailwindcss.com/docs/font-size
             */
            "font-size": [{
              text: ["base", isTshirtSize, isArbitraryLength]
            }],
            /**
             * Font Smoothing
             * @see https://tailwindcss.com/docs/font-smoothing
             */
            "font-smoothing": ["antialiased", "subpixel-antialiased"],
            /**
             * Font Style
             * @see https://tailwindcss.com/docs/font-style
             */
            "font-style": ["italic", "not-italic"],
            /**
             * Font Weight
             * @see https://tailwindcss.com/docs/font-weight
             */
            "font-weight": [{
              font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
            }],
            /**
             * Font Family
             * @see https://tailwindcss.com/docs/font-family
             */
            "font-family": [{
              font: [isAny]
            }],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            "fvn-normal": ["normal-nums"],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            "fvn-ordinal": ["ordinal"],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            "fvn-slashed-zero": ["slashed-zero"],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            "fvn-figure": ["lining-nums", "oldstyle-nums"],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            "fvn-spacing": ["proportional-nums", "tabular-nums"],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
            /**
             * Letter Spacing
             * @see https://tailwindcss.com/docs/letter-spacing
             */
            tracking: [{
              tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
            }],
            /**
             * Line Clamp
             * @see https://tailwindcss.com/docs/line-clamp
             */
            "line-clamp": [{
              "line-clamp": ["none", isNumber, isArbitraryNumber]
            }],
            /**
             * Line Height
             * @see https://tailwindcss.com/docs/line-height
             */
            leading: [{
              leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isArbitraryValue, isLength]
            }],
            /**
             * List Style Image
             * @see https://tailwindcss.com/docs/list-style-image
             */
            "list-image": [{
              "list-image": ["none", isArbitraryValue]
            }],
            /**
             * List Style Type
             * @see https://tailwindcss.com/docs/list-style-type
             */
            "list-style-type": [{
              list: ["none", "disc", "decimal", isArbitraryValue]
            }],
            /**
             * List Style Position
             * @see https://tailwindcss.com/docs/list-style-position
             */
            "list-style-position": [{
              list: ["inside", "outside"]
            }],
            /**
             * Placeholder Color
             * @deprecated since Tailwind CSS v3.0.0
             * @see https://tailwindcss.com/docs/placeholder-color
             */
            "placeholder-color": [{
              placeholder: [colors]
            }],
            /**
             * Placeholder Opacity
             * @see https://tailwindcss.com/docs/placeholder-opacity
             */
            "placeholder-opacity": [{
              "placeholder-opacity": [opacity]
            }],
            /**
             * Text Alignment
             * @see https://tailwindcss.com/docs/text-align
             */
            "text-alignment": [{
              text: ["left", "center", "right", "justify", "start", "end"]
            }],
            /**
             * Text Color
             * @see https://tailwindcss.com/docs/text-color
             */
            "text-color": [{
              text: [colors]
            }],
            /**
             * Text Opacity
             * @see https://tailwindcss.com/docs/text-opacity
             */
            "text-opacity": [{
              "text-opacity": [opacity]
            }],
            /**
             * Text Decoration
             * @see https://tailwindcss.com/docs/text-decoration
             */
            "text-decoration": ["underline", "overline", "line-through", "no-underline"],
            /**
             * Text Decoration Style
             * @see https://tailwindcss.com/docs/text-decoration-style
             */
            "text-decoration-style": [{
              decoration: [].concat(getLineStyles(), ["wavy"])
            }],
            /**
             * Text Decoration Thickness
             * @see https://tailwindcss.com/docs/text-decoration-thickness
             */
            "text-decoration-thickness": [{
              decoration: ["auto", "from-font", isLength]
            }],
            /**
             * Text Underline Offset
             * @see https://tailwindcss.com/docs/text-underline-offset
             */
            "underline-offset": [{
              "underline-offset": ["auto", isArbitraryValue, isLength]
            }],
            /**
             * Text Decoration Color
             * @see https://tailwindcss.com/docs/text-decoration-color
             */
            "text-decoration-color": [{
              decoration: [colors]
            }],
            /**
             * Text Transform
             * @see https://tailwindcss.com/docs/text-transform
             */
            "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
            /**
             * Text Overflow
             * @see https://tailwindcss.com/docs/text-overflow
             */
            "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
            /**
             * Text Indent
             * @see https://tailwindcss.com/docs/text-indent
             */
            indent: [{
              indent: getSpacingWithArbitrary()
            }],
            /**
             * Vertical Alignment
             * @see https://tailwindcss.com/docs/vertical-align
             */
            "vertical-align": [{
              align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
            }],
            /**
             * Whitespace
             * @see https://tailwindcss.com/docs/whitespace
             */
            whitespace: [{
              whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
            }],
            /**
             * Word Break
             * @see https://tailwindcss.com/docs/word-break
             */
            "break": [{
              "break": ["normal", "words", "all", "keep"]
            }],
            /**
             * Hyphens
             * @see https://tailwindcss.com/docs/hyphens
             */
            hyphens: [{
              hyphens: ["none", "manual", "auto"]
            }],
            /**
             * Content
             * @see https://tailwindcss.com/docs/content
             */
            content: [{
              content: ["none", isArbitraryValue]
            }],
            // Backgrounds
            /**
             * Background Attachment
             * @see https://tailwindcss.com/docs/background-attachment
             */
            "bg-attachment": [{
              bg: ["fixed", "local", "scroll"]
            }],
            /**
             * Background Clip
             * @see https://tailwindcss.com/docs/background-clip
             */
            "bg-clip": [{
              "bg-clip": ["border", "padding", "content", "text"]
            }],
            /**
             * Background Opacity
             * @deprecated since Tailwind CSS v3.0.0
             * @see https://tailwindcss.com/docs/background-opacity
             */
            "bg-opacity": [{
              "bg-opacity": [opacity]
            }],
            /**
             * Background Origin
             * @see https://tailwindcss.com/docs/background-origin
             */
            "bg-origin": [{
              "bg-origin": ["border", "padding", "content"]
            }],
            /**
             * Background Position
             * @see https://tailwindcss.com/docs/background-position
             */
            "bg-position": [{
              bg: [].concat(getPositions(), [isArbitraryPosition])
            }],
            /**
             * Background Repeat
             * @see https://tailwindcss.com/docs/background-repeat
             */
            "bg-repeat": [{
              bg: ["no-repeat", {
                repeat: ["", "x", "y", "round", "space"]
              }]
            }],
            /**
             * Background Size
             * @see https://tailwindcss.com/docs/background-size
             */
            "bg-size": [{
              bg: ["auto", "cover", "contain", isArbitrarySize]
            }],
            /**
             * Background Image
             * @see https://tailwindcss.com/docs/background-image
             */
            "bg-image": [{
              bg: ["none", {
                "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
              }, isArbitraryUrl]
            }],
            /**
             * Background Color
             * @see https://tailwindcss.com/docs/background-color
             */
            "bg-color": [{
              bg: [colors]
            }],
            /**
             * Gradient Color Stops From Position
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            "gradient-from-pos": [{
              from: [gradientColorStopPositions]
            }],
            /**
             * Gradient Color Stops Via Position
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            "gradient-via-pos": [{
              via: [gradientColorStopPositions]
            }],
            /**
             * Gradient Color Stops To Position
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            "gradient-to-pos": [{
              to: [gradientColorStopPositions]
            }],
            /**
             * Gradient Color Stops From
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            "gradient-from": [{
              from: [gradientColorStops]
            }],
            /**
             * Gradient Color Stops Via
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            "gradient-via": [{
              via: [gradientColorStops]
            }],
            /**
             * Gradient Color Stops To
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            "gradient-to": [{
              to: [gradientColorStops]
            }],
            // Borders
            /**
             * Border Radius
             * @see https://tailwindcss.com/docs/border-radius
             */
            rounded: [{
              rounded: [borderRadius]
            }],
            /**
             * Border Radius Start
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-s": [{
              "rounded-s": [borderRadius]
            }],
            /**
             * Border Radius End
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-e": [{
              "rounded-e": [borderRadius]
            }],
            /**
             * Border Radius Top
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-t": [{
              "rounded-t": [borderRadius]
            }],
            /**
             * Border Radius Right
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-r": [{
              "rounded-r": [borderRadius]
            }],
            /**
             * Border Radius Bottom
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-b": [{
              "rounded-b": [borderRadius]
            }],
            /**
             * Border Radius Left
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-l": [{
              "rounded-l": [borderRadius]
            }],
            /**
             * Border Radius Start Start
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-ss": [{
              "rounded-ss": [borderRadius]
            }],
            /**
             * Border Radius Start End
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-se": [{
              "rounded-se": [borderRadius]
            }],
            /**
             * Border Radius End End
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-ee": [{
              "rounded-ee": [borderRadius]
            }],
            /**
             * Border Radius End Start
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-es": [{
              "rounded-es": [borderRadius]
            }],
            /**
             * Border Radius Top Left
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-tl": [{
              "rounded-tl": [borderRadius]
            }],
            /**
             * Border Radius Top Right
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-tr": [{
              "rounded-tr": [borderRadius]
            }],
            /**
             * Border Radius Bottom Right
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-br": [{
              "rounded-br": [borderRadius]
            }],
            /**
             * Border Radius Bottom Left
             * @see https://tailwindcss.com/docs/border-radius
             */
            "rounded-bl": [{
              "rounded-bl": [borderRadius]
            }],
            /**
             * Border Width
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w": [{
              border: [borderWidth]
            }],
            /**
             * Border Width X
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w-x": [{
              "border-x": [borderWidth]
            }],
            /**
             * Border Width Y
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w-y": [{
              "border-y": [borderWidth]
            }],
            /**
             * Border Width Start
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w-s": [{
              "border-s": [borderWidth]
            }],
            /**
             * Border Width End
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w-e": [{
              "border-e": [borderWidth]
            }],
            /**
             * Border Width Top
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w-t": [{
              "border-t": [borderWidth]
            }],
            /**
             * Border Width Right
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w-r": [{
              "border-r": [borderWidth]
            }],
            /**
             * Border Width Bottom
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w-b": [{
              "border-b": [borderWidth]
            }],
            /**
             * Border Width Left
             * @see https://tailwindcss.com/docs/border-width
             */
            "border-w-l": [{
              "border-l": [borderWidth]
            }],
            /**
             * Border Opacity
             * @see https://tailwindcss.com/docs/border-opacity
             */
            "border-opacity": [{
              "border-opacity": [opacity]
            }],
            /**
             * Border Style
             * @see https://tailwindcss.com/docs/border-style
             */
            "border-style": [{
              border: [].concat(getLineStyles(), ["hidden"])
            }],
            /**
             * Divide Width X
             * @see https://tailwindcss.com/docs/divide-width
             */
            "divide-x": [{
              "divide-x": [borderWidth]
            }],
            /**
             * Divide Width X Reverse
             * @see https://tailwindcss.com/docs/divide-width
             */
            "divide-x-reverse": ["divide-x-reverse"],
            /**
             * Divide Width Y
             * @see https://tailwindcss.com/docs/divide-width
             */
            "divide-y": [{
              "divide-y": [borderWidth]
            }],
            /**
             * Divide Width Y Reverse
             * @see https://tailwindcss.com/docs/divide-width
             */
            "divide-y-reverse": ["divide-y-reverse"],
            /**
             * Divide Opacity
             * @see https://tailwindcss.com/docs/divide-opacity
             */
            "divide-opacity": [{
              "divide-opacity": [opacity]
            }],
            /**
             * Divide Style
             * @see https://tailwindcss.com/docs/divide-style
             */
            "divide-style": [{
              divide: getLineStyles()
            }],
            /**
             * Border Color
             * @see https://tailwindcss.com/docs/border-color
             */
            "border-color": [{
              border: [borderColor]
            }],
            /**
             * Border Color X
             * @see https://tailwindcss.com/docs/border-color
             */
            "border-color-x": [{
              "border-x": [borderColor]
            }],
            /**
             * Border Color Y
             * @see https://tailwindcss.com/docs/border-color
             */
            "border-color-y": [{
              "border-y": [borderColor]
            }],
            /**
             * Border Color Top
             * @see https://tailwindcss.com/docs/border-color
             */
            "border-color-t": [{
              "border-t": [borderColor]
            }],
            /**
             * Border Color Right
             * @see https://tailwindcss.com/docs/border-color
             */
            "border-color-r": [{
              "border-r": [borderColor]
            }],
            /**
             * Border Color Bottom
             * @see https://tailwindcss.com/docs/border-color
             */
            "border-color-b": [{
              "border-b": [borderColor]
            }],
            /**
             * Border Color Left
             * @see https://tailwindcss.com/docs/border-color
             */
            "border-color-l": [{
              "border-l": [borderColor]
            }],
            /**
             * Divide Color
             * @see https://tailwindcss.com/docs/divide-color
             */
            "divide-color": [{
              divide: [borderColor]
            }],
            /**
             * Outline Style
             * @see https://tailwindcss.com/docs/outline-style
             */
            "outline-style": [{
              outline: [""].concat(getLineStyles())
            }],
            /**
             * Outline Offset
             * @see https://tailwindcss.com/docs/outline-offset
             */
            "outline-offset": [{
              "outline-offset": [isArbitraryValue, isLength]
            }],
            /**
             * Outline Width
             * @see https://tailwindcss.com/docs/outline-width
             */
            "outline-w": [{
              outline: [isLength]
            }],
            /**
             * Outline Color
             * @see https://tailwindcss.com/docs/outline-color
             */
            "outline-color": [{
              outline: [colors]
            }],
            /**
             * Ring Width
             * @see https://tailwindcss.com/docs/ring-width
             */
            "ring-w": [{
              ring: getLengthWithEmpty()
            }],
            /**
             * Ring Width Inset
             * @see https://tailwindcss.com/docs/ring-width
             */
            "ring-w-inset": ["ring-inset"],
            /**
             * Ring Color
             * @see https://tailwindcss.com/docs/ring-color
             */
            "ring-color": [{
              ring: [colors]
            }],
            /**
             * Ring Opacity
             * @see https://tailwindcss.com/docs/ring-opacity
             */
            "ring-opacity": [{
              "ring-opacity": [opacity]
            }],
            /**
             * Ring Offset Width
             * @see https://tailwindcss.com/docs/ring-offset-width
             */
            "ring-offset-w": [{
              "ring-offset": [isLength]
            }],
            /**
             * Ring Offset Color
             * @see https://tailwindcss.com/docs/ring-offset-color
             */
            "ring-offset-color": [{
              "ring-offset": [colors]
            }],
            // Effects
            /**
             * Box Shadow
             * @see https://tailwindcss.com/docs/box-shadow
             */
            shadow: [{
              shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
            }],
            /**
             * Box Shadow Color
             * @see https://tailwindcss.com/docs/box-shadow-color
             */
            "shadow-color": [{
              shadow: [isAny]
            }],
            /**
             * Opacity
             * @see https://tailwindcss.com/docs/opacity
             */
            opacity: [{
              opacity: [opacity]
            }],
            /**
             * Mix Blend Mode
             * @see https://tailwindcss.com/docs/mix-blend-mode
             */
            "mix-blend": [{
              "mix-blend": getBlendModes()
            }],
            /**
             * Background Blend Mode
             * @see https://tailwindcss.com/docs/background-blend-mode
             */
            "bg-blend": [{
              "bg-blend": getBlendModes()
            }],
            // Filters
            /**
             * Filter
             * @deprecated since Tailwind CSS v3.0.0
             * @see https://tailwindcss.com/docs/filter
             */
            filter: [{
              filter: ["", "none"]
            }],
            /**
             * Blur
             * @see https://tailwindcss.com/docs/blur
             */
            blur: [{
              blur: [blur]
            }],
            /**
             * Brightness
             * @see https://tailwindcss.com/docs/brightness
             */
            brightness: [{
              brightness: [brightness]
            }],
            /**
             * Contrast
             * @see https://tailwindcss.com/docs/contrast
             */
            contrast: [{
              contrast: [contrast]
            }],
            /**
             * Drop Shadow
             * @see https://tailwindcss.com/docs/drop-shadow
             */
            "drop-shadow": [{
              "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
            }],
            /**
             * Grayscale
             * @see https://tailwindcss.com/docs/grayscale
             */
            grayscale: [{
              grayscale: [grayscale]
            }],
            /**
             * Hue Rotate
             * @see https://tailwindcss.com/docs/hue-rotate
             */
            "hue-rotate": [{
              "hue-rotate": [hueRotate]
            }],
            /**
             * Invert
             * @see https://tailwindcss.com/docs/invert
             */
            invert: [{
              invert: [invert]
            }],
            /**
             * Saturate
             * @see https://tailwindcss.com/docs/saturate
             */
            saturate: [{
              saturate: [saturate]
            }],
            /**
             * Sepia
             * @see https://tailwindcss.com/docs/sepia
             */
            sepia: [{
              sepia: [sepia]
            }],
            /**
             * Backdrop Filter
             * @deprecated since Tailwind CSS v3.0.0
             * @see https://tailwindcss.com/docs/backdrop-filter
             */
            "backdrop-filter": [{
              "backdrop-filter": ["", "none"]
            }],
            /**
             * Backdrop Blur
             * @see https://tailwindcss.com/docs/backdrop-blur
             */
            "backdrop-blur": [{
              "backdrop-blur": [blur]
            }],
            /**
             * Backdrop Brightness
             * @see https://tailwindcss.com/docs/backdrop-brightness
             */
            "backdrop-brightness": [{
              "backdrop-brightness": [brightness]
            }],
            /**
             * Backdrop Contrast
             * @see https://tailwindcss.com/docs/backdrop-contrast
             */
            "backdrop-contrast": [{
              "backdrop-contrast": [contrast]
            }],
            /**
             * Backdrop Grayscale
             * @see https://tailwindcss.com/docs/backdrop-grayscale
             */
            "backdrop-grayscale": [{
              "backdrop-grayscale": [grayscale]
            }],
            /**
             * Backdrop Hue Rotate
             * @see https://tailwindcss.com/docs/backdrop-hue-rotate
             */
            "backdrop-hue-rotate": [{
              "backdrop-hue-rotate": [hueRotate]
            }],
            /**
             * Backdrop Invert
             * @see https://tailwindcss.com/docs/backdrop-invert
             */
            "backdrop-invert": [{
              "backdrop-invert": [invert]
            }],
            /**
             * Backdrop Opacity
             * @see https://tailwindcss.com/docs/backdrop-opacity
             */
            "backdrop-opacity": [{
              "backdrop-opacity": [opacity]
            }],
            /**
             * Backdrop Saturate
             * @see https://tailwindcss.com/docs/backdrop-saturate
             */
            "backdrop-saturate": [{
              "backdrop-saturate": [saturate]
            }],
            /**
             * Backdrop Sepia
             * @see https://tailwindcss.com/docs/backdrop-sepia
             */
            "backdrop-sepia": [{
              "backdrop-sepia": [sepia]
            }],
            // Tables
            /**
             * Border Collapse
             * @see https://tailwindcss.com/docs/border-collapse
             */
            "border-collapse": [{
              border: ["collapse", "separate"]
            }],
            /**
             * Border Spacing
             * @see https://tailwindcss.com/docs/border-spacing
             */
            "border-spacing": [{
              "border-spacing": [borderSpacing]
            }],
            /**
             * Border Spacing X
             * @see https://tailwindcss.com/docs/border-spacing
             */
            "border-spacing-x": [{
              "border-spacing-x": [borderSpacing]
            }],
            /**
             * Border Spacing Y
             * @see https://tailwindcss.com/docs/border-spacing
             */
            "border-spacing-y": [{
              "border-spacing-y": [borderSpacing]
            }],
            /**
             * Table Layout
             * @see https://tailwindcss.com/docs/table-layout
             */
            "table-layout": [{
              table: ["auto", "fixed"]
            }],
            /**
             * Caption Side
             * @see https://tailwindcss.com/docs/caption-side
             */
            caption: [{
              caption: ["top", "bottom"]
            }],
            // Transitions and Animation
            /**
             * Tranisition Property
             * @see https://tailwindcss.com/docs/transition-property
             */
            transition: [{
              transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
            }],
            /**
             * Transition Duration
             * @see https://tailwindcss.com/docs/transition-duration
             */
            duration: [{
              duration: getNumberAndArbitrary()
            }],
            /**
             * Transition Timing Function
             * @see https://tailwindcss.com/docs/transition-timing-function
             */
            ease: [{
              ease: ["linear", "in", "out", "in-out", isArbitraryValue]
            }],
            /**
             * Transition Delay
             * @see https://tailwindcss.com/docs/transition-delay
             */
            delay: [{
              delay: getNumberAndArbitrary()
            }],
            /**
             * Animation
             * @see https://tailwindcss.com/docs/animation
             */
            animate: [{
              animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
            }],
            // Transforms
            /**
             * Transform
             * @see https://tailwindcss.com/docs/transform
             */
            transform: [{
              transform: ["", "gpu", "none"]
            }],
            /**
             * Scale
             * @see https://tailwindcss.com/docs/scale
             */
            scale: [{
              scale: [scale]
            }],
            /**
             * Scale X
             * @see https://tailwindcss.com/docs/scale
             */
            "scale-x": [{
              "scale-x": [scale]
            }],
            /**
             * Scale Y
             * @see https://tailwindcss.com/docs/scale
             */
            "scale-y": [{
              "scale-y": [scale]
            }],
            /**
             * Rotate
             * @see https://tailwindcss.com/docs/rotate
             */
            rotate: [{
              rotate: [isInteger, isArbitraryValue]
            }],
            /**
             * Translate X
             * @see https://tailwindcss.com/docs/translate
             */
            "translate-x": [{
              "translate-x": [translate]
            }],
            /**
             * Translate Y
             * @see https://tailwindcss.com/docs/translate
             */
            "translate-y": [{
              "translate-y": [translate]
            }],
            /**
             * Skew X
             * @see https://tailwindcss.com/docs/skew
             */
            "skew-x": [{
              "skew-x": [skew]
            }],
            /**
             * Skew Y
             * @see https://tailwindcss.com/docs/skew
             */
            "skew-y": [{
              "skew-y": [skew]
            }],
            /**
             * Transform Origin
             * @see https://tailwindcss.com/docs/transform-origin
             */
            "transform-origin": [{
              origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
            }],
            // Interactivity
            /**
             * Accent Color
             * @see https://tailwindcss.com/docs/accent-color
             */
            accent: [{
              accent: ["auto", colors]
            }],
            /**
             * Appearance
             * @see https://tailwindcss.com/docs/appearance
             */
            appearance: ["appearance-none"],
            /**
             * Cursor
             * @see https://tailwindcss.com/docs/cursor
             */
            cursor: [{
              cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
            }],
            /**
             * Caret Color
             * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
             */
            "caret-color": [{
              caret: [colors]
            }],
            /**
             * Pointer Events
             * @see https://tailwindcss.com/docs/pointer-events
             */
            "pointer-events": [{
              "pointer-events": ["none", "auto"]
            }],
            /**
             * Resize
             * @see https://tailwindcss.com/docs/resize
             */
            resize: [{
              resize: ["none", "y", "x", ""]
            }],
            /**
             * Scroll Behavior
             * @see https://tailwindcss.com/docs/scroll-behavior
             */
            "scroll-behavior": [{
              scroll: ["auto", "smooth"]
            }],
            /**
             * Scroll Margin
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-m": [{
              "scroll-m": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Margin X
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-mx": [{
              "scroll-mx": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Margin Y
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-my": [{
              "scroll-my": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Margin Start
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-ms": [{
              "scroll-ms": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Margin End
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-me": [{
              "scroll-me": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Margin Top
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-mt": [{
              "scroll-mt": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Margin Right
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-mr": [{
              "scroll-mr": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Margin Bottom
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-mb": [{
              "scroll-mb": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Margin Left
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            "scroll-ml": [{
              "scroll-ml": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-p": [{
              "scroll-p": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding X
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-px": [{
              "scroll-px": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding Y
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-py": [{
              "scroll-py": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding Start
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-ps": [{
              "scroll-ps": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding End
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-pe": [{
              "scroll-pe": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding Top
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-pt": [{
              "scroll-pt": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding Right
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-pr": [{
              "scroll-pr": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding Bottom
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-pb": [{
              "scroll-pb": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Padding Left
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            "scroll-pl": [{
              "scroll-pl": getSpacingWithArbitrary()
            }],
            /**
             * Scroll Snap Align
             * @see https://tailwindcss.com/docs/scroll-snap-align
             */
            "snap-align": [{
              snap: ["start", "end", "center", "align-none"]
            }],
            /**
             * Scroll Snap Stop
             * @see https://tailwindcss.com/docs/scroll-snap-stop
             */
            "snap-stop": [{
              snap: ["normal", "always"]
            }],
            /**
             * Scroll Snap Type
             * @see https://tailwindcss.com/docs/scroll-snap-type
             */
            "snap-type": [{
              snap: ["none", "x", "y", "both"]
            }],
            /**
             * Scroll Snap Type Strictness
             * @see https://tailwindcss.com/docs/scroll-snap-type
             */
            "snap-strictness": [{
              snap: ["mandatory", "proximity"]
            }],
            /**
             * Touch Action
             * @see https://tailwindcss.com/docs/touch-action
             */
            touch: [{
              touch: ["auto", "none", "pinch-zoom", "manipulation", {
                pan: ["x", "left", "right", "y", "up", "down"]
              }]
            }],
            /**
             * User Select
             * @see https://tailwindcss.com/docs/user-select
             */
            select: [{
              select: ["none", "text", "all", "auto"]
            }],
            /**
             * Will Change
             * @see https://tailwindcss.com/docs/will-change
             */
            "will-change": [{
              "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
            }],
            // SVG
            /**
             * Fill
             * @see https://tailwindcss.com/docs/fill
             */
            fill: [{
              fill: [colors, "none"]
            }],
            /**
             * Stroke Width
             * @see https://tailwindcss.com/docs/stroke-width
             */
            "stroke-w": [{
              stroke: [isLength, isArbitraryNumber]
            }],
            /**
             * Stroke
             * @see https://tailwindcss.com/docs/stroke
             */
            stroke: [{
              stroke: [colors, "none"]
            }],
            // Accessibility
            /**
             * Screen Readers
             * @see https://tailwindcss.com/docs/screen-readers
             */
            sr: ["sr-only", "not-sr-only"]
          },
          conflictingClassGroups: {
            overflow: ["overflow-x", "overflow-y"],
            overscroll: ["overscroll-x", "overscroll-y"],
            inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
            "inset-x": ["right", "left"],
            "inset-y": ["top", "bottom"],
            flex: ["basis", "grow", "shrink"],
            gap: ["gap-x", "gap-y"],
            p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
            px: ["pr", "pl"],
            py: ["pt", "pb"],
            m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
            mx: ["mr", "ml"],
            my: ["mt", "mb"],
            "font-size": ["leading"],
            "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
            "fvn-ordinal": ["fvn-normal"],
            "fvn-slashed-zero": ["fvn-normal"],
            "fvn-figure": ["fvn-normal"],
            "fvn-spacing": ["fvn-normal"],
            "fvn-fraction": ["fvn-normal"],
            rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
            "rounded-s": ["rounded-ss", "rounded-es"],
            "rounded-e": ["rounded-se", "rounded-ee"],
            "rounded-t": ["rounded-tl", "rounded-tr"],
            "rounded-r": ["rounded-tr", "rounded-br"],
            "rounded-b": ["rounded-br", "rounded-bl"],
            "rounded-l": ["rounded-tl", "rounded-bl"],
            "border-spacing": ["border-spacing-x", "border-spacing-y"],
            "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
            "border-w-x": ["border-w-r", "border-w-l"],
            "border-w-y": ["border-w-t", "border-w-b"],
            "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
            "border-color-x": ["border-color-r", "border-color-l"],
            "border-color-y": ["border-color-t", "border-color-b"],
            "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
            "scroll-mx": ["scroll-mr", "scroll-ml"],
            "scroll-my": ["scroll-mt", "scroll-mb"],
            "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
            "scroll-px": ["scroll-pr", "scroll-pl"],
            "scroll-py": ["scroll-pt", "scroll-pb"]
          },
          conflictingClassGroupModifiers: {
            "font-size": ["leading"]
          }
        };
      }
      function mergeConfigs(baseConfig, configExtension) {
        for (var key in configExtension) {
          mergePropertyRecursively(baseConfig, key, configExtension[key]);
        }
        return baseConfig;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var overrideTypes = /* @__PURE__ */ new Set(["string", "number", "boolean"]);
      function mergePropertyRecursively(baseObject, mergeKey, mergeValue) {
        if (!hasOwnProperty.call(baseObject, mergeKey) || overrideTypes.has(typeof mergeValue) || mergeValue === null) {
          baseObject[mergeKey] = mergeValue;
          return;
        }
        if (Array.isArray(mergeValue) && Array.isArray(baseObject[mergeKey])) {
          baseObject[mergeKey] = baseObject[mergeKey].concat(mergeValue);
          return;
        }
        if (typeof mergeValue === "object" && typeof baseObject[mergeKey] === "object") {
          if (baseObject[mergeKey] === null) {
            baseObject[mergeKey] = mergeValue;
            return;
          }
          for (var nextKey in mergeValue) {
            mergePropertyRecursively(baseObject[mergeKey], nextKey, mergeValue[nextKey]);
          }
        }
      }
      function extendTailwindMerge(configExtension) {
        for (var _len = arguments.length, createConfig = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          createConfig[_key - 1] = arguments[_key];
        }
        return typeof configExtension === "function" ? createTailwindMerge.apply(void 0, [getDefaultConfig, configExtension].concat(createConfig)) : createTailwindMerge.apply(void 0, [function() {
          return mergeConfigs(getDefaultConfig(), configExtension);
        }].concat(createConfig));
      }
      var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);
      var join = twJoin;
      exports.createTailwindMerge = createTailwindMerge;
      exports.extendTailwindMerge = extendTailwindMerge;
      exports.fromTheme = fromTheme;
      exports.getDefaultConfig = getDefaultConfig;
      exports.join = join;
      exports.mergeConfigs = mergeConfigs;
      exports.twJoin = twJoin;
      exports.twMerge = twMerge;
      exports.validators = validators;
    }
  });

  // node_modules/tailwind-merge/dist/index.js
  var require_dist = __commonJS({
    "node_modules/tailwind-merge/dist/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_tailwind_merge_cjs_development();
      }
    }
  });

  // node_modules/tailwind-variants/dist/index.cjs
  var require_dist2 = __commonJS({
    "node_modules/tailwind-variants/dist/index.cjs"(exports) {
      "use strict";
      var tailwindMerge = require_dist();
      var B = (e) => typeof e == "boolean" ? `${e}` : e === 0 ? "0" : e;
      var y = (e) => !e || typeof e != "object" || Object.keys(e).length === 0;
      var L = (e, l) => JSON.stringify(e) === JSON.stringify(l);
      function Q(e, l) {
        e.forEach(function(t) {
          Array.isArray(t) ? Q(t, l) : l.push(t);
        });
      }
      function q(e) {
        let l = [];
        return Q(e, l), l;
      }
      var X = (...e) => q(e).filter(Boolean);
      var x = (e, l) => {
        let t = {}, A = Object.keys(e), O = Object.keys(l);
        for (let u of A)
          if (O.includes(u)) {
            let V = e[u], h = l[u];
            typeof V == "object" && typeof h == "object" ? t[u] = x(V, h) : t[u] = h + " " + V;
          } else
            t[u] = e[u];
        for (let u of O)
          A.includes(u) || (t[u] = l[u]);
        return t;
      };
      var J = (e) => !e || typeof e != "string" ? e : e.replace(/\s+/g, " ").trim();
      var se = { twMerge: true, twMergeConfig: {}, responsiveVariants: false };
      var Z = (e) => e || void 0;
      var k = (...e) => Z(q(e).filter(Boolean).join(" "));
      var R = null;
      var S = {};
      var F = false;
      var j = (...e) => (l) => l.twMerge ? ((!R || F) && (F = false, R = y(S) ? tailwindMerge.twMerge : tailwindMerge.extendTailwindMerge(S)), Z(R(k(e)))) : k(e);
      var Y = (e, l) => {
        for (let t in l)
          e.hasOwnProperty(t) ? e[t] = k(e[t], l[t]) : e[t] = l[t];
        return e;
      };
      var fe = (e, l) => {
        let { extend: t = null, slots: A = {}, variants: O = {}, compoundVariants: u = [], compoundSlots: V = [], defaultVariants: h = {} } = e, b = __spreadValues(__spreadValues({}, se), l), M = t != null && t.base ? k(t.base, e == null ? void 0 : e.base) : e == null ? void 0 : e.base, d = t != null && t.variants && !y(t.variants) ? x(O, t.variants) : O, w = t != null && t.defaultVariants && !y(t.defaultVariants) ? __spreadValues(__spreadValues({}, t.defaultVariants), h) : h;
        !y(b.twMergeConfig) && !L(b.twMergeConfig, S) && (F = true, S = b.twMergeConfig);
        let $ = y(A) ? {} : __spreadValues({ base: e == null ? void 0 : e.base }, A), N = y(t == null ? void 0 : t.slots) ? $ : Y(t == null ? void 0 : t.slots, y($) ? { base: e == null ? void 0 : e.base } : $), C = (o) => {
          if (y(d) && y(A) && y(t == null ? void 0 : t.slots))
            return j(M, o == null ? void 0 : o.class, o == null ? void 0 : o.className)(b);
          if (u && !Array.isArray(u))
            throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof u}`);
          if (V && !Array.isArray(V))
            throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof V}`);
          let p = (n, r, a = [], c) => {
            let s = a;
            if (typeof r == "string")
              s = s.concat(J(r).split(" ").map((f) => `${n}:${f}`));
            else if (Array.isArray(r))
              s = s.concat(r.reduce((f, i) => f.concat(`${n}:${i}`), []));
            else if (typeof r == "object" && typeof c == "string") {
              for (let f in r)
                if (r.hasOwnProperty(f) && f === c) {
                  let i = r[f];
                  if (i && typeof i == "string") {
                    let m = J(i);
                    s[c] ? s[c] = s[c].concat(m.split(" ").map((g) => `${n}:${g}`)) : s[c] = m.split(" ").map((g) => `${n}:${g}`);
                  } else
                    Array.isArray(i) && i.length > 0 && (s[c] = i.reduce((m, g) => m.concat(`${n}:${g}`), []));
                }
            }
            return s;
          }, U = (n, r = d, a = null, c = null) => {
            var H;
            let s = r[n];
            if (!s || y(s))
              return null;
            let f = (H = c == null ? void 0 : c[n]) != null ? H : o == null ? void 0 : o[n];
            if (f === null)
              return null;
            let i = B(f), m = Array.isArray(b.responsiveVariants) && b.responsiveVariants.length > 0 || b.responsiveVariants === true, g = w == null ? void 0 : w[n], v = [];
            if (typeof i == "object" && m)
              for (let [T, I] of Object.entries(i)) {
                let ne = s[I];
                if (T === "initial") {
                  g = I;
                  continue;
                }
                Array.isArray(b.responsiveVariants) && !b.responsiveVariants.includes(T) || (v = p(T, ne, v, a));
              }
            let E = s[i] || s[B(g)];
            return typeof v == "object" && typeof a == "string" && v[a] ? Y(v, E) : v.length > 0 ? (v.push(E), v) : E;
          }, K = () => d ? Object.keys(d).map((n) => U(n, d)) : null, P = (n, r) => {
            if (!d || typeof d != "object")
              return null;
            let a = new Array();
            for (let c in d) {
              let s = U(c, d, n, r), f = n === "base" && typeof s == "string" ? s : s && s[n];
              f && (a[a.length] = f);
            }
            return a;
          }, W = {};
          for (let n in o)
            o[n] !== void 0 && (W[n] = o[n]);
          let z = (n, r) => {
            var c;
            let a = typeof (o == null ? void 0 : o[n]) == "object" ? { [n]: (c = o[n]) == null ? void 0 : c.initial } : {};
            return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, w), W), a), r);
          }, D = (n = [], r) => {
            let a = [];
            for (let _a of n) {
              let _b = _a, { class: c, className: s } = _b, f = __objRest(_b, ["class", "className"]);
              let i = true;
              for (let [m, g] of Object.entries(f)) {
                let v = z(m, r);
                if (Array.isArray(g)) {
                  if (!g.includes(v[m])) {
                    i = false;
                    break;
                  }
                } else if (v[m] !== g) {
                  i = false;
                  break;
                }
              }
              i && (c && a.push(c), s && a.push(s));
            }
            return a;
          }, G = (n) => {
            let r = D(u, n), a = D(t == null ? void 0 : t.compoundVariants, n);
            return X(a, r);
          }, ee = (n) => {
            let r = G(n);
            if (!Array.isArray(r))
              return r;
            let a = {};
            for (let c of r)
              if (typeof c == "string" && (a.base = j(a.base, c)(b)), typeof c == "object")
                for (let [s, f] of Object.entries(c))
                  a[s] = j(a[s], f)(b);
            return a;
          }, te = (n) => {
            if (V.length < 1)
              return null;
            let r = {};
            for (let _a of V) {
              let _b = _a, { slots: a = [], class: c, className: s } = _b, f = __objRest(_b, ["slots", "class", "className"]);
              if (!y(f)) {
                let i = true;
                for (let m of Object.keys(f)) {
                  let g = z(m, n)[m];
                  if (g === void 0 || g !== f[m]) {
                    i = false;
                    break;
                  }
                }
                if (!i)
                  continue;
              }
              for (let i of a)
                r[i] = r[i] || [], r[i].push([c, s]);
            }
            return r;
          };
          if (!y(A) || !y(t == null ? void 0 : t.slots)) {
            let n = {};
            if (typeof N == "object" && !y(N))
              for (let r of Object.keys(N))
                n[r] = (a) => {
                  var c, s;
                  return j(N[r], P(r, a), ((c = ee(a)) != null ? c : [])[r], ((s = te(a)) != null ? s : [])[r], a == null ? void 0 : a.class, a == null ? void 0 : a.className)(b);
                };
            return n;
          }
          return j(M, K(), G(), o == null ? void 0 : o.class, o == null ? void 0 : o.className)(b);
        }, _ = () => {
          if (!(!d || typeof d != "object"))
            return Object.keys(d);
        };
        return C.variantKeys = _(), C.extend = t, C.base = M, C.slots = N, C.variants = d, C.defaultVariants = w, C.compoundSlots = V, C.compoundVariants = u, C;
      };
      exports.cn = j;
      exports.cnBase = k;
      exports.defaultConfig = se;
      exports.tv = fe;
      exports.voidEmpty = Z;
    }
  });

  // node_modules/@nextui-org/system-rsc/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/@nextui-org/system-rsc/dist/index.js"(exports, module) {
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        cn: () => cn,
        extendVariants: () => extendVariants,
        forwardRef: () => forwardRef2,
        mapPropsVariants: () => mapPropsVariants,
        mapPropsVariantsWithCommon: () => mapPropsVariantsWithCommon,
        toIterator: () => toIterator
      });
      module.exports = __toCommonJS2(src_exports);
      var import_clsx = __toESM2(require_clsx());
      var import_react3 = require_react();
      function forwardRef2(component) {
        return (0, import_react3.forwardRef)(component);
      }
      var toIterator = (obj) => {
        return __spreadProps(__spreadValues({}, obj), {
          [Symbol.iterator]: function() {
            const keys = Object.keys(this);
            let index3 = 0;
            return {
              next: () => {
                if (index3 >= keys.length) {
                  return { done: true };
                }
                const key = keys[index3];
                const value = this[key];
                index3++;
                return { value: { key, value }, done: false };
              }
            };
          }
        });
      };
      var mapPropsVariants = (props, variantKeys, removeVariantProps = true) => {
        if (!variantKeys) {
          return [props, {}];
        }
        const picked = variantKeys.reduce((acc, key) => {
          if (key in props) {
            return __spreadProps(__spreadValues({}, acc), { [key]: props[key] });
          } else {
            return acc;
          }
        }, {});
        if (removeVariantProps) {
          const omitted = Object.keys(props).filter((key) => !variantKeys.includes(key)).reduce((acc, key) => __spreadProps(__spreadValues({}, acc), { [key]: props[key] }), {});
          return [omitted, picked];
        } else {
          return [props, picked];
        }
      };
      var mapPropsVariantsWithCommon = (originalProps, variantKeys, commonKeys) => {
        const props = Object.keys(originalProps).filter((key) => !variantKeys.includes(key) || (commonKeys == null ? void 0 : commonKeys.includes(key))).reduce((acc, key) => __spreadProps(__spreadValues({}, acc), { [key]: originalProps[key] }), {});
        const variants = variantKeys.reduce(
          (acc, key) => __spreadProps(__spreadValues({}, acc), { [key]: originalProps[key] }),
          {}
        );
        return [props, variants];
      };
      var cn = import_clsx.default;
      var React3 = __toESM2(require_react());
      var import_tailwind_variants = require_dist2();
      var spacingScaleKeys = [
        "0",
        "xs",
        "sm",
        "md",
        "lg",
        "xl",
        "2xl",
        "3xl",
        "4xl",
        "5xl",
        "6xl",
        "7xl",
        "8xl",
        "9xl",
        "1",
        "2",
        "3",
        "3.5",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "20",
        "24",
        "28",
        "32",
        "36",
        "40",
        "44",
        "48",
        "52",
        "56",
        "60",
        "64",
        "72",
        "80",
        "96"
      ];
      var mappedSpacingScaleKeys = spacingScaleKeys.map((key) => `unit-${key}`);
      var COMMON_UNITS = ["small", "medium", "large"];
      var tv = (options, config) => {
        var _a, _b, _c;
        return (0, import_tailwind_variants.tv)(options, __spreadProps(__spreadValues({}, config), {
          twMerge: (_a = config == null ? void 0 : config.twMerge) != null ? _a : true,
          twMergeConfig: __spreadProps(__spreadValues({}, config == null ? void 0 : config.twMergeConfig), {
            theme: __spreadProps(__spreadValues({}, (_b = config == null ? void 0 : config.twMergeConfig) == null ? void 0 : _b.theme), {
              opacity: ["disabled"],
              spacing: ["divider", "unit", ...mappedSpacingScaleKeys],
              borderWidth: COMMON_UNITS,
              borderRadius: COMMON_UNITS
            }),
            classGroups: __spreadProps(__spreadValues({}, (_c = config == null ? void 0 : config.twMergeConfig) == null ? void 0 : _c.classGroups), {
              shadow: [{ shadow: COMMON_UNITS }],
              "font-size": [{ text: ["tiny", ...COMMON_UNITS] }],
              "bg-image": ["bg-stripe-gradient"],
              "min-w": [
                {
                  "min-w": ["unit", ...mappedSpacingScaleKeys]
                }
              ],
              "min-h": [
                {
                  "min-h": ["unit", ...mappedSpacingScaleKeys]
                }
              ]
            })
          })
        }));
      };
      function getSlots(variants) {
        return variants ? Object.values(variants).flatMap(Object.values).reduce((acc, slot) => {
          if (typeof slot === "object" && slot !== null && !(slot instanceof String)) {
            Object.keys(slot).forEach((key) => {
              if (!acc.hasOwnProperty(key)) {
                acc[key] = "";
              }
            });
          }
          return acc;
        }, {}) : {};
      }
      function extendVariants(BaseComponent, styles = {}, opts = {}) {
        var _a, _b;
        const { variants, defaultVariants, compoundVariants } = styles || {};
        const slots = getSlots(variants);
        const hasSlots = typeof slots === "object" && Object.keys(slots).length !== 0;
        const customTv = tv(
          __spreadValues({
            variants,
            defaultVariants,
            compoundVariants
          }, hasSlots && { slots }),
          {
            twMerge: (_a = opts.twMerge) != null ? _a : true,
            twMergeConfig: (_b = opts.twMergeConfig) != null ? _b : {}
          }
        );
        const ForwardedComponent = React3.forwardRef((originalProps, ref) => {
          var _a2;
          const [baseProps, variantProps] = mapPropsVariants(originalProps, customTv.variantKeys, false);
          const newProps = __spreadProps(__spreadValues(__spreadValues({}, defaultVariants), baseProps), { ref });
          let classNames = {};
          const result = React3.useMemo(() => customTv(variantProps), [...Object.values(variantProps)]);
          if (!hasSlots) {
            newProps.className = cn(result, originalProps.className);
          } else {
            Object.entries(result).forEach(([key, value]) => {
              const slotResult = value();
              if (typeof slotResult === "string") {
                classNames[key] = slotResult;
              }
            });
            Object.entries((_a2 = originalProps.classNames) != null ? _a2 : {}).forEach(([key, value]) => {
              classNames[key] = cn(classNames[key], value);
            });
          }
          if (Object.keys(classNames).length !== 0) {
            newProps.classNames = classNames;
          }
          return React3.createElement(BaseComponent, newProps);
        });
        ForwardedComponent.displayName = `Extended(${BaseComponent.displayName || BaseComponent.name})`;
        return ForwardedComponent;
      }
    }
  });

  // node_modules/@nextui-org/system/dist/index.js
  var require_dist4 = __commonJS({
    "node_modules/@nextui-org/system/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        NextUIProvider: () => NextUIProvider
      });
      module.exports = __toCommonJS2(src_exports);
      var import_i18n = require_main10();
      var import_overlays = require_main14();
      var import_jsx_runtime = require_jsx_runtime();
      var NextUIProvider = (_a) => {
        var _b = _a, {
          children,
          locale = "en-US"
        } = _b, otherProps = __objRest(_b, [
          "children",
          "locale"
        ]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_i18n.I18nProvider, { locale, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_overlays.OverlayProvider, __spreadProps(__spreadValues({}, otherProps), { children })) });
      };
      __reExport(src_exports, require_dist3(), module.exports);
    }
  });

  // node_modules/color2k/dist/index.exports.require.cjs.js
  var require_index_exports_require_cjs = __commonJS({
    "node_modules/color2k/dist/index.exports.require.cjs.js"(exports) {
      "use strict";
      function guard(low, high, value) {
        return Math.min(Math.max(low, value), high);
      }
      var ColorError = class extends Error {
        constructor(color) {
          super(`Failed to parse color: "${color}"`);
        }
      };
      var ColorError$1 = ColorError;
      function parseToRgba(color) {
        if (typeof color !== "string")
          throw new ColorError$1(color);
        if (color.trim().toLowerCase() === "transparent")
          return [0, 0, 0, 0];
        let normalizedColor = color.trim();
        normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;
        const reducedHexMatch = reducedHexRegex.exec(normalizedColor);
        if (reducedHexMatch) {
          const arr = Array.from(reducedHexMatch).slice(1);
          return [...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)), parseInt(r(arr[3] || "f", 2), 16) / 255];
        }
        const hexMatch = hexRegex.exec(normalizedColor);
        if (hexMatch) {
          const arr = Array.from(hexMatch).slice(1);
          return [...arr.slice(0, 3).map((x) => parseInt(x, 16)), parseInt(arr[3] || "ff", 16) / 255];
        }
        const rgbaMatch = rgbaRegex.exec(normalizedColor);
        if (rgbaMatch) {
          const arr = Array.from(rgbaMatch).slice(1);
          return [...arr.slice(0, 3).map((x) => parseInt(x, 10)), parseFloat(arr[3] || "1")];
        }
        const hslaMatch = hslaRegex.exec(normalizedColor);
        if (hslaMatch) {
          const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);
          if (guard(0, 100, s) !== s)
            throw new ColorError$1(color);
          if (guard(0, 100, l) !== l)
            throw new ColorError$1(color);
          return [...hslToRgb(h, s, l), Number.isNaN(a) ? 1 : a];
        }
        throw new ColorError$1(color);
      }
      function hash(str) {
        let hash2 = 5381;
        let i = str.length;
        while (i) {
          hash2 = hash2 * 33 ^ str.charCodeAt(--i);
        }
        return (hash2 >>> 0) % 2341;
      }
      var colorToInt = (x) => parseInt(x.replace(/_/g, ""), 36);
      var compressedColorMap = "1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm".split(" ").reduce((acc, next) => {
        const key = colorToInt(next.substring(0, 3));
        const hex = colorToInt(next.substring(3)).toString(16);
        let prefix = "";
        for (let i = 0; i < 6 - hex.length; i++) {
          prefix += "0";
        }
        acc[key] = `${prefix}${hex}`;
        return acc;
      }, {});
      function nameToHex(color) {
        const normalizedColorName = color.toLowerCase().trim();
        const result = compressedColorMap[hash(normalizedColorName)];
        if (!result)
          throw new ColorError$1(color);
        return `#${result}`;
      }
      var r = (str, amount) => Array.from(Array(amount)).map(() => str).join("");
      var reducedHexRegex = new RegExp(`^#${r("([a-f0-9])", 3)}([a-f0-9])?$`, "i");
      var hexRegex = new RegExp(`^#${r("([a-f0-9]{2})", 3)}([a-f0-9]{2})?$`, "i");
      var rgbaRegex = new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${r(",\\s*(\\d+)\\s*", 2)}(?:,\\s*([\\d.]+))?\\s*\\)$`, "i");
      var hslaRegex = /^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i;
      var namedColorRegex = /^[a-z]+$/i;
      var roundColor = (color) => {
        return Math.round(color * 255);
      };
      var hslToRgb = (hue, saturation, lightness) => {
        let l = lightness / 100;
        if (saturation === 0) {
          return [l, l, l].map(roundColor);
        }
        const huePrime = (hue % 360 + 360) % 360 / 60;
        const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);
        const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
        let red = 0;
        let green = 0;
        let blue = 0;
        if (huePrime >= 0 && huePrime < 1) {
          red = chroma;
          green = secondComponent;
        } else if (huePrime >= 1 && huePrime < 2) {
          red = secondComponent;
          green = chroma;
        } else if (huePrime >= 2 && huePrime < 3) {
          green = chroma;
          blue = secondComponent;
        } else if (huePrime >= 3 && huePrime < 4) {
          green = secondComponent;
          blue = chroma;
        } else if (huePrime >= 4 && huePrime < 5) {
          red = secondComponent;
          blue = chroma;
        } else if (huePrime >= 5 && huePrime < 6) {
          red = chroma;
          blue = secondComponent;
        }
        const lightnessModification = l - chroma / 2;
        const finalRed = red + lightnessModification;
        const finalGreen = green + lightnessModification;
        const finalBlue = blue + lightnessModification;
        return [finalRed, finalGreen, finalBlue].map(roundColor);
      };
      function parseToHsla(color) {
        const [red, green, blue, alpha] = parseToRgba(color).map((value, index3) => (
          // 3rd index is alpha channel which is already normalized
          index3 === 3 ? value : value / 255
        ));
        const max = Math.max(red, green, blue);
        const min = Math.min(red, green, blue);
        const lightness = (max + min) / 2;
        if (max === min)
          return [0, 0, lightness, alpha];
        const delta = max - min;
        const saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);
        const hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);
        return [hue, saturation, lightness, alpha];
      }
      function hsla(hue, saturation, lightness, alpha) {
        return `hsla(${(hue % 360).toFixed()}, ${guard(0, 100, saturation * 100).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;
      }
      function adjustHue(color, degrees) {
        const [h, s, l, a] = parseToHsla(color);
        return hsla(h + degrees, s, l, a);
      }
      function darken(color, amount) {
        const [hue, saturation, lightness, alpha] = parseToHsla(color);
        return hsla(hue, saturation, lightness - amount, alpha);
      }
      function desaturate(color, amount) {
        const [h, s, l, a] = parseToHsla(color);
        return hsla(h, s - amount, l, a);
      }
      function getLuminance(color) {
        if (color === "transparent")
          return 0;
        function f(x) {
          const channel = x / 255;
          return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);
        }
        const [r2, g, b] = parseToRgba(color);
        return 0.2126 * f(r2) + 0.7152 * f(g) + 0.0722 * f(b);
      }
      function getContrast(color1, color2) {
        const luminance1 = getLuminance(color1);
        const luminance2 = getLuminance(color2);
        return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);
      }
      function rgba(red, green, blue, alpha) {
        return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;
      }
      function mix(color1, color2, weight) {
        const normalize = (n, index3) => (
          // 3rd index is alpha channel which is already normalized
          index3 === 3 ? n : n / 255
        );
        const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);
        const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);
        const alphaDelta = a2 - a1;
        const normalizedWeight = weight * 2 - 1;
        const combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);
        const weight2 = (combinedWeight + 1) / 2;
        const weight1 = 1 - weight2;
        const r3 = (r1 * weight1 + r2 * weight2) * 255;
        const g = (g1 * weight1 + g2 * weight2) * 255;
        const b = (b1 * weight1 + b2 * weight2) * 255;
        const a = a2 * weight + a1 * (1 - weight);
        return rgba(r3, g, b, a);
      }
      function getScale(...colors) {
        return (n) => {
          const lastIndex = colors.length - 1;
          const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));
          const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));
          const color1 = colors[lowIndex];
          const color2 = colors[highIndex];
          const unit = 1 / lastIndex;
          const weight = (n - unit * lowIndex) / unit;
          return mix(color1, color2, weight);
        };
      }
      var guidelines = {
        decorative: 1.5,
        readable: 3,
        aa: 4.5,
        aaa: 7
      };
      function hasBadContrast(color, standard = "aa", background = "#fff") {
        return getContrast(color, background) < guidelines[standard];
      }
      function lighten(color, amount) {
        return darken(color, -amount);
      }
      function transparentize(color, amount) {
        const [r2, g, b, a] = parseToRgba(color);
        return rgba(r2, g, b, a - amount);
      }
      function opacify(color, amount) {
        return transparentize(color, -amount);
      }
      function readableColorIsBlack(color) {
        return getLuminance(color) > 0.179;
      }
      function readableColor(color) {
        return readableColorIsBlack(color) ? "#000" : "#fff";
      }
      function saturate(color, amount) {
        return desaturate(color, -amount);
      }
      function toHex(color) {
        const [r2, g, b, a] = parseToRgba(color);
        let hex = (x) => {
          const h = guard(0, 255, x).toString(16);
          return h.length === 1 ? `0${h}` : h;
        };
        return `#${hex(r2)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ""}`;
      }
      function toRgba(color) {
        return rgba(...parseToRgba(color));
      }
      function toHsla(color) {
        return hsla(...parseToHsla(color));
      }
      exports.ColorError = ColorError$1;
      exports.adjustHue = adjustHue;
      exports.darken = darken;
      exports.desaturate = desaturate;
      exports.getContrast = getContrast;
      exports.getLuminance = getLuminance;
      exports.getScale = getScale;
      exports.guard = guard;
      exports.hasBadContrast = hasBadContrast;
      exports.hsla = hsla;
      exports.lighten = lighten;
      exports.mix = mix;
      exports.opacify = opacify;
      exports.parseToHsla = parseToHsla;
      exports.parseToRgba = parseToRgba;
      exports.readableColor = readableColor;
      exports.readableColorIsBlack = readableColorIsBlack;
      exports.rgba = rgba;
      exports.saturate = saturate;
      exports.toHex = toHex;
      exports.toHsla = toHsla;
      exports.toRgba = toRgba;
      exports.transparentize = transparentize;
    }
  });

  // node_modules/flat/index.js
  var require_flat = __commonJS({
    "node_modules/flat/index.js"(exports, module) {
      module.exports = flatten;
      flatten.flatten = flatten;
      flatten.unflatten = unflatten;
      function isBuffer(obj) {
        return obj && obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      }
      function keyIdentity(key) {
        return key;
      }
      function flatten(target, opts) {
        opts = opts || {};
        const delimiter = opts.delimiter || ".";
        const maxDepth = opts.maxDepth;
        const transformKey = opts.transformKey || keyIdentity;
        const output = {};
        function step(object, prev, currentDepth) {
          currentDepth = currentDepth || 1;
          Object.keys(object).forEach(function(key) {
            const value = object[key];
            const isarray = opts.safe && Array.isArray(value);
            const type = Object.prototype.toString.call(value);
            const isbuffer = isBuffer(value);
            const isobject = type === "[object Object]" || type === "[object Array]";
            const newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);
            if (!isarray && !isbuffer && isobject && Object.keys(value).length && (!opts.maxDepth || currentDepth < maxDepth)) {
              return step(value, newKey, currentDepth + 1);
            }
            output[newKey] = value;
          });
        }
        step(target);
        return output;
      }
      function unflatten(target, opts) {
        opts = opts || {};
        const delimiter = opts.delimiter || ".";
        const overwrite = opts.overwrite || false;
        const transformKey = opts.transformKey || keyIdentity;
        const result = {};
        const isbuffer = isBuffer(target);
        if (isbuffer || Object.prototype.toString.call(target) !== "[object Object]") {
          return target;
        }
        function getkey(key) {
          const parsedKey = Number(key);
          return isNaN(parsedKey) || key.indexOf(".") !== -1 || opts.object ? key : parsedKey;
        }
        function addKeys(keyPrefix, recipient, target2) {
          return Object.keys(target2).reduce(function(result2, key) {
            result2[keyPrefix + delimiter + key] = target2[key];
            return result2;
          }, recipient);
        }
        function isEmpty(val) {
          const type = Object.prototype.toString.call(val);
          const isArray = type === "[object Array]";
          const isObject = type === "[object Object]";
          if (!val) {
            return true;
          } else if (isArray) {
            return !val.length;
          } else if (isObject) {
            return !Object.keys(val).length;
          }
        }
        target = Object.keys(target).reduce(function(result2, key) {
          const type = Object.prototype.toString.call(target[key]);
          const isObject = type === "[object Object]" || type === "[object Array]";
          if (!isObject || isEmpty(target[key])) {
            result2[key] = target[key];
            return result2;
          } else {
            return addKeys(
              key,
              result2,
              flatten(target[key], opts)
            );
          }
        }, {});
        Object.keys(target).forEach(function(key) {
          const split = key.split(delimiter).map(transformKey);
          let key1 = getkey(split.shift());
          let key2 = getkey(split[0]);
          let recipient = result;
          while (key2 !== void 0) {
            if (key1 === "__proto__") {
              return;
            }
            const type = Object.prototype.toString.call(recipient[key1]);
            const isobject = type === "[object Object]" || type === "[object Array]";
            if (!overwrite && !isobject && typeof recipient[key1] !== "undefined") {
              return;
            }
            if (overwrite && !isobject || !overwrite && recipient[key1] == null) {
              recipient[key1] = typeof key2 === "number" && !opts.object ? [] : {};
            }
            recipient = recipient[key1];
            if (split.length > 0) {
              key1 = getkey(split.shift());
              key2 = getkey(split[0]);
            }
          }
          recipient[key1] = unflatten(target[key], opts);
        });
        return result;
      }
    }
  });

  // node_modules/color-name/index.js
  var require_color_name = __commonJS({
    "node_modules/color-name/index.js"(exports, module) {
      "use strict";
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/simple-swizzle/node_modules/is-arrayish/index.js
  var require_is_arrayish = __commonJS({
    "node_modules/simple-swizzle/node_modules/is-arrayish/index.js"(exports, module) {
      module.exports = function isArrayish(obj) {
        if (!obj || typeof obj === "string") {
          return false;
        }
        return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
      };
    }
  });

  // node_modules/simple-swizzle/index.js
  var require_simple_swizzle = __commonJS({
    "node_modules/simple-swizzle/index.js"(exports, module) {
      "use strict";
      var isArrayish = require_is_arrayish();
      var concat = Array.prototype.concat;
      var slice = Array.prototype.slice;
      var swizzle = module.exports = function swizzle2(args) {
        var results = [];
        for (var i = 0, len = args.length; i < len; i++) {
          var arg = args[i];
          if (isArrayish(arg)) {
            results = concat.call(results, slice.call(arg));
          } else {
            results.push(arg);
          }
        }
        return results;
      };
      swizzle.wrap = function(fn) {
        return function() {
          return fn(swizzle(arguments));
        };
      };
    }
  });

  // node_modules/color-string/index.js
  var require_color_string = __commonJS({
    "node_modules/color-string/index.js"(exports, module) {
      var colorNames = require_color_name();
      var swizzle = require_simple_swizzle();
      var hasOwnProperty = Object.hasOwnProperty;
      var reverseNames = /* @__PURE__ */ Object.create(null);
      for (name in colorNames) {
        if (hasOwnProperty.call(colorNames, name)) {
          reverseNames[colorNames[name]] = name;
        }
      }
      var name;
      var cs = module.exports = {
        to: {},
        get: {}
      };
      cs.get = function(string) {
        var prefix = string.substring(0, 3).toLowerCase();
        var val;
        var model;
        switch (prefix) {
          case "hsl":
            val = cs.get.hsl(string);
            model = "hsl";
            break;
          case "hwb":
            val = cs.get.hwb(string);
            model = "hwb";
            break;
          default:
            val = cs.get.rgb(string);
            model = "rgb";
            break;
        }
        if (!val) {
          return null;
        }
        return { model, value: val };
      };
      cs.get.rgb = function(string) {
        if (!string) {
          return null;
        }
        var abbr = /^#([a-f0-9]{3,4})$/i;
        var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
        var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
        var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
        var keyword = /^(\w+)$/;
        var rgb = [0, 0, 0, 1];
        var match;
        var i;
        var hexAlpha;
        if (match = string.match(hex)) {
          hexAlpha = match[2];
          match = match[1];
          for (i = 0; i < 3; i++) {
            var i2 = i * 2;
            rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
          }
          if (hexAlpha) {
            rgb[3] = parseInt(hexAlpha, 16) / 255;
          }
        } else if (match = string.match(abbr)) {
          match = match[1];
          hexAlpha = match[3];
          for (i = 0; i < 3; i++) {
            rgb[i] = parseInt(match[i] + match[i], 16);
          }
          if (hexAlpha) {
            rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
          }
        } else if (match = string.match(rgba)) {
          for (i = 0; i < 3; i++) {
            rgb[i] = parseInt(match[i + 1], 0);
          }
          if (match[4]) {
            if (match[5]) {
              rgb[3] = parseFloat(match[4]) * 0.01;
            } else {
              rgb[3] = parseFloat(match[4]);
            }
          }
        } else if (match = string.match(per)) {
          for (i = 0; i < 3; i++) {
            rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
          }
          if (match[4]) {
            if (match[5]) {
              rgb[3] = parseFloat(match[4]) * 0.01;
            } else {
              rgb[3] = parseFloat(match[4]);
            }
          }
        } else if (match = string.match(keyword)) {
          if (match[1] === "transparent") {
            return [0, 0, 0, 0];
          }
          if (!hasOwnProperty.call(colorNames, match[1])) {
            return null;
          }
          rgb = colorNames[match[1]];
          rgb[3] = 1;
          return rgb;
        } else {
          return null;
        }
        for (i = 0; i < 3; i++) {
          rgb[i] = clamp(rgb[i], 0, 255);
        }
        rgb[3] = clamp(rgb[3], 0, 1);
        return rgb;
      };
      cs.get.hsl = function(string) {
        if (!string) {
          return null;
        }
        var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
        var match = string.match(hsl);
        if (match) {
          var alpha = parseFloat(match[4]);
          var h = (parseFloat(match[1]) % 360 + 360) % 360;
          var s = clamp(parseFloat(match[2]), 0, 100);
          var l = clamp(parseFloat(match[3]), 0, 100);
          var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, s, l, a];
        }
        return null;
      };
      cs.get.hwb = function(string) {
        if (!string) {
          return null;
        }
        var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
        var match = string.match(hwb);
        if (match) {
          var alpha = parseFloat(match[4]);
          var h = (parseFloat(match[1]) % 360 + 360) % 360;
          var w = clamp(parseFloat(match[2]), 0, 100);
          var b = clamp(parseFloat(match[3]), 0, 100);
          var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, w, b, a];
        }
        return null;
      };
      cs.to.hex = function() {
        var rgba = swizzle(arguments);
        return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
      };
      cs.to.rgb = function() {
        var rgba = swizzle(arguments);
        return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
      };
      cs.to.rgb.percent = function() {
        var rgba = swizzle(arguments);
        var r = Math.round(rgba[0] / 255 * 100);
        var g = Math.round(rgba[1] / 255 * 100);
        var b = Math.round(rgba[2] / 255 * 100);
        return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
      };
      cs.to.hsl = function() {
        var hsla = swizzle(arguments);
        return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
      };
      cs.to.hwb = function() {
        var hwba = swizzle(arguments);
        var a = "";
        if (hwba.length >= 4 && hwba[3] !== 1) {
          a = ", " + hwba[3];
        }
        return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
      };
      cs.to.keyword = function(rgb) {
        return reverseNames[rgb.slice(0, 3)];
      };
      function clamp(num, min, max) {
        return Math.min(Math.max(min, num), max);
      }
      function hexDouble(num) {
        var str = Math.round(num).toString(16).toUpperCase();
        return str.length < 2 ? "0" + str : str;
      }
    }
  });

  // node_modules/color/node_modules/color-name/index.js
  var require_color_name2 = __commonJS({
    "node_modules/color/node_modules/color-name/index.js"(exports, module) {
      "use strict";
      module.exports = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
    }
  });

  // node_modules/color/node_modules/color-convert/conversions.js
  var require_conversions = __commonJS({
    "node_modules/color/node_modules/color-convert/conversions.js"(exports, module) {
      var cssKeywords = require_color_name2();
      var reverseKeywords = {};
      for (const key of Object.keys(cssKeywords)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
      var convert = {
        rgb: { channels: 3, labels: "rgb" },
        hsl: { channels: 3, labels: "hsl" },
        hsv: { channels: 3, labels: "hsv" },
        hwb: { channels: 3, labels: "hwb" },
        cmyk: { channels: 4, labels: "cmyk" },
        xyz: { channels: 3, labels: "xyz" },
        lab: { channels: 3, labels: "lab" },
        lch: { channels: 3, labels: "lch" },
        hex: { channels: 1, labels: ["hex"] },
        keyword: { channels: 1, labels: ["keyword"] },
        ansi16: { channels: 1, labels: ["ansi16"] },
        ansi256: { channels: 1, labels: ["ansi256"] },
        hcg: { channels: 3, labels: ["h", "c", "g"] },
        apple: { channels: 3, labels: ["r16", "g16", "b16"] },
        gray: { channels: 1, labels: ["gray"] }
      };
      module.exports = convert;
      for (const model of Object.keys(convert)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        const { channels, labels } = convert[model];
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
      convert.rgb.hsl = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const min = Math.min(r, g, b);
        const max = Math.max(r, g, b);
        const delta = max - min;
        let h;
        let s;
        if (max === min) {
          h = 0;
        } else if (r === max) {
          h = (g - b) / delta;
        } else if (g === max) {
          h = 2 + (b - r) / delta;
        } else if (b === max) {
          h = 4 + (r - g) / delta;
        }
        h = Math.min(h * 60, 360);
        if (h < 0) {
          h += 360;
        }
        const l = (min + max) / 2;
        if (max === min) {
          s = 0;
        } else if (l <= 0.5) {
          s = delta / (max + min);
        } else {
          s = delta / (2 - max - min);
        }
        return [h, s * 100, l * 100];
      };
      convert.rgb.hsv = function(rgb) {
        let rdif;
        let gdif;
        let bdif;
        let h;
        let s;
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const v = Math.max(r, g, b);
        const diff = v - Math.min(r, g, b);
        const diffc = function(c) {
          return (v - c) / 6 / diff + 1 / 2;
        };
        if (diff === 0) {
          h = 0;
          s = 0;
        } else {
          s = diff / v;
          rdif = diffc(r);
          gdif = diffc(g);
          bdif = diffc(b);
          if (r === v) {
            h = bdif - gdif;
          } else if (g === v) {
            h = 1 / 3 + rdif - bdif;
          } else if (b === v) {
            h = 2 / 3 + gdif - rdif;
          }
          if (h < 0) {
            h += 1;
          } else if (h > 1) {
            h -= 1;
          }
        }
        return [
          h * 360,
          s * 100,
          v * 100
        ];
      };
      convert.rgb.hwb = function(rgb) {
        const r = rgb[0];
        const g = rgb[1];
        let b = rgb[2];
        const h = convert.rgb.hsl(rgb)[0];
        const w = 1 / 255 * Math.min(r, Math.min(g, b));
        b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
        return [h, w * 100, b * 100];
      };
      convert.rgb.cmyk = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const k = Math.min(1 - r, 1 - g, 1 - b);
        const c = (1 - r - k) / (1 - k) || 0;
        const m = (1 - g - k) / (1 - k) || 0;
        const y = (1 - b - k) / (1 - k) || 0;
        return [c * 100, m * 100, y * 100, k * 100];
      };
      function comparativeDistance(x, y) {
        return __pow(x[0] - y[0], 2) + __pow(x[1] - y[1], 2) + __pow(x[2] - y[2], 2);
      }
      convert.rgb.keyword = function(rgb) {
        const reversed = reverseKeywords[rgb];
        if (reversed) {
          return reversed;
        }
        let currentClosestDistance = Infinity;
        let currentClosestKeyword;
        for (const keyword of Object.keys(cssKeywords)) {
          const value = cssKeywords[keyword];
          const distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
        return currentClosestKeyword;
      };
      convert.keyword.rgb = function(keyword) {
        return cssKeywords[keyword];
      };
      convert.rgb.xyz = function(rgb) {
        let r = rgb[0] / 255;
        let g = rgb[1] / 255;
        let b = rgb[2] / 255;
        r = r > 0.04045 ? __pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
        g = g > 0.04045 ? __pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
        b = b > 0.04045 ? __pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
        const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
        const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
        const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
        return [x * 100, y * 100, z * 100];
      };
      convert.rgb.lab = function(rgb) {
        const xyz = convert.rgb.xyz(rgb);
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? __pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? __pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? __pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.hsl.rgb = function(hsl) {
        const h = hsl[0] / 360;
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        let t2;
        let t3;
        let val;
        if (s === 0) {
          val = l * 255;
          return [val, val, val];
        }
        if (l < 0.5) {
          t2 = l * (1 + s);
        } else {
          t2 = l + s - l * s;
        }
        const t1 = 2 * l - t2;
        const rgb = [0, 0, 0];
        for (let i = 0; i < 3; i++) {
          t3 = h + 1 / 3 * -(i - 1);
          if (t3 < 0) {
            t3++;
          }
          if (t3 > 1) {
            t3--;
          }
          if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
          } else if (2 * t3 < 1) {
            val = t2;
          } else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
          } else {
            val = t1;
          }
          rgb[i] = val * 255;
        }
        return rgb;
      };
      convert.hsl.hsv = function(hsl) {
        const h = hsl[0];
        let s = hsl[1] / 100;
        let l = hsl[2] / 100;
        let smin = s;
        const lmin = Math.max(l, 0.01);
        l *= 2;
        s *= l <= 1 ? l : 2 - l;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        const v = (l + s) / 2;
        const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
        return [h, sv * 100, v * 100];
      };
      convert.hsv.rgb = function(hsv) {
        const h = hsv[0] / 60;
        const s = hsv[1] / 100;
        let v = hsv[2] / 100;
        const hi = Math.floor(h) % 6;
        const f = h - Math.floor(h);
        const p = 255 * v * (1 - s);
        const q = 255 * v * (1 - s * f);
        const t = 255 * v * (1 - s * (1 - f));
        v *= 255;
        switch (hi) {
          case 0:
            return [v, t, p];
          case 1:
            return [q, v, p];
          case 2:
            return [p, v, t];
          case 3:
            return [p, q, v];
          case 4:
            return [t, p, v];
          case 5:
            return [v, p, q];
        }
      };
      convert.hsv.hsl = function(hsv) {
        const h = hsv[0];
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const vmin = Math.max(v, 0.01);
        let sl;
        let l;
        l = (2 - s) * v;
        const lmin = (2 - s) * vmin;
        sl = s * vmin;
        sl /= lmin <= 1 ? lmin : 2 - lmin;
        sl = sl || 0;
        l /= 2;
        return [h, sl * 100, l * 100];
      };
      convert.hwb.rgb = function(hwb) {
        const h = hwb[0] / 360;
        let wh = hwb[1] / 100;
        let bl = hwb[2] / 100;
        const ratio = wh + bl;
        let f;
        if (ratio > 1) {
          wh /= ratio;
          bl /= ratio;
        }
        const i = Math.floor(6 * h);
        const v = 1 - bl;
        f = 6 * h - i;
        if ((i & 1) !== 0) {
          f = 1 - f;
        }
        const n = wh + f * (v - wh);
        let r;
        let g;
        let b;
        switch (i) {
          default:
          case 6:
          case 0:
            r = v;
            g = n;
            b = wh;
            break;
          case 1:
            r = n;
            g = v;
            b = wh;
            break;
          case 2:
            r = wh;
            g = v;
            b = n;
            break;
          case 3:
            r = wh;
            g = n;
            b = v;
            break;
          case 4:
            r = n;
            g = wh;
            b = v;
            break;
          case 5:
            r = v;
            g = wh;
            b = n;
            break;
        }
        return [r * 255, g * 255, b * 255];
      };
      convert.cmyk.rgb = function(cmyk) {
        const c = cmyk[0] / 100;
        const m = cmyk[1] / 100;
        const y = cmyk[2] / 100;
        const k = cmyk[3] / 100;
        const r = 1 - Math.min(1, c * (1 - k) + k);
        const g = 1 - Math.min(1, m * (1 - k) + k);
        const b = 1 - Math.min(1, y * (1 - k) + k);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.rgb = function(xyz) {
        const x = xyz[0] / 100;
        const y = xyz[1] / 100;
        const z = xyz[2] / 100;
        let r;
        let g;
        let b;
        r = x * 3.2406 + y * -1.5372 + z * -0.4986;
        g = x * -0.9689 + y * 1.8758 + z * 0.0415;
        b = x * 0.0557 + y * -0.204 + z * 1.057;
        r = r > 31308e-7 ? 1.055 * __pow(r, 1 / 2.4) - 0.055 : r * 12.92;
        g = g > 31308e-7 ? 1.055 * __pow(g, 1 / 2.4) - 0.055 : g * 12.92;
        b = b > 31308e-7 ? 1.055 * __pow(b, 1 / 2.4) - 0.055 : b * 12.92;
        r = Math.min(Math.max(0, r), 1);
        g = Math.min(Math.max(0, g), 1);
        b = Math.min(Math.max(0, b), 1);
        return [r * 255, g * 255, b * 255];
      };
      convert.xyz.lab = function(xyz) {
        let x = xyz[0];
        let y = xyz[1];
        let z = xyz[2];
        x /= 95.047;
        y /= 100;
        z /= 108.883;
        x = x > 8856e-6 ? __pow(x, 1 / 3) : 7.787 * x + 16 / 116;
        y = y > 8856e-6 ? __pow(y, 1 / 3) : 7.787 * y + 16 / 116;
        z = z > 8856e-6 ? __pow(z, 1 / 3) : 7.787 * z + 16 / 116;
        const l = 116 * y - 16;
        const a = 500 * (x - y);
        const b = 200 * (y - z);
        return [l, a, b];
      };
      convert.lab.xyz = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let x;
        let y;
        let z;
        y = (l + 16) / 116;
        x = a / 500 + y;
        z = y - b / 200;
        const y2 = __pow(y, 3);
        const x2 = __pow(x, 3);
        const z2 = __pow(z, 3);
        y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
        x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
        z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
        x *= 95.047;
        y *= 100;
        z *= 108.883;
        return [x, y, z];
      };
      convert.lab.lch = function(lab) {
        const l = lab[0];
        const a = lab[1];
        const b = lab[2];
        let h;
        const hr = Math.atan2(b, a);
        h = hr * 360 / 2 / Math.PI;
        if (h < 0) {
          h += 360;
        }
        const c = Math.sqrt(a * a + b * b);
        return [l, c, h];
      };
      convert.lch.lab = function(lch) {
        const l = lch[0];
        const c = lch[1];
        const h = lch[2];
        const hr = h / 360 * 2 * Math.PI;
        const a = c * Math.cos(hr);
        const b = c * Math.sin(hr);
        return [l, a, b];
      };
      convert.rgb.ansi16 = function(args, saturation = null) {
        const [r, g, b] = args;
        let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
        value = Math.round(value / 50);
        if (value === 0) {
          return 30;
        }
        let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
        if (value === 2) {
          ansi += 60;
        }
        return ansi;
      };
      convert.hsv.ansi16 = function(args) {
        return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
      };
      convert.rgb.ansi256 = function(args) {
        const r = args[0];
        const g = args[1];
        const b = args[2];
        if (r === g && g === b) {
          if (r < 8) {
            return 16;
          }
          if (r > 248) {
            return 231;
          }
          return Math.round((r - 8) / 247 * 24) + 232;
        }
        const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
        return ansi;
      };
      convert.ansi16.rgb = function(args) {
        let color = args % 10;
        if (color === 0 || color === 7) {
          if (args > 50) {
            color += 3.5;
          }
          color = color / 10.5 * 255;
          return [color, color, color];
        }
        const mult = (~~(args > 50) + 1) * 0.5;
        const r = (color & 1) * mult * 255;
        const g = (color >> 1 & 1) * mult * 255;
        const b = (color >> 2 & 1) * mult * 255;
        return [r, g, b];
      };
      convert.ansi256.rgb = function(args) {
        if (args >= 232) {
          const c = (args - 232) * 10 + 8;
          return [c, c, c];
        }
        args -= 16;
        let rem;
        const r = Math.floor(args / 36) / 5 * 255;
        const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
        const b = rem % 6 / 5 * 255;
        return [r, g, b];
      };
      convert.rgb.hex = function(args) {
        const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.hex.rgb = function(args) {
        const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
        if (!match) {
          return [0, 0, 0];
        }
        let colorString = match[0];
        if (match[0].length === 3) {
          colorString = colorString.split("").map((char) => {
            return char + char;
          }).join("");
        }
        const integer = parseInt(colorString, 16);
        const r = integer >> 16 & 255;
        const g = integer >> 8 & 255;
        const b = integer & 255;
        return [r, g, b];
      };
      convert.rgb.hcg = function(rgb) {
        const r = rgb[0] / 255;
        const g = rgb[1] / 255;
        const b = rgb[2] / 255;
        const max = Math.max(Math.max(r, g), b);
        const min = Math.min(Math.min(r, g), b);
        const chroma = max - min;
        let grayscale;
        let hue;
        if (chroma < 1) {
          grayscale = min / (1 - chroma);
        } else {
          grayscale = 0;
        }
        if (chroma <= 0) {
          hue = 0;
        } else if (max === r) {
          hue = (g - b) / chroma % 6;
        } else if (max === g) {
          hue = 2 + (b - r) / chroma;
        } else {
          hue = 4 + (r - g) / chroma;
        }
        hue /= 6;
        hue %= 1;
        return [hue * 360, chroma * 100, grayscale * 100];
      };
      convert.hsl.hcg = function(hsl) {
        const s = hsl[1] / 100;
        const l = hsl[2] / 100;
        const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
        let f = 0;
        if (c < 1) {
          f = (l - 0.5 * c) / (1 - c);
        }
        return [hsl[0], c * 100, f * 100];
      };
      convert.hsv.hcg = function(hsv) {
        const s = hsv[1] / 100;
        const v = hsv[2] / 100;
        const c = s * v;
        let f = 0;
        if (c < 1) {
          f = (v - c) / (1 - c);
        }
        return [hsv[0], c * 100, f * 100];
      };
      convert.hcg.rgb = function(hcg) {
        const h = hcg[0] / 360;
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        if (c === 0) {
          return [g * 255, g * 255, g * 255];
        }
        const pure = [0, 0, 0];
        const hi = h % 1 * 6;
        const v = hi % 1;
        const w = 1 - v;
        let mg = 0;
        switch (Math.floor(hi)) {
          case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
          case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
          case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
          case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
          case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
          default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
        }
        mg = (1 - c) * g;
        return [
          (c * pure[0] + mg) * 255,
          (c * pure[1] + mg) * 255,
          (c * pure[2] + mg) * 255
        ];
      };
      convert.hcg.hsv = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        let f = 0;
        if (v > 0) {
          f = c / v;
        }
        return [hcg[0], f * 100, v * 100];
      };
      convert.hcg.hsl = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const l = g * (1 - c) + 0.5 * c;
        let s = 0;
        if (l > 0 && l < 0.5) {
          s = c / (2 * l);
        } else if (l >= 0.5 && l < 1) {
          s = c / (2 * (1 - l));
        }
        return [hcg[0], s * 100, l * 100];
      };
      convert.hcg.hwb = function(hcg) {
        const c = hcg[1] / 100;
        const g = hcg[2] / 100;
        const v = c + g * (1 - c);
        return [hcg[0], (v - c) * 100, (1 - v) * 100];
      };
      convert.hwb.hcg = function(hwb) {
        const w = hwb[1] / 100;
        const b = hwb[2] / 100;
        const v = 1 - b;
        const c = v - w;
        let g = 0;
        if (c < 1) {
          g = (v - c) / (1 - c);
        }
        return [hwb[0], c * 100, g * 100];
      };
      convert.apple.rgb = function(apple) {
        return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
      };
      convert.rgb.apple = function(rgb) {
        return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
      };
      convert.gray.rgb = function(args) {
        return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
      };
      convert.gray.hsl = function(args) {
        return [0, 0, args[0]];
      };
      convert.gray.hsv = convert.gray.hsl;
      convert.gray.hwb = function(gray) {
        return [0, 100, gray[0]];
      };
      convert.gray.cmyk = function(gray) {
        return [0, 0, 0, gray[0]];
      };
      convert.gray.lab = function(gray) {
        return [gray[0], 0, 0];
      };
      convert.gray.hex = function(gray) {
        const val = Math.round(gray[0] / 100 * 255) & 255;
        const integer = (val << 16) + (val << 8) + val;
        const string = integer.toString(16).toUpperCase();
        return "000000".substring(string.length) + string;
      };
      convert.rgb.gray = function(rgb) {
        const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
        return [val / 255 * 100];
      };
    }
  });

  // node_modules/color/node_modules/color-convert/route.js
  var require_route = __commonJS({
    "node_modules/color/node_modules/color-convert/route.js"(exports, module) {
      var conversions = require_conversions();
      function buildGraph() {
        const graph = {};
        const models = Object.keys(conversions);
        for (let len = models.length, i = 0; i < len; i++) {
          graph[models[i]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        const graph = buildGraph();
        const queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          const current = queue.pop();
          const adjacents = Object.keys(conversions[current]);
          for (let len = adjacents.length, i = 0; i < len; i++) {
            const adjacent = adjacents[i];
            const node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        const path = [graph[toModel].parent, toModel];
        let fn = conversions[graph[toModel].parent][toModel];
        let cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      module.exports = function(fromModel) {
        const graph = deriveBFS(fromModel);
        const conversion = {};
        const models = Object.keys(graph);
        for (let len = models.length, i = 0; i < len; i++) {
          const toModel = models[i];
          const node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
    }
  });

  // node_modules/color/node_modules/color-convert/index.js
  var require_color_convert = __commonJS({
    "node_modules/color/node_modules/color-convert/index.js"(exports, module) {
      var conversions = require_conversions();
      var route = require_route();
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        const wrappedFn = function(...args) {
          const arg0 = args[0];
          if (arg0 === void 0 || arg0 === null) {
            return arg0;
          }
          if (arg0.length > 1) {
            args = arg0;
          }
          const result = fn(args);
          if (typeof result === "object") {
            for (let len = result.length, i = 0; i < len; i++) {
              result[i] = Math.round(result[i]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach((fromModel) => {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        const routes = route(fromModel);
        const routeModels = Object.keys(routes);
        routeModels.forEach((toModel) => {
          const fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      module.exports = convert;
    }
  });

  // node_modules/color/index.js
  var require_color = __commonJS({
    "node_modules/color/index.js"(exports, module) {
      var colorString = require_color_string();
      var convert = require_color_convert();
      var skippedModels = [
        // To be honest, I don't really feel like keyword belongs in color convert, but eh.
        "keyword",
        // Gray conflicts with some method names, and has its own method defined.
        "gray",
        // Shouldn't really be in color-convert either...
        "hex"
      ];
      var hashedModelKeys = {};
      for (const model of Object.keys(convert)) {
        hashedModelKeys[[...convert[model].labels].sort().join("")] = model;
      }
      var limiters = {};
      function Color(object, model) {
        if (!(this instanceof Color)) {
          return new Color(object, model);
        }
        if (model && model in skippedModels) {
          model = null;
        }
        if (model && !(model in convert)) {
          throw new Error("Unknown model: " + model);
        }
        let i;
        let channels;
        if (object == null) {
          this.model = "rgb";
          this.color = [0, 0, 0];
          this.valpha = 1;
        } else if (object instanceof Color) {
          this.model = object.model;
          this.color = [...object.color];
          this.valpha = object.valpha;
        } else if (typeof object === "string") {
          const result = colorString.get(object);
          if (result === null) {
            throw new Error("Unable to parse color from string: " + object);
          }
          this.model = result.model;
          channels = convert[this.model].channels;
          this.color = result.value.slice(0, channels);
          this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
        } else if (object.length > 0) {
          this.model = model || "rgb";
          channels = convert[this.model].channels;
          const newArray = Array.prototype.slice.call(object, 0, channels);
          this.color = zeroArray(newArray, channels);
          this.valpha = typeof object[channels] === "number" ? object[channels] : 1;
        } else if (typeof object === "number") {
          this.model = "rgb";
          this.color = [
            object >> 16 & 255,
            object >> 8 & 255,
            object & 255
          ];
          this.valpha = 1;
        } else {
          this.valpha = 1;
          const keys = Object.keys(object);
          if ("alpha" in object) {
            keys.splice(keys.indexOf("alpha"), 1);
            this.valpha = typeof object.alpha === "number" ? object.alpha : 0;
          }
          const hashedKeys = keys.sort().join("");
          if (!(hashedKeys in hashedModelKeys)) {
            throw new Error("Unable to parse color from object: " + JSON.stringify(object));
          }
          this.model = hashedModelKeys[hashedKeys];
          const { labels } = convert[this.model];
          const color = [];
          for (i = 0; i < labels.length; i++) {
            color.push(object[labels[i]]);
          }
          this.color = zeroArray(color);
        }
        if (limiters[this.model]) {
          channels = convert[this.model].channels;
          for (i = 0; i < channels; i++) {
            const limit = limiters[this.model][i];
            if (limit) {
              this.color[i] = limit(this.color[i]);
            }
          }
        }
        this.valpha = Math.max(0, Math.min(1, this.valpha));
        if (Object.freeze) {
          Object.freeze(this);
        }
      }
      Color.prototype = {
        toString() {
          return this.string();
        },
        toJSON() {
          return this[this.model]();
        },
        string(places) {
          let self2 = this.model in colorString.to ? this : this.rgb();
          self2 = self2.round(typeof places === "number" ? places : 1);
          const args = self2.valpha === 1 ? self2.color : [...self2.color, this.valpha];
          return colorString.to[self2.model](args);
        },
        percentString(places) {
          const self2 = this.rgb().round(typeof places === "number" ? places : 1);
          const args = self2.valpha === 1 ? self2.color : [...self2.color, this.valpha];
          return colorString.to.rgb.percent(args);
        },
        array() {
          return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
        },
        object() {
          const result = {};
          const { channels } = convert[this.model];
          const { labels } = convert[this.model];
          for (let i = 0; i < channels; i++) {
            result[labels[i]] = this.color[i];
          }
          if (this.valpha !== 1) {
            result.alpha = this.valpha;
          }
          return result;
        },
        unitArray() {
          const rgb = this.rgb().color;
          rgb[0] /= 255;
          rgb[1] /= 255;
          rgb[2] /= 255;
          if (this.valpha !== 1) {
            rgb.push(this.valpha);
          }
          return rgb;
        },
        unitObject() {
          const rgb = this.rgb().object();
          rgb.r /= 255;
          rgb.g /= 255;
          rgb.b /= 255;
          if (this.valpha !== 1) {
            rgb.alpha = this.valpha;
          }
          return rgb;
        },
        round(places) {
          places = Math.max(places || 0, 0);
          return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
        },
        alpha(value) {
          if (value !== void 0) {
            return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
          }
          return this.valpha;
        },
        // Rgb
        red: getset("rgb", 0, maxfn(255)),
        green: getset("rgb", 1, maxfn(255)),
        blue: getset("rgb", 2, maxfn(255)),
        hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, (value) => (value % 360 + 360) % 360),
        saturationl: getset("hsl", 1, maxfn(100)),
        lightness: getset("hsl", 2, maxfn(100)),
        saturationv: getset("hsv", 1, maxfn(100)),
        value: getset("hsv", 2, maxfn(100)),
        chroma: getset("hcg", 1, maxfn(100)),
        gray: getset("hcg", 2, maxfn(100)),
        white: getset("hwb", 1, maxfn(100)),
        wblack: getset("hwb", 2, maxfn(100)),
        cyan: getset("cmyk", 0, maxfn(100)),
        magenta: getset("cmyk", 1, maxfn(100)),
        yellow: getset("cmyk", 2, maxfn(100)),
        black: getset("cmyk", 3, maxfn(100)),
        x: getset("xyz", 0, maxfn(95.047)),
        y: getset("xyz", 1, maxfn(100)),
        z: getset("xyz", 2, maxfn(108.833)),
        l: getset("lab", 0, maxfn(100)),
        a: getset("lab", 1),
        b: getset("lab", 2),
        keyword(value) {
          if (value !== void 0) {
            return new Color(value);
          }
          return convert[this.model].keyword(this.color);
        },
        hex(value) {
          if (value !== void 0) {
            return new Color(value);
          }
          return colorString.to.hex(this.rgb().round().color);
        },
        hexa(value) {
          if (value !== void 0) {
            return new Color(value);
          }
          const rgbArray = this.rgb().round().color;
          let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
          if (alphaHex.length === 1) {
            alphaHex = "0" + alphaHex;
          }
          return colorString.to.hex(rgbArray) + alphaHex;
        },
        rgbNumber() {
          const rgb = this.rgb().color;
          return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
        },
        luminosity() {
          const rgb = this.rgb().color;
          const lum = [];
          for (const [i, element] of rgb.entries()) {
            const chan = element / 255;
            lum[i] = chan <= 0.04045 ? chan / 12.92 : __pow((chan + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
        },
        contrast(color2) {
          const lum1 = this.luminosity();
          const lum2 = color2.luminosity();
          if (lum1 > lum2) {
            return (lum1 + 0.05) / (lum2 + 0.05);
          }
          return (lum2 + 0.05) / (lum1 + 0.05);
        },
        level(color2) {
          const contrastRatio = this.contrast(color2);
          if (contrastRatio >= 7) {
            return "AAA";
          }
          return contrastRatio >= 4.5 ? "AA" : "";
        },
        isDark() {
          const rgb = this.rgb().color;
          const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 1e4;
          return yiq < 128;
        },
        isLight() {
          return !this.isDark();
        },
        negate() {
          const rgb = this.rgb();
          for (let i = 0; i < 3; i++) {
            rgb.color[i] = 255 - rgb.color[i];
          }
          return rgb;
        },
        lighten(ratio) {
          const hsl = this.hsl();
          hsl.color[2] += hsl.color[2] * ratio;
          return hsl;
        },
        darken(ratio) {
          const hsl = this.hsl();
          hsl.color[2] -= hsl.color[2] * ratio;
          return hsl;
        },
        saturate(ratio) {
          const hsl = this.hsl();
          hsl.color[1] += hsl.color[1] * ratio;
          return hsl;
        },
        desaturate(ratio) {
          const hsl = this.hsl();
          hsl.color[1] -= hsl.color[1] * ratio;
          return hsl;
        },
        whiten(ratio) {
          const hwb = this.hwb();
          hwb.color[1] += hwb.color[1] * ratio;
          return hwb;
        },
        blacken(ratio) {
          const hwb = this.hwb();
          hwb.color[2] += hwb.color[2] * ratio;
          return hwb;
        },
        grayscale() {
          const rgb = this.rgb().color;
          const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
          return Color.rgb(value, value, value);
        },
        fade(ratio) {
          return this.alpha(this.valpha - this.valpha * ratio);
        },
        opaquer(ratio) {
          return this.alpha(this.valpha + this.valpha * ratio);
        },
        rotate(degrees) {
          const hsl = this.hsl();
          let hue = hsl.color[0];
          hue = (hue + degrees) % 360;
          hue = hue < 0 ? 360 + hue : hue;
          hsl.color[0] = hue;
          return hsl;
        },
        mix(mixinColor, weight) {
          if (!mixinColor || !mixinColor.rgb) {
            throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
          }
          const color1 = mixinColor.rgb();
          const color2 = this.rgb();
          const p = weight === void 0 ? 0.5 : weight;
          const w = 2 * p - 1;
          const a = color1.alpha() - color2.alpha();
          const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
          const w2 = 1 - w1;
          return Color.rgb(
            w1 * color1.red() + w2 * color2.red(),
            w1 * color1.green() + w2 * color2.green(),
            w1 * color1.blue() + w2 * color2.blue(),
            color1.alpha() * p + color2.alpha() * (1 - p)
          );
        }
      };
      for (const model of Object.keys(convert)) {
        if (skippedModels.includes(model)) {
          continue;
        }
        const { channels } = convert[model];
        Color.prototype[model] = function(...args) {
          if (this.model === model) {
            return new Color(this);
          }
          if (args.length > 0) {
            return new Color(args, model);
          }
          return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
        };
        Color[model] = function(...args) {
          let color = args[0];
          if (typeof color === "number") {
            color = zeroArray(args, channels);
          }
          return new Color(color, model);
        };
      }
      function roundTo(number, places) {
        return Number(number.toFixed(places));
      }
      function roundToPlace(places) {
        return function(number) {
          return roundTo(number, places);
        };
      }
      function getset(model, channel, modifier) {
        model = Array.isArray(model) ? model : [model];
        for (const m of model) {
          (limiters[m] || (limiters[m] = []))[channel] = modifier;
        }
        model = model[0];
        return function(value) {
          let result;
          if (value !== void 0) {
            if (modifier) {
              value = modifier(value);
            }
            result = this[model]();
            result.color[channel] = value;
            return result;
          }
          result = this[model]().color[channel];
          if (modifier) {
            result = modifier(result);
          }
          return result;
        };
      }
      function maxfn(max) {
        return function(v) {
          return Math.max(0, Math.min(max, v));
        };
      }
      function assertArray(value) {
        return Array.isArray(value) ? value : [value];
      }
      function zeroArray(array, length) {
        for (let i = 0; i < length; i++) {
          if (typeof array[i] !== "number") {
            array[i] = 0;
          }
        }
        return array;
      }
      module.exports = Color;
    }
  });

  // node_modules/tailwindcss/lib/util/createPlugin.js
  var require_createPlugin = __commonJS({
    "node_modules/tailwindcss/lib/util/createPlugin.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _default;
        }
      });
      function createPlugin(plugin, config) {
        return {
          handler: plugin,
          config
        };
      }
      createPlugin.withOptions = function(pluginFunction, configFunction = () => ({})) {
        const optionsFunction = function(options) {
          return {
            __options: options,
            handler: pluginFunction(options),
            config: configFunction(options)
          };
        };
        optionsFunction.__isOptionsFunction = true;
        optionsFunction.__pluginFunction = pluginFunction;
        optionsFunction.__configFunction = configFunction;
        return optionsFunction;
      };
      var _default = createPlugin;
    }
  });

  // node_modules/tailwindcss/lib/public/create-plugin.js
  var require_create_plugin = __commonJS({
    "node_modules/tailwindcss/lib/public/create-plugin.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _default;
        }
      });
      var _createPlugin = /* @__PURE__ */ _interop_require_default(require_createPlugin());
      function _interop_require_default(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _default = _createPlugin.default;
    }
  });

  // node_modules/tailwindcss/plugin.js
  var require_plugin = __commonJS({
    "node_modules/tailwindcss/plugin.js"(exports, module) {
      var createPlugin = require_create_plugin();
      module.exports = (createPlugin.__esModule ? createPlugin : { default: createPlugin }).default;
    }
  });

  // node_modules/lodash.get/index.js
  var require_lodash = __commonJS({
    "node_modules/lodash.get/index.js"(exports, module) {
      var FUNC_ERROR_TEXT = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var INFINITY = 1 / 0;
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var symbolTag = "[object Symbol]";
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      var reLeadingDot = /^\./;
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reEscapeChar = /\\(\\)?/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {
          }
        }
        return result;
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Symbol2 = root.Symbol;
      var splice = arrayProto.splice;
      var Map2 = getNative(root, "Map");
      var nativeCreate = getNative(Object, "create");
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function Hash(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        if (index3 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index3 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index3, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        return index3 < 0 ? void 0 : data[index3][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        if (index3 < 0) {
          data.push([key, value]);
        } else {
          data[index3][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseGet(object, path) {
        path = isKey(path, object) ? [path] : castPath(path);
        var index3 = 0, length = path.length;
        while (object != null && index3 < length) {
          object = object[toKey(path[index3++])];
        }
        return index3 && index3 == length ? object : void 0;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function castPath(value) {
        return isArray(value) ? value : stringToPath(value);
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var stringToPath = memoize(function(string) {
        string = toString(string);
        var result = [];
        if (reLeadingDot.test(string)) {
          result.push("");
        }
        string.replace(rePropName, function(match, number, quote, string2) {
          result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
        });
        return result;
      });
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result);
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var isArray = Array.isArray;
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      function get(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path);
        return result === void 0 ? defaultValue : result;
      }
      module.exports = get;
    }
  });

  // node_modules/lodash.omit/index.js
  var require_lodash2 = __commonJS({
    "node_modules/lodash.omit/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var INFINITY = 1 / 0;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var symbolTag = "[object Symbol]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayIncludes(array, value) {
        var length = array ? array.length : 0;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index3 = -1, length = array ? array.length : 0;
        while (++index3 < length) {
          if (comparator(value, array[index3])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index3 = -1, length = array ? array.length : 0, result = Array(length);
        while (++index3 < length) {
          result[index3] = iteratee(array[index3], index3, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index3 = -1, length = values.length, offset = array.length;
        while (++index3 < length) {
          array[offset + index3] = values[index3];
        }
        return array;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index3 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index3-- : ++index3 < length) {
          if (predicate(array[index3], index3, array)) {
            return index3;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        if (value !== value) {
          return baseFindIndex(array, baseIsNaN, fromIndex);
        }
        var index3 = fromIndex - 1, length = array.length;
        while (++index3 < length) {
          if (array[index3] === value) {
            return index3;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseTimes(n, iteratee) {
        var index3 = -1, result = Array(n);
        while (++index3 < n) {
          result[index3] = iteratee(index3);
        }
        return result;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {
          }
        }
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Symbol2 = root.Symbol;
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var splice = arrayProto.splice;
      var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var nativeMax = Math.max;
      var Map2 = getNative(root, "Map");
      var nativeCreate = getNative(Object, "create");
      function Hash(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        if (index3 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index3 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index3, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        return index3 < 0 ? void 0 : data[index3][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        if (index3 < 0) {
          data.push([key, value]);
        } else {
          data[index3][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index3 = -1, length = values ? values.length : 0;
        this.__data__ = new MapCache();
        while (++index3 < length) {
          this.add(values[index3]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function arrayLikeKeys(value, inherited) {
        var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
        var length = result.length, skipIndexes = !!length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseDifference(array, values, iteratee, comparator) {
        var index3 = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer:
          while (++index3 < length) {
            var value = array[index3], computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            } else if (!includes(values, computed, comparator)) {
              result.push(value);
            }
          }
        return result;
      }
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index3 = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index3 < length) {
          var value = array[index3];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      function basePick(object, props) {
        object = Object(object);
        return basePickBy(object, props, function(value, key) {
          return key in object;
        });
      }
      function basePickBy(object, props, predicate) {
        var index3 = -1, length = props.length, result = {};
        while (++index3 < length) {
          var key = props[index3], value = object[key];
          if (predicate(value, key)) {
            result[key] = value;
          }
        }
        return result;
      }
      function baseRest(func, start) {
        start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index3 = -1, length = nativeMax(args.length - start, 0), array = Array(length);
          while (++index3 < length) {
            array[index3] = args[start + index3];
          }
          index3 = -1;
          var otherArgs = Array(start + 1);
          while (++index3 < start) {
            otherArgs[index3] = args[index3];
          }
          otherArgs[start] = array;
          return apply(func, this, otherArgs);
        };
      }
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function isArguments(value) {
        return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
      }
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      var omit = baseRest(function(object, props) {
        if (object == null) {
          return {};
        }
        props = arrayMap(baseFlatten(props, 1), toKey);
        return basePick(object, baseDifference(getAllKeysIn(object), props));
      });
      function stubArray() {
        return [];
      }
      module.exports = omit;
    }
  });

  // node_modules/lodash.foreach/index.js
  var require_lodash3 = __commonJS({
    "node_modules/lodash.foreach/index.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function arrayEach(array, iteratee) {
        var index3 = -1, length = array ? array.length : 0;
        while (++index3 < length) {
          if (iteratee(array[index3], index3, array) === false) {
            break;
          }
        }
        return array;
      }
      function baseTimes(n, iteratee) {
        var index3 = -1, result = Array(n);
        while (++index3 < n) {
          result[index3] = iteratee(index3);
        }
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      var objectProto = Object.prototype;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeKeys = overArg(Object.keys, Object);
      function arrayLikeKeys(value, inherited) {
        var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
        var length = result.length, skipIndexes = !!length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      var baseEach = createBaseEach(baseForOwn);
      var baseFor = createBaseFor();
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length, index3 = fromRight ? length : -1, iterable = Object(collection);
          while (fromRight ? index3-- : ++index3 < length) {
            if (iteratee(iterable[index3], index3, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index3 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index3];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, typeof iteratee == "function" ? iteratee : identity);
      }
      function isArguments(value) {
        return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
      }
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      function identity(value) {
        return value;
      }
      module.exports = forEach;
    }
  });

  // node_modules/lodash.mapkeys/index.js
  var require_lodash4 = __commonJS({
    "node_modules/lodash.mapkeys/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var FUNC_ERROR_TEXT = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var UNORDERED_COMPARE_FLAG = 1;
      var PARTIAL_COMPARE_FLAG = 2;
      var INFINITY = 1 / 0;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      var reLeadingDot = /^\./;
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reEscapeChar = /\\(\\)?/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          return freeProcess && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function arraySome(array, predicate) {
        var index3 = -1, length = array ? array.length : 0;
        while (++index3 < length) {
          if (predicate(array[index3], index3, array)) {
            return true;
          }
        }
        return false;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? void 0 : object[key];
        };
      }
      function baseTimes(n, iteratee) {
        var index3 = -1, result = Array(n);
        while (++index3 < n) {
          result[index3] = iteratee(index3);
        }
        return result;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {
          }
        }
        return result;
      }
      function mapToArray(map) {
        var index3 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index3] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function setToArray(set) {
        var index3 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index3] = value;
        });
        return result;
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Symbol2 = root.Symbol;
      var Uint8Array2 = root.Uint8Array;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var splice = arrayProto.splice;
      var nativeKeys = overArg(Object.keys, Object);
      var DataView = getNative(root, "DataView");
      var Map2 = getNative(root, "Map");
      var Promise2 = getNative(root, "Promise");
      var Set2 = getNative(root, "Set");
      var WeakMap2 = getNative(root, "WeakMap");
      var nativeCreate = getNative(Object, "create");
      var dataViewCtorString = toSource(DataView);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function Hash(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        if (index3 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index3 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index3, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        return index3 < 0 ? void 0 : data[index3][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index3 = assocIndexOf(data, key);
        if (index3 < 0) {
          data.push([key, value]);
        } else {
          data[index3][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index3 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index3 < length) {
          var entry = entries[index3];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index3 = -1, length = values ? values.length : 0;
        this.__data__ = new MapCache();
        while (++index3 < length) {
          this.add(values[index3]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        this.__data__ = new ListCache(entries);
      }
      function stackClear() {
        this.__data__ = new ListCache();
      }
      function stackDelete(key) {
        return this.__data__["delete"](key);
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var cache = this.__data__;
        if (cache instanceof ListCache) {
          var pairs = cache.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            return this;
          }
          cache = this.__data__ = new MapCache(pairs);
        }
        cache.set(key, value);
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
        var length = result.length, skipIndexes = !!length;
        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      var baseFor = createBaseFor();
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }
      function baseGet(object, path) {
        path = isKey(path, object) ? [path] : castPath(path);
        var index3 = 0, length = path.length;
        while (object != null && index3 < length) {
          object = object[toKey(path[index3++])];
        }
        return index3 && index3 == length ? object : void 0;
      }
      function baseGetTag(value) {
        return objectToString.call(value);
      }
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }
      function baseIsEqual(value, other, customizer, bitmask, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
      }
      function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
        if (!objIsArr) {
          objTag = getTag(object);
          objTag = objTag == argsTag ? objectTag : objTag;
        }
        if (!othIsArr) {
          othTag = getTag(other);
          othTag = othTag == argsTag ? objectTag : othTag;
        }
        var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
        }
        if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
      }
      function baseIsMatch(object, source, matchData, customizer) {
        var index3 = matchData.length, length = index3, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index3--) {
          var data = matchData[index3];
          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }
        while (++index3 < length) {
          data = matchData[index3];
          var key = data[0], objValue = object[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
      }
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
        };
      }
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function castPath(value) {
        return isArray(value) ? value : stringToPath(value);
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index3 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index3];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var stacked = stack.get(array);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var index3 = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
        stack.set(array, other);
        stack.set(other, array);
        while (++index3 < arrLength) {
          var arrValue = array[index3], othValue = other[index3];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index3, other, array, stack) : customizer(arrValue, othValue, index3, array, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
                return seen.add(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result;
      }
      function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= UNORDERED_COMPARE_FLAG;
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
            stack["delete"](object);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index3 = objLength;
        while (index3--) {
          var key = objProps[index3];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        var stacked = stack.get(object);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index3 < objLength) {
          key = objProps[index3];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result;
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getMatchData(object) {
        var result = keys(object), length = result.length;
        while (length--) {
          var key = result[length], value = object[key];
          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      var getTag = baseGetTag;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      function hasPath(object, path, hasFunc) {
        path = isKey(path, object) ? [path] : castPath(path);
        var result, index3 = -1, length = path.length;
        while (++index3 < length) {
          var key = toKey(path[index3]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result) {
          return result;
        }
        var length = object ? object.length : 0;
        return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
      }
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
        };
      }
      var stringToPath = memoize(function(string) {
        string = toString(string);
        var result = [];
        if (reLeadingDot.test(string)) {
          result.push("");
        }
        string.replace(rePropName, function(match, number, quote, string2) {
          result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
        });
        return result;
      });
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver && typeof resolver != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result);
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function isArguments(value) {
        return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
      }
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      function get(object, path, defaultValue) {
        var result = object == null ? void 0 : baseGet(object, path);
        return result === void 0 ? defaultValue : result;
      }
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = baseIteratee(iteratee, 3);
        baseForOwn(object, function(value, key, object2) {
          result[iteratee(value, key, object2)] = value;
        });
        return result;
      }
      function identity(value) {
        return value;
      }
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      module.exports = mapKeys;
    }
  });

  // node_modules/lodash.kebabcase/index.js
  var require_lodash5 = __commonJS({
    "node_modules/lodash.kebabcase/index.js"(exports, module) {
      var INFINITY = 1 / 0;
      var symbolTag = "[object Symbol]";
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var rsAstralRange = "\\ud800-\\udfff";
      var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
      var rsComboSymbolsRange = "\\u20d0-\\u20f0";
      var rsDingbatRange = "\\u2700-\\u27bf";
      var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
      var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
      var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
      var rsPunctuationRange = "\\u2000-\\u206f";
      var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
      var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
      var rsVarRange = "\\ufe0e\\ufe0f";
      var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]";
      var rsBreak = "[" + rsBreakRange + "]";
      var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
      var rsDigits = "\\d+";
      var rsDingbat = "[" + rsDingbatRange + "]";
      var rsLower = "[" + rsLowerRange + "]";
      var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
      var rsFitz = "\\ud83c[\\udffb-\\udfff]";
      var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
      var rsNonAstral = "[^" + rsAstralRange + "]";
      var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
      var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
      var rsUpper = "[" + rsUpperRange + "]";
      var rsZWJ = "\\u200d";
      var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")";
      var rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")";
      var rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
      var rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
      var reOptMod = rsModifier + "?";
      var rsOptVar = "[" + rsVarRange + "]?";
      var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
      var rsSeq = rsOptVar + reOptMod + rsOptJoin;
      var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [rsBreak, rsUpper + rsLowerMisc, "$"].join("|") + ")",
        rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
        rsUpper + "+" + rsOptUpperContr,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\xC7": "C",
        "\xE7": "c",
        "\xD0": "D",
        "\xF0": "d",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\xD1": "N",
        "\xF1": "n",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\xDD": "Y",
        "\xFD": "y",
        "\xFF": "y",
        "\xC6": "Ae",
        "\xE6": "ae",
        "\xDE": "Th",
        "\xFE": "th",
        "\xDF": "ss",
        // Latin Extended-A block.
        "\u0100": "A",
        "\u0102": "A",
        "\u0104": "A",
        "\u0101": "a",
        "\u0103": "a",
        "\u0105": "a",
        "\u0106": "C",
        "\u0108": "C",
        "\u010A": "C",
        "\u010C": "C",
        "\u0107": "c",
        "\u0109": "c",
        "\u010B": "c",
        "\u010D": "c",
        "\u010E": "D",
        "\u0110": "D",
        "\u010F": "d",
        "\u0111": "d",
        "\u0112": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\u0118": "E",
        "\u011A": "E",
        "\u0113": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\u0119": "e",
        "\u011B": "e",
        "\u011C": "G",
        "\u011E": "G",
        "\u0120": "G",
        "\u0122": "G",
        "\u011D": "g",
        "\u011F": "g",
        "\u0121": "g",
        "\u0123": "g",
        "\u0124": "H",
        "\u0126": "H",
        "\u0125": "h",
        "\u0127": "h",
        "\u0128": "I",
        "\u012A": "I",
        "\u012C": "I",
        "\u012E": "I",
        "\u0130": "I",
        "\u0129": "i",
        "\u012B": "i",
        "\u012D": "i",
        "\u012F": "i",
        "\u0131": "i",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u0138": "k",
        "\u0139": "L",
        "\u013B": "L",
        "\u013D": "L",
        "\u013F": "L",
        "\u0141": "L",
        "\u013A": "l",
        "\u013C": "l",
        "\u013E": "l",
        "\u0140": "l",
        "\u0142": "l",
        "\u0143": "N",
        "\u0145": "N",
        "\u0147": "N",
        "\u014A": "N",
        "\u0144": "n",
        "\u0146": "n",
        "\u0148": "n",
        "\u014B": "n",
        "\u014C": "O",
        "\u014E": "O",
        "\u0150": "O",
        "\u014D": "o",
        "\u014F": "o",
        "\u0151": "o",
        "\u0154": "R",
        "\u0156": "R",
        "\u0158": "R",
        "\u0155": "r",
        "\u0157": "r",
        "\u0159": "r",
        "\u015A": "S",
        "\u015C": "S",
        "\u015E": "S",
        "\u0160": "S",
        "\u015B": "s",
        "\u015D": "s",
        "\u015F": "s",
        "\u0161": "s",
        "\u0162": "T",
        "\u0164": "T",
        "\u0166": "T",
        "\u0163": "t",
        "\u0165": "t",
        "\u0167": "t",
        "\u0168": "U",
        "\u016A": "U",
        "\u016C": "U",
        "\u016E": "U",
        "\u0170": "U",
        "\u0172": "U",
        "\u0169": "u",
        "\u016B": "u",
        "\u016D": "u",
        "\u016F": "u",
        "\u0171": "u",
        "\u0173": "u",
        "\u0174": "W",
        "\u0175": "w",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "\u0179": "Z",
        "\u017B": "Z",
        "\u017D": "Z",
        "\u017A": "z",
        "\u017C": "z",
        "\u017E": "z",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0152": "Oe",
        "\u0153": "oe",
        "\u0149": "'n",
        "\u017F": "ss"
      };
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index3 = -1, length = array ? array.length : 0;
        if (initAccum && length) {
          accumulator = array[++index3];
        }
        while (++index3 < length) {
          accumulator = iteratee(accumulator, array[index3], index3, array);
        }
        return accumulator;
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? void 0 : object[key];
        };
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var Symbol2 = root.Symbol;
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
        };
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toString(value) {
        return value == null ? "" : baseToString(value);
      }
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
      }
      var kebabCase = createCompounder(function(result, word, index3) {
        return result + (index3 ? "-" : "") + word.toLowerCase();
      });
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? void 0 : pattern;
        if (pattern === void 0) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }
      module.exports = kebabCase;
    }
  });

  // node_modules/deepmerge/dist/cjs.js
  var require_cjs = __commonJS({
    "node_modules/deepmerge/dist/cjs.js"(exports, module) {
      "use strict";
      var isMergeableObject = function isMergeableObject2(value) {
        return isNonNullObject(value) && !isSpecial(value);
      };
      function isNonNullObject(value) {
        return !!value && typeof value === "object";
      }
      function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
      }
      var canUseSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
      function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE;
      }
      function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
      }
      function cloneUnlessOtherwiseSpecified(value, options) {
        return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
      }
      function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function(element) {
          return cloneUnlessOtherwiseSpecified(element, options);
        });
      }
      function getMergeFunction(key, options) {
        if (!options.customMerge) {
          return deepmerge;
        }
        var customMerge = options.customMerge(key);
        return typeof customMerge === "function" ? customMerge : deepmerge;
      }
      function getEnumerableOwnPropertySymbols(target) {
        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
          return Object.propertyIsEnumerable.call(target, symbol);
        }) : [];
      }
      function getKeys(target) {
        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
      }
      function propertyIsOnObject(object, property) {
        try {
          return property in object;
        } catch (_) {
          return false;
        }
      }
      function propertyIsUnsafe(target, key) {
        return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
      }
      function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
          getKeys(target).forEach(function(key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
          });
        }
        getKeys(source).forEach(function(key) {
          if (propertyIsUnsafe(target, key)) {
            return;
          }
          if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
          } else {
            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
          }
        });
        return destination;
      }
      function deepmerge(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;
        options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) {
          return cloneUnlessOtherwiseSpecified(source, options);
        } else if (sourceIsArray) {
          return options.arrayMerge(target, source, options);
        } else {
          return mergeObject(target, source, options);
        }
      }
      deepmerge.all = function deepmergeAll(array, options) {
        if (!Array.isArray(array)) {
          throw new Error("first argument should be an array");
        }
        return array.reduce(function(prev, next) {
          return deepmerge(prev, next, options);
        }, {});
      };
      var deepmerge_1 = deepmerge;
      module.exports = deepmerge_1;
    }
  });

  // node_modules/@nextui-org/theme/dist/index.js
  var require_dist5 = __commonJS({
    "node_modules/@nextui-org/theme/dist/index.js"(exports, module) {
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        absoluteFullClasses: () => absoluteFullClasses,
        accordion: () => accordion,
        accordionItem: () => accordionItem,
        avatar: () => avatar,
        avatarGroup: () => avatarGroup,
        badge: () => badge,
        baseStyles: () => baseStyles,
        button: () => button,
        buttonGroup: () => buttonGroup,
        card: () => card,
        checkbox: () => checkbox,
        checkboxGroup: () => checkboxGroup,
        chip: () => chip,
        circularProgress: () => circularProgress,
        code: () => code,
        colorVariants: () => colorVariants,
        colors: () => colors,
        commonColors: () => commonColors,
        dataFocusVisibleClasses: () => dataFocusVisibleClasses,
        divider: () => divider,
        drip: () => drip,
        dropdown: () => dropdown,
        dropdownItem: () => dropdownItem,
        dropdownMenu: () => dropdownMenu,
        dropdownSection: () => dropdownSection,
        focusVisibleClasses: () => focusVisibleClasses,
        groupDataFocusVisibleClasses: () => groupDataFocusVisibleClasses,
        image: () => image,
        input: () => input,
        kbd: () => kbd,
        link: () => link,
        linkAnchorClasses: () => linkAnchorClasses,
        listbox: () => menu,
        listboxItem: () => menuItem,
        listboxSection: () => menuSection,
        mappedSpacingScaleKeys: () => mappedSpacingScaleKeys,
        menu: () => menu,
        menuItem: () => menuItem,
        menuSection: () => menuSection,
        modal: () => modal,
        navbar: () => navbar,
        nextui: () => nextui,
        pagination: () => pagination,
        popover: () => popover,
        progress: () => progress,
        radio: () => radio,
        radioGroup: () => radioGroup,
        ringClasses: () => ringClasses,
        scrollShadow: () => scrollShadow,
        select: () => select,
        semanticColors: () => semanticColors,
        skeleton: () => skeleton,
        snippet: () => snippet,
        spacer: () => spacer,
        spacingScaleKeys: () => spacingScaleKeys,
        spinner: () => spinner,
        table: () => table,
        tabs: () => tabs,
        toggle: () => toggle,
        translateCenterClasses: () => translateCenterClasses,
        tv: () => tv,
        user: () => user
      });
      module.exports = __toCommonJS2(src_exports);
      var import_tailwind_variants = require_dist2();
      var spacingScaleKeys = [
        "0",
        "xs",
        "sm",
        "md",
        "lg",
        "xl",
        "2xl",
        "3xl",
        "4xl",
        "5xl",
        "6xl",
        "7xl",
        "8xl",
        "9xl",
        "1",
        "2",
        "3",
        "3.5",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "20",
        "24",
        "28",
        "32",
        "36",
        "40",
        "44",
        "48",
        "52",
        "56",
        "60",
        "64",
        "72",
        "80",
        "96"
      ];
      var mappedSpacingScaleKeys = spacingScaleKeys.map((key) => `unit-${key}`);
      var COMMON_UNITS = ["small", "medium", "large"];
      var tv = (options, config) => {
        var _a, _b, _c;
        return (0, import_tailwind_variants.tv)(options, __spreadProps(__spreadValues({}, config), {
          twMerge: (_a = config == null ? void 0 : config.twMerge) != null ? _a : true,
          twMergeConfig: __spreadProps(__spreadValues({}, config == null ? void 0 : config.twMergeConfig), {
            theme: __spreadProps(__spreadValues({}, (_b = config == null ? void 0 : config.twMergeConfig) == null ? void 0 : _b.theme), {
              opacity: ["disabled"],
              spacing: ["divider", "unit", ...mappedSpacingScaleKeys],
              borderWidth: COMMON_UNITS,
              borderRadius: COMMON_UNITS
            }),
            classGroups: __spreadProps(__spreadValues({}, (_c = config == null ? void 0 : config.twMergeConfig) == null ? void 0 : _c.classGroups), {
              shadow: [{ shadow: COMMON_UNITS }],
              "font-size": [{ text: ["tiny", ...COMMON_UNITS] }],
              "bg-image": ["bg-stripe-gradient"],
              "min-w": [
                {
                  "min-w": ["unit", ...mappedSpacingScaleKeys]
                }
              ],
              "min-h": [
                {
                  "min-h": ["unit", ...mappedSpacingScaleKeys]
                }
              ]
            })
          })
        }));
      };
      var baseStyles = (prefix) => ({
        color: `hsl(var(--${prefix}-foreground))`,
        backgroundColor: `hsl(var(--${prefix}-background))`
      });
      var focusVisibleClasses = [
        "focus-visible:z-10",
        "focus-visible:outline-2",
        "focus-visible:outline-focus",
        "focus-visible:outline-offset-2"
      ];
      var dataFocusVisibleClasses = [
        "outline-none",
        "data-[focus-visible=true]:z-10",
        "data-[focus-visible=true]:outline-2",
        "data-[focus-visible=true]:outline-focus",
        "data-[focus-visible=true]:outline-offset-2"
      ];
      var groupDataFocusVisibleClasses = [
        "outline-none",
        "group-data-[focus-visible=true]:z-10",
        "group-data-[focus-visible=true]:ring-2",
        "group-data-[focus-visible=true]:ring-focus",
        "group-data-[focus-visible=true]:ring-offset-2",
        "group-data-[focus-visible=true]:ring-offset-background"
      ];
      var ringClasses = [
        "outline-none",
        "ring-2",
        "ring-focus",
        "ring-offset-2",
        "ring-offset-background"
      ];
      var translateCenterClasses = [
        "absolute",
        "top-1/2",
        "left-1/2",
        "-translate-x-1/2",
        "-translate-y-1/2"
      ];
      var absoluteFullClasses = ["absolute", "inset-0"];
      var solid = {
        default: "bg-default text-default-foreground",
        primary: "bg-primary text-primary-foreground",
        secondary: "bg-secondary text-secondary-foreground",
        success: "bg-success text-success-foreground",
        warning: "bg-warning text-warning-foreground",
        danger: "bg-danger text-danger-foreground",
        foreground: "bg-foreground text-background"
      };
      var shadow = {
        default: "shadow-lg shadow-default/50 bg-default text-default-foreground",
        primary: "shadow-lg shadow-primary/40 bg-primary text-primary-foreground",
        secondary: "shadow-lg shadow-secondary/40 bg-secondary text-secondary-foreground",
        success: "shadow-lg shadow-success/40 bg-success text-success-foreground",
        warning: "shadow-lg shadow-warning/40 bg-warning text-warning-foreground",
        danger: "shadow-lg shadow-danger/40 bg-danger text-danger-foreground",
        foreground: "shadow-lg shadow-foreground/40 bg-foreground text-background"
      };
      var bordered = {
        default: "bg-transparent border-default text-foreground",
        primary: "bg-transparent border-primary text-primary",
        secondary: "bg-transparent border-secondary text-secondary",
        success: "bg-transparent border-success text-success",
        warning: "bg-transparent border-warning text-warning",
        danger: "bg-transparent border-danger text-danger",
        foreground: "bg-transparent border-foreground text-foreground"
      };
      var flat = {
        default: "bg-default/40 text-default-foreground",
        primary: "bg-primary/20 text-primary",
        secondary: "bg-secondary/20 text-secondary",
        success: "bg-success/20 text-success-600 dark:text-success",
        warning: "bg-warning/20 text-warning-600 dark:text-warning",
        danger: "bg-danger/20 text-danger dark:text-danger-500",
        foreground: "bg-foreground/10 text-foreground"
      };
      var faded = {
        default: "border-default bg-default-100 text-default-foreground",
        primary: "border-default bg-default-100 text-primary",
        secondary: "border-default bg-default-100 text-secondary",
        success: "border-default bg-default-100 text-success",
        warning: "border-default bg-default-100 text-warning",
        danger: "border-default bg-default-100 text-danger",
        foreground: "border-default bg-default-100 text-foreground"
      };
      var light = {
        default: "bg-transparent text-default-foreground",
        primary: "bg-transparent text-primary",
        secondary: "bg-transparent text-secondary",
        success: "bg-transparent text-success",
        warning: "bg-transparent text-warning",
        danger: "bg-transparent text-danger",
        foreground: "bg-transparent text-foreground"
      };
      var ghost = {
        default: "border-default text-default-foreground hover:!bg-default",
        primary: "border-primary text-primary hover:!text-primary-foreground hover:!bg-primary",
        secondary: "border-secondary text-secondary hover:text-secondary-foreground hover:!bg-secondary",
        success: "border-success text-success hover:!text-success-foreground hover:!bg-success",
        warning: "border-warning text-warning hover:!text-warning-foreground hover:!bg-warning",
        danger: "border-danger text-danger hover:!text-danger-foreground hover:!bg-danger",
        foreground: "border-foreground text-foreground hover:!bg-foreground"
      };
      var colorVariants = {
        solid,
        shadow,
        bordered,
        flat,
        faded,
        light,
        ghost
      };
      var avatar = tv({
        slots: {
          base: [
            "flex",
            "relative",
            "justify-center",
            "items-center",
            "box-border",
            "overflow-hidden",
            "align-middle",
            "text-white",
            "z-10",
            ...dataFocusVisibleClasses
          ],
          img: [
            "flex",
            "object-cover",
            "w-full",
            "h-full",
            "transition-opacity",
            "!duration-500",
            "opacity-0",
            "data-[loaded=true]:opacity-100"
          ],
          fallback: [...translateCenterClasses, "flex", "items-center", "justify-center"],
          name: [...translateCenterClasses, "font-normal", "text-center", "text-inherit"],
          icon: [
            ...translateCenterClasses,
            "flex",
            "items-center",
            "justify-center",
            "text-inherit",
            "w-full",
            "h-full"
          ]
        },
        variants: {
          size: {
            sm: {
              base: "w-8 h-8 text-tiny"
            },
            md: {
              base: "w-10 h-10 text-tiny"
            },
            lg: {
              base: "w-14 h-14 text-small"
            }
          },
          color: {
            default: {
              base: colorVariants.solid.default
            },
            primary: {
              base: colorVariants.solid.primary
            },
            secondary: {
              base: colorVariants.solid.secondary
            },
            success: {
              base: colorVariants.solid.success
            },
            warning: {
              base: colorVariants.solid.warning
            },
            danger: {
              base: colorVariants.solid.danger
            }
          },
          radius: {
            none: {
              base: "rounded-none"
            },
            sm: {
              base: "rounded-small"
            },
            md: {
              base: "rounded-medium"
            },
            lg: {
              base: "rounded-large"
            },
            full: {
              base: "rounded-full"
            }
          },
          isBordered: {
            true: {
              base: "ring-2 ring-offset-2 ring-offset-background dark:ring-offset-background-dark"
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled"
            }
          },
          isInGroup: {
            true: {
              base: [
                "-ml-2 data-[hover=true]:-translate-x-3 transition-transform",
                "data-[focus-visible=true]:-translate-x-3"
              ]
            }
          },
          isInGridGroup: {
            true: {
              base: "m-0 data-[hover=true]:translate-x-0"
            }
          }
        },
        defaultVariants: {
          size: "md",
          color: "default",
          radius: "full"
        },
        compoundVariants: [
          {
            color: "default",
            isBordered: true,
            class: {
              base: "ring-default"
            }
          },
          {
            color: "primary",
            isBordered: true,
            class: {
              base: "ring-focus"
            }
          },
          {
            color: "secondary",
            isBordered: true,
            class: {
              base: "ring-secondary"
            }
          },
          {
            color: "success",
            isBordered: true,
            class: {
              base: "ring-success"
            }
          },
          {
            color: "warning",
            isBordered: true,
            class: {
              base: "ring-warning"
            }
          },
          {
            color: "danger",
            isBordered: true,
            class: {
              base: "ring-danger"
            }
          }
        ]
      });
      var avatarGroup = tv({
        base: "flex items-center justify-center h-auto w-max-content",
        variants: {
          isGrid: {
            true: "inline-grid grid-cols-4 gap-3"
          }
        }
      });
      var card = tv({
        slots: {
          base: [
            "flex",
            "flex-col",
            "relative",
            "overflow-hidden",
            "height-auto",
            "outline-none",
            "text-foreground",
            "box-border",
            "bg-content1",
            ...dataFocusVisibleClasses
          ],
          header: [
            "flex",
            "p-3",
            "z-10",
            "w-full",
            "justify-start",
            "items-center",
            "shrink-0",
            "overflow-inherit",
            "color-inherit",
            "subpixel-antialiased"
          ],
          body: [
            "relative",
            "flex",
            "flex-1",
            "w-full",
            "p-5",
            "flex-auto",
            "flex-col",
            "place-content-inherit",
            "align-items-inherit",
            "h-auto",
            "break-words",
            "text-left",
            "overflow-y-auto",
            "subpixel-antialiased"
          ],
          footer: [
            "p-3",
            "h-auto",
            "flex",
            "w-full",
            "items-center",
            "overflow-hidden",
            "color-inherit",
            "subpixel-antialiased"
          ]
        },
        variants: {
          shadow: {
            none: {
              base: "shadow-none"
            },
            sm: {
              base: "shadow-small"
            },
            md: {
              base: "shadow-medium"
            },
            lg: {
              base: "shadow-large"
            }
          },
          radius: {
            none: {
              base: "rounded-none",
              header: "rounded-none",
              footer: "rounded-none"
            },
            sm: {
              base: "rounded-small",
              header: "rounded-t-small",
              footer: "rounded-b-small"
            },
            md: {
              base: "rounded-medium",
              header: "rounded-t-medium",
              footer: "rounded-b-medium"
            },
            lg: {
              base: "rounded-large",
              header: "rounded-t-large",
              footer: "rounded-b-large"
            }
          },
          fullWidth: {
            true: {
              base: "w-full"
            }
          },
          isHoverable: {
            true: {
              base: "data-[hover=true]:bg-content2 dark:data-[hover=true]:bg-content2"
            }
          },
          isPressable: {
            true: { base: "cursor-pointer" }
          },
          isBlurred: {
            true: {
              base: [
                "bg-background/80",
                "dark:bg-background/20",
                "backdrop-blur-md",
                "backdrop-saturate-150"
              ]
            }
          },
          isFooterBlurred: {
            true: {
              footer: ["bg-background/10", "backdrop-blur", "backdrop-saturate-150"]
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled cursor-not-allowed"
            }
          },
          disableAnimation: {
            true: "",
            false: { base: "transition-transform-background motion-reduce:transition-none" }
          }
        },
        compoundVariants: [
          {
            isPressable: true,
            disableAnimation: false,
            class: "data-[pressed=true]:scale-[0.97] tap-highlight-transparent"
          }
        ],
        defaultVariants: {
          radius: "lg",
          shadow: "md",
          fullWidth: false,
          isHoverable: false,
          isPressable: false,
          isDisabled: false,
          disableAnimation: false,
          isFooterBlurred: false
        }
      });
      var link = tv({
        base: [
          "relative inline-flex items-center outline-none tap-highlight-transparent",
          ...dataFocusVisibleClasses
        ],
        variants: {
          size: {
            sm: "text-small",
            md: "text-medium",
            lg: "text-large"
          },
          color: {
            foreground: "text-foreground",
            primary: "text-primary",
            secondary: "text-secondary",
            success: "text-success",
            warning: "text-warning",
            danger: "text-danger"
          },
          underline: {
            none: "no-underline",
            hover: "hover:underline",
            always: "underline",
            active: "active:underline",
            focus: "focus:underline"
          },
          isBlock: {
            true: [
              "px-2",
              "py-1",
              "hover:after:opacity-100",
              "after:content-['']",
              "after:inset-0",
              "after:opacity-0",
              "after:w-full",
              "after:h-full",
              "after:rounded-xl",
              "after:transition-background",
              "after:absolute"
            ],
            false: "hover:opacity-80 active:opacity-disabled transition-opacity"
          },
          isDisabled: {
            true: "opacity-disabled cursor-default pointer-events-none"
          },
          disableAnimation: {
            true: "after:transition-none transition-none"
          }
        },
        compoundVariants: [
          {
            isBlock: true,
            color: "foreground",
            class: "hover:after:bg-foreground/10"
          },
          {
            isBlock: true,
            color: "primary",
            class: "hover:after:bg-primary/20"
          },
          {
            isBlock: true,
            color: "secondary",
            class: "hover:after:bg-secondary/20"
          },
          {
            isBlock: true,
            color: "success",
            class: "hover:after:bg-success/20"
          },
          {
            isBlock: true,
            color: "warning",
            class: "hover:after:bg-warning/20"
          },
          {
            isBlock: true,
            color: "danger",
            class: "hover:after:bg-danger/20"
          },
          {
            underline: ["hover", "always", "active", "focus"],
            class: "underline-offset-4"
          }
        ],
        defaultVariants: {
          color: "primary",
          size: "md",
          isBlock: false,
          underline: "none",
          isDisabled: false,
          disableAnimation: false
        }
      });
      var linkAnchorClasses = "flex mx-1 text-current self-center";
      var user = tv({
        slots: {
          base: [
            "inline-flex items-center justify-center gap-2 rounded-small outline-none",
            ...dataFocusVisibleClasses
          ],
          wrapper: "inline-flex flex-col items-start",
          name: "text-small text-inherit",
          description: "text-tiny text-foreground-400"
        }
      });
      var button = tv({
        base: [
          "z-0",
          "group",
          "relative",
          "inline-flex",
          "items-center",
          "justify-center",
          "box-border",
          "appearance-none",
          "outline-none",
          "select-none",
          "whitespace-nowrap",
          "min-w-max",
          "font-normal",
          "subpixel-antialiased",
          "overflow-hidden",
          "tap-highlight-transparent",
          ...dataFocusVisibleClasses
        ],
        variants: {
          variant: {
            solid: "",
            bordered: "border-medium bg-transparent",
            light: "bg-transparent",
            flat: "",
            faded: "border-medium",
            shadow: "",
            ghost: "border-medium bg-transparent"
          },
          size: {
            sm: "px-unit-3 min-w-unit-16 h-unit-8 text-tiny gap-unit-2 rounded-small",
            md: "px-unit-4 min-w-unit-20 h-unit-10 text-small gap-unit-2 rounded-medium",
            lg: "px-unit-6 min-w-unit-24 h-unit-12 text-medium gap-unit-3 rounded-large"
          },
          color: {
            default: "",
            primary: "",
            secondary: "",
            success: "",
            warning: "",
            danger: ""
          },
          radius: {
            none: "rounded-none",
            sm: "rounded-small",
            md: "rounded-medium",
            lg: "rounded-large",
            full: "rounded-full"
          },
          fullWidth: {
            true: "w-full"
          },
          isDisabled: {
            true: "opacity-disabled pointer-events-none"
          },
          isInGroup: {
            true: "[&:not(:first-child):not(:last-child)]:rounded-none"
          },
          isIconOnly: {
            true: "px-unit-0 !gap-unit-0",
            false: "[&>svg]:max-w-[theme(spacing.unit-8)]"
          },
          disableAnimation: {
            true: "!transition-none",
            false: "data-[pressed=true]:scale-[0.97] transition-transform-colors motion-reduce:transition-none"
          }
        },
        defaultVariants: {
          size: "md",
          variant: "solid",
          color: "default",
          fullWidth: false,
          isDisabled: false,
          isInGroup: false,
          disableAnimation: false
        },
        compoundVariants: [
          {
            variant: "solid",
            color: "default",
            class: colorVariants.solid.default
          },
          {
            variant: "solid",
            color: "primary",
            class: colorVariants.solid.primary
          },
          {
            variant: "solid",
            color: "secondary",
            class: colorVariants.solid.secondary
          },
          {
            variant: "solid",
            color: "success",
            class: colorVariants.solid.success
          },
          {
            variant: "solid",
            color: "warning",
            class: colorVariants.solid.warning
          },
          {
            variant: "solid",
            color: "danger",
            class: colorVariants.solid.danger
          },
          {
            variant: "shadow",
            color: "default",
            class: colorVariants.shadow.default
          },
          {
            variant: "shadow",
            color: "primary",
            class: colorVariants.shadow.primary
          },
          {
            variant: "shadow",
            color: "secondary",
            class: colorVariants.shadow.secondary
          },
          {
            variant: "shadow",
            color: "success",
            class: colorVariants.shadow.success
          },
          {
            variant: "shadow",
            color: "warning",
            class: colorVariants.shadow.warning
          },
          {
            variant: "shadow",
            color: "danger",
            class: colorVariants.shadow.danger
          },
          {
            variant: "bordered",
            color: "default",
            class: colorVariants.bordered.default
          },
          {
            variant: "bordered",
            color: "primary",
            class: colorVariants.bordered.primary
          },
          {
            variant: "bordered",
            color: "secondary",
            class: colorVariants.bordered.secondary
          },
          {
            variant: "bordered",
            color: "success",
            class: colorVariants.bordered.success
          },
          {
            variant: "bordered",
            color: "warning",
            class: colorVariants.bordered.warning
          },
          {
            variant: "bordered",
            color: "danger",
            class: colorVariants.bordered.danger
          },
          {
            variant: "flat",
            color: "default",
            class: colorVariants.flat.default
          },
          {
            variant: "flat",
            color: "primary",
            class: colorVariants.flat.primary
          },
          {
            variant: "flat",
            color: "secondary",
            class: colorVariants.flat.secondary
          },
          {
            variant: "flat",
            color: "success",
            class: colorVariants.flat.success
          },
          {
            variant: "flat",
            color: "warning",
            class: colorVariants.flat.warning
          },
          {
            variant: "flat",
            color: "danger",
            class: colorVariants.flat.danger
          },
          {
            variant: "faded",
            color: "default",
            class: colorVariants.faded.default
          },
          {
            variant: "faded",
            color: "primary",
            class: colorVariants.faded.primary
          },
          {
            variant: "faded",
            color: "secondary",
            class: colorVariants.faded.secondary
          },
          {
            variant: "faded",
            color: "success",
            class: colorVariants.faded.success
          },
          {
            variant: "faded",
            color: "warning",
            class: colorVariants.faded.warning
          },
          {
            variant: "faded",
            color: "danger",
            class: colorVariants.faded.danger
          },
          {
            variant: "light",
            color: "default",
            class: [colorVariants.light.default, "data-[hover=true]:bg-default/40"]
          },
          {
            variant: "light",
            color: "primary",
            class: [colorVariants.light.primary, "data-[hover=true]:bg-primary/20"]
          },
          {
            variant: "light",
            color: "secondary",
            class: [colorVariants.light.secondary, "data-[hover=true]:bg-secondary/20"]
          },
          {
            variant: "light",
            color: "success",
            class: [colorVariants.light.success, "data-[hover=true]:bg-success/20"]
          },
          {
            variant: "light",
            color: "warning",
            class: [colorVariants.light.warning, "data-[hover=true]:bg-warning/20"]
          },
          {
            variant: "light",
            color: "danger",
            class: [colorVariants.light.danger, "data-[hover=true]:bg-danger/20"]
          },
          {
            variant: "ghost",
            color: "default",
            class: colorVariants.ghost.default
          },
          {
            variant: "ghost",
            color: "primary",
            class: colorVariants.ghost.primary
          },
          {
            variant: "ghost",
            color: "secondary",
            class: colorVariants.ghost.secondary
          },
          {
            variant: "ghost",
            color: "success",
            class: colorVariants.ghost.success
          },
          {
            variant: "ghost",
            color: "warning",
            class: colorVariants.ghost.warning
          },
          {
            variant: "ghost",
            color: "danger",
            class: colorVariants.ghost.danger
          },
          {
            isInGroup: true,
            size: "sm",
            class: "rounded-none first:rounded-l-small last:rounded-r-small"
          },
          {
            isInGroup: true,
            size: "md",
            class: "rounded-none first:rounded-l-medium last:rounded-r-medium"
          },
          {
            isInGroup: true,
            size: "lg",
            class: "rounded-none first:rounded-l-large last:rounded-r-large"
          },
          {
            isInGroup: true,
            isRounded: true,
            class: "rounded-none first:rounded-l-full last:rounded-r-full"
          },
          {
            isInGroup: true,
            variant: ["bordered", "ghost"],
            class: "[&:not(:first-child)]:ml-[calc(theme(borderWidth.medium)*-1)]"
          },
          {
            isIconOnly: true,
            size: "sm",
            class: "min-w-unit-8 w-unit-8 h-unit-8"
          },
          {
            isIconOnly: true,
            size: "md",
            class: "min-w-unit-10 w-unit-10 h-unit-10"
          },
          {
            isIconOnly: true,
            size: "lg",
            class: "min-w-unit-12 w-unit-12 h-unit-12"
          }
        ]
      });
      var buttonGroup = tv({
        base: "inline-flex items-center justify-center h-auto",
        variants: {
          fullWidth: {
            true: "w-full"
          }
        },
        defaultVariants: {
          fullWidth: false
        }
      });
      var drip = tv({
        base: ["absolute", "will-change-transform", "bg-current", "rounded-full", "animate-drip-expand"]
      });
      var spinner = tv({
        slots: {
          base: "relative inline-flex flex-col gap-2 items-center justify-center",
          wrapper: "relative flex",
          circle1: [
            "absolute",
            "w-full",
            "h-full",
            "rounded-full",
            "animate-spinner-ease-spin",
            "border-2",
            "border-solid",
            "border-t-transparent",
            "border-l-transparent",
            "border-r-transparent"
          ],
          circle2: [
            "absolute",
            "w-full",
            "h-full",
            "rounded-full",
            "opacity-75",
            "animate-spinner-linear-spin",
            "border-2",
            "border-dotted",
            "border-t-transparent",
            "border-l-transparent",
            "border-r-transparent"
          ],
          label: "text-foreground dark:text-foreground-dark font-regular"
        },
        variants: {
          size: {
            sm: {
              wrapper: "w-5 h-5",
              circle1: "border-2",
              circle2: "border-2",
              label: "text-small"
            },
            md: {
              wrapper: "w-8 h-8",
              circle1: "border-3",
              circle2: "border-3",
              label: "text-medium"
            },
            lg: {
              wrapper: "w-10 h-10",
              circle1: "border-3",
              circle2: "border-3",
              label: "text-large"
            }
          },
          color: {
            current: {
              circle1: "border-b-current",
              circle2: "border-b-current"
            },
            white: {
              circle1: "border-b-white",
              circle2: "border-b-white"
            },
            default: {
              circle1: "border-b-default",
              circle2: "border-b-default"
            },
            primary: {
              circle1: "border-b-primary",
              circle2: "border-b-primary"
            },
            secondary: {
              circle1: "border-b-secondary",
              circle2: "border-b-secondary"
            },
            success: {
              circle1: "border-b-success",
              circle2: "border-b-success"
            },
            warning: {
              circle1: "border-b-warning",
              circle2: "border-b-warning"
            },
            danger: {
              circle1: "border-b-danger",
              circle2: "border-b-danger"
            }
          },
          labelColor: {
            foreground: {
              label: "text-foreground"
            },
            primary: {
              label: "text-primary"
            },
            secondary: {
              label: "text-secondary"
            },
            success: {
              label: "text-success"
            },
            warning: {
              label: "text-warning"
            },
            danger: {
              label: "text-danger"
            }
          }
        },
        defaultVariants: {
          size: "md",
          color: "primary",
          labelColor: "foreground"
        }
      });
      var code = tv({
        base: ["px-2", "py-1", "h-fit", "font-mono", "font-normal", "inline-block", "whitespace-nowrap"],
        variants: {
          color: {
            default: colorVariants.flat.default,
            primary: colorVariants.flat.primary,
            secondary: colorVariants.flat.secondary,
            success: colorVariants.flat.success,
            warning: colorVariants.flat.warning,
            danger: colorVariants.flat.danger
          },
          size: {
            sm: "text-small",
            md: "text-medium",
            lg: "text-large"
          },
          radius: {
            none: "rounded-none",
            sm: "rounded-small",
            md: "rounded-medium",
            lg: "rounded-large",
            full: "rounded-full"
          }
        },
        defaultVariants: {
          color: "default",
          size: "sm",
          radius: "sm"
        }
      });
      var popover = tv({
        slots: {
          base: [
            "z-10",
            "relative",
            "inline-flex",
            "flex-col",
            "items-center",
            "justify-center",
            "box-border",
            "subpixel-antialiased",
            "px-4",
            "py-1",
            "outline-none",
            "box-border",
            ...dataFocusVisibleClasses
          ],
          trigger: ["z-10"],
          backdrop: ["hidden"],
          arrow: [
            "z-[-1]",
            "absolute",
            "rotate-45",
            "w-2.5",
            "h-2.5",
            "rounded-sm",
            "data-[placement=top]:-bottom-1",
            "data-[placement=top]:-translate-x-1/2",
            "data-[placement=top-start]:-bottom-1",
            "data-[placement=top-start]:-translate-x-8",
            "data-[placement=top-end]:-bottom-1",
            "data-[placement=top-end]:translate-x-6",
            "data-[placement=bottom]:-top-1",
            "data-[placement=bottom]:-translate-x-1/2",
            "data-[placement=bottom-start]:-top-1",
            "data-[placement=bottom-start]:-translate-x-8",
            "data-[placement=bottom-end]:-top-1",
            "data-[placement=bottom-end]:translate-x-6",
            "data-[placement=left]:-right-1",
            "data-[placement=left]:-translate-y-1/2",
            "data-[placement=left-start]:-right-1",
            "data-[placement=left-start]:-translate-y-3",
            "data-[placement=left-end]:-right-1",
            "data-[placement=left-end]:translate-y-0.5",
            "data-[placement=right]:-left-1",
            "data-[placement=right]:-translate-y-1/2",
            "data-[placement=right-start]:-left-1",
            "data-[placement=right-start]:-translate-y-3",
            "data-[placement=right-end]:-left-1",
            "data-[placement=right-end]:translate-y-0.5"
          ]
        },
        variants: {
          size: {
            sm: { base: "text-tiny" },
            md: { base: "text-small" },
            lg: { base: "text-medium" }
          },
          color: {
            default: {
              base: "bg-content1",
              arrow: "shadow-small bg-content1"
            },
            foreground: {
              base: colorVariants.solid.foreground,
              arrow: "bg-foreground"
            },
            primary: {
              base: colorVariants.solid.primary,
              arrow: "bg-primary"
            },
            secondary: {
              base: colorVariants.solid.secondary,
              arrow: "bg-secondary"
            },
            success: {
              base: colorVariants.solid.success,
              arrow: "bg-success"
            },
            warning: {
              base: colorVariants.solid.warning,
              arrow: "bg-warning"
            },
            danger: {
              base: colorVariants.solid.danger,
              arrow: "bg-danger"
            }
          },
          radius: {
            none: { base: "rounded-none" },
            sm: { base: "rounded-small" },
            md: { base: "rounded-medium" },
            lg: { base: "rounded-large" },
            full: { base: "rounded-full" }
          },
          shadow: {
            sm: {
              base: "shadow-small"
            },
            md: {
              base: "shadow-medium"
            },
            lg: {
              base: "shadow-large"
            }
          },
          backdrop: {
            transparent: {},
            opaque: {
              backdrop: "bg-overlay/50 backdrop-opacity-disabled"
            },
            blur: {
              backdrop: "backdrop-blur-sm backdrop-saturate-150 bg-overlay/30"
            }
          },
          triggerScaleOnOpen: {
            true: {
              trigger: ["aria-expanded:scale-[0.97]", "aria-expanded:opacity-70", "subpixel-antialiased"]
            },
            false: {}
          },
          disableAnimation: {
            true: {
              base: "animate-none"
            }
          }
        },
        defaultVariants: {
          color: "default",
          radius: "lg",
          size: "md",
          shadow: "md",
          backdrop: "transparent",
          disableAnimation: false,
          triggerScaleOnOpen: true
        },
        compoundVariants: [
          {
            backdrop: ["opaque", "blur"],
            class: {
              backdrop: "block w-full h-full fixed inset-0 -z-30"
            }
          }
        ]
      });
      var snippet = tv({
        slots: {
          base: "inline-flex items-center justify-between h-fit rounded-large gap-2",
          pre: "bg-transparent text-inherit font-mono font-normal inline-block whitespace-nowrap",
          content: "flex flex-col",
          symbol: "select-none",
          copyButton: [
            "group",
            "relative",
            "z-10",
            "text-large",
            "text-inherit",
            "data-[hover=true]:bg-transparent"
          ],
          copyIcon: [
            "absolute text-inherit opacity-100 scale-100 group-data-[copied=true]:opacity-0 group-data-[copied=true]:scale-50"
          ],
          checkIcon: [
            "absolute text-inherit opacity-0 scale-50 group-data-[copied=true]:opacity-100 group-data-[copied=true]:scale-100"
          ]
        },
        variants: {
          variant: {
            flat: "",
            solid: "",
            bordered: "border-medium bg-transparent",
            shadow: ""
          },
          color: {
            default: {},
            primary: {},
            secondary: {},
            success: {},
            warning: {},
            danger: {}
          },
          size: {
            sm: {
              base: "px-1.5 py-0.5 text-tiny rounded-small"
            },
            md: {
              base: "px-3 py-1.5 text-small rounded-medium"
            },
            lg: {
              base: "px-4 py-2 text-medium rounded-large"
            }
          },
          radius: {
            none: {
              base: "rounded-none"
            },
            sm: {
              base: "rounded-small"
            },
            md: {
              base: "rounded-medium"
            },
            lg: {
              base: "rounded-large"
            }
          },
          fullWidth: {
            true: {
              base: "w-full"
            }
          },
          disableAnimation: {
            true: {},
            false: {
              copyIcon: "transition-transform-opacity",
              checkIcon: "transition-transform-opacity"
            }
          }
        },
        defaultVariants: {
          color: "default",
          variant: "flat",
          size: "md",
          fullWidth: false,
          disableAnimation: false
        },
        compoundVariants: [
          {
            variant: ["solid", "shadow"],
            color: "default",
            class: {
              copyButton: "data-[focus-visible]:outline-default-foreground"
            }
          },
          {
            variant: ["solid", "shadow"],
            color: "primary",
            class: {
              copyButton: "data-[focus-visible]:outline-primary-foreground"
            }
          },
          {
            variant: ["solid", "shadow"],
            color: "secondary",
            class: {
              copyButton: "data-[focus-visible]:outline-secondary-foreground"
            }
          },
          {
            variant: ["solid", "shadow"],
            color: "success",
            class: {
              copyButton: "data-[focus-visible]:outline-success-foreground"
            }
          },
          {
            variant: ["solid", "shadow"],
            color: "warning",
            class: {
              copyButton: "data-[focus-visible]:outline-warning-foreground"
            }
          },
          {
            variant: ["solid", "shadow"],
            color: "danger",
            class: {
              copyButton: "data-[focus-visible]:outline-danger-foreground"
            }
          },
          {
            variant: "flat",
            color: "default",
            class: {
              base: colorVariants.flat.default
            }
          },
          {
            variant: "flat",
            color: "primary",
            class: {
              base: colorVariants.flat.primary
            }
          },
          {
            variant: "flat",
            color: "secondary",
            class: {
              base: colorVariants.flat.secondary
            }
          },
          {
            variant: "flat",
            color: "success",
            class: {
              base: colorVariants.flat.success
            }
          },
          {
            variant: "flat",
            color: "warning",
            class: {
              base: colorVariants.flat.warning
            }
          },
          {
            variant: "flat",
            color: "danger",
            class: {
              base: colorVariants.flat.danger
            }
          },
          {
            variant: "solid",
            color: "default",
            class: {
              base: colorVariants.solid.default
            }
          },
          {
            variant: "solid",
            color: "primary",
            class: {
              base: colorVariants.solid.primary
            }
          },
          {
            variant: "solid",
            color: "secondary",
            class: {
              base: colorVariants.solid.secondary
            }
          },
          {
            variant: "solid",
            color: "success",
            class: {
              base: colorVariants.solid.success
            }
          },
          {
            variant: "solid",
            color: "warning",
            class: {
              base: colorVariants.solid.warning
            }
          },
          {
            variant: "solid",
            color: "danger",
            class: {
              base: colorVariants.solid.danger
            }
          },
          {
            variant: "shadow",
            color: "default",
            class: {
              base: colorVariants.shadow.default
            }
          },
          {
            variant: "shadow",
            color: "primary",
            class: {
              base: colorVariants.shadow.primary
            }
          },
          {
            variant: "shadow",
            color: "secondary",
            class: {
              base: colorVariants.shadow.secondary
            }
          },
          {
            variant: "shadow",
            color: "success",
            class: {
              base: colorVariants.shadow.success
            }
          },
          {
            variant: "shadow",
            color: "warning",
            class: {
              base: colorVariants.shadow.warning
            }
          },
          {
            variant: "shadow",
            color: "danger",
            class: {
              base: colorVariants.shadow.danger
            }
          },
          {
            variant: "bordered",
            color: "default",
            class: {
              base: colorVariants.bordered.default
            }
          },
          {
            variant: "bordered",
            color: "primary",
            class: {
              base: colorVariants.bordered.primary
            }
          },
          {
            variant: "bordered",
            color: "secondary",
            class: {
              base: colorVariants.bordered.secondary
            }
          },
          {
            variant: "bordered",
            color: "success",
            class: {
              base: colorVariants.bordered.success
            }
          },
          {
            variant: "bordered",
            color: "warning",
            class: {
              base: colorVariants.bordered.warning
            }
          },
          {
            variant: "bordered",
            color: "danger",
            class: {
              base: colorVariants.bordered.danger
            }
          }
        ]
      });
      var chip = tv({
        slots: {
          base: [
            "relative",
            "max-w-fit",
            "inline-flex",
            "items-center",
            "justify-between",
            "box-border",
            "whitespace-nowrap"
          ],
          content: "flex-1 text-inherit font-normal",
          dot: ["w-2", "h-2", "ml-1", "rounded-full"],
          avatar: "flex-shrink-0",
          closeButton: [
            "z-10",
            "appearance-none",
            "outline-none",
            "select-none",
            "transition-opacity",
            "opacity-70",
            "hover:opacity-100",
            "cursor-pointer",
            "active:opacity-disabled",
            "tap-highlight-transparent"
          ]
        },
        variants: {
          variant: {
            solid: {},
            bordered: {
              base: "border-medium bg-transparent"
            },
            light: {
              base: "bg-transparent"
            },
            flat: {},
            faded: {
              base: "border-medium"
            },
            shadow: {},
            dot: {
              base: "border-medium border-default text-foreground bg-transparent"
            }
          },
          color: {
            default: {
              dot: "bg-default-400"
            },
            primary: {
              dot: "bg-primary"
            },
            secondary: {
              dot: "bg-secondary"
            },
            success: {
              dot: "bg-success"
            },
            warning: {
              dot: "bg-warning"
            },
            danger: {
              dot: "bg-danger"
            }
          },
          size: {
            sm: {
              base: "px-1 h-6 text-small",
              content: "px-1",
              closeButton: "text-medium",
              avatar: "w-4 h-4"
            },
            md: {
              base: "px-1 h-7 text-small",
              content: "px-2",
              closeButton: "text-large",
              avatar: "w-5 h-5"
            },
            lg: {
              base: "px-2 h-8 text-medium",
              content: "px-2",
              closeButton: "text-xl",
              avatar: "w-6 h-6"
            }
          },
          radius: {
            none: {
              base: "rounded-none"
            },
            sm: {
              base: "rounded-small"
            },
            md: {
              base: "rounded-medium"
            },
            lg: {
              base: "rounded-large"
            },
            full: {
              base: "rounded-full"
            }
          },
          isOneChar: {
            true: {},
            false: {}
          },
          isCloseable: {
            true: {},
            false: {}
          },
          hasStartContent: {
            true: {}
          },
          hasEndContent: {
            true: {}
          },
          isDisabled: {
            true: { base: "opacity-disabled pointer-events-none" }
          },
          isCloseButtonFocusVisible: {
            true: {
              closeButton: [...ringClasses, "ring-1", "rounded-full"]
            }
          }
        },
        defaultVariants: {
          variant: "solid",
          color: "default",
          size: "md",
          radius: "full",
          isDisabled: false
        },
        compoundVariants: [
          {
            variant: "solid",
            color: "default",
            class: {
              base: colorVariants.solid.default
            }
          },
          {
            variant: "solid",
            color: "primary",
            class: {
              base: colorVariants.solid.primary
            }
          },
          {
            variant: "solid",
            color: "secondary",
            class: {
              base: colorVariants.solid.secondary
            }
          },
          {
            variant: "solid",
            color: "success",
            class: {
              base: colorVariants.solid.success
            }
          },
          {
            variant: "solid",
            color: "warning",
            class: {
              base: colorVariants.solid.warning
            }
          },
          {
            variant: "solid",
            color: "danger",
            class: {
              base: colorVariants.solid.danger
            }
          },
          {
            variant: "shadow",
            color: "default",
            class: {
              base: colorVariants.shadow.default
            }
          },
          {
            variant: "shadow",
            color: "primary",
            class: {
              base: colorVariants.shadow.primary
            }
          },
          {
            variant: "shadow",
            color: "secondary",
            class: {
              base: colorVariants.shadow.secondary
            }
          },
          {
            variant: "shadow",
            color: "success",
            class: {
              base: colorVariants.shadow.success
            }
          },
          {
            variant: "shadow",
            color: "warning",
            class: {
              base: colorVariants.shadow.warning
            }
          },
          {
            variant: "shadow",
            color: "danger",
            class: {
              base: colorVariants.shadow.danger
            }
          },
          {
            variant: "bordered",
            color: "default",
            class: {
              base: colorVariants.bordered.default
            }
          },
          {
            variant: "bordered",
            color: "primary",
            class: {
              base: colorVariants.bordered.primary
            }
          },
          {
            variant: "bordered",
            color: "secondary",
            class: {
              base: colorVariants.bordered.secondary
            }
          },
          {
            variant: "bordered",
            color: "success",
            class: {
              base: colorVariants.bordered.success
            }
          },
          {
            variant: "bordered",
            color: "warning",
            class: {
              base: colorVariants.bordered.warning
            }
          },
          {
            variant: "bordered",
            color: "danger",
            class: {
              base: colorVariants.bordered.danger
            }
          },
          {
            variant: "flat",
            color: "default",
            class: {
              base: colorVariants.flat.default
            }
          },
          {
            variant: "flat",
            color: "primary",
            class: {
              base: colorVariants.flat.primary
            }
          },
          {
            variant: "flat",
            color: "secondary",
            class: {
              base: colorVariants.flat.secondary
            }
          },
          {
            variant: "flat",
            color: "success",
            class: {
              base: colorVariants.flat.success
            }
          },
          {
            variant: "flat",
            color: "warning",
            class: {
              base: colorVariants.flat.warning
            }
          },
          {
            variant: "flat",
            color: "danger",
            class: {
              base: colorVariants.flat.danger
            }
          },
          {
            variant: "faded",
            color: "default",
            class: {
              base: colorVariants.faded.default
            }
          },
          {
            variant: "faded",
            color: "primary",
            class: {
              base: colorVariants.faded.primary
            }
          },
          {
            variant: "faded",
            color: "secondary",
            class: {
              base: colorVariants.faded.secondary
            }
          },
          {
            variant: "faded",
            color: "success",
            class: {
              base: colorVariants.faded.success
            }
          },
          {
            variant: "faded",
            color: "warning",
            class: {
              base: colorVariants.faded.warning
            }
          },
          {
            variant: "faded",
            color: "danger",
            class: {
              base: colorVariants.faded.danger
            }
          },
          {
            variant: "light",
            color: "default",
            class: {
              base: colorVariants.light.default
            }
          },
          {
            variant: "light",
            color: "primary",
            class: {
              base: colorVariants.light.primary
            }
          },
          {
            variant: "light",
            color: "secondary",
            class: {
              base: colorVariants.light.secondary
            }
          },
          {
            variant: "light",
            color: "success",
            class: {
              base: colorVariants.light.success
            }
          },
          {
            variant: "light",
            color: "warning",
            class: {
              base: colorVariants.light.warning
            }
          },
          {
            variant: "light",
            color: "danger",
            class: {
              base: colorVariants.light.danger
            }
          },
          {
            isOneChar: true,
            size: "sm",
            class: {
              base: "w-5 h-5 min-w-unit-5 min-h-5"
            }
          },
          {
            isOneChar: true,
            size: "md",
            class: {
              base: "w-6 h-6 min-w-unit-6 min-h-6"
            }
          },
          {
            isOneChar: true,
            size: "lg",
            class: {
              base: "w-7 h-7 min-w-unit-7 min-h-7"
            }
          },
          {
            isOneChar: true,
            isCloseable: false,
            class: {
              base: "px-0 justify-center",
              content: "px-0 flex-none"
            }
          },
          {
            isOneChar: true,
            isCloseable: true,
            class: {
              base: "w-auto"
            }
          },
          {
            hasStartContent: true,
            size: "sm",
            class: {
              content: "pl-0.5"
            }
          },
          {
            hasStartContent: true,
            size: ["md", "lg"],
            class: {
              content: "pl-1"
            }
          },
          {
            hasEndContent: true,
            size: "sm",
            class: {
              content: "pr-0.5"
            }
          },
          {
            hasEndContent: true,
            size: ["md", "lg"],
            class: {
              content: "pr-1"
            }
          }
        ]
      });
      var badge = tv({
        slots: {
          base: ["relative", "inline-flex", "shrink-0"],
          badge: [
            "flex",
            "z-10",
            "flex-wrap",
            "absolute",
            "box-border",
            "rounded-full",
            "whitespace-nowrap",
            "place-content-center",
            "origin-center",
            "items-center",
            "text-inherit",
            "select-none",
            "font-regular",
            "scale-100",
            "opacity-100",
            "subpixel-antialiased",
            "data-[invisible=true]:scale-0",
            "data-[invisible=true]:opacity-0"
          ]
        },
        variants: {
          variant: {
            solid: {},
            flat: {},
            faded: {
              badge: "border-medium"
            },
            shadow: {}
          },
          color: {
            default: {},
            primary: {},
            secondary: {},
            success: {},
            warning: {},
            danger: {}
          },
          size: {
            sm: {
              badge: "px-1 text-tiny"
            },
            md: {
              badge: "px-1 text-small"
            },
            lg: {
              badge: "px-1 text-small"
            }
          },
          placement: {
            "top-right": {},
            "top-left": {},
            "bottom-right": {},
            "bottom-left": {}
          },
          shape: {
            circle: {},
            rectangle: {}
          },
          isInvisible: {
            true: {}
          },
          isOneChar: {
            true: {
              badge: "px-0"
            }
          },
          isDot: {
            true: {}
          },
          disableAnimation: {
            true: {
              badge: "transition-none"
            },
            false: {
              badge: "transition-transform-opacity !ease-soft-spring !duration-300"
            }
          },
          disableOutline: {
            true: {
              badge: "border-transparent border-0"
            },
            false: {
              badge: "border-2 border-background"
            }
          }
        },
        defaultVariants: {
          variant: "solid",
          color: "default",
          size: "md",
          shape: "rectangle",
          placement: "top-right",
          disableOutline: false,
          disableAnimation: false,
          isInvisible: false
        },
        compoundVariants: [
          {
            variant: "solid",
            color: "default",
            class: {
              badge: colorVariants.solid.default
            }
          },
          {
            variant: "solid",
            color: "primary",
            class: {
              badge: colorVariants.solid.primary
            }
          },
          {
            variant: "solid",
            color: "secondary",
            class: {
              badge: colorVariants.solid.secondary
            }
          },
          {
            variant: "solid",
            color: "success",
            class: {
              badge: colorVariants.solid.success
            }
          },
          {
            variant: "solid",
            color: "warning",
            class: {
              badge: colorVariants.solid.warning
            }
          },
          {
            variant: "solid",
            color: "danger",
            class: {
              badge: colorVariants.solid.danger
            }
          },
          {
            variant: "shadow",
            color: "default",
            class: {
              badge: colorVariants.shadow.default
            }
          },
          {
            variant: "shadow",
            color: "primary",
            class: {
              badge: colorVariants.shadow.primary
            }
          },
          {
            variant: "shadow",
            color: "secondary",
            class: {
              badge: colorVariants.shadow.secondary
            }
          },
          {
            variant: "shadow",
            color: "success",
            class: {
              badge: colorVariants.shadow.success
            }
          },
          {
            variant: "shadow",
            color: "warning",
            class: {
              badge: colorVariants.shadow.warning
            }
          },
          {
            variant: "shadow",
            color: "danger",
            class: {
              badge: colorVariants.shadow.danger
            }
          },
          {
            variant: "flat",
            color: "default",
            class: {
              badge: colorVariants.flat.default
            }
          },
          {
            variant: "flat",
            color: "primary",
            class: {
              badge: colorVariants.flat.primary
            }
          },
          {
            variant: "flat",
            color: "secondary",
            class: {
              badge: colorVariants.flat.secondary
            }
          },
          {
            variant: "flat",
            color: "success",
            class: {
              badge: colorVariants.flat.success
            }
          },
          {
            variant: "flat",
            color: "warning",
            class: {
              badge: colorVariants.flat.warning
            }
          },
          {
            variant: "flat",
            color: "danger",
            class: {
              badge: colorVariants.flat.danger
            }
          },
          {
            variant: "faded",
            color: "default",
            class: {
              badge: colorVariants.faded.default
            }
          },
          {
            variant: "faded",
            color: "primary",
            class: {
              badge: colorVariants.faded.primary
            }
          },
          {
            variant: "faded",
            color: "secondary",
            class: {
              badge: colorVariants.faded.secondary
            }
          },
          {
            variant: "faded",
            color: "success",
            class: {
              badge: colorVariants.faded.success
            }
          },
          {
            variant: "faded",
            color: "warning",
            class: {
              badge: colorVariants.faded.warning
            }
          },
          {
            variant: "faded",
            color: "danger",
            class: {
              badge: colorVariants.faded.danger
            }
          },
          {
            isOneChar: true,
            size: "sm",
            class: {
              badge: "w-4 h-4 min-w-4 min-h-4"
            }
          },
          {
            isOneChar: true,
            size: "md",
            class: {
              badge: "w-5 h-5 min-w-5 min-h-5"
            }
          },
          {
            isOneChar: true,
            size: "lg",
            class: {
              badge: "w-6 h-6 min-w-6 min-h-6"
            }
          },
          {
            isDot: true,
            size: "sm",
            class: {
              badge: "w-3 h-3 min-w-3 min-h-3"
            }
          },
          {
            isDot: true,
            size: "md",
            class: {
              badge: "w-3.5 h-3.5 min-w-3.5 min-h-3.5"
            }
          },
          {
            isDot: true,
            size: "lg",
            class: {
              badge: "w-4 h-4 min-w-4 min-h-4"
            }
          },
          {
            placement: "top-right",
            shape: "rectangle",
            class: {
              badge: "top-[5%] right-[5%] translate-x-1/2 -translate-y-1/2"
            }
          },
          {
            placement: "top-left",
            shape: "rectangle",
            class: {
              badge: "top-[5%] left-[5%] -translate-x-1/2 -translate-y-1/2"
            }
          },
          {
            placement: "bottom-right",
            shape: "rectangle",
            class: {
              badge: "bottom-[5%] right-[5%] translate-x-1/2 translate-y-1/2"
            }
          },
          {
            placement: "bottom-left",
            shape: "rectangle",
            class: {
              badge: "bottom-[5%] left-[5%] -translate-x-1/2 translate-y-1/2"
            }
          },
          {
            placement: "top-right",
            shape: "circle",
            class: {
              badge: "top-[10%] right-[10%] translate-x-1/2 -translate-y-1/2"
            }
          },
          {
            placement: "top-left",
            shape: "circle",
            class: {
              badge: "top-[10%] left-[10%] -translate-x-1/2 -translate-y-1/2"
            }
          },
          {
            placement: "bottom-right",
            shape: "circle",
            class: {
              badge: "bottom-[10%] right-[10%] translate-x-1/2 translate-y-1/2"
            }
          },
          {
            placement: "bottom-left",
            shape: "circle",
            class: {
              badge: "bottom-[10%] left-[10%] -translate-x-1/2 translate-y-1/2"
            }
          }
        ]
      });
      var checkbox = tv({
        slots: {
          base: "group relative max-w-fit inline-flex items-center justify-start cursor-pointer tap-highlight-transparent p-2 -m-2",
          wrapper: [
            "relative",
            "inline-flex",
            "items-center",
            "justify-center",
            "flex-shrink-0",
            "overflow-hidden",
            "before:content-['']",
            "before:absolute",
            "before:inset-0",
            "before:border-solid",
            "before:border-2",
            "before:box-border",
            "before:border-default",
            "after:content-['']",
            "after:absolute",
            "after:inset-0",
            "after:scale-50",
            "after:opacity-0",
            "after:origin-center",
            "group-data-[selected=true]:after:scale-100",
            "group-data-[selected=true]:after:opacity-100",
            "group-data-[hover=true]:before:bg-default-100",
            ...groupDataFocusVisibleClasses
          ],
          icon: "z-10 w-4 h-3 opacity-0 group-data-[selected=true]:opacity-100",
          label: "relative text-foreground select-none"
        },
        variants: {
          color: {
            default: {
              wrapper: "after:bg-default after:text-default-foreground text-default-foreground"
            },
            primary: {
              wrapper: "after:bg-primary after:text-primary-foreground text-primary-foreground"
            },
            secondary: {
              wrapper: "after:bg-secondary after:text-secondary-foreground text-secondary-foreground"
            },
            success: {
              wrapper: "after:bg-success after:text-success-foreground text-success-foreground"
            },
            warning: {
              wrapper: "after:bg-warning after:text-warning-foreground text-warning-foreground"
            },
            danger: {
              wrapper: "after:bg-danger after:text-danger-foreground text-danger-foreground"
            }
          },
          size: {
            sm: {
              wrapper: [
                "w-4 h-4 mr-2",
                "rounded-[calc(theme(borderRadius.medium)*0.5)]",
                "before:rounded-[calc(theme(borderRadius.medium)*0.5)]",
                "after:rounded-[calc(theme(borderRadius.medium)*0.5)]"
              ],
              label: "text-small",
              icon: "w-3 h-2"
            },
            md: {
              wrapper: [
                "w-5 h-5 mr-2",
                "rounded-[calc(theme(borderRadius.medium)*0.6)]",
                "before:rounded-[calc(theme(borderRadius.medium)*0.6)]",
                "after:rounded-[calc(theme(borderRadius.medium)*0.6)]"
              ],
              label: "text-medium",
              icon: "w-4 h-3"
            },
            lg: {
              wrapper: [
                "w-6 h-6 mr-2",
                "rounded-[calc(theme(borderRadius.medium)*0.7)]",
                "before:rounded-[calc(theme(borderRadius.medium)*0.7)]",
                "after:rounded-[calc(theme(borderRadius.medium)*0.7)]"
              ],
              label: "text-large",
              icon: "w-5 h-4"
            }
          },
          radius: {
            none: {
              wrapper: "rounded-none before:rounded-none after:rounded-none"
            },
            sm: {
              wrapper: [
                "rounded-[calc(theme(borderRadius.medium)*0.5)]",
                "before:rounded-[calc(theme(borderRadius.medium)*0.5)]",
                "after:rounded-[calc(theme(borderRadius.medium)*0.5)]"
              ]
            },
            md: {
              wrapper: [
                "rounded-[calc(theme(borderRadius.medium)*0.6)]",
                "before:rounded-[calc(theme(borderRadius.medium)*0.6)]",
                "after:rounded-[calc(theme(borderRadius.medium)*0.6)]"
              ]
            },
            lg: {
              wrapper: [
                "rounded-[calc(theme(borderRadius.medium)*0.7)]",
                "before:rounded-[calc(theme(borderRadius.medium)*0.7)]",
                "after:rounded-[calc(theme(borderRadius.medium)*0.7)]"
              ]
            },
            full: {
              wrapper: "rounded-full before:rounded-full after:rounded-full"
            }
          },
          lineThrough: {
            true: {
              label: [
                "inline-flex",
                "items-center",
                "justify-center",
                "before:content-['']",
                "before:absolute",
                "before:bg-foreground",
                "before:w-0",
                "before:h-0.5",
                "group-data-[selected=true]:opacity-60",
                "group-data-[selected=true]:before:w-full"
              ]
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none"
            }
          },
          isInvalid: {
            true: {
              wrapper: "before:border-danger",
              label: "text-danger"
            }
          },
          disableAnimation: {
            true: {
              wrapper: "transition-none",
              icon: "transition-none",
              label: "transition-none"
            },
            false: {
              wrapper: [
                "before:transition-colors",
                "group-data-[pressed=true]:scale-95",
                "transition-transform",
                "after:transition-transform-opacity",
                "after:!ease-linear",
                "after:!duration-200",
                "motion-reduce:transition-none"
              ],
              icon: "transition-opacity motion-reduce:transition-none",
              label: "transition-colors-opacity before:transition-width motion-reduce:transition-none"
            }
          }
        },
        defaultVariants: {
          color: "primary",
          size: "md",
          isDisabled: false,
          lineThrough: false,
          disableAnimation: false
        }
      });
      var checkboxGroup = tv({
        slots: {
          base: "relative flex flex-col gap-2",
          label: "relative text-medium text-foreground-500",
          wrapper: "flex flex-col flex-wrap gap-2 data-[orientation=horizontal]:flex-row",
          description: "text-small text-foreground-400",
          errorMessage: "text-small text-danger"
        },
        variants: {
          isRequired: {
            true: {
              label: "after:content-['*'] after:text-danger after:ml-0.5"
            }
          },
          isInvalid: {
            true: {
              description: "text-danger"
            }
          },
          disableAnimation: {
            true: {},
            false: {
              description: "transition-colors !duration-150 motion-reduce:transition-none"
            }
          }
        },
        defaultVariants: {
          isInvalid: false,
          isRequired: false,
          disableAnimation: false
        }
      });
      var radio = tv({
        slots: {
          base: "group relative max-w-fit inline-flex items-center justify-start cursor-pointer tap-highlight-transparent p-2 -m-2",
          wrapper: [
            "relative",
            "inline-flex",
            "items-center",
            "justify-center",
            "flex-shrink-0",
            "overflow-hidden",
            "border-solid",
            "border-medium",
            "box-border",
            "border-default",
            "rounded-full",
            "group-data-[hover-unselected=true]:bg-default-100",
            ...groupDataFocusVisibleClasses
          ],
          labelWrapper: "flex flex-col ml-1",
          control: [
            "z-10",
            "w-2",
            "h-2",
            "opacity-0",
            "scale-0",
            "origin-center",
            "rounded-full",
            "group-data-[selected=true]:opacity-100",
            "group-data-[selected=true]:scale-100"
          ],
          label: "relative text-foreground select-none",
          description: "relative text-foreground-400"
        },
        variants: {
          color: {
            default: {
              control: "bg-default-500 text-default-foreground",
              wrapper: "group-data-[selected=true]:border-default-500"
            },
            primary: {
              control: "bg-primary text-primary-foreground",
              wrapper: "group-data-[selected=true]:border-primary"
            },
            secondary: {
              control: "bg-secondary text-secondary-foreground",
              wrapper: "group-data-[selected=true]:border-secondary"
            },
            success: {
              control: "bg-success text-success-foreground",
              wrapper: "group-data-[selected=true]:border-success"
            },
            warning: {
              control: "bg-warning text-warning-foreground",
              wrapper: "group-data-[selected=true]:border-warning"
            },
            danger: {
              control: "bg-danger text-danger-foreground",
              wrapper: "group-data-[selected=true]:border-danger"
            }
          },
          size: {
            sm: {
              wrapper: "w-4 h-4",
              control: "w-1.5 h-1.5",
              labelWrapper: "ml-1",
              label: "text-small",
              description: "text-tiny"
            },
            md: {
              wrapper: "w-5 h-5",
              control: "w-2 h-2",
              labelWrapper: "ml-2",
              label: "text-medium",
              description: "text-small"
            },
            lg: {
              wrapper: "w-6 h-6",
              control: "w-2.5 h-2.5",
              labelWrapper: "ml-2",
              label: "text-large",
              description: "text-medium"
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none"
            }
          },
          isInvalid: {
            true: {
              control: "bg-danger text-danger-foreground",
              wrapper: "border-danger data-[selected=true]:border-danger",
              label: "text-danger",
              description: "text-danger-300"
            }
          },
          disableAnimation: {
            true: {},
            false: {
              wrapper: [
                "group-data-[pressed=true]:scale-95",
                "transition-transform-colors",
                "motion-reduce:transition-none"
              ],
              control: "transition-transform-opacity motion-reduce:transition-none",
              label: "transition-colors motion-reduce:transition-none",
              description: "transition-colors motion-reduce:transition-none"
            }
          }
        },
        defaultVariants: {
          color: "primary",
          size: "md",
          isDisabled: false,
          isInvalid: false,
          disableAnimation: false
        }
      });
      var radioGroup = tv({
        slots: {
          base: "relative flex flex-col gap-2",
          label: "relative text-foreground-500",
          wrapper: "flex flex-col flex-wrap gap-2 data-[orientation=horizontal]:flex-row",
          description: "text-tiny text-foreground-400",
          errorMessage: "text-tiny text-danger"
        },
        variants: {
          isRequired: {
            true: {
              label: "after:content-['*'] after:text-danger after:ml-0.5"
            }
          },
          isInvalid: {
            true: {
              description: "text-danger"
            }
          },
          disableAnimation: {
            true: {},
            false: {
              description: "transition-colors !duration-150 motion-reduce:transition-none"
            }
          }
        },
        defaultVariants: {
          isInvalid: false,
          isRequired: false,
          disableAnimation: false
        }
      });
      var pagination = tv({
        slots: {
          base: ["p-2.5", "-m-2.5", "overflow-x-scroll", "scrollbar-hide"],
          wrapper: [
            "flex",
            "flex-nowrap",
            "h-fit",
            "max-w-fit",
            "relative",
            "gap-1",
            "items-center",
            "overflow-visible"
          ],
          item: ["tap-highlight-transparent", "select-none", "touch-none"],
          prev: "",
          next: "",
          cursor: [
            "absolute",
            "flex",
            "overflow-visible",
            "items-center",
            "justify-center",
            "origin-center",
            "left-0",
            "select-none",
            "touch-none",
            "z-20"
          ],
          forwardIcon: "hidden group-hover:block group-data-[focus-visible=true]:block data-[before=true]:rotate-180",
          ellipsis: "group-hover:hidden group-data-[focus-visible=true]:hidden",
          chevronNext: "rotate-180"
        },
        variants: {
          variant: {
            bordered: {
              item: [
                "border-medium",
                "border-default",
                "bg-transparent",
                "data-[hover=true]:bg-default-100"
              ]
            },
            light: {
              item: "bg-transparent"
            },
            flat: {},
            faded: {
              item: ["border-medium", "border-default"]
            }
          },
          color: {
            default: {
              cursor: colorVariants.solid.default
            },
            primary: {
              cursor: colorVariants.solid.primary
            },
            secondary: {
              cursor: colorVariants.solid.secondary
            },
            success: {
              cursor: colorVariants.solid.success
            },
            warning: {
              cursor: colorVariants.solid.warning
            },
            danger: {
              cursor: colorVariants.solid.danger
            }
          },
          size: {
            sm: {},
            md: {},
            lg: {}
          },
          radius: {
            none: {},
            sm: {},
            md: {},
            lg: {},
            full: {}
          },
          isCompact: {
            true: {
              wrapper: "gap-0 shadow-sm",
              item: [
                "shadow-none",
                "first-of-type:rounded-r-none",
                "last-of-type:rounded-l-none",
                "[&:not(:first-of-type):not(:last-of-type)]:rounded-none"
              ],
              prev: "!rounded-r-none",
              next: "!rounded-l-none"
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none"
            }
          },
          showShadow: {
            true: {}
          },
          disableCursorAnimation: {
            true: {
              cursor: "hidden"
            }
          },
          disableAnimation: {
            true: {
              item: "transition-none",
              cursor: "transition-none"
            },
            false: {
              item: ["data-[pressed=true]:scale-[0.97]", "transition-transform-background"],
              cursor: ["transition-transform", "!duration-300"]
            }
          }
        },
        defaultVariants: {
          variant: "flat",
          color: "primary",
          size: "md",
          radius: "md",
          isCompact: false,
          isDisabled: false,
          showShadow: false,
          disableAnimation: false,
          disableCursorAnimation: false
        },
        compoundVariants: [
          {
            showShadow: true,
            color: "default",
            class: {
              cursor: [colorVariants.shadow.default, "shadow-md"]
            }
          },
          {
            showShadow: true,
            color: "primary",
            class: {
              cursor: [colorVariants.shadow.primary, "shadow-md"]
            }
          },
          {
            showShadow: true,
            color: "secondary",
            class: {
              cursor: [colorVariants.shadow.secondary, "shadow-md"]
            }
          },
          {
            showShadow: true,
            color: "success",
            class: {
              cursor: [colorVariants.shadow.success, "shadow-md"]
            }
          },
          {
            showShadow: true,
            color: "warning",
            class: {
              cursor: [colorVariants.shadow.warning, "shadow-md"]
            }
          },
          {
            showShadow: true,
            color: "danger",
            class: {
              cursor: [colorVariants.shadow.danger, "shadow-md"]
            }
          },
          {
            isCompact: true,
            variant: "bordered",
            class: {
              item: "[&:not(:first-of-type)]:ml-[calc(theme(borderWidth.2)*-1)]"
            }
          },
          {
            disableCursorAnimation: true,
            color: "default",
            class: {
              item: [
                "data-[active=true]:bg-default-400",
                "data-[active=true]:border-default-400",
                "data-[active=true]:text-default-foreground"
              ]
            }
          },
          {
            disableCursorAnimation: true,
            color: "primary",
            class: {
              item: [
                "data-[active=true]:bg-primary",
                "data-[active=true]:border-primary",
                "data-[active=true]:text-primary-foreground"
              ]
            }
          },
          {
            disableCursorAnimation: true,
            color: "secondary",
            class: {
              item: [
                "data-[active=true]:bg-secondary",
                "data-[active=true]:border-secondary",
                "data-[active=true]:text-secondary-foreground"
              ]
            }
          },
          {
            disableCursorAnimation: true,
            color: "success",
            class: {
              item: [
                "data-[active=true]:bg-success",
                "data-[active=true]:border-success",
                "data-[active=true]:text-success-foreground"
              ]
            }
          },
          {
            disableCursorAnimation: true,
            color: "warning",
            class: {
              item: [
                "data-[active=true]:bg-warning",
                "data-[active=true]:border-warning",
                "data-[active=true]:text-warning-foreground"
              ]
            }
          },
          {
            disableCursorAnimation: true,
            color: "danger",
            class: {
              item: [
                "data-[active=true]:bg-danger",
                "data-[active=true]:border-danger",
                "data-[active=true]:text-danger-foreground"
              ]
            }
          },
          {
            disableCursorAnimation: true,
            showShadow: true,
            color: "default",
            class: {
              item: ["data-[active=true]:shadow-md", "data-[active=true]:shadow-default/50"]
            }
          },
          {
            disableCursorAnimation: true,
            showShadow: true,
            color: "primary",
            class: {
              item: ["data-[active=true]:shadow-md", "data-[active=true]:shadow-primary/40"]
            }
          },
          {
            disableCursorAnimation: true,
            showShadow: true,
            color: "secondary",
            class: {
              item: ["data-[active=true]:shadow-md", "data-[active=true]:shadow-secondary/40"]
            }
          },
          {
            disableCursorAnimation: true,
            showShadow: true,
            color: "success",
            class: {
              item: ["data-[active=true]:shadow-md", "data-[active=true]:shadow-success/40"]
            }
          },
          {
            disableCursorAnimation: true,
            showShadow: true,
            color: "warning",
            class: {
              item: ["data-[active=true]:shadow-md", "data-[active=true]:shadow-warning/40"]
            }
          },
          {
            disableCursorAnimation: true,
            showShadow: true,
            color: "danger",
            class: {
              item: ["data-[active=true]:shadow-md", "data-[active=true]:shadow-danger/40"]
            }
          }
        ],
        compoundSlots: [
          {
            slots: ["item", "prev", "next"],
            class: [
              "flex",
              "flex-wrap",
              "truncate",
              "box-border",
              "outline-none",
              "items-center",
              "justify-center",
              "text-default-foreground",
              ...dataFocusVisibleClasses,
              "data-[disabled=true]:text-default-300",
              "data-[disabled=true]:pointer-events-none"
            ]
          },
          {
            slots: ["item", "prev", "next"],
            variant: ["flat", "bordered", "faded"],
            class: ["shadow-sm"]
          },
          {
            slots: ["item", "prev", "next"],
            variant: "flat",
            class: ["bg-default-100", "data-[hover=true]:bg-default-200", "active:bg-default-300"]
          },
          {
            slots: ["item", "prev", "next"],
            variant: "faded",
            class: ["bg-default-50", "data-[hover=true]:bg-default-100", "active:bg-default-200"]
          },
          {
            slots: ["item", "prev", "next"],
            variant: "light",
            class: ["data-[hover=true]:bg-default-100", "active:bg-default-200"]
          },
          {
            slots: ["item", "cursor", "prev", "next"],
            size: "sm",
            class: "min-w-8 w-8 h-8 text-tiny"
          },
          {
            slots: ["item", "cursor", "prev", "next"],
            size: "md",
            class: "min-w-9 w-9 h-9 text-small"
          },
          {
            slots: ["item", "cursor", "prev", "next"],
            size: "lg",
            class: "min-w-10 w-10 h-10 text-medium"
          },
          {
            slots: ["wrapper", "item", "cursor", "prev", "next"],
            radius: "none",
            class: "rounded-none"
          },
          {
            slots: ["wrapper", "item", "cursor", "prev", "next"],
            radius: "sm",
            class: "rounded-small"
          },
          {
            slots: ["wrapper", "item", "cursor", "prev", "next"],
            radius: "md",
            class: "rounded-medium"
          },
          {
            slots: ["wrapper", "item", "cursor", "prev", "next"],
            radius: "lg",
            class: "rounded-large"
          },
          {
            slots: ["wrapper", "item", "cursor", "prev", "next"],
            radius: "full",
            class: "rounded-full"
          }
        ]
      });
      var toggle = tv({
        slots: {
          base: "group relative max-w-fit inline-flex items-center justify-start cursor-pointer touch-none tap-highlight-transparent",
          wrapper: [
            "px-1",
            "relative",
            "inline-flex",
            "items-center",
            "justify-start",
            "flex-shrink-0",
            "overflow-hidden",
            "bg-default-200",
            "rounded-full",
            ...groupDataFocusVisibleClasses
          ],
          thumb: [
            "z-10",
            "flex",
            "items-center",
            "justify-center",
            "bg-white",
            "shadow-small",
            "rounded-full",
            "origin-right"
          ],
          startContent: "z-0 absolute left-1.5 text-current",
          endContent: "z-0 absolute right-1.5 text-default-600",
          thumbIcon: "text-black",
          label: "relative text-foreground select-none"
        },
        variants: {
          color: {
            default: {
              wrapper: [
                "group-data-[selected=true]:bg-default-400",
                "group-data-[selected=true]:text-default-foreground"
              ]
            },
            primary: {
              wrapper: [
                "group-data-[selected=true]:bg-primary",
                "group-data-[selected=true]:text-primary-foreground"
              ]
            },
            secondary: {
              wrapper: [
                "group-data-[selected=true]:bg-secondary",
                "group-data-[selected=true]:text-secondary-foreground"
              ]
            },
            success: {
              wrapper: [
                "group-data-[selected=true]:bg-success",
                "group-data-[selected=true]:text-success-foreground"
              ]
            },
            warning: {
              wrapper: [
                "group-data-[selected=true]:bg-warning",
                "group-data-[selected=true]:text-warning-foreground"
              ]
            },
            danger: {
              wrapper: [
                "group-data-[selected=true]:bg-danger",
                "data-[selected=true]:text-danger-foreground"
              ]
            }
          },
          size: {
            sm: {
              wrapper: "w-10 h-6 mr-2",
              thumb: [
                "w-4 h-4 text-tiny",
                "group-data-[selected=true]:ml-4"
              ],
              endContent: "text-tiny",
              startContent: "text-tiny",
              label: "text-small"
            },
            md: {
              wrapper: "w-12 h-7 mr-2",
              thumb: [
                "w-5 h-5 text-small",
                "group-data-[selected=true]:ml-5"
              ],
              endContent: "text-small",
              startContent: "text-small",
              label: "text-medium"
            },
            lg: {
              wrapper: "w-14 h-8 mr-2",
              thumb: [
                "w-6 h-6 text-medium",
                "group-data-[selected=true]:ml-6"
              ],
              endContent: "text-medium",
              startContent: "text-medium",
              label: "text-large"
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none"
            }
          },
          disableAnimation: {
            true: {
              wrapper: "transition-none",
              thumb: "transition-none"
            },
            false: {
              wrapper: "transition-background",
              thumb: "transition-all",
              startContent: [
                "opacity-0",
                "scale-50",
                "transition-transform-opacity",
                "group-data-[selected=true]:scale-100",
                "group-data-[selected=true]:opacity-100"
              ],
              endContent: [
                "opacity-100",
                "transition-transform-opacity",
                "group-data-[selected=true]:translate-x-3",
                "group-data-[selected=true]:opacity-0"
              ]
            }
          }
        },
        defaultVariants: {
          color: "primary",
          size: "md",
          isDisabled: false,
          disableAnimation: false
        },
        compoundVariants: [
          {
            disableAnimation: false,
            size: "sm",
            class: {
              thumb: ["group-data-[pressed=true]:w-5", "group-data-[selected]:group-data-[pressed]:ml-3"]
            }
          },
          {
            disableAnimation: false,
            size: "md",
            class: {
              thumb: ["group-data-[pressed=true]:w-6", "group-data-[selected]:group-data-[pressed]:ml-4"]
            }
          },
          {
            disableAnimation: false,
            size: "lg",
            class: {
              thumb: ["group-data-[pressed=true]:w-7", "group-data-[selected]:group-data-[pressed]:ml-5"]
            }
          }
        ]
      });
      var accordion = tv({
        base: "px-2",
        variants: {
          variant: {
            light: "",
            shadow: "px-4 shadow-medium rounded-medium bg-content1",
            bordered: "px-4 border-medium border-divider rounded-medium",
            splitted: "group is-splitted flex flex-col gap-2"
          },
          fullWidth: {
            true: "w-full"
          }
        },
        defaultVariants: {
          variant: "light",
          fullWidth: true
        }
      });
      var accordionItem = tv({
        slots: {
          base: [
            "group-[.is-splitted]:px-4",
            "group-[.is-splitted]:bg-content1",
            "group-[.is-splitted]:shadow-medium",
            "group-[.is-splitted]:rounded-medium"
          ],
          heading: "",
          trigger: [
            "flex py-4 w-full h-full gap-3 outline-none items-center tap-highlight-transparent",
            ...dataFocusVisibleClasses
          ],
          startContent: "flex-shrink-0",
          indicator: "text-default-400",
          titleWrapper: "flex-1 flex flex-col text-left",
          title: "text-foreground text-large",
          subtitle: "text-small text-foreground-500 font-normal",
          content: "py-2"
        },
        variants: {
          isCompact: {
            true: {
              trigger: "py-2",
              title: "text-medium",
              subtitle: "text-small",
              indicator: "text-medium",
              content: "py-1"
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none"
            }
          },
          hideIndicator: {
            true: {
              indicator: "hidden"
            }
          },
          disableAnimation: {
            true: {
              content: "hidden data-[open=true]:block"
            },
            false: {
              indicator: "transition-transform",
              trigger: "transition-opacity"
            }
          },
          disableIndicatorAnimation: {
            true: {
              indicator: "transition-none"
            },
            false: {
              indicator: "rotate-0 data-[open=true]:-rotate-90"
            }
          }
        },
        defaultVariants: {
          size: "md",
          radius: "lg",
          isDisabled: false,
          hideIndicator: false,
          disableAnimation: false,
          disableIndicatorAnimation: false
        }
      });
      var progress = tv(
        {
          slots: {
            base: "flex flex-col gap-2 w-full",
            label: "",
            labelWrapper: "flex justify-between",
            value: "",
            track: "z-0 relative bg-default-300/50 overflow-hidden",
            indicator: "h-full"
          },
          variants: {
            color: {
              default: {
                indicator: "bg-default-400"
              },
              primary: {
                indicator: "bg-primary"
              },
              secondary: {
                indicator: "bg-secondary"
              },
              success: {
                indicator: "bg-success"
              },
              warning: {
                indicator: "bg-warning"
              },
              danger: {
                indicator: "bg-danger"
              }
            },
            size: {
              sm: {
                label: "text-small",
                value: "text-small",
                track: "h-1"
              },
              md: {
                label: "text-medium",
                value: "text-medium",
                track: "h-3"
              },
              lg: {
                label: "text-large",
                value: "text-large",
                track: "h-5"
              }
            },
            radius: {
              none: {
                track: "rounded-none",
                indicator: "rounded-none"
              },
              sm: {
                track: "rounded-small",
                indicator: "rounded-small"
              },
              md: {
                track: "rounded-medium",
                indicator: "rounded-medium"
              },
              lg: {
                track: "rounded-large",
                indicator: "rounded-large"
              },
              full: {
                track: "rounded-full",
                indicator: "rounded-full"
              }
            },
            isStriped: {
              true: {
                indicator: "bg-stripe-gradient bg-[length:1.25rem_1.25rem]"
              }
            },
            isIndeterminate: {
              true: {
                indicator: ["absolute", "w-full", "origin-left", "animate-indeterminate-bar"]
              }
            },
            isDisabled: {
              true: {
                base: "opacity-disabled cursor-not-allowed"
              }
            },
            disableAnimation: {
              true: {},
              false: {
                indicator: "transition-transform !duration-500"
              }
            }
          },
          defaultVariants: {
            color: "primary",
            size: "md",
            radius: "full",
            isStriped: false,
            isIndeterminate: false,
            isDisabled: false,
            disableAnimation: false
          },
          compoundVariants: [
            {
              disableAnimation: true,
              isIndeterminate: false,
              class: {
                indicator: "!transition-none motion-reduce:transition-none"
              }
            }
          ]
        },
        {
          twMerge: false
        }
      );
      var circularProgress = tv({
        slots: {
          base: "flex flex-col justify-center gap-1 max-w-fit items-center",
          label: "",
          svgWrapper: "relative block",
          svg: "z-0 relative overflow-hidden",
          track: "h-full stroke-default-300/50",
          indicator: "h-full stroke-current",
          value: "absolute font-normal inset-0 flex items-center justify-center"
        },
        variants: {
          color: {
            default: {
              svg: "text-default-400"
            },
            primary: {
              svg: "text-primary"
            },
            secondary: {
              svg: "text-secondary"
            },
            success: {
              svg: "text-success"
            },
            warning: {
              svg: "text-warning"
            },
            danger: {
              svg: "text-danger"
            }
          },
          size: {
            sm: {
              svg: "w-8 h-8",
              label: "text-small",
              value: "text-[0.5rem]"
            },
            md: {
              svg: "w-10 h-10",
              label: "text-small",
              value: "text-[0.55rem]"
            },
            lg: {
              svg: "w-12 h-12",
              label: "text-medium",
              value: "text-[0.6rem]"
            }
          },
          isIndeterminate: {
            true: {
              svg: "animate-spinner-ease-spin"
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled cursor-not-allowed"
            }
          },
          disableAnimation: {
            true: {},
            false: {
              indicator: "transition-all !duration-500"
            }
          }
        },
        defaultVariants: {
          color: "primary",
          size: "md",
          isDisabled: false,
          disableAnimation: false
        },
        compoundVariants: [
          {
            disableAnimation: true,
            isIndeterminate: false,
            class: {
              svg: "!transition-none motion-reduce:transition-none"
            }
          }
        ]
      });
      var input = tv({
        slots: {
          base: "group flex flex-col",
          label: "block text-small font-medium text-foreground-600",
          mainWrapper: "h-full",
          inputWrapper: "relative w-full inline-flex tap-highlight-transparent flex-row items-center shadow-sm px-3 gap-3",
          innerWrapper: "inline-flex h-full items-center w-full gap-1.5 box-border",
          input: "w-full h-full font-normal !bg-transparent outline-none placeholder:text-foreground-500",
          clearButton: [
            "p-2",
            "-m-2",
            "z-10",
            "hidden",
            "absolute",
            "right-3",
            "appearance-none",
            "outline-none",
            "select-none",
            "opacity-0",
            "hover:!opacity-100",
            "cursor-pointer",
            "active:!opacity-70",
            "rounded-full",
            ...dataFocusVisibleClasses
          ],
          helperWrapper: "flex relative flex-col gap-1.5 pt-1 px-1",
          description: "text-tiny text-foreground-400",
          errorMessage: "text-tiny text-danger"
        },
        variants: {
          variant: {
            flat: {
              inputWrapper: [
                "bg-default-100",
                "data-[hover=true]:bg-default-200",
                "group-data-[focus=true]:bg-default-100"
              ]
            },
            faded: {
              inputWrapper: [
                "bg-default-100",
                "border-medium",
                "border-default-200",
                "data-[hover=true]:border-default-400"
              ]
            },
            bordered: {
              inputWrapper: [
                "border-medium",
                "border-default-200",
                "data-[hover=true]:border-default-400",
                "group-data-[focus=true]:border-foreground"
              ]
            },
            underlined: {
              inputWrapper: [
                "!px-1",
                "!pb-0",
                "!gap-0",
                "relative",
                "box-border",
                "border-b-medium",
                "shadow-[0_1px_0px_0_rgba(0,0,0,0.05)]",
                "border-default-200",
                "!rounded-none",
                "hover:border-default-300",
                "after:content-['']",
                "after:w-0",
                "after:origin-center",
                "after:bg-foreground",
                "after:absolute",
                "after:left-1/2",
                "after:-translate-x-1/2",
                "after:-bottom-[2px]",
                "after:h-[2px]",
                "group-data-[focus=true]:after:w-full"
              ]
            }
          },
          color: {
            default: {},
            primary: {},
            secondary: {},
            success: {},
            warning: {},
            danger: {}
          },
          size: {
            sm: {
              label: "text-tiny",
              inputWrapper: "h-unit-8 min-h-unit-8 px-2 rounded-small",
              input: "text-small",
              clearButton: "text-medium"
            },
            md: {
              inputWrapper: "h-unit-10 min-h-unit-10 rounded-medium",
              input: "text-small",
              clearButton: "text-large"
            },
            lg: {
              inputWrapper: "h-unit-12 min-h-unit-12 rounded-large",
              input: "text-medium",
              clearButton: "text-large"
            }
          },
          radius: {
            none: {
              inputWrapper: "rounded-none"
            },
            sm: {
              inputWrapper: "rounded-small"
            },
            md: {
              inputWrapper: "rounded-medium"
            },
            lg: {
              inputWrapper: "rounded-large"
            },
            full: {
              inputWrapper: "rounded-full"
            }
          },
          labelPlacement: {
            outside: {
              label: "text-foreground pb-1.5",
              mainWrapper: "flex flex-col"
            },
            "outside-left": {
              base: "flex-row items-center flex-nowrap data-[has-helper=true]:items-start",
              inputWrapper: "flex-1",
              mainWrapper: "flex flex-col",
              label: "text-foreground pr-2"
            },
            inside: {
              label: "text-tiny cursor-text",
              inputWrapper: "flex-col items-start justify-center gap-0"
            }
          },
          fullWidth: {
            true: {
              base: "w-full"
            }
          },
          isLabelPlaceholder: {
            true: {
              label: "absolute z-10 pointer-events-none"
            }
          },
          isClearable: {
            true: {
              input: "peer pr-6",
              clearButton: "peer-data-[filled=true]:opacity-70 peer-data-[filled=true]:block"
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none",
              inputWrapper: "pointer-events-none",
              label: "pointer-events-none"
            }
          },
          isInvalid: {
            true: {
              label: "!text-danger",
              input: "placeholder:text-danger text-danger"
            }
          },
          isRequired: {
            true: {
              label: "after:content-['*'] after:text-danger after:ml-0.5"
            }
          },
          isMultiline: {
            true: {
              inputWrapper: "!h-auto",
              input: "resize-none py-2"
            }
          },
          disableAnimation: {
            true: {
              inputWrapper: "transition-none",
              label: "transition-none"
            },
            false: {
              inputWrapper: "transition-background motion-reduce:transition-none !duration-150",
              label: [
                "will-change-auto",
                "origin-top-left",
                "transition-all",
                "!duration-200",
                "!ease-out",
                "motion-reduce:transition-none"
              ],
              clearButton: ["transition-opacity", "motion-reduce:transition-none"]
            }
          }
        },
        defaultVariants: {
          variant: "flat",
          color: "default",
          size: "md",
          fullWidth: true,
          labelPlacement: "inside",
          isDisabled: false,
          disableAnimation: false
        },
        compoundVariants: [
          {
            variant: "flat",
            color: "primary",
            class: {
              inputWrapper: [
                "bg-primary-50",
                "data-[hover=true]:bg-primary-100",
                "text-primary",
                "group-data-[focus=true]:bg-primary-50",
                "placeholder:text-primary"
              ],
              input: "placeholder:text-primary",
              label: "text-primary"
            }
          },
          {
            variant: "flat",
            color: "secondary",
            class: {
              inputWrapper: [
                "bg-secondary-50",
                "text-secondary",
                "data-[hover=true]:bg-secondary-100",
                "group-data-[focus=true]:bg-secondary-50",
                "placeholder:text-secondary"
              ],
              input: "placeholder:text-secondary",
              label: "text-secondary"
            }
          },
          {
            variant: "flat",
            color: "success",
            class: {
              inputWrapper: [
                "bg-success-50",
                "text-success-600",
                "dark:text-success",
                "placeholder:text-success-600",
                "dark:placeholder:text-success",
                "data-[hover=true]:bg-success-100",
                "group-data-[focus=true]:bg-success-50"
              ],
              input: "placeholder:text-success-600 dark:placeholder:text-success",
              label: "text-success-600 dark:text-success"
            }
          },
          {
            variant: "flat",
            color: "warning",
            class: {
              inputWrapper: [
                "bg-warning-50",
                "text-warning-600",
                "dark:text-warning",
                "placeholder:text-warning-600",
                "dark:placeholder:text-warning",
                "data-[hover=true]:bg-warning-100",
                "group-data-[focus=true]:bg-warning-50"
              ],
              input: "placeholder:text-warning-600 dark:placeholder:text-warning",
              label: "text-warning-600 dark:text-warning"
            }
          },
          {
            variant: "flat",
            color: "danger",
            class: {
              inputWrapper: [
                "bg-danger-50",
                "text-danger",
                "dark:text-danger-500",
                "placeholder:text-danger",
                "dark:placeholder:text-danger-500",
                "data-[hover=true]:bg-danger-100",
                "group-data-[focus=true]:bg-danger-50"
              ],
              input: "placeholder:text-danger dark:placeholder:text-danger-500",
              label: "text-danger dark:text-danger-500"
            }
          },
          {
            variant: "faded",
            color: "primary",
            class: {
              label: "text-primary",
              inputWrapper: "data-[hover=true]:border-primary focus-within:border-primary"
            }
          },
          {
            variant: "faded",
            color: "secondary",
            class: {
              label: "text-secondary",
              inputWrapper: "data-[hover=true]:border-secondary focus-within:border-secondary"
            }
          },
          {
            variant: "faded",
            color: "success",
            class: {
              label: "text-success",
              inputWrapper: "data-[hover=true]:border-success focus-within:border-success"
            }
          },
          {
            variant: "faded",
            color: "warning",
            class: {
              label: "text-warning",
              inputWrapper: "data-[hover=true]:border-warning focus-within:border-warning"
            }
          },
          {
            variant: "faded",
            color: "danger",
            class: {
              label: "text-danger",
              inputWrapper: "data-[hover=true]:border-danger focus-within:border-danger"
            }
          },
          {
            variant: "underlined",
            color: "primary",
            class: {
              inputWrapper: "after:bg-primary",
              label: "text-primary"
            }
          },
          {
            variant: "underlined",
            color: "secondary",
            class: {
              inputWrapper: "after:bg-secondary",
              label: "text-secondary"
            }
          },
          {
            variant: "underlined",
            color: "success",
            class: {
              inputWrapper: "after:bg-success",
              label: "text-success"
            }
          },
          {
            variant: "underlined",
            color: "warning",
            class: {
              inputWrapper: "after:bg-warning",
              label: "text-warning"
            }
          },
          {
            variant: "underlined",
            color: "danger",
            class: {
              inputWrapper: "after:bg-danger",
              label: "text-danger"
            }
          },
          {
            variant: "bordered",
            color: "primary",
            class: {
              inputWrapper: "group-data-[focus=true]:border-primary",
              label: "text-primary"
            }
          },
          {
            variant: "bordered",
            color: "secondary",
            class: {
              inputWrapper: "group-data-[focus=true]:border-secondary",
              label: "text-secondary"
            }
          },
          {
            variant: "bordered",
            color: "success",
            class: {
              inputWrapper: "group-data-[focus=true]:border-success",
              label: "text-success"
            }
          },
          {
            variant: "bordered",
            color: "warning",
            class: {
              inputWrapper: "group-data-[focus=true]:border-warning",
              label: "text-warning"
            }
          },
          {
            variant: "bordered",
            color: "danger",
            class: {
              inputWrapper: "group-data-[focus=true]:border-danger",
              label: "text-danger"
            }
          },
          {
            radius: "full",
            size: ["sm"],
            class: {
              inputWrapper: "px-3"
            }
          },
          {
            radius: "full",
            size: "md",
            class: {
              inputWrapper: "px-4"
            }
          },
          {
            radius: "full",
            size: "lg",
            class: {
              inputWrapper: "px-5"
            }
          },
          {
            disableAnimation: false,
            variant: ["faded", "bordered"],
            class: {
              inputWrapper: "transition-colors motion-reduce:transition-none"
            }
          },
          {
            disableAnimation: false,
            variant: "underlined",
            class: {
              inputWrapper: "after:transition-width motion-reduce:after:transition-none"
            }
          },
          {
            variant: ["flat", "faded"],
            class: {
              inputWrapper: [
                ...groupDataFocusVisibleClasses
              ]
            }
          },
          {
            isInvalid: true,
            variant: "flat",
            class: {
              inputWrapper: [
                "bg-danger-50",
                "data-[hover=true]:bg-danger-100",
                "group-data-[focus=true]:bg-danger-50"
              ]
            }
          },
          {
            isInvalid: true,
            variant: "bordered",
            class: {
              inputWrapper: "!border-danger group-data-[focus=true]:border-danger"
            }
          },
          {
            isInvalid: true,
            variant: "underlined",
            class: {
              inputWrapper: "after:bg-danger"
            }
          },
          {
            labelPlacement: "inside",
            size: "sm",
            class: {
              inputWrapper: "h-12 py-1.5 px-3"
            }
          },
          {
            labelPlacement: "inside",
            size: "md",
            class: {
              inputWrapper: "h-14 py-2"
            }
          },
          {
            labelPlacement: "inside",
            size: "lg",
            class: {
              label: "text-small",
              inputWrapper: "h-16 py-2.5 gap-0"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: ["inside", "outside"],
            class: {
              label: [
                "font-normal",
                "group-data-[filled-within=true]:font-medium",
                "group-data-[filled-within=true]:pointer-events-auto"
              ]
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "outside",
            class: {
              base: "group relative justify-end",
              label: [
                "pb-0",
                "z-20",
                "opacity-60",
                "top-1/2",
                "-translate-y-1/2",
                "group-data-[filled-within=true]:left-0",
                "group-data-[filled-within=true]:opacity-100"
              ]
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "inside",
            size: ["sm", "md"],
            class: {
              label: ["text-small", "group-data-[filled-within=true]:text-tiny"],
              input: "pt-4"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "inside",
            size: "sm",
            class: {
              label: [
                "group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.tiny)/2_-_3px)]"
              ],
              input: "pt-4"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "inside",
            size: "md",
            class: {
              label: [
                "group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_4px)]"
              ],
              input: "pt-4"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "inside",
            size: "lg",
            class: {
              label: [
                "text-medium",
                "group-data-[filled-within=true]:text-small",
                "group-data-[filled-within=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_5px)]"
              ],
              input: "pt-5"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "outside",
            size: "sm",
            class: {
              label: [
                "left-2",
                "text-small",
                "group-data-[filled-within=true]:text-tiny",
                "group-data-[filled-within=true]:-translate-y-[calc(100%_+_theme(fontSize.tiny)/2_+_16px)]"
              ]
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "outside",
            size: "md",
            class: {
              label: [
                "left-3",
                "text-small",
                "group-data-[filled-within=true]:-translate-y-[calc(100%_+_theme(fontSize.small)/2_+_20px)]"
              ]
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "outside",
            size: "lg",
            class: {
              label: [
                "left-3",
                "text-medium",
                "group-data-[filled-within=true]:text-small",
                "group-data-[filled-within=true]:-translate-y-[calc(100%_+_theme(fontSize.small)/2_+_24px)]"
              ]
            }
          },
          {
            labelPlacement: "outside-left",
            size: "sm",
            class: {
              label: "group-data-[has-helper=true]:pt-2"
            }
          },
          {
            labelPlacement: "outside-left",
            size: "md",
            class: {
              label: "group-data-[has-helper=true]:pt-3"
            }
          },
          {
            labelPlacement: "outside-left",
            size: "lg",
            class: {
              label: "group-data-[has-helper=true]:pt-4"
            }
          }
        ]
      });
      var dropdown = tv({
        base: ["w-full", "p-1", "min-w-[200px]"]
      });
      var dropdownItem = tv({
        slots: {
          base: [
            "flex",
            "group",
            "gap-2",
            "items-center",
            "justify-between",
            "relative",
            "px-2",
            "py-1.5",
            "w-full",
            "h-full",
            "box-border",
            "rounded-small",
            "outline-none",
            "cursor-pointer",
            "tap-highlight-transparent",
            "data-[pressed=true]:opacity-70",
            ...dataFocusVisibleClasses,
            "data-[focus-visible=true]:dark:ring-offset-background-content1"
          ],
          wrapper: "w-full flex flex-col items-start justify-center",
          title: "flex-1 text-small font-normal truncate",
          description: ["w-full", "text-tiny", "text-foreground-500", "group-hover:text-current"],
          selectedIcon: ["text-inherit", "w-3", "h-3", "flex-shrink-0"],
          shortcut: [
            "px-1",
            "py-0.5",
            "rounded",
            "font-sans",
            "text-foreground-500",
            "text-tiny",
            "border-small",
            "border-default-300",
            "group-hover:border-current"
          ]
        },
        variants: {
          variant: {
            solid: {
              base: ""
            },
            bordered: {
              base: "border-medium border-transparent bg-transparent"
            },
            light: {
              base: "bg-transparent"
            },
            faded: {
              base: "border-small border-transparent hover:border-default data-[hover=true]:bg-default-100"
            },
            flat: {
              base: ""
            },
            shadow: {
              base: "data-[hover=true]:shadow-lg"
            }
          },
          color: {
            default: {},
            primary: {},
            secondary: {},
            success: {},
            warning: {},
            danger: {}
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none"
            }
          },
          disableAnimation: {
            true: {},
            false: {}
          }
        },
        defaultVariants: {
          variant: "solid",
          color: "default",
          disableAnimation: false
        },
        compoundVariants: [
          {
            variant: "solid",
            color: "default",
            class: {
              base: "data-[hover=true]:bg-default data-[hover=true]:text-default-foreground"
            }
          },
          {
            variant: "solid",
            color: "primary",
            class: {
              base: "data-[hover=true]:bg-primary data-[hover=true]:text-primary-foreground"
            }
          },
          {
            variant: "solid",
            color: "secondary",
            class: {
              base: "data-[hover=true]:bg-secondary data-[hover=true]:text-secondary-foreground"
            }
          },
          {
            variant: "solid",
            color: "success",
            class: {
              base: "data-[hover=true]:bg-success data-[hover=true]:text-success-foreground"
            }
          },
          {
            variant: "solid",
            color: "warning",
            class: {
              base: "data-[hover=true]:bg-warning data-[hover=true]:text-warning-foreground"
            }
          },
          {
            variant: "solid",
            color: "danger",
            class: {
              base: "data-[hover=true]:bg-danger data-[hover=true]:text-danger-foreground"
            }
          },
          {
            variant: "shadow",
            color: "default",
            class: {
              base: "data-[hover=true]:shadow-default/50 data-[hover=true]:bg-default data-[hover=true]:text-default-foreground"
            }
          },
          {
            variant: "shadow",
            color: "primary",
            class: {
              base: "data-[hover=true]:shadow-primary/30 data-[hover=true]:bg-primary data-[hover=true]:text-primary-foreground"
            }
          },
          {
            variant: "shadow",
            color: "secondary",
            class: {
              base: "data-[hover=true]:shadow-secondary/30 data-[hover=true]:bg-secondary data-[hover=true]:text-secondary-foreground"
            }
          },
          {
            variant: "shadow",
            color: "success",
            class: {
              base: "data-[hover=true]:shadow-success/30 data-[hover=true]:bg-success data-[hover=true]:text-success-foreground"
            }
          },
          {
            variant: "shadow",
            color: "warning",
            class: {
              base: "data-[hover=true]:shadow-warning/30 data-[hover=true]:bg-warning data-[hover=true]:text-warning-foreground"
            }
          },
          {
            variant: "shadow",
            color: "danger",
            class: {
              base: "data-[hover=true]:shadow-danger/30 data-[hover=true]:bg-danger data-[hover=true]:text-danger-foreground"
            }
          },
          {
            variant: "bordered",
            color: "default",
            class: {
              base: "data-[hover=true]:border-default"
            }
          },
          {
            variant: "bordered",
            color: "primary",
            class: {
              base: "data-[hover=true]:border-primary data-[hover=true]:text-primary"
            }
          },
          {
            variant: "bordered",
            color: "secondary",
            class: {
              base: "data-[hover=true]:border-secondary data-[hover=true]:text-secondary"
            }
          },
          {
            variant: "bordered",
            color: "success",
            class: {
              base: "data-[hover=true]:border-success data-[hover=true]:text-success"
            }
          },
          {
            variant: "bordered",
            color: "warning",
            class: {
              base: "data-[hover=true]:border-warning data-[hover=true]:text-warning"
            }
          },
          {
            variant: "bordered",
            color: "danger",
            class: {
              base: "data-[hover=true]:border-danger data-[hover=true]:text-danger"
            }
          },
          {
            variant: "flat",
            color: "default",
            class: {
              base: "data-[hover=true]:bg-default/40 data-[hover=true]:text-default-foreground"
            }
          },
          {
            variant: "flat",
            color: "primary",
            class: {
              base: "data-[hover=true]:bg-primary/20 data-[hover=true]:text-primary"
            }
          },
          {
            variant: "flat",
            color: "secondary",
            class: {
              base: "data-[hover=true]:bg-secondary/20 data-[hover=true]:text-secondary"
            }
          },
          {
            variant: "flat",
            color: "success",
            class: {
              base: "data-[hover=true]:bg-success/20 data-[hover=true]:text-success "
            }
          },
          {
            variant: "flat",
            color: "warning",
            class: {
              base: "data-[hover=true]:bg-warning/20 data-[hover=true]:text-warning"
            }
          },
          {
            variant: "flat",
            color: "danger",
            class: {
              base: "data-[hover=true]:bg-danger/20 data-[hover=true]:text-danger"
            }
          },
          {
            variant: "faded",
            color: "default",
            class: {
              base: "data-[hover=true]:text-default-foreground"
            }
          },
          {
            variant: "faded",
            color: "primary",
            class: {
              base: "data-[hover=true]:text-primary"
            }
          },
          {
            variant: "faded",
            color: "secondary",
            class: {
              base: "data-[hover=true]:text-secondary"
            }
          },
          {
            variant: "faded",
            color: "success",
            class: {
              base: "data-[hover=true]:text-success"
            }
          },
          {
            variant: "faded",
            color: "warning",
            class: {
              base: "data-[hover=true]:text-warning"
            }
          },
          {
            variant: "faded",
            color: "danger",
            class: {
              base: "data-[hover=true]:text-danger"
            }
          },
          {
            variant: "light",
            color: "default",
            class: {
              base: "data-[hover=true]:text-default-500"
            }
          },
          {
            variant: "light",
            color: "primary",
            class: {
              base: "data-[hover=true]:text-primary"
            }
          },
          {
            variant: "light",
            color: "secondary",
            class: {
              base: "data-[hover=true]:text-secondary"
            }
          },
          {
            variant: "light",
            color: "success",
            class: {
              base: "data-[hover=true]:text-success"
            }
          },
          {
            variant: "light",
            color: "warning",
            class: {
              base: "data-[hover=true]:text-warning"
            }
          },
          {
            variant: "light",
            color: "danger",
            class: {
              base: "data-[hover=true]:text-danger"
            }
          }
        ]
      });
      var dropdownSection = tv({
        slots: {
          base: "relative mb-2",
          heading: "pl-1 text-tiny text-foreground-500",
          group: "data-[has-title=true]:pt-1",
          divider: "mt-2"
        }
      });
      var dropdownMenu = tv({
        base: "w-full flex flex-col gap-0.5 p-1"
      });
      var image = tv({
        slots: {
          wrapper: "relative shadow-black/5",
          zoomedWrapper: "relative overflow-hidden rounded-inherit",
          img: "relative z-10 opacity-0 shadow-black/5 data-[loaded=true]:opacity-100",
          blurredImg: [
            "absolute",
            "z-0",
            "inset-0",
            "w-full",
            "h-full",
            "object-cover",
            "filter",
            "blur-lg",
            "scale-105",
            "saturate-150",
            "opacity-30",
            "translate-y-1"
          ]
        },
        variants: {
          radius: {
            none: {},
            sm: {},
            md: {},
            lg: {},
            full: {}
          },
          shadow: {
            none: {
              wrapper: "shadow-none",
              img: "shadow-none"
            },
            sm: {
              wrapper: "shadow-small",
              img: "shadow-small"
            },
            md: {
              wrapper: "shadow-medium",
              img: "shadow-medium"
            },
            lg: {
              wrapper: "shadow-large",
              img: "shadow-large"
            }
          },
          isZoomed: {
            true: {
              img: ["object-cover", "transform", "hover:scale-125"]
            }
          },
          showSkeleton: {
            true: {
              wrapper: [
                "group",
                "relative",
                "overflow-hidden",
                "bg-content3 dark:bg-content2",
                "before:opacity-100",
                "before:absolute",
                "before:inset-0",
                "before:-translate-x-full",
                "before:animate-[shimmer_2s_infinite]",
                "before:border-t",
                "before:border-content4/30",
                "before:bg-gradient-to-r",
                "before:from-transparent",
                "before:via-content4",
                "dark:before:via-default-700/10",
                "before:to-transparent",
                "after:opacity-100",
                "after:absolute",
                "after:inset-0",
                "after:-z-10",
                "after:bg-content3",
                "dark:after:bg-content2"
              ],
              img: "opacity-0"
            }
          },
          disableAnimation: {
            true: {
              img: "transition-none"
            },
            false: {
              img: "transition-transform-opacity motion-reduce:transition-none !duration-300"
            }
          }
        },
        defaultVariants: {
          radius: "lg",
          shadow: "none",
          isZoomed: false,
          isBlurred: false,
          showSkeleton: false,
          disableAnimation: false
        },
        compoundSlots: [
          {
            slots: ["wrapper", "img", "blurredImg", "zoomedWrapper"],
            radius: "none",
            class: "rounded-none"
          },
          {
            slots: ["wrapper", "img", "blurredImg", "zoomedWrapper"],
            radius: "full",
            class: "rounded-full"
          },
          {
            slots: ["wrapper", "img", "blurredImg", "zoomedWrapper"],
            radius: "sm",
            class: "rounded-small"
          },
          {
            slots: ["wrapper", "img", "blurredImg", "zoomedWrapper"],
            radius: "md",
            class: "rounded-md"
          },
          {
            slots: ["wrapper", "img", "blurredImg", "zoomedWrapper"],
            radius: "lg",
            class: "rounded-large"
          }
        ]
      });
      var modal = tv({
        slots: {
          wrapper: [
            "flex",
            "w-screen",
            "h-[100dvh]",
            "fixed",
            "inset-0",
            "z-50",
            "overflow-x-auto",
            "justify-center",
            "[--scale-enter:100%]",
            "[--scale-exit:100%]",
            "[--slide-enter:0px]",
            "[--slide-exit:80px]",
            "sm:[--scale-enter:100%]",
            "sm:[--scale-exit:103%]",
            "sm:[--slide-enter:0px]",
            "sm:[--slide-exit:0px]"
          ],
          base: [
            "flex",
            "flex-col",
            "relative",
            "bg-white",
            "z-50",
            "w-full",
            "box-border",
            "bg-content1",
            "outline-none",
            "mx-1",
            "my-1",
            "sm:mx-6",
            "sm:my-16"
          ],
          backdrop: "z-50",
          header: "flex py-4 px-6 flex-initial text-large font-semibold",
          body: "flex flex-1 flex-col gap-3 px-6 py-2",
          footer: "flex flex-row gap-2 px-6 py-4 justify-end",
          closeButton: [
            "absolute",
            "appearance-none",
            "outline-none",
            "select-none",
            "top-1",
            "right-1",
            "p-2",
            "text-foreground-500",
            "rounded-full",
            "hover:bg-default-100",
            "active:bg-default-200",
            "tap-highlight-transparent",
            ...dataFocusVisibleClasses
          ]
        },
        variants: {
          size: {
            xs: {
              base: "max-w-xs"
            },
            sm: {
              base: "max-w-sm"
            },
            md: {
              base: "max-w-md"
            },
            lg: {
              base: "max-w-lg"
            },
            xl: {
              base: "max-w-xl"
            },
            "2xl": {
              base: "max-w-2xl"
            },
            "3xl": {
              base: "max-w-3xl"
            },
            "4xl": {
              base: "max-w-4xl"
            },
            "5xl": {
              base: "max-w-5xl"
            },
            full: {
              base: "my-0 mx-0 sm:mx-0 sm:my-0 max-w-full h-[100dvh] !rounded-none"
            }
          },
          radius: {
            none: { base: "rounded-none" },
            sm: { base: "rounded-small" },
            md: { base: "rounded-medium" },
            lg: { base: "rounded-large" }
          },
          placement: {
            auto: {
              wrapper: "items-end sm:items-center"
            },
            center: {
              wrapper: "items-center sm:items-center"
            },
            top: {
              wrapper: "items-start sm:items-start"
            },
            "top-center": {
              wrapper: "items-start sm:items-center"
            },
            bottom: {
              wrapper: "items-end sm:items-end"
            },
            "bottom-center": {
              wrapper: "items-end sm:items-center"
            }
          },
          shadow: {
            sm: {
              base: "shadow-small"
            },
            md: {
              base: "shadow-medium"
            },
            lg: {
              base: "shadow-large"
            }
          },
          backdrop: {
            transparent: {
              backdrop: "hidden"
            },
            opaque: {
              backdrop: "bg-overlay/50 backdrop-opacity-disabled"
            },
            blur: {
              backdrop: "backdrop-blur-md backdrop-saturate-150 bg-overlay/30"
            }
          },
          scrollBehavior: {
            normal: {
              base: "overflow-y-hidden"
            },
            inside: {
              base: "max-h-[calc(100%_-_7.5rem)]",
              body: "overflow-y-auto"
            },
            outside: {
              wrapper: "items-start sm:items-start overflow-y-auto",
              base: "my-16"
            }
          }
        },
        defaultVariants: {
          size: "md",
          radius: "lg",
          shadow: "sm",
          placement: "auto",
          backdrop: "opaque",
          scrollBehavior: "normal"
        },
        compoundVariants: [
          {
            backdrop: ["opaque", "blur"],
            class: {
              backdrop: "w-screen h-screen fixed inset-0"
            }
          }
        ]
      });
      var navbar = tv({
        slots: {
          base: [
            "flex",
            "z-40",
            "w-full",
            "h-auto",
            "items-center",
            "justify-center",
            "data-[menu-open=true]:border-none"
          ],
          wrapper: [
            "z-40",
            "flex",
            "px-6",
            "gap-4",
            "w-full",
            "flex-row",
            "relative",
            "flex-nowrap",
            "items-center",
            "justify-between",
            "h-[var(--navbar-height)]"
          ],
          toggle: [
            "group",
            "flex",
            "items-center",
            "justify-center",
            "w-6",
            "h-full",
            "outline-none",
            "rounded-small",
            "tap-highlight-transparent",
            ...dataFocusVisibleClasses
          ],
          srOnly: ["sr-only"],
          toggleIcon: [
            "w-full",
            "h-full",
            "pointer-events-none",
            "flex",
            "flex-col",
            "items-center",
            "justify-center",
            "text-inherit",
            "group-data-[pressed=true]:opacity-70",
            "transition-opacity",
            "before:content-['']",
            "before:block",
            "before:h-px",
            "before:w-6",
            "before:bg-current",
            "before:transition-transform",
            "before:duration-150",
            "before:-translate-y-1",
            "before:rotate-0",
            "group-data-[open=true]:before:translate-y-px",
            "group-data-[open=true]:before:rotate-45",
            "after:content-['']",
            "after:block",
            "after:h-px",
            "after:w-6",
            "after:bg-current",
            "after:transition-transform",
            "after:duration-150",
            "after:translate-y-1",
            "after:rotate-0",
            "group-data-[open=true]:after:translate-y-0",
            "group-data-[open=true]:after:-rotate-45"
          ],
          brand: [
            "flex",
            "basis-0",
            "flex-row",
            "flex-grow",
            "flex-nowrap",
            "justify-start",
            "bg-transparent",
            "items-center",
            "no-underline",
            "text-medium",
            "whitespace-nowrap",
            "box-border"
          ],
          content: [
            "flex",
            "gap-4",
            "h-full",
            "flex-row",
            "flex-nowrap",
            "items-center",
            "data-[justify=start]:justify-start",
            "data-[justify=start]:flex-grow",
            "data-[justify=start]:basis-0",
            "data-[justify=center]:justify-center",
            "data-[justify=end]:justify-end",
            "data-[justify=end]:flex-grow",
            "data-[justify=end]:basis-0"
          ],
          item: [
            "text-medium",
            "whitespace-nowrap",
            "box-border",
            "list-none",
            "data-[active=true]:font-semibold"
          ],
          menu: [
            "z-30",
            "px-6",
            "pt-2",
            "fixed",
            "flex",
            "max-w-full",
            "top-[var(--navbar-height)]",
            "inset-x-0",
            "bottom-0",
            "w-screen",
            "flex-col",
            "gap-2",
            "overflow-y-auto"
          ],
          menuItem: ["text-large"]
        },
        variants: {
          position: {
            static: {
              base: "static"
            },
            sticky: {
              base: "sticky top-0 inset-x-0"
            }
          },
          maxWidth: {
            sm: {
              wrapper: "max-w-[640px]"
            },
            md: {
              wrapper: "max-w-[768px]"
            },
            lg: {
              wrapper: "max-w-[1024px]"
            },
            xl: {
              wrapper: "max-w-[1280px]"
            },
            "2xl": {
              wrapper: "max-w-[1536px]"
            },
            full: {
              wrapper: "max-w-full"
            }
          },
          hideOnScroll: {
            true: {
              base: ["sticky", "top-0", "inset-x-0"]
            }
          },
          isBordered: {
            true: {
              base: ["border-b", "border-divider"]
            }
          },
          isBlurred: {
            false: {
              base: "bg-background",
              menu: "bg-background"
            },
            true: {
              base: [
                "backdrop-blur-lg",
                "data-[menu-open=true]:backdrop-blur-xl",
                "backdrop-saturate-150",
                "bg-background/70"
              ],
              menu: ["backdrop-blur-xl", "backdrop-saturate-150", "bg-background/70"]
            }
          },
          disableAnimation: {
            true: {
              menu: ["hidden", "h-[calc(100dvh_-_var(--navbar-height)_-_1px)]", "data-[open=true]:flex"]
            }
          }
        },
        defaultVariants: {
          maxWidth: "lg",
          position: "sticky",
          isBlurred: true
        }
      });
      var table = tv({
        slots: {
          base: "flex flex-col relative gap-4",
          wrapper: [
            "p-4",
            "z-0",
            "flex",
            "flex-col",
            "relative",
            "justify-between",
            "gap-4",
            "shadow-small",
            "bg-content1",
            "overflow-auto"
          ],
          table: "min-w-full h-auto",
          thead: "[&>tr]:first:rounded-lg",
          tbody: "",
          tr: ["group", "outline-none", ...dataFocusVisibleClasses],
          th: [
            "group",
            "px-3",
            "h-10",
            "text-left",
            "align-middle",
            "bg-default-100",
            "whitespace-nowrap",
            "text-foreground-500",
            "text-tiny",
            "font-semibold",
            "first:rounded-l-lg",
            "last:rounded-r-lg",
            "outline-none",
            "data-[sortable=true]:transition-colors",
            "data-[sortable=true]:cursor-pointer",
            "data-[hover=true]:text-foreground-400",
            ...dataFocusVisibleClasses
          ],
          td: [
            "py-2",
            "px-3",
            "relative",
            "align-middle",
            "whitespace-normal",
            "text-small",
            "font-normal",
            "outline-none",
            "[&>*]:z-1",
            "[&>*]:relative",
            ...dataFocusVisibleClasses,
            "before:content-['']",
            "before:absolute",
            "before:z-0",
            "before:inset-0",
            "before:opacity-0",
            "data-[selected=true]:before:opacity-100",
            "group-data-[disabled=true]:text-foreground-300"
          ],
          tfoot: "",
          sortIcon: [
            "ml-2",
            "mb-px",
            "opacity-0",
            "text-inherit",
            "inline-block",
            "transition-transform-opacity",
            "data-[visible=true]:opacity-100",
            "group-data-[hover=true]:opacity-100",
            "data-[direction=ascending]:rotate-180"
          ],
          emptyWrapper: "text-foreground-400 align-middle text-center h-40",
          loadingWrapper: "absolute inset-0 flex items-center justify-center"
        },
        variants: {
          color: {
            default: {
              td: "before:bg-default/40 data-[selected=true]:text-default-foreground"
            },
            primary: {
              td: "before:bg-primary/20 data-[selected=true]:text-primary"
            },
            secondary: {
              td: "before:bg-secondary/20 data-[selected=true]:text-secondary"
            },
            success: {
              td: "before:bg-success/20 data-[selected=true]:text-success-600 dark:data-[selected=true]:text-success"
            },
            warning: {
              td: "before:bg-warning/20 data-[selected=true]:text-warning-600 dark:data-[selected=true]:text-warning"
            },
            danger: {
              td: "before:bg-danger/20 data-[selected=true]:text-danger dark:data-[selected=true]:text-danger-500"
            }
          },
          layout: {
            auto: {
              table: "table-auto"
            },
            fixed: {
              table: "table-fixed"
            }
          },
          radius: {
            none: {
              wrapper: "rounded-none"
            },
            sm: {
              wrapper: "rounded-small"
            },
            md: {
              wrapper: "rounded-medium"
            },
            lg: {
              wrapper: "rounded-large"
            }
          },
          shadow: {
            none: {
              wrapper: "shadow-none"
            },
            sm: {
              wrapper: "shadow-small"
            },
            md: {
              wrapper: "shadow-medium"
            },
            lg: {
              wrapper: "shadow-large"
            }
          },
          hideHeader: {
            true: {
              thead: "hidden"
            }
          },
          isStriped: {
            true: {
              td: [
                "group-data-[odd=true]:before:bg-default-100",
                "group-data-[odd=true]:before:opacity-100"
              ]
            }
          },
          isCompact: {
            true: {
              td: "py-1"
            },
            false: {}
          },
          isHeaderSticky: {
            true: {
              thead: "sticky top-0 z-20 [&>tr]:first:shadow-small"
            }
          },
          isSelectable: {
            true: {
              tr: "cursor-default",
              td: [
                "group-aria-[selected=false]:group-data-[hover=true]:before:bg-default-100",
                "group-aria-[selected=false]:group-data-[hover=true]:before:opacity-70"
              ]
            }
          },
          isMultiSelectable: {
            true: {
              td: [
                "group-data-[first=true]:first:before:rounded-tl-lg",
                "group-data-[first=true]:last:before:rounded-tr-lg",
                "group-data-[middle=true]:before:rounded-none",
                "group-data-[last=true]:first:before:rounded-bl-lg",
                "group-data-[last=true]:last:before:rounded-br-lg"
              ]
            },
            false: {
              td: ["first:before:rounded-l-lg", "last:before:rounded-r-lg"]
            }
          },
          fullWidth: {
            true: {
              base: "w-full",
              wrapper: "w-full",
              table: "w-full"
            }
          }
        },
        defaultVariants: {
          layout: "auto",
          shadow: "sm",
          radius: "lg",
          color: "default",
          isCompact: false,
          hideHeader: false,
          isStriped: false,
          fullWidth: true,
          disableAnimation: false
        }
      });
      var spacer = tv({
        base: "w-px h-px inline-block",
        variants: {
          isInline: {
            true: "inline-block",
            false: "block"
          }
        },
        defaultVariants: {
          isInline: false
        }
      });
      var divider = tv({
        base: "shrink-0 bg-divider border-none",
        variants: {
          orientation: {
            horizontal: "w-full h-divider",
            vertical: "h-full w-divider"
          }
        },
        defaultVariants: {
          orientation: "horizontal"
        }
      });
      var kbd = tv({
        slots: {
          base: [
            "px-1.5",
            "py-0.5",
            "inline-flex",
            "space-x-0.5",
            "items-center",
            "font-sans",
            "font-normal",
            "text-center",
            "text-small",
            "shadow-small",
            "bg-default-100",
            "text-foreground-600",
            "rounded-small"
          ],
          abbr: "no-underline",
          content: ""
        },
        variants: {},
        defaultVariants: {}
      });
      var tabs = tv({
        slots: {
          base: "inline-flex",
          tabList: [
            "flex",
            "p-1",
            "h-fit",
            "gap-2",
            "items-center",
            "flex-nowrap",
            "overflow-x-scroll",
            "scrollbar-hide",
            "bg-default-100"
          ],
          tab: [
            "z-0",
            "w-full",
            "px-3",
            "py-1",
            "flex",
            "group",
            "relative",
            "justify-center",
            "items-center",
            "outline-none",
            "cursor-pointer",
            "transition-opacity",
            "tap-highlight-transparent",
            "data-[disabled=true]:cursor-not-allowed",
            "data-[disabled=true]:opacity-30",
            "data-[hover-unselected=true]:opacity-disabled",
            ...dataFocusVisibleClasses
          ],
          tabContent: [
            "relative",
            "z-10",
            "text-inherit",
            "whitespace-nowrap",
            "transition-colors",
            "text-default-500",
            "group-data-[selected=true]:text-foreground"
          ],
          cursor: ["absolute", "z-0", "bg-white"],
          panel: [
            "py-3",
            "px-1",
            "outline-none",
            ...dataFocusVisibleClasses
          ]
        },
        variants: {
          variant: {
            solid: {
              cursor: "inset-0"
            },
            light: {
              tabList: "bg-transparent dark:bg-transparent",
              cursor: "inset-0"
            },
            underlined: {
              tabList: "bg-transparent dark:bg-transparent",
              cursor: "h-[2px] w-[80%] bottom-0 shadow-[0_1px_0px_0_rgba(0,0,0,0.05)]"
            },
            bordered: {
              tabList: "bg-transparent dark:bg-transparent border-medium border-default-200 shadow-sm",
              cursor: "inset-0"
            }
          },
          color: {
            default: {},
            primary: {},
            secondary: {},
            success: {},
            warning: {},
            danger: {}
          },
          size: {
            sm: {
              tabList: "rounded-medium",
              tab: "h-7 text-tiny rounded-small",
              cursor: "rounded-small"
            },
            md: {
              tabList: "rounded-medium",
              tab: "h-8 text-small rounded-small",
              cursor: "rounded-small"
            },
            lg: {
              tabList: "rounded-large",
              tab: "h-9 text-medium rounded-medium",
              cursor: "rounded-medium"
            }
          },
          radius: {
            none: {
              tabList: "rounded-none",
              tab: "rounded-none",
              cursor: "rounded-none"
            },
            sm: {
              tabList: "rounded-medium",
              tab: "rounded-small",
              cursor: "rounded-small"
            },
            md: {
              tabList: "rounded-medium",
              tab: "rounded-small",
              cursor: "rounded-small"
            },
            lg: {
              tabList: "rounded-large",
              tab: "rounded-medium",
              cursor: "rounded-medium"
            },
            full: {
              tabList: "rounded-full",
              tab: "rounded-full",
              cursor: "rounded-full"
            }
          },
          fullWidth: {
            true: {
              base: "w-full",
              tabList: "w-full"
            }
          },
          isDisabled: {
            true: {
              tabList: "opacity-disabled pointer-events-none"
            }
          },
          disableAnimation: {
            true: {
              tab: "transition-none",
              tabContent: "transition-none"
            }
          }
        },
        defaultVariants: {
          color: "default",
          variant: "solid",
          size: "md",
          fullWidth: false,
          isDisabled: false,
          disableAnimation: false
        },
        compoundVariants: [
          {
            variant: ["solid", "bordered", "light"],
            color: "default",
            class: {
              cursor: ["bg-background", "dark:bg-default", "shadow-small"],
              tabContent: "group-data-[selected=true]:text-default-foreground"
            }
          },
          {
            variant: ["solid", "bordered", "light"],
            color: "primary",
            class: {
              cursor: colorVariants.solid.primary,
              tabContent: "group-data-[selected=true]:text-primary-foreground"
            }
          },
          {
            variant: ["solid", "bordered", "light"],
            color: "secondary",
            class: {
              cursor: colorVariants.solid.secondary,
              tabContent: "group-data-[selected=true]:text-secondary-foreground"
            }
          },
          {
            variant: ["solid", "bordered", "light"],
            color: "success",
            class: {
              cursor: colorVariants.solid.success,
              tabContent: "group-data-[selected=true]:text-success-foreground"
            }
          },
          {
            variant: ["solid", "bordered", "light"],
            color: "warning",
            class: {
              cursor: colorVariants.solid.warning,
              tabContent: "group-data-[selected=true]:text-warning-foreground"
            }
          },
          {
            variant: ["solid", "bordered", "light"],
            color: "danger",
            class: {
              cursor: colorVariants.solid.danger,
              tabContent: "group-data-[selected=true]:text-danger-foreground"
            }
          },
          {
            variant: "underlined",
            color: "default",
            class: {
              cursor: "bg-foreground",
              tabContent: "group-data-[selected=true]:text-foreground"
            }
          },
          {
            variant: "underlined",
            color: "primary",
            class: {
              cursor: "bg-primary",
              tabContent: "group-data-[selected=true]:text-primary"
            }
          },
          {
            variant: "underlined",
            color: "secondary",
            class: {
              cursor: "bg-secondary",
              tabContent: "group-data-[selected=true]:text-secondary"
            }
          },
          {
            variant: "underlined",
            color: "success",
            class: {
              cursor: "bg-success",
              tabContent: "group-data-[selected=true]:text-success"
            }
          },
          {
            variant: "underlined",
            color: "warning",
            class: {
              cursor: "bg-warning",
              tabContent: "group-data-[selected=true]:text-warning"
            }
          },
          {
            variant: "underlined",
            color: "danger",
            class: {
              cursor: "bg-danger",
              tabContent: "group-data-[selected=true]:text-danger"
            }
          },
          {
            disableAnimation: true,
            variant: "underlined",
            class: {
              tab: [
                "after:content-['']",
                "after:absolute",
                "after:bottom-0",
                "after:h-[2px]",
                "after:w-[80%]",
                "after:opacity-0",
                "after:shadow-[0_1px_0px_0_rgba(0,0,0,0.05)]",
                "data-[selected=true]:after:opacity-100"
              ]
            }
          },
          {
            disableAnimation: true,
            color: "default",
            variant: ["solid", "bordered", "light"],
            class: {
              tab: "data-[selected=true]:bg-default data-[selected=true]:text-default-foreground"
            }
          },
          {
            disableAnimation: true,
            color: "primary",
            variant: ["solid", "bordered", "light"],
            class: {
              tab: "data-[selected=true]:bg-primary data-[selected=true]:text-primary-foreground"
            }
          },
          {
            disableAnimation: true,
            color: "secondary",
            variant: ["solid", "bordered", "light"],
            class: {
              tab: "data-[selected=true]:bg-secondary data-[selected=true]:text-secondary-foreground"
            }
          },
          {
            disableAnimation: true,
            color: "success",
            variant: ["solid", "bordered", "light"],
            class: {
              tab: "data-[selected=true]:bg-success data-[selected=true]:text-success-foreground"
            }
          },
          {
            disableAnimation: true,
            color: "warning",
            variant: ["solid", "bordered", "light"],
            class: {
              tab: "data-[selected=true]:bg-warning data-[selected=true]:text-warning-foreground"
            }
          },
          {
            disableAnimation: true,
            color: "danger",
            variant: ["solid", "bordered", "light"],
            class: {
              tab: "data-[selected=true]:bg-danger data-[selected=true]:text-danger-foreground"
            }
          },
          {
            disableAnimation: true,
            color: "default",
            variant: "underlined",
            class: {
              tab: "data-[selected=true]:after:bg-foreground"
            }
          },
          {
            disableAnimation: true,
            color: "primary",
            variant: "underlined",
            class: {
              tab: "data-[selected=true]:after:bg-primary"
            }
          },
          {
            disableAnimation: true,
            color: "secondary",
            variant: "underlined",
            class: {
              tab: "data-[selected=true]:after:bg-secondary"
            }
          },
          {
            disableAnimation: true,
            color: "success",
            variant: "underlined",
            class: {
              tab: "data-[selected=true]:after:bg-success"
            }
          },
          {
            disableAnimation: true,
            color: "warning",
            variant: "underlined",
            class: {
              tab: "data-[selected=true]:after:bg-warning"
            }
          },
          {
            disableAnimation: true,
            color: "danger",
            variant: "underlined",
            class: {
              tab: "data-[selected=true]:after:bg-danger"
            }
          }
        ],
        compoundSlots: [
          {
            variant: "underlined",
            slots: ["tab", "tabList", "cursor"],
            class: ["rounded-none"]
          }
        ]
      });
      var skeleton = tv({
        slots: {
          base: [
            "group",
            "relative",
            "overflow-hidden",
            "bg-content3 dark:bg-content2",
            "before:opacity-100",
            "before:absolute",
            "before:inset-0",
            "before:-translate-x-full",
            "before:animate-[shimmer_2s_infinite]",
            "before:border-t",
            "before:border-content4/30",
            "before:bg-gradient-to-r",
            "before:from-transparent",
            "before:via-content4",
            "dark:before:via-default-700/10",
            "before:to-transparent",
            "after:opacity-100",
            "after:absolute",
            "after:inset-0",
            "after:-z-10",
            "after:bg-content3",
            "dark:after:bg-content2",
            "data-[loaded=true]:bg-transparent",
            "data-[loaded=true]:before:opacity-0 data-[loaded=true]:before:animate-none",
            "data-[loaded=true]:after:opacity-0"
          ],
          content: ["opacity-0", "group-data-[loaded=true]:opacity-100"]
        },
        variants: {
          disableAnimation: {
            true: {
              base: "before:transition-none",
              content: "transition-none"
            },
            false: {
              base: "transition-background !duration-300 before:transition-opacity before:!duration-300",
              content: "transition-opacity motion-reduce:transition-none !duration-300"
            }
          }
        },
        defaultVariants: {
          disableAnimation: false
        }
      });
      var select = tv({
        slots: {
          base: "group inline-flex flex-col relative w-full",
          label: "block text-small font-medium text-foreground-500 pointer-events-none",
          mainWrapper: "w-full flex flex-col",
          trigger: "relative px-3 gap-3 w-full inline-flex flex-row items-center shadow-sm outline-none tap-highlight-transparent",
          innerWrapper: "inline-flex h-full w-[calc(100%_-_theme(spacing.unit-6))] items-center gap-1.5 box-border",
          selectorIcon: "absolute right-3 w-unit-4 h-unit-4",
          spinner: "absolute right-3",
          value: "font-normal w-full text-left opacity-60 group-data-[filled=true]:opacity-100",
          listboxWrapper: "scroll-py-6 max-h-64 w-full",
          listbox: "",
          popover: "w-full p-1 overflow-hidden",
          helperWrapper: "flex relative flex-col gap-1.5 pt-1 px-1",
          description: "text-tiny text-foreground-400",
          errorMessage: "text-tiny text-danger"
        },
        variants: {
          variant: {
            flat: {
              trigger: [
                "bg-default-100",
                "data-[hover=true]:bg-default-200",
                "group-data-[focus=true]:bg-default-100"
              ]
            },
            faded: {
              trigger: [
                "bg-default-100",
                "border-medium",
                "border-default-200",
                "data-[hover=true]:border-default-400"
              ]
            },
            bordered: {
              trigger: [
                "border-medium",
                "border-default-200",
                "data-[hover=true]:border-default-400",
                "data-[open=true]:border-foreground",
                "data-[focus=true]:border-foreground"
              ]
            },
            underlined: {
              trigger: [
                "!px-1",
                "!pb-0",
                "!gap-0",
                "relative",
                "box-border",
                "border-b-medium",
                "shadow-[0_1px_0px_0_rgba(0,0,0,0.05)]",
                "border-default-200",
                "!rounded-none",
                "hover:border-default-300",
                "after:content-['']",
                "after:w-0",
                "after:origin-center",
                "after:bg-foreground",
                "after:absolute",
                "after:left-1/2",
                "after:-translate-x-1/2",
                "after:-bottom-[2px]",
                "after:h-[2px]",
                "data-[open=true]:after:w-full",
                "data-[focus=true]:after:w-full"
              ]
            }
          },
          color: {
            default: {},
            primary: {},
            secondary: {},
            success: {},
            warning: {},
            danger: {}
          },
          size: {
            sm: {
              label: "text-tiny",
              trigger: "h-unit-8 min-h-unit-8 px-2 rounded-small",
              value: "text-small"
            },
            md: {
              trigger: "h-unit-10 min-h-unit-10 rounded-medium",
              value: "text-small"
            },
            lg: {
              trigger: "h-unit-12 min-h-unit-12 rounded-large",
              value: "text-medium"
            }
          },
          radius: {
            none: {
              trigger: "rounded-none"
            },
            sm: {
              trigger: "rounded-small"
            },
            md: {
              trigger: "rounded-medium"
            },
            lg: {
              trigger: "rounded-large"
            },
            full: {
              trigger: "rounded-full"
            }
          },
          labelPlacement: {
            outside: {
              base: "flex flex-col",
              label: "text-foreground pb-1.5"
            },
            "outside-left": {
              base: "flex-row items-center flex-nowrap items-start",
              label: "text-foreground pr-2"
            },
            inside: {
              label: "text-tiny cursor-pointer",
              trigger: "flex-col items-start justify-center gap-0"
            }
          },
          fullWidth: {
            true: {
              base: "w-full"
            }
          },
          isLabelPlaceholder: {
            true: {
              label: "absolute z-10"
            }
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none",
              trigger: "pointer-events-none"
            }
          },
          isInvalid: {
            true: {
              label: "!text-danger",
              value: "text-danger",
              selectorIcon: "text-danger"
            }
          },
          isRequired: {
            true: {
              label: "after:content-['*'] after:text-danger after:ml-0.5"
            }
          },
          isMultiline: {
            true: {
              trigger: "!h-auto"
            },
            false: {
              value: "truncate"
            }
          },
          disableAnimation: {
            true: {
              trigger: "after:transition-none",
              base: "transition-none",
              label: "transition-none",
              selectorIcon: "transition-none"
            },
            false: {
              base: "transition-background motion-reduce:transition-none !duration-150",
              label: [
                "will-change-auto",
                "origin-top-left",
                "transition-all",
                "!duration-200",
                "!ease-out",
                "motion-reduce:transition-none"
              ],
              selectorIcon: "transition-transform duration-150 ease motion-reduce:transition-none"
            }
          },
          disableSelectorIconRotation: {
            true: {},
            false: {
              selectorIcon: "data-[open=true]:rotate-180"
            }
          }
        },
        defaultVariants: {
          variant: "flat",
          color: "default",
          size: "md",
          labelPlacement: "inside",
          fullWidth: true,
          isDisabled: false,
          isMultiline: false,
          disableAnimation: false,
          disableSelectorIconRotation: false
        },
        compoundVariants: [
          {
            variant: "flat",
            color: "primary",
            class: {
              trigger: [
                "bg-primary-50",
                "text-primary",
                "data-[hover=true]:bg-primary-100",
                "group-data-[focus=true]:bg-primary-50"
              ],
              value: "text-primary",
              label: "text-primary"
            }
          },
          {
            variant: "flat",
            color: "secondary",
            class: {
              trigger: [
                "bg-secondary-50",
                "text-secondary",
                "data-[hover=true]:bg-secondary-100",
                "group-data-[focus=true]:bg-secondary-50"
              ],
              value: "text-secondary",
              label: "text-secondary"
            }
          },
          {
            variant: "flat",
            color: "success",
            class: {
              trigger: [
                "bg-success-50",
                "text-success-600",
                "dark:text-success",
                "data-[hover=true]:bg-success-100",
                "group-data-[focus=true]:bg-success-50"
              ],
              value: "text-success-600 dark:text-success",
              label: "text-success-600 dark:text-success"
            }
          },
          {
            variant: "flat",
            color: "warning",
            class: {
              trigger: [
                "bg-warning-50",
                "text-warning-600",
                "dark:text-warning",
                "data-[hover=true]:bg-warning-100",
                "group-data-[focus=true]:bg-warning-50"
              ],
              value: "text-warning-600 dark:text-warning",
              label: "text-warning-600 dark:text-warning"
            }
          },
          {
            variant: "flat",
            color: "danger",
            class: {
              trigger: [
                "bg-danger-50",
                "text-danger",
                "dark:text-danger-500",
                "data-[hover=true]:bg-danger-100",
                "group-data-[focus=true]:bg-danger-50"
              ],
              value: "text-danger dark:text-danger-500",
              label: "text-danger dark:text-danger-500"
            }
          },
          {
            variant: "faded",
            color: "primary",
            class: {
              trigger: "data-[hover=true]:border-primary",
              label: "text-primary"
            }
          },
          {
            variant: "faded",
            color: "secondary",
            class: {
              trigger: "data-[hover=true]:border-secondary",
              label: "text-secondary"
            }
          },
          {
            variant: "faded",
            color: "success",
            class: {
              trigger: "data-[hover=true]:border-success",
              label: "text-success"
            }
          },
          {
            variant: "faded",
            color: "warning",
            class: {
              trigger: "data-[hover=true]:border-warning",
              label: "text-warning"
            }
          },
          {
            variant: "faded",
            color: "danger",
            class: {
              trigger: "data-[hover=true]:border-danger",
              label: "text-danger"
            }
          },
          {
            variant: "underlined",
            color: "primary",
            class: {
              trigger: "after:bg-primary",
              label: "text-primary"
            }
          },
          {
            variant: "underlined",
            color: "secondary",
            class: {
              trigger: "after:bg-secondary",
              label: "text-secondary"
            }
          },
          {
            variant: "underlined",
            color: "success",
            class: {
              trigger: "after:bg-success",
              label: "text-success"
            }
          },
          {
            variant: "underlined",
            color: "warning",
            class: {
              trigger: "after:bg-warning",
              label: "text-warning"
            }
          },
          {
            variant: "underlined",
            color: "danger",
            class: {
              trigger: "after:bg-danger",
              label: "text-danger"
            }
          },
          {
            variant: "bordered",
            color: "primary",
            class: {
              trigger: ["data-[open=true]:border-primary", "data-[focus=true]:border-primary"],
              label: "text-primary"
            }
          },
          {
            variant: "bordered",
            color: "secondary",
            class: {
              trigger: ["data-[open=true]:border-secondary", "data-[focus=true]:border-secondary"],
              label: "text-secondary"
            }
          },
          {
            variant: "bordered",
            color: "success",
            class: {
              trigger: ["data-[open=true]:border-success", "data-[focus=true]:border-success"],
              label: "text-success"
            }
          },
          {
            variant: "bordered",
            color: "warning",
            class: {
              trigger: ["data-[open=true]:border-warning", "data-[focus=true]:border-warning"],
              label: "text-warning"
            }
          },
          {
            variant: "bordered",
            color: "danger",
            class: {
              trigger: ["data-[open=true]:border-danger", "data-[focus=true]:border-danger"],
              label: "text-danger"
            }
          },
          {
            radius: "full",
            size: ["sm"],
            class: {
              trigger: "px-3"
            }
          },
          {
            radius: "full",
            size: "md",
            class: {
              trigger: "px-4"
            }
          },
          {
            radius: "full",
            size: "lg",
            class: {
              trigger: "px-5"
            }
          },
          {
            disableAnimation: false,
            variant: ["faded", "bordered"],
            class: {
              trigger: "transition-colors motion-reduce:transition-none"
            }
          },
          {
            disableAnimation: false,
            variant: "underlined",
            class: {
              trigger: "after:transition-width motion-reduce:after:transition-none"
            }
          },
          {
            variant: ["flat", "faded"],
            class: {
              trigger: [
                ...dataFocusVisibleClasses
              ]
            }
          },
          {
            isInvalid: true,
            variant: "flat",
            class: {
              trigger: [
                "bg-danger-50",
                "data-[hover=true]:bg-danger-100",
                "group-data-[focus=true]:bg-danger-50"
              ]
            }
          },
          {
            isInvalid: true,
            variant: "bordered",
            class: {
              trigger: "!border-danger group-data-[focus=true]:border-danger"
            }
          },
          {
            isInvalid: true,
            variant: "underlined",
            class: {
              trigger: "after:bg-danger"
            }
          },
          {
            labelPlacement: "inside",
            size: "sm",
            class: {
              trigger: "h-12 py-1.5 px-3"
            }
          },
          {
            labelPlacement: "inside",
            size: "md",
            class: {
              trigger: "h-14 py-2"
            }
          },
          {
            labelPlacement: "inside",
            size: "lg",
            class: {
              label: "text-small",
              trigger: "h-16 py-2.5 gap-0"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: ["inside", "outside"],
            class: {
              label: [
                "font-normal",
                "group-data-[filled=true]:font-medium",
                "group-data-[filled=true]:pointer-events-auto"
              ]
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "outside",
            class: {
              base: "group relative justify-end",
              label: [
                "pb-0",
                "z-20",
                "opacity-60",
                "top-1/2",
                "-translate-y-1/2",
                "group-data-[filled=true]:opacity-100",
                "group-data-[filled=true]:left-0"
              ]
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "inside",
            size: ["sm", "md"],
            class: {
              label: ["text-small", "group-data-[filled=true]:text-tiny"],
              input: "pt-4"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "inside",
            size: "sm",
            class: {
              label: ["group-data-[filled=true]:-translate-y-[calc(50%_+_theme(fontSize.tiny)/2_-_3px)]"],
              innerWrapper: "pt-4"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "inside",
            size: "md",
            class: {
              label: [
                "group-data-[filled=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_4px)]"
              ],
              innerWrapper: "pt-4"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "inside",
            size: "lg",
            class: {
              label: [
                "text-medium",
                "group-data-[filled=true]:text-small",
                "group-data-[filled=true]:-translate-y-[calc(50%_+_theme(fontSize.small)/2_-_5px)]"
              ],
              innerWrapper: "pt-5"
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "outside",
            size: "sm",
            class: {
              label: [
                "left-2",
                "text-small",
                "group-data-[filled=true]:text-tiny",
                "group-data-[filled=true]:-translate-y-[calc(100%_+_theme(fontSize.tiny)/2_+_16px)]"
              ]
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "outside",
            size: "md",
            class: {
              label: [
                "left-3",
                "text-small",
                "group-data-[filled=true]:-translate-y-[calc(100%_+_theme(fontSize.small)/2_+_20px)]"
              ]
            }
          },
          {
            isLabelPlaceholder: true,
            labelPlacement: "outside",
            size: "lg",
            class: {
              label: [
                "left-3",
                "text-medium",
                "group-data-[filled=true]:text-small",
                "group-data-[filled=true]:-translate-y-[calc(100%_+_theme(fontSize.small)/2_+_24px)]"
              ]
            }
          }
        ]
      });
      var menu = tv({
        base: "w-full flex flex-col gap-0.5 p-1 outline-none"
      });
      var menuItem = tv({
        slots: {
          base: [
            "flex",
            "group",
            "gap-2",
            "items-center",
            "justify-between",
            "relative",
            "px-2",
            "py-1.5",
            "w-full",
            "h-full",
            "box-border",
            "rounded-small",
            "subpixel-antialiased",
            "outline-none",
            "cursor-pointer",
            "tap-highlight-transparent",
            ...dataFocusVisibleClasses,
            "data-[focus-visible=true]:dark:ring-offset-background-content1"
          ],
          wrapper: "w-full flex flex-col items-start justify-center",
          title: "flex-1 text-small font-normal truncate",
          description: ["w-full", "text-tiny", "text-foreground-500", "group-hover:text-current"],
          selectedIcon: ["text-inherit", "w-3", "h-3", "flex-shrink-0"],
          shortcut: [
            "px-1",
            "py-0.5",
            "rounded",
            "font-sans",
            "text-foreground-500",
            "text-tiny",
            "border-small",
            "border-default-300",
            "group-hover:border-current"
          ]
        },
        variants: {
          variant: {
            solid: {
              base: ""
            },
            bordered: {
              base: "border-medium border-transparent bg-transparent"
            },
            light: {
              base: "bg-transparent"
            },
            faded: {
              base: [
                "border-small border-transparent hover:border-default data-[hover=true]:bg-default-100",
                "data-[selectable=true]:focus:border-default data-[selectable=true]:focus:bg-default-100"
              ]
            },
            flat: {
              base: ""
            },
            shadow: {
              base: "data-[hover=true]:shadow-lg"
            }
          },
          color: {
            default: {},
            primary: {},
            secondary: {},
            success: {},
            warning: {},
            danger: {}
          },
          showDivider: {
            true: {
              base: [
                "mb-1.5",
                "after:content-['']",
                "after:absolute",
                "after:-bottom-1",
                "after:left-0",
                "after:right-0",
                "after:h-divider",
                "after:bg-divider"
              ]
            },
            false: {}
          },
          isDisabled: {
            true: {
              base: "opacity-disabled pointer-events-none"
            }
          },
          disableAnimation: {
            true: {},
            false: {}
          }
        },
        defaultVariants: {
          variant: "solid",
          color: "default",
          disableAnimation: false,
          showDivider: false
        },
        compoundVariants: [
          {
            variant: "solid",
            color: "default",
            class: {
              base: [
                "data-[hover=true]:bg-default",
                "data-[hover=true]:text-default-foreground",
                "data-[selectable=true]:focus:bg-default",
                "data-[selectable=true]:focus:text-default-foreground"
              ]
            }
          },
          {
            variant: "solid",
            color: "primary",
            class: {
              base: [
                "data-[hover=true]:bg-primary data-[hover=true]:text-primary-foreground",
                "data-[selectable=true]:focus:bg-primary data-[selectable=true]:focus:text-primary-foreground"
              ]
            }
          },
          {
            variant: "solid",
            color: "secondary",
            class: {
              base: [
                "data-[hover=true]:bg-secondary data-[hover=true]:text-secondary-foreground",
                "data-[selectable=true]:focus:bg-secondary data-[selectable=true]:focus:text-secondary-foreground"
              ]
            }
          },
          {
            variant: "solid",
            color: "success",
            class: {
              base: [
                "data-[hover=true]:bg-success data-[hover=true]:text-success-foreground",
                "data-[selectable=true]:focus:bg-success data-[selectable=true]:focus:text-success-foreground"
              ]
            }
          },
          {
            variant: "solid",
            color: "warning",
            class: {
              base: [
                "data-[hover=true]:bg-warning data-[hover=true]:text-warning-foreground",
                "data-[selectable=true]:focus:bg-warning data-[selectable=true]:focus:text-warning-foreground"
              ]
            }
          },
          {
            variant: "solid",
            color: "danger",
            class: {
              base: [
                "data-[hover=true]:bg-danger data-[hover=true]:text-danger-foreground",
                "data-[selectable=true]:focus:bg-danger data-[selectable=true]:focus:text-danger-foreground"
              ]
            }
          },
          {
            variant: "shadow",
            color: "default",
            class: {
              base: [
                "data-[hover=true]:shadow-default/50 data-[hover=true]:bg-default data-[hover=true]:text-default-foreground",
                "data-[selectable=true]:focus:shadow-default/50 data-[selectable=true]:focus:bg-default data-[selectable=true]:focus:text-default-foreground"
              ]
            }
          },
          {
            variant: "shadow",
            color: "primary",
            class: {
              base: [
                "data-[hover=true]:shadow-primary/30 data-[hover=true]:bg-primary data-[hover=true]:text-primary-foreground",
                "data-[selectable=true]:focus:shadow-primary/30 data-[selectable=true]:focus:bg-primary data-[selectable=true]:focus:text-primary-foreground"
              ]
            }
          },
          {
            variant: "shadow",
            color: "secondary",
            class: {
              base: [
                "data-[hover=true]:shadow-secondary/30 data-[hover=true]:bg-secondary data-[hover=true]:text-secondary-foreground",
                "data-[selectable=true]:focus:shadow-secondary/30 data-[selectable=true]:focus:bg-secondary data-[selectable=true]:focus:text-secondary-foreground"
              ]
            }
          },
          {
            variant: "shadow",
            color: "success",
            class: {
              base: [
                "data-[hover=true]:shadow-success/30 data-[hover=true]:bg-success data-[hover=true]:text-success-foreground",
                "data-[selectable=true]:focus:shadow-success/30 data-[selectable=true]:focus:bg-success data-[selectable=true]:focus:text-success-foreground"
              ]
            }
          },
          {
            variant: "shadow",
            color: "warning",
            class: {
              base: [
                "data-[hover=true]:shadow-warning/30 data-[hover=true]:bg-warning data-[hover=true]:text-warning-foreground",
                "data-[selectable=true]:focus:shadow-warning/30 data-[selectable=true]:focus:bg-warning data-[selectable=true]:focus:text-warning-foreground"
              ]
            }
          },
          {
            variant: "shadow",
            color: "danger",
            class: {
              base: [
                "data-[hover=true]:shadow-danger/30 data-[hover=true]:bg-danger data-[hover=true]:text-danger-foreground",
                "data-[selectable=true]:focus:shadow-danger/30 data-[selectable=true]:focus:bg-danger data-[selectable=true]:focus:text-danger-foreground"
              ]
            }
          },
          {
            variant: "bordered",
            color: "default",
            class: {
              base: ["data-[hover=true]:border-default", "data-[selectable=true]:focus:border-default"]
            }
          },
          {
            variant: "bordered",
            color: "primary",
            class: {
              base: [
                "data-[hover=true]:border-primary data-[hover=true]:text-primary",
                "data-[selectable=true]:focus:border-primary data-[selectable=true]:focus:text-primary"
              ]
            }
          },
          {
            variant: "bordered",
            color: "secondary",
            class: {
              base: [
                "data-[hover=true]:border-secondary data-[hover=true]:text-secondary",
                "data-[selectable=true]:focus:border-secondary data-[selectable=true]:focus:text-secondary"
              ]
            }
          },
          {
            variant: "bordered",
            color: "success",
            class: {
              base: [
                "data-[hover=true]:border-success data-[hover=true]:text-success",
                "data-[selectable=true]:focus:border-success data-[selectable=true]:focus:text-success"
              ]
            }
          },
          {
            variant: "bordered",
            color: "warning",
            class: {
              base: [
                "data-[hover=true]:border-warning data-[hover=true]:text-warning",
                "data-[selectable=true]:focus:border-warning data-[selectable=true]:focus:text-warning"
              ]
            }
          },
          {
            variant: "bordered",
            color: "danger",
            class: {
              base: [
                "data-[hover=true]:border-danger data-[hover=true]:text-danger",
                "data-[selectable=true]:focus:border-danger data-[selectable=true]:focus:text-danger"
              ]
            }
          },
          {
            variant: "flat",
            color: "default",
            class: {
              base: [
                "data-[hover=true]:bg-default/40",
                "data-[hover=true]:text-default-foreground",
                "data-[selectable=true]:focus:bg-default/40",
                "data-[selectable=true]:focus:text-default-foreground"
              ]
            }
          },
          {
            variant: "flat",
            color: "primary",
            class: {
              base: [
                "data-[hover=true]:bg-primary/20 data-[hover=true]:text-primary",
                "data-[selectable=true]:focus:bg-primary/20 data-[selectable=true]:focus:text-primary"
              ]
            }
          },
          {
            variant: "flat",
            color: "secondary",
            class: {
              base: [
                "data-[hover=true]:bg-secondary/20 data-[hover=true]:text-secondary",
                "data-[selectable=true]:focus:bg-secondary/20 data-[selectable=true]:focus:text-secondary"
              ]
            }
          },
          {
            variant: "flat",
            color: "success",
            class: {
              base: [
                "data-[hover=true]:bg-success/20 data-[hover=true]:text-success",
                "data-[selectable=true]:focus:bg-success/20 data-[selectable=true]:focus:text-success"
              ]
            }
          },
          {
            variant: "flat",
            color: "warning",
            class: {
              base: [
                "data-[hover=true]:bg-warning/20 data-[hover=true]:text-warning",
                "data-[selectable=true]:focus:bg-warning/20 data-[selectable=true]:focus:text-warning"
              ]
            }
          },
          {
            variant: "flat",
            color: "danger",
            class: {
              base: [
                "data-[hover=true]:bg-danger/20 data-[hover=true]:text-danger",
                "data-[selectable=true]:focus:bg-danger/20 data-[selectable=true]:focus:text-danger"
              ]
            }
          },
          {
            variant: "faded",
            color: "default",
            class: {
              base: [
                "data-[hover=true]:text-default-foreground",
                "data-[selectable=true]:focus:text-default-foreground"
              ]
            }
          },
          {
            variant: "faded",
            color: "primary",
            class: {
              base: ["data-[hover=true]:text-primary", "data-[selectable=true]:focus:text-primary"]
            }
          },
          {
            variant: "faded",
            color: "secondary",
            class: {
              base: ["data-[hover=true]:text-secondary", "data-[selectable=true]:focus:text-secondary"]
            }
          },
          {
            variant: "faded",
            color: "success",
            class: {
              base: ["data-[hover=true]:text-success", "data-[selectable=true]:focus:text-success"]
            }
          },
          {
            variant: "faded",
            color: "warning",
            class: {
              base: ["data-[hover=true]:text-warning", "data-[selectable=true]:focus:text-warning"]
            }
          },
          {
            variant: "faded",
            color: "danger",
            class: {
              base: ["data-[hover=true]:text-danger", "data-[selectable=true]:focus:text-danger"]
            }
          },
          {
            variant: "light",
            color: "default",
            class: {
              base: [
                "data-[hover=true]:text-default-500",
                "data-[selectable=true]:focus:text-default-500"
              ]
            }
          },
          {
            variant: "light",
            color: "primary",
            class: {
              base: ["data-[hover=true]:text-primary", "data-[selectable=true]:focus:text-primary"]
            }
          },
          {
            variant: "light",
            color: "secondary",
            class: {
              base: ["data-[hover=true]:text-secondary", "data-[selectable=true]:focus:text-secondary"]
            }
          },
          {
            variant: "light",
            color: "success",
            class: {
              base: ["data-[hover=true]:text-success", "data-[selectable=true]:focus:text-success"]
            }
          },
          {
            variant: "light",
            color: "warning",
            class: {
              base: ["data-[hover=true]:text-warning", "data-[selectable=true]:focus:text-warning"]
            }
          },
          {
            variant: "light",
            color: "danger",
            class: {
              base: ["data-[hover=true]:text-danger", "data-[selectable=true]:focus:text-danger"]
            }
          }
        ]
      });
      var menuSection = tv({
        slots: {
          base: "relative mb-2",
          heading: "pl-1 text-tiny text-foreground-500",
          group: "data-[has-title=true]:pt-1",
          divider: "mt-2"
        }
      });
      var verticalShadow = [
        "data-[top-scroll=true]:[mask-image:linear-gradient(0deg,#000_calc(100%_-_var(--scroll-shadow-size)),transparent)]",
        "data-[bottom-scroll=true]:[mask-image:linear-gradient(180deg,#000_calc(100%_-_var(--scroll-shadow-size)),transparent)]",
        "data-[top-bottom-scroll=true]:[mask-image:linear-gradient(#000,#000,transparent_0,#000_var(--scroll-shadow-size),#000_calc(100%_-_var(--scroll-shadow-size)),transparent)]"
      ];
      var horizontalShadow = [
        "data-[left-scroll=true]:[mask-image:linear-gradient(270deg,#000_calc(100%_-_var(--scroll-shadow-size)),transparent)]",
        "data-[right-scroll=true]:[mask-image:linear-gradient(90deg,#000_calc(100%_-_var(--scroll-shadow-size)),transparent)]",
        "data-[left-right-scroll=true]:[mask-image:linear-gradient(to_right,#000,#000,transparent_0,#000_var(--scroll-shadow-size),#000_calc(100%_-_var(--scroll-shadow-size)),transparent)]"
      ];
      var scrollShadow = tv({
        base: [],
        variants: {
          orientation: {
            vertical: ["overflow-y-auto", ...verticalShadow],
            horizontal: ["overflow-x-auto", ...horizontalShadow]
          },
          hideScrollBar: {
            true: "scrollbar-hide",
            false: ""
          }
        },
        defaultVariants: {
          orientation: "vertical",
          hideScrollBar: false
        }
      });
      var blue = {
        50: "#e6f1fe",
        100: "#cce3fd",
        200: "#99c7fb",
        300: "#66aaf9",
        400: "#338ef7",
        500: "#006FEE",
        600: "#005bc4",
        700: "#004493",
        800: "#002e62",
        900: "#001731"
      };
      var green = {
        50: "#e8faf0",
        100: "#d1f4e0",
        200: "#a2e9c1",
        300: "#74dfa2",
        400: "#45d483",
        500: "#17c964",
        600: "#12a150",
        700: "#0e793c",
        800: "#095028",
        900: "#052814"
      };
      var pink = {
        50: "#ffedfa",
        100: "#ffdcf5",
        200: "#ffb8eb",
        300: "#ff95e1",
        400: "#ff71d7",
        500: "#ff4ecd",
        600: "#cc3ea4",
        700: "#992f7b",
        800: "#661f52",
        900: "#331029"
      };
      var purple = {
        50: "#f2eafa",
        100: "#e4d4f4",
        200: "#c9a9e9",
        300: "#ae7ede",
        400: "#9353d3",
        500: "#7828c8",
        600: "#6020a0",
        700: "#481878",
        800: "#301050",
        900: "#180828"
      };
      var red = {
        50: "#fee7ef",
        100: "#fdd0df",
        200: "#faa0bf",
        300: "#f871a0",
        400: "#f54180",
        500: "#f31260",
        600: "#c20e4d",
        700: "#920b3a",
        800: "#610726",
        900: "#310413"
      };
      var yellow = {
        50: "#fefce8",
        100: "#fdedd3",
        200: "#fbdba7",
        300: "#f9c97c",
        400: "#f7b750",
        500: "#f5a524",
        600: "#c4841d",
        700: "#936316",
        800: "#62420e",
        900: "#312107"
      };
      var cyan = {
        50: "#F0FCFF",
        100: "#E6FAFE",
        200: "#D7F8FE",
        300: "#C3F4FD",
        400: "#A5EEFD",
        500: "#7EE7FC",
        600: "#06B7DB",
        700: "#09AACD",
        800: "#0E8AAA",
        900: "#053B48"
      };
      var zinc = {
        "50": "#fafafa",
        "100": "#f4f4f5",
        "200": "#e4e4e7",
        "300": "#d4d4d8",
        "400": "#a1a1aa",
        "500": "#71717a",
        "600": "#52525b",
        "700": "#3f3f46",
        "800": "#27272a",
        "900": "#18181b"
      };
      var commonColors = {
        white: "#ffffff",
        black: "#000000",
        blue,
        green,
        pink,
        purple,
        red,
        yellow,
        cyan,
        zinc
      };
      var import_color2k = require_index_exports_require_cjs();
      var import_flat = __toESM2(require_flat());
      function swapColorValues(colors2) {
        const swappedColors = {};
        const keys = Object.keys(colors2);
        const length = keys.length;
        for (let i = 0; i < length / 2; i++) {
          const key1 = keys[i];
          const key2 = keys[length - 1 - i];
          swappedColors[key1] = colors2[key2];
          swappedColors[key2] = colors2[key1];
        }
        if (length % 2 !== 0) {
          const middleKey = keys[Math.floor(length / 2)];
          swappedColors[middleKey] = colors2[middleKey];
        }
        return swappedColors;
      }
      function removeDefaultKeys(obj) {
        const newObj = {};
        for (const key in obj) {
          if (key.endsWith("-DEFAULT")) {
            newObj[key.replace("-DEFAULT", "")] = obj[key];
            continue;
          }
          newObj[key] = obj[key];
        }
        return newObj;
      }
      var flattenThemeObject = (obj) => removeDefaultKeys(
        (0, import_flat.default)(obj, {
          safe: true,
          delimiter: "-"
        })
      );
      var base = {
        light: {
          background: {
            DEFAULT: "#FFFFFF"
          },
          foreground: __spreadProps(__spreadValues({}, commonColors.zinc), {
            DEFAULT: "#11181C"
          }),
          divider: {
            DEFAULT: "rgba(17, 17, 17, 0.15)"
          },
          focus: {
            DEFAULT: commonColors.blue[500]
          },
          overlay: {
            DEFAULT: "#000000"
          },
          content1: {
            DEFAULT: "#FFFFFF",
            foreground: "#11181C"
          },
          content2: {
            DEFAULT: commonColors.zinc[100],
            foreground: commonColors.zinc[800]
          },
          content3: {
            DEFAULT: commonColors.zinc[200],
            foreground: commonColors.zinc[700]
          },
          content4: {
            DEFAULT: commonColors.zinc[300],
            foreground: commonColors.zinc[600]
          }
        },
        dark: {
          background: {
            DEFAULT: "#000000"
          },
          foreground: __spreadProps(__spreadValues({}, swapColorValues(commonColors.zinc)), {
            DEFAULT: "#ECEDEE"
          }),
          focus: {
            DEFAULT: commonColors.blue[500]
          },
          overlay: {
            DEFAULT: "#000000"
          },
          divider: {
            DEFAULT: "rgba(255, 255, 255, 0.15)"
          },
          content1: {
            DEFAULT: commonColors.zinc[900],
            foreground: commonColors.zinc[50]
          },
          content2: {
            DEFAULT: commonColors.zinc[800],
            foreground: commonColors.zinc[100]
          },
          content3: {
            DEFAULT: commonColors.zinc[700],
            foreground: commonColors.zinc[200]
          },
          content4: {
            DEFAULT: commonColors.zinc[600],
            foreground: commonColors.zinc[300]
          }
        }
      };
      var themeColorsLight = __spreadProps(__spreadValues({}, base.light), {
        default: __spreadProps(__spreadValues({}, commonColors.zinc), {
          foreground: (0, import_color2k.readableColor)(commonColors.zinc[300]),
          DEFAULT: commonColors.zinc[300]
        }),
        primary: __spreadProps(__spreadValues({}, commonColors.blue), {
          foreground: (0, import_color2k.readableColor)(commonColors.blue[500]),
          DEFAULT: commonColors.blue[500]
        }),
        secondary: __spreadProps(__spreadValues({}, commonColors.purple), {
          foreground: (0, import_color2k.readableColor)(commonColors.purple[500]),
          DEFAULT: commonColors.purple[500]
        }),
        success: __spreadProps(__spreadValues({}, commonColors.green), {
          foreground: (0, import_color2k.readableColor)(commonColors.green[500]),
          DEFAULT: commonColors.green[500]
        }),
        warning: __spreadProps(__spreadValues({}, commonColors.yellow), {
          foreground: (0, import_color2k.readableColor)(commonColors.yellow[500]),
          DEFAULT: commonColors.yellow[500]
        }),
        danger: __spreadProps(__spreadValues({}, commonColors.red), {
          foreground: commonColors.white,
          DEFAULT: commonColors.red[500]
        })
      });
      var themeColorsDark = __spreadProps(__spreadValues({}, base.dark), {
        default: __spreadProps(__spreadValues({}, swapColorValues(commonColors.zinc)), {
          foreground: (0, import_color2k.readableColor)(commonColors.zinc[700]),
          DEFAULT: commonColors.zinc[700]
        }),
        primary: __spreadProps(__spreadValues({}, swapColorValues(commonColors.blue)), {
          foreground: (0, import_color2k.readableColor)(commonColors.blue[500]),
          DEFAULT: commonColors.blue[500]
        }),
        secondary: __spreadProps(__spreadValues({}, swapColorValues(commonColors.purple)), {
          foreground: (0, import_color2k.readableColor)(commonColors.purple[400]),
          DEFAULT: commonColors.purple[400]
        }),
        success: __spreadProps(__spreadValues({}, swapColorValues(commonColors.green)), {
          foreground: (0, import_color2k.readableColor)(commonColors.green[500]),
          DEFAULT: commonColors.green[500]
        }),
        warning: __spreadProps(__spreadValues({}, swapColorValues(commonColors.yellow)), {
          foreground: (0, import_color2k.readableColor)(commonColors.yellow[500]),
          DEFAULT: commonColors.yellow[500]
        }),
        danger: __spreadProps(__spreadValues({}, swapColorValues(commonColors.red)), {
          foreground: commonColors.white,
          DEFAULT: commonColors.red[500]
        })
      });
      var semanticColors = {
        light: themeColorsLight,
        dark: themeColorsDark
      };
      var colors = __spreadValues(__spreadValues({}, commonColors), semanticColors);
      var import_color = __toESM2(require_color());
      var import_plugin = __toESM2(require_plugin());
      var import_lodash = __toESM2(require_lodash());
      var import_lodash2 = __toESM2(require_lodash2());
      var import_lodash3 = __toESM2(require_lodash3());
      var import_lodash4 = __toESM2(require_lodash4());
      var import_lodash5 = __toESM2(require_lodash5());
      var import_deepmerge = __toESM2(require_cjs());
      var animations = {
        animation: {
          "drip-expand": "drip-expand 420ms linear",
          "spinner-ease-spin": "spinner-spin 0.8s ease infinite",
          "spinner-linear-spin": "spinner-spin 0.8s linear infinite",
          "appearance-in": "appearance-in 250ms ease-out normal both",
          "appearance-out": "appearance-out 60ms ease-in normal both",
          "indeterminate-bar": "indeterminate-bar 1.5s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite normal none running"
        },
        keyframes: {
          shimmer: {
            "100%": {
              transform: "translateX(100%)"
            }
          },
          "spinner-spin": {
            "0%": {
              transform: "rotate(0deg)"
            },
            "100%": {
              transform: "rotate(360deg)"
            }
          },
          "drip-expand": {
            "0%": {
              opacity: "0.2",
              transform: "scale(0)"
            },
            "100%": {
              opacity: "0",
              transform: "scale(2)"
            }
          },
          "appearance-in": {
            "0%": {
              opacity: "0",
              transform: "translateZ(0)  scale(0.95)"
            },
            "60%": {
              opacity: "0.75",
              backfaceVisibility: "hidden",
              webkitFontSmoothing: "antialiased",
              transform: "translateZ(0) scale(1.05)"
            },
            "100%": {
              opacity: "1",
              transform: "translateZ(0) scale(1)"
            }
          },
          "appearance-out": {
            "0%": {
              opacity: "1",
              transform: "scale(1)"
            },
            "100%": {
              opacity: "0",
              transform: "scale(0.85)"
            }
          },
          "indeterminate-bar": {
            "0%": {
              transform: "translateX(-50%) scaleX(0.2)"
            },
            "100%": {
              transform: "translateX(100%) scaleX(1)"
            }
          }
        }
      };
      var DEFAULT_TRANSITION_DURATION = "250ms";
      var transition_default = {
        ".transition-all": {
          "transition-property": "all",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-background": {
          "transition-property": "background",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition": {
          "transition-property": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-colors": {
          "transition-property": "color, background-color, border-color, text-decoration-color, fill, stroke",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-opacity": {
          "transition-property": "opacity",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-colors-opacity": {
          "transition-property": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-width": {
          "transition-property": "width",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-height": {
          "transition-property": "height",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-left": {
          "transition-property": "left",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-shadow": {
          "transition-property": "box-shadow",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-transform": {
          "transition-property": "transform",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-transform-opacity": {
          "transition-property": "transform, opacity",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-transform-background": {
          "transition-property": "transform, background",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        },
        ".transition-transform-colors": {
          " transition-property": "transform, color, background, background-color, border-color, text-decoration-color, fill, stroke",
          "transition-timing-function": "ease",
          "transition-duration": DEFAULT_TRANSITION_DURATION
        }
      };
      var custom_default = {
        ".leading-inherit": {
          "line-height": "inherit"
        },
        ".bg-img-inherit": {
          "background-image": "inherit"
        },
        ".bg-clip-inherit": {
          "background-clip": "inherit"
        },
        ".text-fill-inherit": {
          "-webkit-text-fill-color": "inherit"
        },
        ".tap-highlight-transparent": {
          "-webkit-tap-highlight-color": "transparent"
        }
      };
      var scrollbar_hide_default = {
        ".scrollbar-hide": {
          "-ms-overflow-style": "none",
          "scrollbar-width": "none",
          "&::-webkit-scrollbar": {
            display: "none"
          }
        },
        ".scrollbar-default": {
          "-ms-overflow-style": "auto",
          "scrollbar-width": "auto",
          "&::-webkit-scrollbar": {
            display: "block"
          }
        }
      };
      var utilities = __spreadValues(__spreadValues(__spreadValues({}, custom_default), transition_default), scrollbar_hide_default);
      var isBaseTheme = (theme) => theme === "light" || theme === "dark";
      var baseScale = [1, 2, 3, 3.5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];
      var extendedScale = [20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 72, 80, 96];
      var generateSpacingScale = (spacingUnit) => {
        const scaleLabels = {
          xs: 2,
          sm: 3,
          md: 4,
          lg: 5.5,
          xl: 9,
          "2xl": 12,
          "3xl": 20,
          "4xl": 30,
          "5xl": 56,
          "6xl": 72,
          "7xl": 96,
          "8xl": 128,
          "9xl": 160
        };
        const scale = { 0: "0px" };
        Object.entries(scaleLabels).forEach(([label, multiplier]) => {
          scale[label] = multiplier ? `${spacingUnit * multiplier}px` : `${spacingUnit}px`;
        });
        baseScale.forEach((i) => {
          let key = `${i}`;
          if (key.includes(".")) {
            const [first, second] = key.split(".");
            key = `${first}_${second}`;
          }
          scale[key] = `${spacingUnit * i}px`;
        });
        extendedScale.forEach((i) => {
          const key = `${i}`;
          scale[key] = `${spacingUnit * i}px`;
        });
        return scale;
      };
      function createSpacingUnits(prefix) {
        let result = spacingScaleKeys.reduce((acc, key) => {
          let value = `var(--${prefix}-spacing-unit-${key})`;
          if (key.includes(".")) {
            const [first, second] = key.split(".");
            value = `var(--${prefix}-spacing-unit-${first}_${second})`;
          }
          return __spreadProps(__spreadValues({}, acc), {
            [`unit-${key}`]: value
          });
        }, {});
        return result;
      }
      var defaultLayout = {
        spacingUnit: 4,
        disabledOpacity: ".5",
        dividerWeight: "1px",
        fontSize: {
          tiny: "0.75rem",
          small: "0.875rem",
          medium: "1rem",
          large: "1.125rem"
        },
        lineHeight: {
          tiny: "1rem",
          small: "1.25rem",
          medium: "1.5rem",
          large: "1.75rem"
        },
        radius: {
          small: "8px",
          medium: "12px",
          large: "14px"
        },
        borderWidth: {
          small: "1px",
          medium: "2px",
          large: "3px"
        },
        boxShadow: {
          small: "0px 0px 5px 0px rgb(0 0 0 / 0.02), 0px 2px 10px 0px rgb(0 0 0 / 0.06), 0px 0px 1px 0px rgb(0 0 0 / 0.3)",
          medium: "0px 0px 15px 0px rgb(0 0 0 / 0.03), 0px 2px 30px 0px rgb(0 0 0 / 0.08), 0px 0px 1px 0px rgb(0 0 0 / 0.3)",
          large: "0px 0px 30px 0px rgb(0 0 0 / 0.04), 0px 30px 60px 0px rgb(0 0 0 / 0.12), 0px 0px 1px 0px rgb(0 0 0 / 0.3)"
        }
      };
      var lightLayout = {};
      var darkLayout = {
        boxShadow: {
          small: "0px 0px 5px 0px rgb(0 0 0 / 0.05), 0px 2px 10px 0px rgb(0 0 0 / 0.2), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)",
          medium: "0px 0px 15px 0px rgb(0 0 0 / 0.06), 0px 2px 30px 0px rgb(0 0 0 / 0.22), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)",
          large: "0px 0px 30px 0px rgb(0 0 0 / 0.07), 0px 30px 60px 0px rgb(0 0 0 / 0.26), inset 0px 0px 1px 0px rgb(255 255 255 / 0.15)"
        }
      };
      var DEFAULT_PREFIX = "nextui";
      var resolveConfig = (themes = {}, defaultTheme, prefix) => {
        const resolved = {
          variants: [],
          utilities: {},
          colors: {}
        };
        (0, import_lodash3.default)(themes, ({ extend, layout, colors: colors2 }, themeName) => {
          let cssSelector = `.${themeName},[data-theme="${themeName}"]`;
          const scheme = themeName === "light" || themeName === "dark" ? themeName : extend;
          if (themeName === defaultTheme) {
            cssSelector = `:root,${cssSelector}`;
          }
          resolved.utilities[cssSelector] = scheme ? {
            "color-scheme": scheme
          } : {};
          const flatColors = flattenThemeObject(colors2);
          const flatLayout = layout ? (0, import_lodash4.default)(layout, (value, key) => (0, import_lodash5.default)(key)) : {};
          resolved.variants.push({
            name: themeName,
            definition: [`&.${themeName}`, `&[data-theme='${themeName}']`]
          });
          (0, import_lodash3.default)(flatColors, (colorValue, colorName) => {
            if (!colorValue)
              return;
            try {
              const [h, s, l, defaultAlphaValue] = (0, import_color.default)(colorValue).hsl().round().array();
              const nextuiColorVariable = `--${prefix}-${colorName}`;
              const nextuiOpacityVariable = `--${prefix}-${colorName}-opacity`;
              resolved.utilities[cssSelector][nextuiColorVariable] = `${h} ${s}% ${l}%`;
              if (typeof defaultAlphaValue === "number") {
                resolved.utilities[cssSelector][nextuiOpacityVariable] = defaultAlphaValue.toFixed(2);
              }
              resolved.colors[colorName] = ({ opacityVariable, opacityValue }) => {
                if (!isNaN(+opacityValue)) {
                  return `hsl(var(${nextuiColorVariable}) / ${opacityValue})`;
                }
                if (opacityVariable) {
                  return `hsl(var(${nextuiColorVariable}) / var(${nextuiOpacityVariable}, var(${opacityVariable})))`;
                }
                return `hsl(var(${nextuiColorVariable}) / var(${nextuiOpacityVariable}, 1))`;
              };
            } catch (error) {
              console.log("error", error == null ? void 0 : error.message);
            }
          });
          (0, import_lodash3.default)(flatLayout, (value, key) => {
            if (!value)
              return;
            if (typeof value === "object") {
              (0, import_lodash3.default)(value, (v, k) => {
                const layoutVariable = `--${prefix}-${key}-${k}`;
                resolved.utilities[cssSelector][layoutVariable] = v;
              });
            } else if (key === "spacing-unit") {
              const layoutVariable = `--${prefix}-${key}`;
              resolved.utilities[cssSelector][layoutVariable] = value;
              const spacingScale = generateSpacingScale(Number(value));
              (0, import_lodash3.default)(spacingScale, (v, k) => {
                const layoutVariable2 = `--${prefix}-${key}-${k}`;
                resolved.utilities[cssSelector][layoutVariable2] = v;
              });
            } else {
              const layoutVariable = `--${prefix}-${key}`;
              resolved.utilities[cssSelector][layoutVariable] = value;
            }
          });
        });
        return resolved;
      };
      var corePlugin = (themes = {}, defaultTheme, prefix, addCommonColors) => {
        const resolved = resolveConfig(themes, defaultTheme, prefix);
        const minSizes = {
          "unit-1": `var(--${prefix}-spacing-unit)`,
          "unit-2": `var(--${prefix}-spacing-unit-2`,
          "unit-3": `var(--${prefix}-spacing-unit-3)`,
          "unit-3.5": `var(--${prefix}-spacing-unit-3_5)`,
          "unit-4": `var(--${prefix}-spacing-unit-4)`,
          "unit-5": `var(--${prefix}-spacing-unit-5)`,
          "unit-6": `var(--${prefix}-spacing-unit-6)`,
          "unit-7": `var(--${prefix}-spacing-unit-7)`,
          "unit-8": `var(--${prefix}-spacing-unit-8)`,
          "unit-9": `var(--${prefix}-spacing-unit-9)`,
          "unit-10": `var(--${prefix}-spacing-unit-10)`,
          "unit-11": `var(--${prefix}-spacing-unit-11)`,
          "unit-12": `var(--${prefix}-spacing-unit-12)`,
          "unit-16": `var(--${prefix}-spacing-unit-16)`,
          "unit-20": `var(--${prefix}-spacing-unit-20)`,
          "unit-24": `var(--${prefix}-spacing-unit-24)`
        };
        return (0, import_plugin.default)(
          ({ addBase, addUtilities, addVariant }) => {
            addBase({
              [":root, [data-theme]"]: __spreadValues({}, baseStyles(prefix))
            });
            addUtilities(__spreadValues(__spreadValues({}, resolved.utilities), utilities));
            resolved.variants.forEach((variant) => {
              addVariant(variant.name, variant.definition);
            });
          },
          {
            theme: {
              extend: __spreadValues({
                colors: __spreadValues(__spreadValues({}, addCommonColors ? commonColors : {}), resolved.colors),
                scale: {
                  "80": "0.8"
                },
                height: {
                  divider: `var(--${prefix}-divider-weight)`
                },
                width: {
                  divider: `var(--${prefix}-divider-weight)`
                },
                spacing: __spreadValues({
                  unit: `var(--${prefix}-spacing-unit)`
                }, createSpacingUnits(prefix)),
                minWidth: __spreadValues({}, minSizes),
                minHeight: __spreadValues({}, minSizes),
                fontSize: {
                  tiny: [`var(--${prefix}-font-size-tiny)`, `var(--${prefix}-line-height-tiny)`],
                  small: [`var(--${prefix}-font-size-small)`, `var(--${prefix}-line-height-small)`],
                  medium: [`var(--${prefix}-font-size-medium)`, `var(--${prefix}-line-height-medium)`],
                  large: [`var(--${prefix}-font-size-large)`, `var(--${prefix}-line-height-large)`]
                },
                borderRadius: {
                  small: `var(--${prefix}-radius-small)`,
                  medium: `var(--${prefix}-radius-medium)`,
                  large: `var(--${prefix}-radius-large)`
                },
                opacity: {
                  disabled: `var(--${prefix}-disabled-opacity)`
                },
                borderWidth: {
                  small: `var(--${prefix}-border-width-small)`,
                  medium: `var(--${prefix}-border-width-medium)`,
                  large: `var(--${prefix}-border-width-large)`,
                  1: "1px",
                  1.5: "1.5px",
                  3: "3px",
                  5: "5px"
                },
                boxShadow: {
                  small: `var(--${prefix}-box-shadow-small)`,
                  medium: `var(--${prefix}-box-shadow-medium)`,
                  large: `var(--${prefix}-box-shadow-large)`
                },
                backgroundImage: {
                  "stripe-gradient": "linear-gradient(45deg, rgba(0, 0, 0, 0.1) 25%, transparent 25%, transparent 50%, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.1) 75%, transparent 75%, transparent)"
                },
                transitionDuration: {
                  0: "0ms",
                  250: "250ms",
                  400: "400ms"
                },
                transitionTimingFunction: {
                  "soft-spring": "cubic-bezier(0.155, 1.105, 0.295, 1.12)"
                }
              }, animations)
            }
          }
        );
      };
      var nextui = (config = {}) => {
        const {
          themes: themeObject = {},
          defaultTheme = "light",
          layout: userLayout,
          defaultExtendTheme = "light",
          prefix: defaultPrefix = DEFAULT_PREFIX,
          addCommonColors = false
        } = config;
        const userLightColors = (0, import_lodash.default)(themeObject, "light.colors", {});
        const userDarkColors = (0, import_lodash.default)(themeObject, "dark.colors", {});
        const defaultLayoutObj = userLayout && typeof userLayout === "object" ? (0, import_deepmerge.default)(defaultLayout, userLayout) : defaultLayout;
        const baseLayouts = {
          light: __spreadValues(__spreadValues({}, defaultLayoutObj), lightLayout),
          dark: __spreadValues(__spreadValues({}, defaultLayoutObj), darkLayout)
        };
        let otherThemes = (0, import_lodash2.default)(themeObject, ["light", "dark"]) || {};
        (0, import_lodash3.default)(otherThemes, ({ extend, colors: colors2, layout }, themeName) => {
          const baseTheme = extend && isBaseTheme(extend) ? extend : defaultExtendTheme;
          if (colors2 && typeof colors2 === "object") {
            otherThemes[themeName].colors = (0, import_deepmerge.default)(semanticColors[baseTheme], colors2);
          }
          if (layout && typeof layout === "object") {
            otherThemes[themeName].layout = (0, import_deepmerge.default)(
              extend ? baseLayouts[extend] : defaultLayoutObj,
              layout
            );
          }
        });
        const light2 = {
          layout: (0, import_deepmerge.default)(baseLayouts.light, (0, import_lodash.default)(themeObject, "light.layout", {})),
          colors: (0, import_deepmerge.default)(semanticColors.light, userLightColors)
        };
        const dark = {
          layout: (0, import_deepmerge.default)(baseLayouts.dark, (0, import_lodash.default)(themeObject, "dark.layout", {})),
          colors: (0, import_deepmerge.default)(semanticColors.dark, userDarkColors)
        };
        const themes = __spreadValues({
          light: light2,
          dark
        }, otherThemes);
        return corePlugin(themes, defaultTheme, defaultPrefix, addCommonColors);
      };
    }
  });

  // node_modules/@react-stately/collections/dist/main.js
  var require_main15 = __commonJS({
    "node_modules/@react-stately/collections/dist/main.js"(exports, module) {
      var $4aZkW$react = require_react();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "Item", () => $c870f3b549c61b6b$export$6d08773d2e66f8f2);
      $parcel$export(module.exports, "Section", () => $350f13aa4d8b327c$export$6e2c8f0811a474ce);
      $parcel$export(module.exports, "useCollection", () => $98fc0fafaca75b6a$export$6cd28814d92fa9c9);
      $parcel$export(module.exports, "getItemCount", () => $e749fe52977fe2c2$export$77d5aafae4e095b2);
      $parcel$export(module.exports, "getChildNodes", () => $7a155683b0d79a6a$export$1005530eda016c13);
      $parcel$export(module.exports, "getFirstItem", () => $7a155683b0d79a6a$export$fbdeaa6a76694f71);
      $parcel$export(module.exports, "getLastItem", () => $7a155683b0d79a6a$export$7475b2c64539e4cf);
      $parcel$export(module.exports, "getNthItem", () => $7a155683b0d79a6a$export$5f3398f8733f90e2);
      $parcel$export(module.exports, "compareNodeOrder", () => $7a155683b0d79a6a$export$8c434b3a7a4dad6);
      $parcel$export(module.exports, "CollectionBuilder", () => $51588fd411aace25$export$bf788dd355e3a401);
      function $c870f3b549c61b6b$var$Item(props) {
        return null;
      }
      $c870f3b549c61b6b$var$Item.getCollectionNode = function* getCollectionNode(props, context) {
        let { childItems, title, children } = props;
        let rendered = props.title || props.children;
        let textValue = props.textValue || (typeof rendered === "string" ? rendered : "") || props["aria-label"] || "";
        if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning))
          console.warn("<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.");
        yield {
          type: "item",
          props,
          rendered,
          textValue,
          "aria-label": props["aria-label"],
          hasChildNodes: $c870f3b549c61b6b$var$hasChildItems(props),
          *childNodes() {
            if (childItems)
              for (let child of childItems)
                yield {
                  type: "item",
                  value: child
                };
            else if (title) {
              let items = [];
              (0, $parcel$interopDefault($4aZkW$react)).Children.forEach(children, (child) => {
                items.push({
                  type: "item",
                  element: child
                });
              });
              yield* __yieldStar(items);
            }
          }
        };
      };
      function $c870f3b549c61b6b$var$hasChildItems(props) {
        if (props.hasChildItems != null)
          return props.hasChildItems;
        if (props.childItems)
          return true;
        if (props.title && (0, $parcel$interopDefault($4aZkW$react)).Children.count(props.children) > 0)
          return true;
        return false;
      }
      var $c870f3b549c61b6b$export$6d08773d2e66f8f2 = $c870f3b549c61b6b$var$Item;
      function $350f13aa4d8b327c$var$Section(props) {
        return null;
      }
      $350f13aa4d8b327c$var$Section.getCollectionNode = function* getCollectionNode(props) {
        let { children, title, items } = props;
        yield {
          type: "section",
          props,
          hasChildNodes: true,
          rendered: title,
          "aria-label": props["aria-label"],
          *childNodes() {
            if (typeof children === "function") {
              if (!items)
                throw new Error("props.children was a function but props.items is missing");
              for (let item of items)
                yield {
                  type: "item",
                  value: item,
                  renderer: children
                };
            } else {
              let items2 = [];
              (0, $parcel$interopDefault($4aZkW$react)).Children.forEach(children, (child) => {
                items2.push({
                  type: "item",
                  element: child
                });
              });
              yield* __yieldStar(items2);
            }
          }
        };
      };
      var $350f13aa4d8b327c$export$6e2c8f0811a474ce = $350f13aa4d8b327c$var$Section;
      var $51588fd411aace25$export$bf788dd355e3a401 = class {
        build(props, context) {
          this.context = context;
          return $51588fd411aace25$var$iterable(() => this.iterateCollection(props));
        }
        *iterateCollection(props) {
          let { children, items } = props;
          if (typeof children === "function") {
            if (!items)
              throw new Error("props.children was a function but props.items is missing");
            for (let item of props.items)
              yield* __yieldStar(this.getFullNode({
                value: item
              }, {
                renderer: children
              }));
          } else {
            let items2 = [];
            (0, $parcel$interopDefault($4aZkW$react)).Children.forEach(children, (child) => {
              items2.push(child);
            });
            let index3 = 0;
            for (let item of items2) {
              let nodes = this.getFullNode({
                element: item,
                index: index3
              }, {});
              for (let node of nodes) {
                index3++;
                yield node;
              }
            }
          }
        }
        getKey(item, partialNode, state, parentKey) {
          if (item.key != null)
            return item.key;
          if (partialNode.type === "cell" && partialNode.key != null)
            return `${parentKey}${partialNode.key}`;
          let v = partialNode.value;
          if (v != null) {
            var _v_key;
            let key = (_v_key = v.key) !== null && _v_key !== void 0 ? _v_key : v.id;
            if (key == null)
              throw new Error("No key found for item");
            return key;
          }
          return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;
        }
        getChildState(state, partialNode) {
          return {
            renderer: partialNode.renderer || state.renderer
          };
        }
        *getFullNode(partialNode, state, parentKey, parentNode) {
          let element = partialNode.element;
          if (!element && partialNode.value && state && state.renderer) {
            let cached = this.cache.get(partialNode.value);
            if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
              cached.index = partialNode.index;
              cached.parentKey = parentNode ? parentNode.key : null;
              yield cached;
              return;
            }
            element = state.renderer(partialNode.value);
          }
          if ((0, $parcel$interopDefault($4aZkW$react)).isValidElement(element)) {
            let type = element.type;
            if (typeof type !== "function" && typeof type.getCollectionNode !== "function") {
              let name = typeof element.type === "function" ? element.type.name : element.type;
              throw new Error(`Unknown element <${name}> in collection.`);
            }
            let childNodes = type.getCollectionNode(element.props, this.context);
            let index3 = partialNode.index;
            let result = childNodes.next();
            while (!result.done && result.value) {
              let childNode = result.value;
              partialNode.index = index3;
              let nodeKey = childNode.key;
              if (!nodeKey)
                nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
              let nodes = this.getFullNode(__spreadProps(__spreadValues({}, childNode), {
                key: nodeKey,
                index: index3,
                wrapper: $51588fd411aace25$var$compose(partialNode.wrapper, childNode.wrapper)
              }), this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);
              let children = [
                ...nodes
              ];
              for (let node2 of children) {
                node2.value = childNode.value || partialNode.value;
                if (node2.value)
                  this.cache.set(node2.value, node2);
                if (partialNode.type && node2.type !== partialNode.type)
                  throw new Error(`Unsupported type <${$51588fd411aace25$var$capitalize(node2.type)}> in <${$51588fd411aace25$var$capitalize(parentNode.type)}>. Only <${$51588fd411aace25$var$capitalize(partialNode.type)}> is supported.`);
                index3++;
                yield node2;
              }
              result = childNodes.next(children);
            }
            return;
          }
          if (partialNode.key == null)
            return;
          let builder = this;
          let node = {
            type: partialNode.type,
            props: partialNode.props,
            key: partialNode.key,
            parentKey: parentNode ? parentNode.key : null,
            value: partialNode.value,
            level: parentNode ? parentNode.level + 1 : 0,
            index: partialNode.index,
            rendered: partialNode.rendered,
            textValue: partialNode.textValue,
            "aria-label": partialNode["aria-label"],
            wrapper: partialNode.wrapper,
            shouldInvalidate: partialNode.shouldInvalidate,
            hasChildNodes: partialNode.hasChildNodes,
            childNodes: $51588fd411aace25$var$iterable(function* () {
              if (!partialNode.hasChildNodes)
                return;
              let index3 = 0;
              for (let child of partialNode.childNodes()) {
                if (child.key != null)
                  child.key = `${node.key}${child.key}`;
                child.index = index3;
                let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);
                for (let node2 of nodes) {
                  index3++;
                  yield node2;
                }
              }
            })
          };
          yield node;
        }
        constructor() {
          this.cache = /* @__PURE__ */ new WeakMap();
        }
      };
      function $51588fd411aace25$var$iterable(iterator) {
        let cache = [];
        let iterable = null;
        return {
          *[Symbol.iterator]() {
            for (let item of cache)
              yield item;
            if (!iterable)
              iterable = iterator();
            for (let item of iterable) {
              cache.push(item);
              yield item;
            }
          }
        };
      }
      function $51588fd411aace25$var$compose(outer, inner) {
        if (outer && inner)
          return (element) => outer(inner(element));
        if (outer)
          return outer;
        if (inner)
          return inner;
      }
      function $51588fd411aace25$var$capitalize(str) {
        return str[0].toUpperCase() + str.slice(1);
      }
      function $98fc0fafaca75b6a$export$6cd28814d92fa9c9(props, factory, context) {
        let builder = (0, $4aZkW$react.useMemo)(() => new (0, $51588fd411aace25$export$bf788dd355e3a401)(), []);
        let { children, items, collection } = props;
        let result = (0, $4aZkW$react.useMemo)(() => {
          if (collection)
            return collection;
          let nodes = builder.build({
            children,
            items
          }, context);
          return factory(nodes);
        }, [
          builder,
          children,
          items,
          collection,
          context,
          factory
        ]);
        return result;
      }
      function $7a155683b0d79a6a$export$1005530eda016c13(node, collection) {
        if (typeof collection.getChildren === "function")
          return collection.getChildren(node.key);
        return node.childNodes;
      }
      function $7a155683b0d79a6a$export$fbdeaa6a76694f71(iterable) {
        return $7a155683b0d79a6a$export$5f3398f8733f90e2(iterable, 0);
      }
      function $7a155683b0d79a6a$export$5f3398f8733f90e2(iterable, index3) {
        if (index3 < 0)
          return void 0;
        let i = 0;
        for (let item of iterable) {
          if (i === index3)
            return item;
          i++;
        }
      }
      function $7a155683b0d79a6a$export$7475b2c64539e4cf(iterable) {
        let lastItem = void 0;
        for (let value of iterable)
          lastItem = value;
        return lastItem;
      }
      function $7a155683b0d79a6a$export$8c434b3a7a4dad6(collection, a, b) {
        if (a.parentKey === b.parentKey)
          return a.index - b.index;
        let aAncestors = [
          ...$7a155683b0d79a6a$var$getAncestors(collection, a),
          a
        ];
        let bAncestors = [
          ...$7a155683b0d79a6a$var$getAncestors(collection, b),
          b
        ];
        let firstNonMatchingAncestor = aAncestors.slice(0, bAncestors.length).findIndex((a2, i) => a2 !== bAncestors[i]);
        if (firstNonMatchingAncestor !== -1) {
          a = aAncestors[firstNonMatchingAncestor];
          b = bAncestors[firstNonMatchingAncestor];
          return a.index - b.index;
        }
        if (aAncestors.findIndex((node) => node === b) >= 0)
          return 1;
        else if (bAncestors.findIndex((node) => node === a) >= 0)
          return -1;
        return -1;
      }
      function $7a155683b0d79a6a$var$getAncestors(collection, node) {
        let parents = [];
        while ((node === null || node === void 0 ? void 0 : node.parentKey) != null) {
          node = collection.getItem(node.parentKey);
          parents.unshift(node);
        }
        return parents;
      }
      var $e749fe52977fe2c2$var$cache = /* @__PURE__ */ new WeakMap();
      function $e749fe52977fe2c2$export$77d5aafae4e095b2(collection) {
        let count2 = $e749fe52977fe2c2$var$cache.get(collection);
        if (count2 != null)
          return count2;
        count2 = 0;
        let countItems = (items) => {
          for (let item of items)
            if (item.type === "section")
              countItems((0, $7a155683b0d79a6a$export$1005530eda016c13)(item, collection));
            else
              count2++;
        };
        countItems(collection);
        $e749fe52977fe2c2$var$cache.set(collection, count2);
        return count2;
      }
    }
  });

  // node_modules/@nextui-org/aria-utils/dist/index.js
  var require_dist6 = __commonJS({
    "node_modules/@nextui-org/aria-utils/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        BaseItem: () => import_collections.Item,
        BaseSection: () => import_collections2.Section,
        ariaHideOutside: () => ariaHideOutside,
        getArrowPlacement: () => getArrowPlacement,
        getShouldUseAxisPlacement: () => getShouldUseAxisPlacement,
        getTransformOrigins: () => getTransformOrigins,
        isCtrlKeyPressed: () => isCtrlKeyPressed,
        isNonContiguousSelectionModifier: () => isNonContiguousSelectionModifier,
        toOverlayPlacement: () => toOverlayPlacement,
        toReactAriaPlacement: () => toReactAriaPlacement
      });
      module.exports = __toCommonJS2(src_exports);
      var import_collections = require_main15();
      var import_collections2 = require_main15();
      var import_utils = require_main7();
      var import_utils2 = require_main7();
      function isNonContiguousSelectionModifier(e) {
        return (0, import_utils.isAppleDevice)() ? e.altKey : e.ctrlKey;
      }
      function isCtrlKeyPressed(e) {
        if ((0, import_utils2.isMac)()) {
          return e.metaKey;
        }
        return e.ctrlKey;
      }
      var getTransformOrigins = (placement) => {
        const origins = {
          top: {
            originY: 1
          },
          bottom: {
            originY: 0
          },
          left: {
            originX: 1
          },
          right: {
            originX: 0
          },
          "top-start": {
            originX: 0,
            originY: 1
          },
          "top-end": {
            originX: 1,
            originY: 1
          },
          "bottom-start": {
            originX: 0,
            originY: 0
          },
          "bottom-end": {
            originX: 1,
            originY: 0
          },
          "right-start": {
            originX: 0,
            originY: 0
          },
          "right-end": {
            originX: 0,
            originY: 1
          },
          "left-start": {
            originX: 1,
            originY: 0
          },
          "left-end": {
            originX: 1,
            originY: 1
          }
        };
        return (origins == null ? void 0 : origins[placement]) || {};
      };
      var toReactAriaPlacement = (placement) => {
        const mapPositions = {
          top: "top",
          bottom: "bottom",
          left: "left",
          right: "right",
          "top-start": "top start",
          "top-end": "top end",
          "bottom-start": "bottom start",
          "bottom-end": "bottom end",
          "left-start": "left top",
          "left-end": "left bottom",
          "right-start": "right top",
          "right-end": "right bottom"
        };
        return mapPositions[placement];
      };
      var toOverlayPlacement = (placement) => {
        const mapPositions = {
          top: "top",
          bottom: "bottom",
          left: "left",
          right: "right",
          center: "top"
        };
        return mapPositions[placement];
      };
      var getShouldUseAxisPlacement = (axisPlacement, overlayPlacement) => {
        if (overlayPlacement.includes("-")) {
          const [position] = overlayPlacement.split("-");
          if (position.includes(axisPlacement)) {
            return false;
          }
        }
        return true;
      };
      var getArrowPlacement = (dynamicPlacement, placement) => {
        if (placement.includes("-")) {
          const [, position] = placement.split("-");
          return `${dynamicPlacement}-${position}`;
        }
        return dynamicPlacement;
      };
      var refCountMap = /* @__PURE__ */ new WeakMap();
      var observerStack = [];
      function ariaHideOutside(targets, root = document.body) {
        let visibleNodes = new Set(targets);
        let hiddenNodes = /* @__PURE__ */ new Set();
        let walk = (root2) => {
          for (let element of root2.querySelectorAll(
            "[data-live-announcer], [data-react-aria-top-layer]"
          )) {
            visibleNodes.add(element);
          }
          let acceptNode = (node) => {
            const parentElement = node.parentElement;
            if (visibleNodes.has(node) || hiddenNodes.has(parentElement) && parentElement.getAttribute("role") !== "row") {
              return NodeFilter.FILTER_REJECT;
            }
            for (let target of visibleNodes) {
              if (node.contains(target)) {
                return NodeFilter.FILTER_SKIP;
              }
            }
            return NodeFilter.FILTER_ACCEPT;
          };
          let walker = document.createTreeWalker(root2, NodeFilter.SHOW_ELEMENT, { acceptNode });
          let acceptRoot = acceptNode(root2);
          if (acceptRoot === NodeFilter.FILTER_ACCEPT) {
            hide(root2);
          }
          if (acceptRoot !== NodeFilter.FILTER_REJECT) {
            let node = walker.nextNode();
            while (node != null) {
              hide(node);
              node = walker.nextNode();
            }
          }
        };
        let hide = (node) => {
          var _a;
          let refCount = (_a = refCountMap.get(node)) != null ? _a : 0;
          if (node.getAttribute("aria-hidden") === "true" && refCount === 0) {
            return;
          }
          if (refCount === 0) {
            node.setAttribute("aria-hidden", "true");
          }
          hiddenNodes.add(node);
          refCountMap.set(node, refCount + 1);
        };
        if (observerStack.length) {
          observerStack[observerStack.length - 1].disconnect();
        }
        walk(root);
        let observer = new MutationObserver((changes) => {
          for (let change of changes) {
            if (change.type !== "childList" || change.addedNodes.length === 0) {
              continue;
            }
            if (![...visibleNodes, ...hiddenNodes].some((node) => node.contains(change.target))) {
              for (let node of change.removedNodes) {
                if (node instanceof Element) {
                  visibleNodes.delete(node);
                  hiddenNodes.delete(node);
                }
              }
              for (let node of change.addedNodes) {
                if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === "true" || node.dataset.reactAriaTopLayer === "true")) {
                  visibleNodes.add(node);
                } else if (node instanceof Element) {
                  walk(node);
                }
              }
            }
          }
        });
        observer.observe(root, { childList: true, subtree: true });
        let observerWrapper = {
          observe() {
            observer.observe(root, { childList: true, subtree: true });
          },
          disconnect() {
            observer.disconnect();
          }
        };
        observerStack.push(observerWrapper);
        return () => {
          observer.disconnect();
          for (let node of hiddenNodes) {
            let count2 = refCountMap.get(node);
            if (count2 == null) {
              continue;
            }
            if (count2 === 1) {
              node.removeAttribute("aria-hidden");
              refCountMap.delete(node);
            } else {
              refCountMap.set(node, count2 - 1);
            }
          }
          if (observerWrapper === observerStack[observerStack.length - 1]) {
            observerStack.pop();
            if (observerStack.length) {
              observerStack[observerStack.length - 1].observe();
            }
          } else {
            observerStack.splice(observerStack.indexOf(observerWrapper), 1);
          }
        };
      }
    }
  });

  // node_modules/framer-motion/dist/cjs/index-legacy-eb8b4696.js
  var require_index_legacy_eb8b4696 = __commonJS({
    "node_modules/framer-motion/dist/cjs/index-legacy-eb8b4696.js"(exports) {
      "use strict";
      var isBrowser = typeof document !== "undefined";
      function isRefObject(ref) {
        return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
      }
      function isVariantLabel(v) {
        return typeof v === "string" || Array.isArray(v);
      }
      function isAnimationControls(v) {
        return typeof v === "object" && typeof v.start === "function";
      }
      var variantPriorityOrder = [
        "animate",
        "whileInView",
        "whileFocus",
        "whileHover",
        "whileTap",
        "whileDrag",
        "exit"
      ];
      var variantProps = ["initial", ...variantPriorityOrder];
      function isControllingVariants(props) {
        return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
      }
      function isVariantNode(props) {
        return Boolean(isControllingVariants(props) || props.variants);
      }
      var featureProps = {
        animation: [
          "animate",
          "variants",
          "whileHover",
          "whileTap",
          "exit",
          "whileInView",
          "whileFocus",
          "whileDrag"
        ],
        exit: ["exit"],
        drag: ["drag", "dragControls"],
        focus: ["whileFocus"],
        hover: ["whileHover", "onHoverStart", "onHoverEnd"],
        tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
        pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
        inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
        layout: ["layout", "layoutId"]
      };
      var featureDefinitions = {};
      for (const key in featureProps) {
        featureDefinitions[key] = {
          isEnabled: (props) => featureProps[key].some((name) => !!props[name])
        };
      }
      var scaleCorrectors = {};
      function addScaleCorrector(correctors) {
        Object.assign(scaleCorrectors, correctors);
      }
      var transformPropOrder = [
        "transformPerspective",
        "x",
        "y",
        "z",
        "translateX",
        "translateY",
        "translateZ",
        "scale",
        "scaleX",
        "scaleY",
        "rotate",
        "rotateX",
        "rotateY",
        "rotateZ",
        "skew",
        "skewX",
        "skewY"
      ];
      var transformProps = new Set(transformPropOrder);
      function isForcedMotionValue(key, { layout, layoutId }) {
        return transformProps.has(key) || key.startsWith("origin") || (layout || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
      }
      var isMotionValue = (value) => Boolean(value && value.getVelocity);
      var translateAlias = {
        x: "translateX",
        y: "translateY",
        z: "translateZ",
        transformPerspective: "perspective"
      };
      var numTransforms = transformPropOrder.length;
      function buildTransform(transform2, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate) {
        let transformString = "";
        for (let i = 0; i < numTransforms; i++) {
          const key = transformPropOrder[i];
          if (transform2[key] !== void 0) {
            const transformName = translateAlias[key] || key;
            transformString += `${transformName}(${transform2[key]}) `;
          }
        }
        if (enableHardwareAcceleration && !transform2.z) {
          transformString += "translateZ(0)";
        }
        transformString = transformString.trim();
        if (transformTemplate) {
          transformString = transformTemplate(transform2, transformIsDefault ? "" : transformString);
        } else if (allowTransformNone && transformIsDefault) {
          transformString = "none";
        }
        return transformString;
      }
      var checkStringStartsWith = (token) => (key) => typeof key === "string" && key.startsWith(token);
      var isCSSVariableName = checkStringStartsWith("--");
      var isCSSVariableToken = checkStringStartsWith("var(--");
      var cssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;
      var getValueAsType = (value, type) => {
        return type && typeof value === "number" ? type.transform(value) : value;
      };
      var clamp = (min, max, v) => Math.min(Math.max(v, min), max);
      var number = {
        test: (v) => typeof v === "number",
        parse: parseFloat,
        transform: (v) => v
      };
      var alpha = __spreadProps(__spreadValues({}, number), {
        transform: (v) => clamp(0, 1, v)
      });
      var scale = __spreadProps(__spreadValues({}, number), {
        default: 1
      });
      var sanitize = (v) => Math.round(v * 1e5) / 1e5;
      var floatRegex = /(-)?([\d]*\.?[\d])+/g;
      var colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
      var singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
      function isString(v) {
        return typeof v === "string";
      }
      var createUnitType = (unit) => ({
        test: (v) => isString(v) && v.endsWith(unit) && v.split(" ").length === 1,
        parse: parseFloat,
        transform: (v) => `${v}${unit}`
      });
      var degrees = createUnitType("deg");
      var percent = createUnitType("%");
      var px = createUnitType("px");
      var vh = createUnitType("vh");
      var vw = createUnitType("vw");
      var progressPercentage = __spreadProps(__spreadValues({}, percent), {
        parse: (v) => percent.parse(v) / 100,
        transform: (v) => percent.transform(v * 100)
      });
      var int = __spreadProps(__spreadValues({}, number), {
        transform: Math.round
      });
      var numberValueTypes = {
        // Border props
        borderWidth: px,
        borderTopWidth: px,
        borderRightWidth: px,
        borderBottomWidth: px,
        borderLeftWidth: px,
        borderRadius: px,
        radius: px,
        borderTopLeftRadius: px,
        borderTopRightRadius: px,
        borderBottomRightRadius: px,
        borderBottomLeftRadius: px,
        // Positioning props
        width: px,
        maxWidth: px,
        height: px,
        maxHeight: px,
        size: px,
        top: px,
        right: px,
        bottom: px,
        left: px,
        // Spacing props
        padding: px,
        paddingTop: px,
        paddingRight: px,
        paddingBottom: px,
        paddingLeft: px,
        margin: px,
        marginTop: px,
        marginRight: px,
        marginBottom: px,
        marginLeft: px,
        // Transform props
        rotate: degrees,
        rotateX: degrees,
        rotateY: degrees,
        rotateZ: degrees,
        scale,
        scaleX: scale,
        scaleY: scale,
        scaleZ: scale,
        skew: degrees,
        skewX: degrees,
        skewY: degrees,
        distance: px,
        translateX: px,
        translateY: px,
        translateZ: px,
        x: px,
        y: px,
        z: px,
        perspective: px,
        transformPerspective: px,
        opacity: alpha,
        originX: progressPercentage,
        originY: progressPercentage,
        originZ: px,
        // Misc
        zIndex: int,
        // SVG
        fillOpacity: alpha,
        strokeOpacity: alpha,
        numOctaves: int
      };
      function buildHTMLStyles(state, latestValues, options, transformTemplate) {
        const { style, vars, transform: transform2, transformOrigin } = state;
        let hasTransform2 = false;
        let hasTransformOrigin = false;
        let transformIsNone = true;
        for (const key in latestValues) {
          const value = latestValues[key];
          if (isCSSVariableName(key)) {
            vars[key] = value;
            continue;
          }
          const valueType = numberValueTypes[key];
          const valueAsType = getValueAsType(value, valueType);
          if (transformProps.has(key)) {
            hasTransform2 = true;
            transform2[key] = valueAsType;
            if (!transformIsNone)
              continue;
            if (value !== (valueType.default || 0))
              transformIsNone = false;
          } else if (key.startsWith("origin")) {
            hasTransformOrigin = true;
            transformOrigin[key] = valueAsType;
          } else {
            style[key] = valueAsType;
          }
        }
        if (!latestValues.transform) {
          if (hasTransform2 || transformTemplate) {
            style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);
          } else if (style.transform) {
            style.transform = "none";
          }
        }
        if (hasTransformOrigin) {
          const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
          style.transformOrigin = `${originX} ${originY} ${originZ}`;
        }
      }
      function calcOrigin(origin, offset, size) {
        return typeof origin === "string" ? origin : px.transform(offset + size * origin);
      }
      function calcSVGTransformOrigin(dimensions, originX, originY) {
        const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
        const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
        return `${pxOriginX} ${pxOriginY}`;
      }
      var dashKeys = {
        offset: "stroke-dashoffset",
        array: "stroke-dasharray"
      };
      var camelKeys = {
        offset: "strokeDashoffset",
        array: "strokeDasharray"
      };
      function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {
        attrs.pathLength = 1;
        const keys2 = useDashCase ? dashKeys : camelKeys;
        attrs[keys2.offset] = px.transform(-offset);
        const pathLength = px.transform(length);
        const pathSpacing = px.transform(spacing);
        attrs[keys2.array] = `${pathLength} ${pathSpacing}`;
      }
      function buildSVGAttrs(state, _a, options, isSVGTag2, transformTemplate) {
        var _b = _a, {
          attrX,
          attrY,
          attrScale,
          originX,
          originY,
          pathLength,
          pathSpacing = 1,
          pathOffset = 0
        } = _b, latest = __objRest(_b, [
          "attrX",
          "attrY",
          "attrScale",
          "originX",
          "originY",
          "pathLength",
          "pathSpacing",
          "pathOffset"
        ]);
        buildHTMLStyles(state, latest, options, transformTemplate);
        if (isSVGTag2) {
          if (state.style.viewBox) {
            state.attrs.viewBox = state.style.viewBox;
          }
          return;
        }
        state.attrs = state.style;
        state.style = {};
        const { attrs, style, dimensions } = state;
        if (attrs.transform) {
          if (dimensions)
            style.transform = attrs.transform;
          delete attrs.transform;
        }
        if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
          style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
        }
        if (attrX !== void 0)
          attrs.x = attrX;
        if (attrY !== void 0)
          attrs.y = attrY;
        if (attrScale !== void 0)
          attrs.scale = attrScale;
        if (pathLength !== void 0) {
          buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
        }
      }
      var isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";
      var camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
      function renderHTML(element, { style, vars }, styleProp, projection) {
        Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
        for (const key in vars) {
          element.style.setProperty(key, vars[key]);
        }
      }
      var camelCaseAttributes = /* @__PURE__ */ new Set([
        "baseFrequency",
        "diffuseConstant",
        "kernelMatrix",
        "kernelUnitLength",
        "keySplines",
        "keyTimes",
        "limitingConeAngle",
        "markerHeight",
        "markerWidth",
        "numOctaves",
        "targetX",
        "targetY",
        "surfaceScale",
        "specularConstant",
        "specularExponent",
        "stdDeviation",
        "tableValues",
        "viewBox",
        "gradientTransform",
        "pathLength",
        "startOffset",
        "textLength",
        "lengthAdjust"
      ]);
      function renderSVG(element, renderState, _styleProp, projection) {
        renderHTML(element, renderState, void 0, projection);
        for (const key in renderState.attrs) {
          element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
        }
      }
      function scrapeMotionValuesFromProps$1(props, prevProps) {
        const { style } = props;
        const newValues = {};
        for (const key in style) {
          if (isMotionValue(style[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props)) {
            newValues[key] = style[key];
          }
        }
        return newValues;
      }
      function scrapeMotionValuesFromProps(props, prevProps) {
        const newValues = scrapeMotionValuesFromProps$1(props, prevProps);
        for (const key in props) {
          if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
            const targetKey = transformPropOrder.indexOf(key) !== -1 ? "attr" + key.charAt(0).toUpperCase() + key.substring(1) : key;
            newValues[targetKey] = props[key];
          }
        }
        return newValues;
      }
      function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {
        if (typeof definition === "function") {
          definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
        }
        if (typeof definition === "string") {
          definition = props.variants && props.variants[definition];
        }
        if (typeof definition === "function") {
          definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
        }
        return definition;
      }
      var isKeyframesTarget = (v) => {
        return Array.isArray(v);
      };
      var isCustomValue = (v) => {
        return Boolean(v && typeof v === "object" && v.mix && v.toValue);
      };
      var resolveFinalValueInKeyframes = (v) => {
        return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
      };
      var noop3 = (any) => any;
      var Queue = class {
        constructor() {
          this.order = [];
          this.scheduled = /* @__PURE__ */ new Set();
        }
        add(process2) {
          if (!this.scheduled.has(process2)) {
            this.scheduled.add(process2);
            this.order.push(process2);
            return true;
          }
        }
        remove(process2) {
          const index3 = this.order.indexOf(process2);
          if (index3 !== -1) {
            this.order.splice(index3, 1);
            this.scheduled.delete(process2);
          }
        }
        clear() {
          this.order.length = 0;
          this.scheduled.clear();
        }
      };
      function createRenderStep(runNextFrame) {
        let thisFrame = new Queue();
        let nextFrame = new Queue();
        let numToRun = 0;
        let isProcessing = false;
        let flushNextFrame = false;
        const toKeepAlive = /* @__PURE__ */ new WeakSet();
        const step = {
          /**
           * Schedule a process to run on the next frame.
           */
          schedule: (callback, keepAlive = false, immediate = false) => {
            const addToCurrentFrame = immediate && isProcessing;
            const queue = addToCurrentFrame ? thisFrame : nextFrame;
            if (keepAlive)
              toKeepAlive.add(callback);
            if (queue.add(callback) && addToCurrentFrame && isProcessing) {
              numToRun = thisFrame.order.length;
            }
            return callback;
          },
          /**
           * Cancel the provided callback from running on the next frame.
           */
          cancel: (callback) => {
            nextFrame.remove(callback);
            toKeepAlive.delete(callback);
          },
          /**
           * Execute all schedule callbacks.
           */
          process: (frameData2) => {
            if (isProcessing) {
              flushNextFrame = true;
              return;
            }
            isProcessing = true;
            [thisFrame, nextFrame] = [nextFrame, thisFrame];
            nextFrame.clear();
            numToRun = thisFrame.order.length;
            if (numToRun) {
              for (let i = 0; i < numToRun; i++) {
                const callback = thisFrame.order[i];
                callback(frameData2);
                if (toKeepAlive.has(callback)) {
                  step.schedule(callback);
                  runNextFrame();
                }
              }
            }
            isProcessing = false;
            if (flushNextFrame) {
              flushNextFrame = false;
              step.process(frameData2);
            }
          }
        };
        return step;
      }
      var stepsOrder = [
        "prepare",
        "read",
        "update",
        "preRender",
        "render",
        "postRender"
      ];
      var maxElapsed$1 = 40;
      function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
        let runNextFrame = false;
        let useDefaultElapsed = true;
        const state = {
          delta: 0,
          timestamp: 0,
          isProcessing: false
        };
        const steps2 = stepsOrder.reduce((acc, key) => {
          acc[key] = createRenderStep(() => runNextFrame = true);
          return acc;
        }, {});
        const processStep = (stepId) => steps2[stepId].process(state);
        const processBatch = () => {
          const timestamp = performance.now();
          runNextFrame = false;
          state.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed$1), 1);
          state.timestamp = timestamp;
          state.isProcessing = true;
          stepsOrder.forEach(processStep);
          state.isProcessing = false;
          if (runNextFrame && allowKeepAlive) {
            useDefaultElapsed = false;
            scheduleNextBatch(processBatch);
          }
        };
        const wake = () => {
          runNextFrame = true;
          useDefaultElapsed = true;
          if (!state.isProcessing) {
            scheduleNextBatch(processBatch);
          }
        };
        const schedule = stepsOrder.reduce((acc, key) => {
          const step = steps2[key];
          acc[key] = (process2, keepAlive = false, immediate = false) => {
            if (!runNextFrame)
              wake();
            return step.schedule(process2, keepAlive, immediate);
          };
          return acc;
        }, {});
        const cancel = (process2) => stepsOrder.forEach((key) => steps2[key].cancel(process2));
        return { schedule, cancel, state, steps: steps2 };
      }
      var { schedule: frame, cancel: cancelFrame, state: frameData, steps } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop3, true);
      var combineFunctions = (a, b) => (v) => b(a(v));
      var pipe = (...transformers) => transformers.reduce(combineFunctions);
      function getCurrent(visualElement) {
        const current = {};
        visualElement.values.forEach((value, key) => current[key] = value.get());
        return current;
      }
      function getVelocity(visualElement) {
        const velocity = {};
        visualElement.values.forEach((value, key) => velocity[key] = value.getVelocity());
        return velocity;
      }
      function resolveVariant(visualElement, definition, custom) {
        const props = visualElement.getProps();
        return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
      }
      var optimizedAppearDataId = "framerAppearId";
      var optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);
      exports.warning = noop3;
      exports.invariant = noop3;
      if (true) {
        exports.warning = (check, message) => {
          if (!check && typeof console !== "undefined") {
            console.warn(message);
          }
        };
        exports.invariant = (check, message) => {
          if (!check) {
            throw new Error(message);
          }
        };
      }
      var secondsToMilliseconds = (seconds) => seconds * 1e3;
      var millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;
      var instantAnimationState = {
        current: false
      };
      var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";
      function isWaapiSupportedEasing(easing) {
        return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
      }
      var cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;
      var supportedWaapiEasing = {
        linear: "linear",
        ease: "ease",
        easeIn: "ease-in",
        easeOut: "ease-out",
        easeInOut: "ease-in-out",
        circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
        circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
        backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
        backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
      };
      function mapEasingToNativeEasing(easing) {
        if (!easing)
          return void 0;
        return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
      }
      function animateStyle(element, valueName, keyframes2, { delay: delay2 = 0, duration, repeat = 0, repeatType = "loop", ease: ease2, times } = {}) {
        const keyframeOptions = { [valueName]: keyframes2 };
        if (times)
          keyframeOptions.offset = times;
        const easing = mapEasingToNativeEasing(ease2);
        if (Array.isArray(easing))
          keyframeOptions.easing = easing;
        return element.animate(keyframeOptions, {
          delay: delay2,
          duration,
          easing: !Array.isArray(easing) ? easing : "linear",
          fill: "both",
          iterations: repeat + 1,
          direction: repeatType === "reverse" ? "alternate" : "normal"
        });
      }
      function getFinalKeyframe(keyframes2, { repeat, repeatType = "loop" }) {
        const index3 = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : keyframes2.length - 1;
        return keyframes2[index3];
      }
      var calcBezier = (t, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t + (3 * a2 - 6 * a1)) * t + 3 * a1) * t;
      var subdivisionPrecision = 1e-7;
      var subdivisionMaxIterations = 12;
      function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
        let currentX;
        let currentT;
        let i = 0;
        do {
          currentT = lowerBound + (upperBound - lowerBound) / 2;
          currentX = calcBezier(currentT, mX1, mX2) - x;
          if (currentX > 0) {
            upperBound = currentT;
          } else {
            lowerBound = currentT;
          }
        } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
        return currentT;
      }
      function cubicBezier(mX1, mY1, mX2, mY2) {
        if (mX1 === mY1 && mX2 === mY2)
          return noop3;
        const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
        return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
      }
      var easeIn = cubicBezier(0.42, 0, 1, 1);
      var easeOut = cubicBezier(0, 0, 0.58, 1);
      var easeInOut = cubicBezier(0.42, 0, 0.58, 1);
      var isEasingArray = (ease2) => {
        return Array.isArray(ease2) && typeof ease2[0] !== "number";
      };
      var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
      var reverseEasing = (easing) => (p) => 1 - easing(1 - p);
      var circIn = (p) => 1 - Math.sin(Math.acos(p));
      var circOut = reverseEasing(circIn);
      var circInOut = mirrorEasing(circOut);
      var backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
      var backIn = reverseEasing(backOut);
      var backInOut = mirrorEasing(backIn);
      var anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
      var easingLookup = {
        linear: noop3,
        easeIn,
        easeInOut,
        easeOut,
        circIn,
        circInOut,
        circOut,
        backIn,
        backInOut,
        backOut,
        anticipate
      };
      var easingDefinitionToFunction = (definition) => {
        if (Array.isArray(definition)) {
          exports.invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
          const [x1, y1, x2, y2] = definition;
          return cubicBezier(x1, y1, x2, y2);
        } else if (typeof definition === "string") {
          exports.invariant(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`);
          return easingLookup[definition];
        }
        return definition;
      };
      var isColorString = (type, testProp) => (v) => {
        return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
      };
      var splitColor = (aName, bName, cName) => (v) => {
        if (!isString(v))
          return v;
        const [a, b, c, alpha2] = v.match(floatRegex);
        return {
          [aName]: parseFloat(a),
          [bName]: parseFloat(b),
          [cName]: parseFloat(c),
          alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
        };
      };
      var clampRgbUnit = (v) => clamp(0, 255, v);
      var rgbUnit = __spreadProps(__spreadValues({}, number), {
        transform: (v) => Math.round(clampRgbUnit(v))
      });
      var rgba = {
        test: isColorString("rgb", "red"),
        parse: splitColor("red", "green", "blue"),
        transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
      };
      function parseHex(v) {
        let r = "";
        let g = "";
        let b = "";
        let a = "";
        if (v.length > 5) {
          r = v.substring(1, 3);
          g = v.substring(3, 5);
          b = v.substring(5, 7);
          a = v.substring(7, 9);
        } else {
          r = v.substring(1, 2);
          g = v.substring(2, 3);
          b = v.substring(3, 4);
          a = v.substring(4, 5);
          r += r;
          g += g;
          b += b;
          a += a;
        }
        return {
          red: parseInt(r, 16),
          green: parseInt(g, 16),
          blue: parseInt(b, 16),
          alpha: a ? parseInt(a, 16) / 255 : 1
        };
      }
      var hex = {
        test: isColorString("#"),
        parse: parseHex,
        transform: rgba.transform
      };
      var hsla = {
        test: isColorString("hsl", "hue"),
        parse: splitColor("hue", "saturation", "lightness"),
        transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
          return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
        }
      };
      var color = {
        test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
        parse: (v) => {
          if (rgba.test(v)) {
            return rgba.parse(v);
          } else if (hsla.test(v)) {
            return hsla.parse(v);
          } else {
            return hex.parse(v);
          }
        },
        transform: (v) => {
          return isString(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v);
        }
      };
      var mix = (from, to, progress2) => -progress2 * from + progress2 * to + from;
      function hueToRgb(p, q, t) {
        if (t < 0)
          t += 1;
        if (t > 1)
          t -= 1;
        if (t < 1 / 6)
          return p + (q - p) * 6 * t;
        if (t < 1 / 2)
          return q;
        if (t < 2 / 3)
          return p + (q - p) * (2 / 3 - t) * 6;
        return p;
      }
      function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
        hue /= 360;
        saturation /= 100;
        lightness /= 100;
        let red = 0;
        let green = 0;
        let blue = 0;
        if (!saturation) {
          red = green = blue = lightness;
        } else {
          const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
          const p = 2 * lightness - q;
          red = hueToRgb(p, q, hue + 1 / 3);
          green = hueToRgb(p, q, hue);
          blue = hueToRgb(p, q, hue - 1 / 3);
        }
        return {
          red: Math.round(red * 255),
          green: Math.round(green * 255),
          blue: Math.round(blue * 255),
          alpha: alpha2
        };
      }
      var mixLinearColor = (from, to, v) => {
        const fromExpo = from * from;
        return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));
      };
      var colorTypes = [hex, rgba, hsla];
      var getColorType = (v) => colorTypes.find((type) => type.test(v));
      function asRGBA(color2) {
        const type = getColorType(color2);
        exports.invariant(Boolean(type), `'${color2}' is not an animatable color. Use the equivalent color code instead.`);
        let model = type.parse(color2);
        if (type === hsla) {
          model = hslaToRgba(model);
        }
        return model;
      }
      var mixColor = (from, to) => {
        const fromRGBA = asRGBA(from);
        const toRGBA = asRGBA(to);
        const blended = __spreadValues({}, fromRGBA);
        return (v) => {
          blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
          blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
          blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
          blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);
          return rgba.transform(blended);
        };
      };
      function test(v) {
        var _a, _b;
        return isNaN(v) && isString(v) && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;
      }
      var cssVarTokeniser = {
        regex: cssVariableRegex,
        countKey: "Vars",
        token: "${v}",
        parse: noop3
      };
      var colorTokeniser = {
        regex: colorRegex,
        countKey: "Colors",
        token: "${c}",
        parse: color.parse
      };
      var numberTokeniser = {
        regex: floatRegex,
        countKey: "Numbers",
        token: "${n}",
        parse: number.parse
      };
      function tokenise(info, { regex, countKey, token, parse }) {
        const matches = info.tokenised.match(regex);
        if (!matches)
          return;
        info["num" + countKey] = matches.length;
        info.tokenised = info.tokenised.replace(regex, token);
        info.values.push(...matches.map(parse));
      }
      function analyseComplexValue(value) {
        const originalValue = value.toString();
        const info = {
          value: originalValue,
          tokenised: originalValue,
          values: [],
          numVars: 0,
          numColors: 0,
          numNumbers: 0
        };
        if (info.value.includes("var(--"))
          tokenise(info, cssVarTokeniser);
        tokenise(info, colorTokeniser);
        tokenise(info, numberTokeniser);
        return info;
      }
      function parseComplexValue(v) {
        return analyseComplexValue(v).values;
      }
      function createTransformer(source) {
        const { values, numColors, numVars, tokenised } = analyseComplexValue(source);
        const numValues = values.length;
        return (v) => {
          let output = tokenised;
          for (let i = 0; i < numValues; i++) {
            if (i < numVars) {
              output = output.replace(cssVarTokeniser.token, v[i]);
            } else if (i < numVars + numColors) {
              output = output.replace(colorTokeniser.token, color.transform(v[i]));
            } else {
              output = output.replace(numberTokeniser.token, sanitize(v[i]));
            }
          }
          return output;
        };
      }
      var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
      function getAnimatableNone$1(v) {
        const parsed = parseComplexValue(v);
        const transformer = createTransformer(v);
        return transformer(parsed.map(convertNumbersToZero));
      }
      var complex = {
        test,
        parse: parseComplexValue,
        createTransformer,
        getAnimatableNone: getAnimatableNone$1
      };
      var mixImmediate = (origin, target) => (p) => `${p > 0 ? target : origin}`;
      function getMixer$1(origin, target) {
        if (typeof origin === "number") {
          return (v) => mix(origin, target, v);
        } else if (color.test(origin)) {
          return mixColor(origin, target);
        } else {
          return origin.startsWith("var(") ? mixImmediate(origin, target) : mixComplex(origin, target);
        }
      }
      var mixArray = (from, to) => {
        const output = [...from];
        const numValues = output.length;
        const blendValue = from.map((fromThis, i) => getMixer$1(fromThis, to[i]));
        return (v) => {
          for (let i = 0; i < numValues; i++) {
            output[i] = blendValue[i](v);
          }
          return output;
        };
      };
      var mixObject = (origin, target) => {
        const output = __spreadValues(__spreadValues({}, origin), target);
        const blendValue = {};
        for (const key in output) {
          if (origin[key] !== void 0 && target[key] !== void 0) {
            blendValue[key] = getMixer$1(origin[key], target[key]);
          }
        }
        return (v) => {
          for (const key in blendValue) {
            output[key] = blendValue[key](v);
          }
          return output;
        };
      };
      var mixComplex = (origin, target) => {
        const template = complex.createTransformer(target);
        const originStats = analyseComplexValue(origin);
        const targetStats = analyseComplexValue(target);
        const canInterpolate = originStats.numVars === targetStats.numVars && originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;
        if (canInterpolate) {
          return pipe(mixArray(originStats.values, targetStats.values), template);
        } else {
          exports.warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
          return mixImmediate(origin, target);
        }
      };
      var progress = (from, to, value) => {
        const toFromDifference = to - from;
        return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
      };
      var mixNumber = (from, to) => (p) => mix(from, to, p);
      function detectMixerFactory(v) {
        if (typeof v === "number") {
          return mixNumber;
        } else if (typeof v === "string") {
          return color.test(v) ? mixColor : mixComplex;
        } else if (Array.isArray(v)) {
          return mixArray;
        } else if (typeof v === "object") {
          return mixObject;
        }
        return mixNumber;
      }
      function createMixers(output, ease2, customMixer) {
        const mixers = [];
        const mixerFactory = customMixer || detectMixerFactory(output[0]);
        const numMixers = output.length - 1;
        for (let i = 0; i < numMixers; i++) {
          let mixer = mixerFactory(output[i], output[i + 1]);
          if (ease2) {
            const easingFunction = Array.isArray(ease2) ? ease2[i] || noop3 : ease2;
            mixer = pipe(easingFunction, mixer);
          }
          mixers.push(mixer);
        }
        return mixers;
      }
      function interpolate(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
        const inputLength = input.length;
        exports.invariant(inputLength === output.length, "Both input and output ranges must be the same length");
        if (inputLength === 1)
          return () => output[0];
        if (input[0] > input[inputLength - 1]) {
          input = [...input].reverse();
          output = [...output].reverse();
        }
        const mixers = createMixers(output, ease2, mixer);
        const numMixers = mixers.length;
        const interpolator = (v) => {
          let i = 0;
          if (numMixers > 1) {
            for (; i < input.length - 2; i++) {
              if (v < input[i + 1])
                break;
            }
          }
          const progressInRange = progress(input[i], input[i + 1], v);
          return mixers[i](progressInRange);
        };
        return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;
      }
      function fillOffset(offset, remaining) {
        const min = offset[offset.length - 1];
        for (let i = 1; i <= remaining; i++) {
          const offsetProgress = progress(0, remaining, i);
          offset.push(mix(min, 1, offsetProgress));
        }
      }
      function defaultOffset$1(arr) {
        const offset = [0];
        fillOffset(offset, arr.length - 1);
        return offset;
      }
      function convertOffsetToTimes(offset, duration) {
        return offset.map((o) => o * duration);
      }
      function defaultEasing(values, easing) {
        return values.map(() => easing || easeInOut).splice(0, values.length - 1);
      }
      function keyframes({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
        const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
        const state = {
          done: false,
          value: keyframeValues[0]
        };
        const absoluteTimes = convertOffsetToTimes(
          // Only use the provided offsets if they're the correct length
          // TODO Maybe we should warn here if there's a length mismatch
          times && times.length === keyframeValues.length ? times : defaultOffset$1(keyframeValues),
          duration
        );
        const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
          ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
        });
        return {
          calculatedDuration: duration,
          next: (t) => {
            state.value = mapTimeToKeyframe(t);
            state.done = t >= duration;
            return state;
          }
        };
      }
      function velocityPerSecond(velocity, frameDuration) {
        return frameDuration ? velocity * (1e3 / frameDuration) : 0;
      }
      var velocitySampleDuration = 5;
      function calcGeneratorVelocity(resolveValue, t, current) {
        const prevT = Math.max(t - velocitySampleDuration, 0);
        return velocityPerSecond(current - resolveValue(prevT), t - prevT);
      }
      var safeMin = 1e-3;
      var minDuration = 0.01;
      var maxDuration$1 = 10;
      var minDamping = 0.05;
      var maxDamping = 1;
      function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
        let envelope;
        let derivative;
        exports.warning(duration <= secondsToMilliseconds(maxDuration$1), "Spring duration must be 10 seconds or less");
        let dampingRatio = 1 - bounce;
        dampingRatio = clamp(minDamping, maxDamping, dampingRatio);
        duration = clamp(minDuration, maxDuration$1, millisecondsToSeconds(duration));
        if (dampingRatio < 1) {
          envelope = (undampedFreq2) => {
            const exponentialDecay = undampedFreq2 * dampingRatio;
            const delta = exponentialDecay * duration;
            const a = exponentialDecay - velocity;
            const b = calcAngularFreq(undampedFreq2, dampingRatio);
            const c = Math.exp(-delta);
            return safeMin - a / b * c;
          };
          derivative = (undampedFreq2) => {
            const exponentialDecay = undampedFreq2 * dampingRatio;
            const delta = exponentialDecay * duration;
            const d = delta * velocity + velocity;
            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
            const f = Math.exp(-delta);
            const g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
            const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
            return factor * ((d - e) * f) / g;
          };
        } else {
          envelope = (undampedFreq2) => {
            const a = Math.exp(-undampedFreq2 * duration);
            const b = (undampedFreq2 - velocity) * duration + 1;
            return -safeMin + a * b;
          };
          derivative = (undampedFreq2) => {
            const a = Math.exp(-undampedFreq2 * duration);
            const b = (velocity - undampedFreq2) * (duration * duration);
            return a * b;
          };
        }
        const initialGuess = 5 / duration;
        const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
        duration = secondsToMilliseconds(duration);
        if (isNaN(undampedFreq)) {
          return {
            stiffness: 100,
            damping: 10,
            duration
          };
        } else {
          const stiffness = Math.pow(undampedFreq, 2) * mass;
          return {
            stiffness,
            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
            duration
          };
        }
      }
      var rootIterations = 12;
      function approximateRoot(envelope, derivative, initialGuess) {
        let result = initialGuess;
        for (let i = 1; i < rootIterations; i++) {
          result = result - envelope(result) / derivative(result);
        }
        return result;
      }
      function calcAngularFreq(undampedFreq, dampingRatio) {
        return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
      }
      var durationKeys = ["duration", "bounce"];
      var physicsKeys = ["stiffness", "damping", "mass"];
      function isSpringType(options, keys2) {
        return keys2.some((key) => options[key] !== void 0);
      }
      function getSpringOptions(options) {
        let springOptions = __spreadValues({
          velocity: 0,
          stiffness: 100,
          damping: 10,
          mass: 1,
          isResolvedFromDuration: false
        }, options);
        if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
          const derived = findSpring(options);
          springOptions = __spreadProps(__spreadValues(__spreadValues({}, springOptions), derived), {
            velocity: 0,
            mass: 1
          });
          springOptions.isResolvedFromDuration = true;
        }
        return springOptions;
      }
      function spring(_a) {
        var _b = _a, { keyframes: keyframes2, restDelta, restSpeed } = _b, options = __objRest(_b, ["keyframes", "restDelta", "restSpeed"]);
        const origin = keyframes2[0];
        const target = keyframes2[keyframes2.length - 1];
        const state = { done: false, value: origin };
        const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);
        const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0;
        const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
        const initialDelta = target - origin;
        const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
        const isGranularScale = Math.abs(initialDelta) < 5;
        restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
        restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
        let resolveSpring;
        if (dampingRatio < 1) {
          const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
          resolveSpring = (t) => {
            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
          };
        } else if (dampingRatio === 1) {
          resolveSpring = (t) => target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
        } else {
          const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
          resolveSpring = (t) => {
            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
            const freqForT = Math.min(dampedAngularFreq * t, 300);
            return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
          };
        }
        return {
          calculatedDuration: isResolvedFromDuration ? duration || null : null,
          next: (t) => {
            const current = resolveSpring(t);
            if (!isResolvedFromDuration) {
              let currentVelocity = initialVelocity;
              if (t !== 0) {
                if (dampingRatio < 1) {
                  currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);
                } else {
                  currentVelocity = 0;
                }
              }
              const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
              const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
              state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
            } else {
              state.done = t >= duration;
            }
            state.value = state.done ? target : current;
            return state;
          }
        };
      }
      function inertia({ keyframes: keyframes2, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {
        const origin = keyframes2[0];
        const state = {
          done: false,
          value: origin
        };
        const isOutOfBounds = (v) => min !== void 0 && v < min || max !== void 0 && v > max;
        const nearestBoundary = (v) => {
          if (min === void 0)
            return max;
          if (max === void 0)
            return min;
          return Math.abs(min - v) < Math.abs(max - v) ? min : max;
        };
        let amplitude = power * velocity;
        const ideal = origin + amplitude;
        const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
        if (target !== ideal)
          amplitude = target - origin;
        const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);
        const calcLatest = (t) => target + calcDelta(t);
        const applyFriction = (t) => {
          const delta = calcDelta(t);
          const latest = calcLatest(t);
          state.done = Math.abs(delta) <= restDelta;
          state.value = state.done ? target : latest;
        };
        let timeReachedBoundary;
        let spring$1;
        const checkCatchBoundary = (t) => {
          if (!isOutOfBounds(state.value))
            return;
          timeReachedBoundary = t;
          spring$1 = spring({
            keyframes: [state.value, nearestBoundary(state.value)],
            velocity: calcGeneratorVelocity(calcLatest, t, state.value),
            damping: bounceDamping,
            stiffness: bounceStiffness,
            restDelta,
            restSpeed
          });
        };
        checkCatchBoundary(0);
        return {
          calculatedDuration: null,
          next: (t) => {
            let hasUpdatedFrame = false;
            if (!spring$1 && timeReachedBoundary === void 0) {
              hasUpdatedFrame = true;
              applyFriction(t);
              checkCatchBoundary(t);
            }
            if (timeReachedBoundary !== void 0 && t > timeReachedBoundary) {
              return spring$1.next(t - timeReachedBoundary);
            } else {
              !hasUpdatedFrame && applyFriction(t);
              return state;
            }
          }
        };
      }
      var frameloopDriver = (update) => {
        const passTimestamp = ({ timestamp }) => update(timestamp);
        return {
          start: () => frame.update(passTimestamp, true),
          stop: () => cancelFrame(passTimestamp),
          /**
           * If we're processing this frame we can use the
           * framelocked timestamp to keep things in sync.
           */
          now: () => frameData.isProcessing ? frameData.timestamp : performance.now()
        };
      };
      var maxGeneratorDuration = 2e4;
      function calcGeneratorDuration(generator) {
        let duration = 0;
        const timeStep = 50;
        let state = generator.next(duration);
        while (!state.done && duration < maxGeneratorDuration) {
          duration += timeStep;
          state = generator.next(duration);
        }
        return duration >= maxGeneratorDuration ? Infinity : duration;
      }
      var types = {
        decay: inertia,
        inertia,
        tween: keyframes,
        keyframes,
        spring
      };
      function animateValue(_a) {
        var _b = _a, { autoplay = true, delay: delay2 = 0, driver = frameloopDriver, keyframes: keyframes$1, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate } = _b, options = __objRest(_b, ["autoplay", "delay", "driver", "keyframes", "type", "repeat", "repeatDelay", "repeatType", "onPlay", "onStop", "onComplete", "onUpdate"]);
        let speed = 1;
        let hasStopped = false;
        let resolveFinishedPromise;
        let currentFinishedPromise;
        const updateFinishedPromise = () => {
          currentFinishedPromise = new Promise((resolve) => {
            resolveFinishedPromise = resolve;
          });
        };
        updateFinishedPromise();
        let animationDriver;
        const generatorFactory = types[type] || keyframes;
        let mapNumbersToKeyframes;
        if (generatorFactory !== keyframes && typeof keyframes$1[0] !== "number") {
          mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {
            clamp: false
          });
          keyframes$1 = [0, 100];
        }
        const generator = generatorFactory(__spreadProps(__spreadValues({}, options), { keyframes: keyframes$1 }));
        let mirroredGenerator;
        if (repeatType === "mirror") {
          mirroredGenerator = generatorFactory(__spreadProps(__spreadValues({}, options), {
            keyframes: [...keyframes$1].reverse(),
            velocity: -(options.velocity || 0)
          }));
        }
        let playState = "idle";
        let holdTime = null;
        let startTime = null;
        let cancelTime = null;
        if (generator.calculatedDuration === null && repeat) {
          generator.calculatedDuration = calcGeneratorDuration(generator);
        }
        const { calculatedDuration } = generator;
        let resolvedDuration = Infinity;
        let totalDuration = Infinity;
        if (calculatedDuration !== null) {
          resolvedDuration = calculatedDuration + repeatDelay;
          totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
        }
        let currentTime = 0;
        const tick = (timestamp) => {
          if (startTime === null)
            return;
          if (speed > 0)
            startTime = Math.min(startTime, timestamp);
          if (speed < 0)
            startTime = Math.min(timestamp - totalDuration / speed, startTime);
          if (holdTime !== null) {
            currentTime = holdTime;
          } else {
            currentTime = Math.round(timestamp - startTime) * speed;
          }
          const timeWithoutDelay = currentTime - delay2 * (speed >= 0 ? 1 : -1);
          const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
          currentTime = Math.max(timeWithoutDelay, 0);
          if (playState === "finished" && holdTime === null) {
            currentTime = totalDuration;
          }
          let elapsed = currentTime;
          let frameGenerator = generator;
          if (repeat) {
            const progress2 = currentTime / resolvedDuration;
            let currentIteration = Math.floor(progress2);
            let iterationProgress = progress2 % 1;
            if (!iterationProgress && progress2 >= 1) {
              iterationProgress = 1;
            }
            iterationProgress === 1 && currentIteration--;
            currentIteration = Math.min(currentIteration, repeat + 1);
            const iterationIsOdd = Boolean(currentIteration % 2);
            if (iterationIsOdd) {
              if (repeatType === "reverse") {
                iterationProgress = 1 - iterationProgress;
                if (repeatDelay) {
                  iterationProgress -= repeatDelay / resolvedDuration;
                }
              } else if (repeatType === "mirror") {
                frameGenerator = mirroredGenerator;
              }
            }
            let p = clamp(0, 1, iterationProgress);
            if (currentTime > totalDuration) {
              p = repeatType === "reverse" && iterationIsOdd ? 1 : 0;
            }
            elapsed = p * resolvedDuration;
          }
          const state = isInDelayPhase ? { done: false, value: keyframes$1[0] } : frameGenerator.next(elapsed);
          if (mapNumbersToKeyframes) {
            state.value = mapNumbersToKeyframes(state.value);
          }
          let { done } = state;
          if (!isInDelayPhase && calculatedDuration !== null) {
            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;
          }
          const isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done);
          if (onUpdate) {
            onUpdate(state.value);
          }
          if (isAnimationFinished) {
            finish();
          }
          return state;
        };
        const stopAnimationDriver = () => {
          animationDriver && animationDriver.stop();
          animationDriver = void 0;
        };
        const cancel = () => {
          playState = "idle";
          stopAnimationDriver();
          resolveFinishedPromise();
          updateFinishedPromise();
          startTime = cancelTime = null;
        };
        const finish = () => {
          playState = "finished";
          onComplete && onComplete();
          stopAnimationDriver();
          resolveFinishedPromise();
        };
        const play = () => {
          if (hasStopped)
            return;
          if (!animationDriver)
            animationDriver = driver(tick);
          const now = animationDriver.now();
          onPlay && onPlay();
          if (holdTime !== null) {
            startTime = now - holdTime;
          } else if (!startTime || playState === "finished") {
            startTime = now;
          }
          if (playState === "finished") {
            updateFinishedPromise();
          }
          cancelTime = startTime;
          holdTime = null;
          playState = "running";
          animationDriver.start();
        };
        if (autoplay) {
          play();
        }
        const controls = {
          then(resolve, reject) {
            return currentFinishedPromise.then(resolve, reject);
          },
          get time() {
            return millisecondsToSeconds(currentTime);
          },
          set time(newTime) {
            newTime = secondsToMilliseconds(newTime);
            currentTime = newTime;
            if (holdTime !== null || !animationDriver || speed === 0) {
              holdTime = newTime;
            } else {
              startTime = animationDriver.now() - newTime / speed;
            }
          },
          get duration() {
            const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;
            return millisecondsToSeconds(duration);
          },
          get speed() {
            return speed;
          },
          set speed(newSpeed) {
            if (newSpeed === speed || !animationDriver)
              return;
            speed = newSpeed;
            controls.time = millisecondsToSeconds(currentTime);
          },
          get state() {
            return playState;
          },
          play,
          pause: () => {
            playState = "paused";
            holdTime = currentTime;
          },
          stop: () => {
            hasStopped = true;
            if (playState === "idle")
              return;
            playState = "idle";
            onStop && onStop();
            cancel();
          },
          cancel: () => {
            if (cancelTime !== null)
              tick(cancelTime);
            cancel();
          },
          complete: () => {
            playState = "finished";
          },
          sample: (elapsed) => {
            startTime = 0;
            return tick(elapsed);
          }
        };
        return controls;
      }
      function memo(callback) {
        let result;
        return () => {
          if (result === void 0)
            result = callback();
          return result;
        };
      }
      var supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
      var acceleratedValues = /* @__PURE__ */ new Set([
        "opacity",
        "clipPath",
        "filter",
        "transform",
        "backgroundColor"
      ]);
      var sampleDelta = 10;
      var maxDuration = 2e4;
      var requiresPregeneratedKeyframes = (valueName, options) => options.type === "spring" || valueName === "backgroundColor" || !isWaapiSupportedEasing(options.ease);
      function createAcceleratedAnimation(value, valueName, _a) {
        var _b = _a, { onUpdate, onComplete } = _b, options = __objRest(_b, ["onUpdate", "onComplete"]);
        const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== "mirror" && options.damping !== 0 && options.type !== "inertia";
        if (!canAccelerateAnimation)
          return false;
        let hasStopped = false;
        let resolveFinishedPromise;
        let currentFinishedPromise;
        const updateFinishedPromise = () => {
          currentFinishedPromise = new Promise((resolve) => {
            resolveFinishedPromise = resolve;
          });
        };
        updateFinishedPromise();
        let { keyframes: keyframes2, duration = 300, ease: ease2, times } = options;
        if (requiresPregeneratedKeyframes(valueName, options)) {
          const sampleAnimation = animateValue(__spreadProps(__spreadValues({}, options), {
            repeat: 0,
            delay: 0
          }));
          let state = { done: false, value: keyframes2[0] };
          const pregeneratedKeyframes = [];
          let t = 0;
          while (!state.done && t < maxDuration) {
            state = sampleAnimation.sample(t);
            pregeneratedKeyframes.push(state.value);
            t += sampleDelta;
          }
          times = void 0;
          keyframes2 = pregeneratedKeyframes;
          duration = t - sampleDelta;
          ease2 = "linear";
        }
        const animation = animateStyle(value.owner.current, valueName, keyframes2, __spreadProps(__spreadValues({}, options), {
          duration,
          /**
           * This function is currently not called if ease is provided
           * as a function so the cast is safe.
           *
           * However it would be possible for a future refinement to port
           * in easing pregeneration from Motion One for browsers that
           * support the upcoming `linear()` easing function.
           */
          ease: ease2,
          times
        }));
        if (options.syncStart) {
          animation.startTime = frameData.isProcessing ? frameData.timestamp : document.timeline ? document.timeline.currentTime : performance.now();
        }
        const cancelAnimation = () => animation.cancel();
        const safeCancel = () => {
          frame.update(cancelAnimation);
          resolveFinishedPromise();
          updateFinishedPromise();
        };
        animation.onfinish = () => {
          value.set(getFinalKeyframe(keyframes2, options));
          onComplete && onComplete();
          safeCancel();
        };
        const controls = {
          then(resolve, reject) {
            return currentFinishedPromise.then(resolve, reject);
          },
          attachTimeline(timeline) {
            animation.timeline = timeline;
            animation.onfinish = null;
            return noop3;
          },
          get time() {
            return millisecondsToSeconds(animation.currentTime || 0);
          },
          set time(newTime) {
            animation.currentTime = secondsToMilliseconds(newTime);
          },
          get speed() {
            return animation.playbackRate;
          },
          set speed(newSpeed) {
            animation.playbackRate = newSpeed;
          },
          get duration() {
            return millisecondsToSeconds(duration);
          },
          play: () => {
            if (hasStopped)
              return;
            animation.play();
            cancelFrame(cancelAnimation);
          },
          pause: () => animation.pause(),
          stop: () => {
            hasStopped = true;
            if (animation.playState === "idle")
              return;
            const { currentTime } = animation;
            if (currentTime) {
              const sampleAnimation = animateValue(__spreadProps(__spreadValues({}, options), {
                autoplay: false
              }));
              value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
            }
            safeCancel();
          },
          complete: () => animation.finish(),
          cancel: safeCancel
        };
        return controls;
      }
      function createInstantAnimation({ keyframes: keyframes2, delay: delay2, onUpdate, onComplete }) {
        const setValue = () => {
          onUpdate && onUpdate(keyframes2[keyframes2.length - 1]);
          onComplete && onComplete();
          return {
            time: 0,
            speed: 1,
            duration: 0,
            play: noop3,
            pause: noop3,
            stop: noop3,
            then: (resolve) => {
              resolve();
              return Promise.resolve();
            },
            cancel: noop3,
            complete: noop3
          };
        };
        return delay2 ? animateValue({
          keyframes: [0, 1],
          duration: 0,
          delay: delay2,
          onComplete: setValue
        }) : setValue();
      }
      var underDampedSpring = {
        type: "spring",
        stiffness: 500,
        damping: 25,
        restSpeed: 10
      };
      var criticallyDampedSpring = (target) => ({
        type: "spring",
        stiffness: 550,
        damping: target === 0 ? 2 * Math.sqrt(550) : 30,
        restSpeed: 10
      });
      var keyframesTransition = {
        type: "keyframes",
        duration: 0.8
      };
      var ease = {
        type: "keyframes",
        ease: [0.25, 0.1, 0.35, 1],
        duration: 0.3
      };
      var getDefaultTransition = (valueKey, { keyframes: keyframes2 }) => {
        if (keyframes2.length > 2) {
          return keyframesTransition;
        } else if (transformProps.has(valueKey)) {
          return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes2[1]) : underDampedSpring;
        }
        return ease;
      };
      var isAnimatable = (key, value) => {
        if (key === "zIndex")
          return false;
        if (typeof value === "number" || Array.isArray(value))
          return true;
        if (typeof value === "string" && // It's animatable if we have a string
        (complex.test(value) || value === "0") && // And it contains numbers and/or colors
        !value.startsWith("url(")) {
          return true;
        }
        return false;
      };
      var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
      function applyDefaultFilter(v) {
        const [name, value] = v.slice(0, -1).split("(");
        if (name === "drop-shadow")
          return v;
        const [number2] = value.match(floatRegex) || [];
        if (!number2)
          return v;
        const unit = value.replace(number2, "");
        let defaultValue = maxDefaults.has(name) ? 1 : 0;
        if (number2 !== value)
          defaultValue *= 100;
        return name + "(" + defaultValue + unit + ")";
      }
      var functionRegex = /([a-z-]*)\(.*?\)/g;
      var filter = __spreadProps(__spreadValues({}, complex), {
        getAnimatableNone: (v) => {
          const functions = v.match(functionRegex);
          return functions ? functions.map(applyDefaultFilter).join(" ") : v;
        }
      });
      var defaultValueTypes = __spreadProps(__spreadValues({}, numberValueTypes), {
        // Color props
        color,
        backgroundColor: color,
        outlineColor: color,
        fill: color,
        stroke: color,
        // Border props
        borderColor: color,
        borderTopColor: color,
        borderRightColor: color,
        borderBottomColor: color,
        borderLeftColor: color,
        filter,
        WebkitFilter: filter
      });
      var getDefaultValueType = (key) => defaultValueTypes[key];
      function getAnimatableNone(key, value) {
        let defaultValueType = getDefaultValueType(key);
        if (defaultValueType !== filter)
          defaultValueType = complex;
        return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
      }
      var isZeroValueString = (v) => /^0[^.\s]+$/.test(v);
      function isNone(value) {
        if (typeof value === "number") {
          return value === 0;
        } else if (value !== null) {
          return value === "none" || value === "0" || isZeroValueString(value);
        }
      }
      function getKeyframes(value, valueName, target, transition) {
        const isTargetAnimatable = isAnimatable(valueName, target);
        let keyframes2;
        if (Array.isArray(target)) {
          keyframes2 = [...target];
        } else {
          keyframes2 = [null, target];
        }
        const defaultOrigin = transition.from !== void 0 ? transition.from : value.get();
        let animatableTemplateValue = void 0;
        const noneKeyframeIndexes = [];
        for (let i = 0; i < keyframes2.length; i++) {
          if (keyframes2[i] === null) {
            keyframes2[i] = i === 0 ? defaultOrigin : keyframes2[i - 1];
          }
          if (isNone(keyframes2[i])) {
            noneKeyframeIndexes.push(i);
          }
          if (typeof keyframes2[i] === "string" && keyframes2[i] !== "none" && keyframes2[i] !== "0") {
            animatableTemplateValue = keyframes2[i];
          }
        }
        if (isTargetAnimatable && noneKeyframeIndexes.length && animatableTemplateValue) {
          for (let i = 0; i < noneKeyframeIndexes.length; i++) {
            const index3 = noneKeyframeIndexes[i];
            keyframes2[index3] = getAnimatableNone(valueName, animatableTemplateValue);
          }
        }
        return keyframes2;
      }
      function isTransitionDefined(_a) {
        var _b = _a, { when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed } = _b, transition = __objRest(_b, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from", "elapsed"]);
        return !!Object.keys(transition).length;
      }
      function getValueTransition$1(transition, key) {
        return transition[key] || transition["default"] || transition;
      }
      var animateMotionValue = (valueName, value, target, transition = {}) => {
        return (onComplete) => {
          const valueTransition = getValueTransition$1(transition, valueName) || {};
          const delay2 = valueTransition.delay || transition.delay || 0;
          let { elapsed = 0 } = transition;
          elapsed = elapsed - secondsToMilliseconds(delay2);
          const keyframes2 = getKeyframes(value, valueName, target, valueTransition);
          const originKeyframe = keyframes2[0];
          const targetKeyframe = keyframes2[keyframes2.length - 1];
          const isOriginAnimatable = isAnimatable(valueName, originKeyframe);
          const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
          exports.warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
          let options = __spreadProps(__spreadValues({
            keyframes: keyframes2,
            velocity: value.getVelocity(),
            ease: "easeOut"
          }, valueTransition), {
            delay: -elapsed,
            onUpdate: (v) => {
              value.set(v);
              valueTransition.onUpdate && valueTransition.onUpdate(v);
            },
            onComplete: () => {
              onComplete();
              valueTransition.onComplete && valueTransition.onComplete();
            }
          });
          if (!isTransitionDefined(valueTransition)) {
            options = __spreadValues(__spreadValues({}, options), getDefaultTransition(valueName, options));
          }
          if (options.duration) {
            options.duration = secondsToMilliseconds(options.duration);
          }
          if (options.repeatDelay) {
            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
          }
          if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false) {
            return createInstantAnimation(instantAnimationState.current ? __spreadProps(__spreadValues({}, options), { delay: 0 }) : options);
          }
          if (value.owner && value.owner.current instanceof HTMLElement && !value.owner.getProps().onUpdate) {
            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);
            if (acceleratedAnimation)
              return acceleratedAnimation;
          }
          return animateValue(options);
        };
      };
      function isWillChangeMotionValue(value) {
        return Boolean(isMotionValue(value) && value.add);
      }
      var isNumericalString = (v) => /^\-?\d*\.?\d+$/.test(v);
      function addUniqueItem(arr, item) {
        if (arr.indexOf(item) === -1)
          arr.push(item);
      }
      function removeItem(arr, item) {
        const index3 = arr.indexOf(item);
        if (index3 > -1)
          arr.splice(index3, 1);
      }
      function moveItem([...arr], fromIndex, toIndex) {
        const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
        if (startIndex >= 0 && startIndex < arr.length) {
          const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
          const [item] = arr.splice(fromIndex, 1);
          arr.splice(endIndex, 0, item);
        }
        return arr;
      }
      var SubscriptionManager = class {
        constructor() {
          this.subscriptions = [];
        }
        add(handler) {
          addUniqueItem(this.subscriptions, handler);
          return () => removeItem(this.subscriptions, handler);
        }
        notify(a, b, c) {
          const numSubscriptions = this.subscriptions.length;
          if (!numSubscriptions)
            return;
          if (numSubscriptions === 1) {
            this.subscriptions[0](a, b, c);
          } else {
            for (let i = 0; i < numSubscriptions; i++) {
              const handler = this.subscriptions[i];
              handler && handler(a, b, c);
            }
          }
        }
        getSize() {
          return this.subscriptions.length;
        }
        clear() {
          this.subscriptions.length = 0;
        }
      };
      var warned = /* @__PURE__ */ new Set();
      function warnOnce(condition, message, element) {
        if (condition || warned.has(message))
          return;
        console.warn(message);
        if (element)
          console.warn(element);
        warned.add(message);
      }
      var isFloat = (value) => {
        return !isNaN(parseFloat(value));
      };
      var collectMotionValues = {
        current: void 0
      };
      var MotionValue = class {
        /**
         * @param init - The initiating value
         * @param config - Optional configuration options
         *
         * -  `transformer`: A function to transform incoming values with.
         *
         * @internal
         */
        constructor(init, options = {}) {
          this.version = "10.16.4";
          this.timeDelta = 0;
          this.lastUpdated = 0;
          this.canTrackVelocity = false;
          this.events = {};
          this.updateAndNotify = (v, render = true) => {
            this.prev = this.current;
            this.current = v;
            const { delta, timestamp } = frameData;
            if (this.lastUpdated !== timestamp) {
              this.timeDelta = delta;
              this.lastUpdated = timestamp;
              frame.postRender(this.scheduleVelocityCheck);
            }
            if (this.prev !== this.current && this.events.change) {
              this.events.change.notify(this.current);
            }
            if (this.events.velocityChange) {
              this.events.velocityChange.notify(this.getVelocity());
            }
            if (render && this.events.renderRequest) {
              this.events.renderRequest.notify(this.current);
            }
          };
          this.scheduleVelocityCheck = () => frame.postRender(this.velocityCheck);
          this.velocityCheck = ({ timestamp }) => {
            if (timestamp !== this.lastUpdated) {
              this.prev = this.current;
              if (this.events.velocityChange) {
                this.events.velocityChange.notify(this.getVelocity());
              }
            }
          };
          this.hasAnimated = false;
          this.prev = this.current = init;
          this.canTrackVelocity = isFloat(this.current);
          this.owner = options.owner;
        }
        /**
         * Adds a function that will be notified when the `MotionValue` is updated.
         *
         * It returns a function that, when called, will cancel the subscription.
         *
         * When calling `onChange` inside a React component, it should be wrapped with the
         * `useEffect` hook. As it returns an unsubscribe function, this should be returned
         * from the `useEffect` function to ensure you don't add duplicate subscribers..
         *
         * ```jsx
         * export const MyComponent = () => {
         *   const x = useMotionValue(0)
         *   const y = useMotionValue(0)
         *   const opacity = useMotionValue(1)
         *
         *   useEffect(() => {
         *     function updateOpacity() {
         *       const maxXY = Math.max(x.get(), y.get())
         *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
         *       opacity.set(newOpacity)
         *     }
         *
         *     const unsubscribeX = x.on("change", updateOpacity)
         *     const unsubscribeY = y.on("change", updateOpacity)
         *
         *     return () => {
         *       unsubscribeX()
         *       unsubscribeY()
         *     }
         *   }, [])
         *
         *   return <motion.div style={{ x }} />
         * }
         * ```
         *
         * @param subscriber - A function that receives the latest value.
         * @returns A function that, when called, will cancel this subscription.
         *
         * @deprecated
         */
        onChange(subscription) {
          if (true) {
            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
          }
          return this.on("change", subscription);
        }
        on(eventName, callback) {
          if (!this.events[eventName]) {
            this.events[eventName] = new SubscriptionManager();
          }
          const unsubscribe = this.events[eventName].add(callback);
          if (eventName === "change") {
            return () => {
              unsubscribe();
              frame.read(() => {
                if (!this.events.change.getSize()) {
                  this.stop();
                }
              });
            };
          }
          return unsubscribe;
        }
        clearListeners() {
          for (const eventManagers in this.events) {
            this.events[eventManagers].clear();
          }
        }
        /**
         * Attaches a passive effect to the `MotionValue`.
         *
         * @internal
         */
        attach(passiveEffect, stopPassiveEffect) {
          this.passiveEffect = passiveEffect;
          this.stopPassiveEffect = stopPassiveEffect;
        }
        /**
         * Sets the state of the `MotionValue`.
         *
         * @remarks
         *
         * ```jsx
         * const x = useMotionValue(0)
         * x.set(10)
         * ```
         *
         * @param latest - Latest value to set.
         * @param render - Whether to notify render subscribers. Defaults to `true`
         *
         * @public
         */
        set(v, render = true) {
          if (!render || !this.passiveEffect) {
            this.updateAndNotify(v, render);
          } else {
            this.passiveEffect(v, this.updateAndNotify);
          }
        }
        setWithVelocity(prev, current, delta) {
          this.set(current);
          this.prev = prev;
          this.timeDelta = delta;
        }
        /**
         * Set the state of the `MotionValue`, stopping any active animations,
         * effects, and resets velocity to `0`.
         */
        jump(v) {
          this.updateAndNotify(v);
          this.prev = v;
          this.stop();
          if (this.stopPassiveEffect)
            this.stopPassiveEffect();
        }
        /**
         * Returns the latest state of `MotionValue`
         *
         * @returns - The latest state of `MotionValue`
         *
         * @public
         */
        get() {
          if (collectMotionValues.current) {
            collectMotionValues.current.push(this);
          }
          return this.current;
        }
        /**
         * @public
         */
        getPrevious() {
          return this.prev;
        }
        /**
         * Returns the latest velocity of `MotionValue`
         *
         * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
         *
         * @public
         */
        getVelocity() {
          return this.canTrackVelocity ? (
            // These casts could be avoided if parseFloat would be typed better
            velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta)
          ) : 0;
        }
        /**
         * Registers a new animation to control this `MotionValue`. Only one
         * animation can drive a `MotionValue` at one time.
         *
         * ```jsx
         * value.start()
         * ```
         *
         * @param animation - A function that starts the provided animation
         *
         * @internal
         */
        start(startAnimation) {
          this.stop();
          return new Promise((resolve) => {
            this.hasAnimated = true;
            this.animation = startAnimation(resolve);
            if (this.events.animationStart) {
              this.events.animationStart.notify();
            }
          }).then(() => {
            if (this.events.animationComplete) {
              this.events.animationComplete.notify();
            }
            this.clearAnimation();
          });
        }
        /**
         * Stop the currently active animation.
         *
         * @public
         */
        stop() {
          if (this.animation) {
            this.animation.stop();
            if (this.events.animationCancel) {
              this.events.animationCancel.notify();
            }
          }
          this.clearAnimation();
        }
        /**
         * Returns `true` if this value is currently animating.
         *
         * @public
         */
        isAnimating() {
          return !!this.animation;
        }
        clearAnimation() {
          delete this.animation;
        }
        /**
         * Destroy and clean up subscribers to this `MotionValue`.
         *
         * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
         * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
         * created a `MotionValue` via the `motionValue` function.
         *
         * @public
         */
        destroy() {
          this.clearListeners();
          this.stop();
          if (this.stopPassiveEffect) {
            this.stopPassiveEffect();
          }
        }
      };
      function motionValue(init, options) {
        return new MotionValue(init, options);
      }
      var testValueType = (v) => (type) => type.test(v);
      var auto = {
        test: (v) => v === "auto",
        parse: (v) => v
      };
      var dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
      var findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));
      var valueTypes = [...dimensionValueTypes, color, complex];
      var findValueType = (v) => valueTypes.find(testValueType(v));
      function setMotionValue(visualElement, key, value) {
        if (visualElement.hasValue(key)) {
          visualElement.getValue(key).set(value);
        } else {
          visualElement.addValue(key, motionValue(value));
        }
      }
      function setTarget(visualElement, definition) {
        const resolved = resolveVariant(visualElement, definition);
        let _a = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {}, { transitionEnd = {}, transition = {} } = _a, target = __objRest(_a, ["transitionEnd", "transition"]);
        target = __spreadValues(__spreadValues({}, target), transitionEnd);
        for (const key in target) {
          const value = resolveFinalValueInKeyframes(target[key]);
          setMotionValue(visualElement, key, value);
        }
      }
      function setVariants(visualElement, variantLabels) {
        const reversedLabels = [...variantLabels].reverse();
        reversedLabels.forEach((key) => {
          const variant = visualElement.getVariant(key);
          variant && setTarget(visualElement, variant);
          if (visualElement.variantChildren) {
            visualElement.variantChildren.forEach((child) => {
              setVariants(child, variantLabels);
            });
          }
        });
      }
      function setValues(visualElement, definition) {
        if (Array.isArray(definition)) {
          return setVariants(visualElement, definition);
        } else if (typeof definition === "string") {
          return setVariants(visualElement, [definition]);
        } else {
          setTarget(visualElement, definition);
        }
      }
      function checkTargetForNewValues(visualElement, target, origin) {
        var _a, _b;
        const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));
        const numNewValues = newValueKeys.length;
        if (!numNewValues)
          return;
        for (let i = 0; i < numNewValues; i++) {
          const key = newValueKeys[i];
          const targetValue = target[key];
          let value = null;
          if (Array.isArray(targetValue)) {
            value = targetValue[0];
          }
          if (value === null) {
            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
          }
          if (value === void 0 || value === null)
            continue;
          if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
            value = parseFloat(value);
          } else if (!findValueType(value) && complex.test(targetValue)) {
            value = getAnimatableNone(key, targetValue);
          }
          visualElement.addValue(key, motionValue(value, { owner: visualElement }));
          if (origin[key] === void 0) {
            origin[key] = value;
          }
          if (value !== null)
            visualElement.setBaseTarget(key, value);
        }
      }
      function getOriginFromTransition(key, transition) {
        if (!transition)
          return;
        const valueTransition = transition[key] || transition["default"] || transition;
        return valueTransition.from;
      }
      function getOrigin(target, transition, visualElement) {
        const origin = {};
        for (const key in target) {
          const transitionOrigin = getOriginFromTransition(key, transition);
          if (transitionOrigin !== void 0) {
            origin[key] = transitionOrigin;
          } else {
            const value = visualElement.getValue(key);
            if (value) {
              origin[key] = value.get();
            }
          }
        }
        return origin;
      }
      function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
        const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
        needsAnimating[key] = false;
        return shouldBlock;
      }
      function animateTarget(visualElement, definition, { delay: delay2 = 0, transitionOverride, type } = {}) {
        let _a = visualElement.makeTargetAnimatable(definition), { transition = visualElement.getDefaultTransition(), transitionEnd } = _a, target = __objRest(_a, ["transition", "transitionEnd"]);
        const willChange = visualElement.getValue("willChange");
        if (transitionOverride)
          transition = transitionOverride;
        const animations = [];
        const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
        for (const key in target) {
          const value = visualElement.getValue(key);
          const valueTarget = target[key];
          if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
            continue;
          }
          const valueTransition = __spreadValues({
            delay: delay2,
            elapsed: 0
          }, transition);
          if (window.HandoffAppearAnimations && !value.hasAnimated) {
            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];
            if (appearId) {
              valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);
              valueTransition.syncStart = true;
            }
          }
          value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? { type: false } : valueTransition));
          const animation = value.animation;
          if (isWillChangeMotionValue(willChange)) {
            willChange.add(key);
            animation.then(() => willChange.remove(key));
          }
          animations.push(animation);
        }
        if (transitionEnd) {
          Promise.all(animations).then(() => {
            transitionEnd && setTarget(visualElement, transitionEnd);
          });
        }
        return animations;
      }
      var distance = (a, b) => Math.abs(a - b);
      function distance2D(a, b) {
        const xDelta = distance(a.x, b.x);
        const yDelta = distance(a.y, b.y);
        return Math.sqrt(__pow(xDelta, 2) + __pow(yDelta, 2));
      }
      var createAxisDelta = () => ({
        translate: 0,
        scale: 1,
        origin: 0,
        originPoint: 0
      });
      var createDelta = () => ({
        x: createAxisDelta(),
        y: createAxisDelta()
      });
      var createAxis = () => ({ min: 0, max: 0 });
      var createBox = () => ({
        x: createAxis(),
        y: createAxis()
      });
      function convertBoundingBoxToBox({ top, left, right, bottom }) {
        return {
          x: { min: left, max: right },
          y: { min: top, max: bottom }
        };
      }
      function convertBoxToBoundingBox({ x, y }) {
        return { top: y.min, right: x.max, bottom: y.max, left: x.min };
      }
      function transformBoxPoints(point2, transformPoint) {
        if (!transformPoint)
          return point2;
        const topLeft = transformPoint({ x: point2.left, y: point2.top });
        const bottomRight = transformPoint({ x: point2.right, y: point2.bottom });
        return {
          top: topLeft.y,
          left: topLeft.x,
          bottom: bottomRight.y,
          right: bottomRight.x
        };
      }
      function isIdentityScale(scale2) {
        return scale2 === void 0 || scale2 === 1;
      }
      function hasScale({ scale: scale2, scaleX, scaleY }) {
        return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
      }
      function hasTransform(values) {
        return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;
      }
      function has2DTranslate(values) {
        return is2DTranslate(values.x) || is2DTranslate(values.y);
      }
      function is2DTranslate(value) {
        return value && value !== "0%";
      }
      function scalePoint(point2, scale2, originPoint) {
        const distanceFromOrigin = point2 - originPoint;
        const scaled = scale2 * distanceFromOrigin;
        return originPoint + scaled;
      }
      function applyPointDelta(point2, translate, scale2, originPoint, boxScale) {
        if (boxScale !== void 0) {
          point2 = scalePoint(point2, boxScale, originPoint);
        }
        return scalePoint(point2, scale2, originPoint) + translate;
      }
      function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale) {
        axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
        axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
      }
      function applyBoxDelta(box, { x, y }) {
        applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
        applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
      }
      function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
        const treeLength = treePath.length;
        if (!treeLength)
          return;
        treeScale.x = treeScale.y = 1;
        let node;
        let delta;
        for (let i = 0; i < treeLength; i++) {
          node = treePath[i];
          delta = node.projectionDelta;
          const instance = node.instance;
          if (instance && instance.style && instance.style.display === "contents") {
            continue;
          }
          if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {
            transformBox(box, {
              x: -node.scroll.offset.x,
              y: -node.scroll.offset.y
            });
          }
          if (delta) {
            treeScale.x *= delta.x.scale;
            treeScale.y *= delta.y.scale;
            applyBoxDelta(box, delta);
          }
          if (isSharedTransition && hasTransform(node.latestValues)) {
            transformBox(box, node.latestValues);
          }
        }
        treeScale.x = snapToDefault(treeScale.x);
        treeScale.y = snapToDefault(treeScale.y);
      }
      function snapToDefault(scale2) {
        if (Number.isInteger(scale2))
          return scale2;
        return scale2 > 1.0000000000001 || scale2 < 0.999999999999 ? scale2 : 1;
      }
      function translateAxis(axis, distance2) {
        axis.min = axis.min + distance2;
        axis.max = axis.max + distance2;
      }
      function transformAxis(axis, transforms, [key, scaleKey, originKey]) {
        const axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
        const originPoint = mix(axis.min, axis.max, axisOrigin);
        applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
      }
      var xKeys = ["x", "scaleX", "originX"];
      var yKeys = ["y", "scaleY", "originY"];
      function transformBox(box, transform2) {
        transformAxis(box.x, transform2, xKeys);
        transformAxis(box.y, transform2, yKeys);
      }
      function measureViewportBox(instance, transformPoint) {
        return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));
      }
      function measurePageBox(element, rootProjectionNode, transformPagePoint) {
        const viewportBox = measureViewportBox(element, transformPagePoint);
        const { scroll: scroll2 } = rootProjectionNode;
        if (scroll2) {
          translateAxis(viewportBox.x, scroll2.offset.x);
          translateAxis(viewportBox.y, scroll2.offset.y);
        }
        return viewportBox;
      }
      function delay(callback, timeout) {
        const start = performance.now();
        const checkElapsed = ({ timestamp }) => {
          const elapsed = timestamp - start;
          if (elapsed >= timeout) {
            cancelFrame(checkElapsed);
            callback(elapsed - timeout);
          }
        };
        frame.read(checkElapsed, true);
        return () => cancelFrame(checkElapsed);
      }
      function resolveElements(elements, scope, selectorCache) {
        var _a;
        if (typeof elements === "string") {
          let root = document;
          if (scope) {
            exports.invariant(Boolean(scope.current), "Scope provided, but no element detected.");
            root = scope.current;
          }
          if (selectorCache) {
            (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : selectorCache[elements] = root.querySelectorAll(elements);
            elements = selectorCache[elements];
          } else {
            elements = root.querySelectorAll(elements);
          }
        } else if (elements instanceof Element) {
          elements = [elements];
        }
        return Array.from(elements || []);
      }
      var visualElementStore = /* @__PURE__ */ new WeakMap();
      function observeTimeline(update, timeline) {
        let prevProgress;
        const onFrame = () => {
          const { currentTime } = timeline;
          const percentage = currentTime === null ? 0 : currentTime.value;
          const progress2 = percentage / 100;
          if (prevProgress !== progress2) {
            update(progress2);
          }
          prevProgress = progress2;
        };
        frame.update(onFrame, true);
        return () => cancelFrame(onFrame);
      }
      var supportsScrollTimeline = memo(() => window.ScrollTimeline !== void 0);
      var GroupPlaybackControls = class {
        constructor(animations) {
          this.animations = animations.filter(Boolean);
        }
        then(onResolve, onReject) {
          return Promise.all(this.animations).then(onResolve).catch(onReject);
        }
        /**
         * TODO: Filter out cancelled or stopped animations before returning
         */
        getAll(propName) {
          return this.animations[0][propName];
        }
        setAll(propName, newValue) {
          for (let i = 0; i < this.animations.length; i++) {
            this.animations[i][propName] = newValue;
          }
        }
        attachTimeline(timeline) {
          const cancelAll = this.animations.map((animation) => {
            if (supportsScrollTimeline() && animation.attachTimeline) {
              animation.attachTimeline(timeline);
            } else {
              animation.pause();
              return observeTimeline((progress2) => {
                animation.time = animation.duration * progress2;
              }, timeline);
            }
          });
          return () => {
            cancelAll.forEach((cancelTimeline, i) => {
              if (cancelTimeline)
                cancelTimeline();
              this.animations[i].stop();
            });
          };
        }
        get time() {
          return this.getAll("time");
        }
        set time(time) {
          this.setAll("time", time);
        }
        get speed() {
          return this.getAll("speed");
        }
        set speed(speed) {
          this.setAll("speed", speed);
        }
        get duration() {
          let max = 0;
          for (let i = 0; i < this.animations.length; i++) {
            max = Math.max(max, this.animations[i].duration);
          }
          return max;
        }
        runAll(methodName) {
          this.animations.forEach((controls) => controls[methodName]());
        }
        play() {
          this.runAll("play");
        }
        pause() {
          this.runAll("pause");
        }
        stop() {
          this.runAll("stop");
        }
        cancel() {
          this.runAll("cancel");
        }
        complete() {
          this.runAll("complete");
        }
      };
      function isDOMKeyframes(keyframes2) {
        return typeof keyframes2 === "object" && !Array.isArray(keyframes2);
      }
      function isSVGElement(element) {
        return element instanceof SVGElement && element.tagName !== "svg";
      }
      var splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
      function parseCSSVariable(current) {
        const match = splitCSSVariableRegex.exec(current);
        if (!match)
          return [,];
        const [, token, fallback] = match;
        return [token, fallback];
      }
      var maxDepth = 4;
      function getVariableValue(current, element, depth = 1) {
        exports.invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
        const [token, fallback] = parseCSSVariable(current);
        if (!token)
          return;
        const resolved = window.getComputedStyle(element).getPropertyValue(token);
        if (resolved) {
          const trimmed = resolved.trim();
          return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
        } else if (isCSSVariableToken(fallback)) {
          return getVariableValue(fallback, element, depth + 1);
        } else {
          return fallback;
        }
      }
      function resolveCSSVariables(visualElement, _a, transitionEnd) {
        var target = __objRest(_a, []);
        const element = visualElement.current;
        if (!(element instanceof Element))
          return { target, transitionEnd };
        if (transitionEnd) {
          transitionEnd = __spreadValues({}, transitionEnd);
        }
        visualElement.values.forEach((value) => {
          const current = value.get();
          if (!isCSSVariableToken(current))
            return;
          const resolved = getVariableValue(current, element);
          if (resolved)
            value.set(resolved);
        });
        for (const key in target) {
          const current = target[key];
          if (!isCSSVariableToken(current))
            continue;
          const resolved = getVariableValue(current, element);
          if (!resolved)
            continue;
          target[key] = resolved;
          if (!transitionEnd)
            transitionEnd = {};
          if (transitionEnd[key] === void 0) {
            transitionEnd[key] = current;
          }
        }
        return { target, transitionEnd };
      }
      var positionalKeys = /* @__PURE__ */ new Set([
        "width",
        "height",
        "top",
        "left",
        "right",
        "bottom",
        "x",
        "y",
        "translateX",
        "translateY"
      ]);
      var isPositionalKey = (key) => positionalKeys.has(key);
      var hasPositionalKey = (target) => {
        return Object.keys(target).some(isPositionalKey);
      };
      var isNumOrPxType = (v) => v === number || v === px;
      var getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
      var getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform: transform2 }) => {
        if (transform2 === "none" || !transform2)
          return 0;
        const matrix3d = transform2.match(/^matrix3d\((.+)\)$/);
        if (matrix3d) {
          return getPosFromMatrix(matrix3d[1], pos3);
        } else {
          const matrix = transform2.match(/^matrix\((.+)\)$/);
          if (matrix) {
            return getPosFromMatrix(matrix[1], pos2);
          } else {
            return 0;
          }
        }
      };
      var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
      var nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
      function removeNonTranslationalTransform(visualElement) {
        const removedTransforms = [];
        nonTranslationalTransformKeys.forEach((key) => {
          const value = visualElement.getValue(key);
          if (value !== void 0) {
            removedTransforms.push([key, value.get()]);
            value.set(key.startsWith("scale") ? 1 : 0);
          }
        });
        if (removedTransforms.length)
          visualElement.render();
        return removedTransforms;
      }
      var positionalValues = {
        // Dimensions
        width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
        height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
        top: (_bbox, { top }) => parseFloat(top),
        left: (_bbox, { left }) => parseFloat(left),
        bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
        right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
        // Transform
        x: getTranslateFromMatrix(4, 13),
        y: getTranslateFromMatrix(5, 14)
      };
      positionalValues.translateX = positionalValues.x;
      positionalValues.translateY = positionalValues.y;
      var convertChangedValueTypes = (target, visualElement, changedKeys) => {
        const originBbox = visualElement.measureViewportBox();
        const element = visualElement.current;
        const elementComputedStyle = getComputedStyle(element);
        const { display } = elementComputedStyle;
        const origin = {};
        if (display === "none") {
          visualElement.setStaticValue("display", target.display || "block");
        }
        changedKeys.forEach((key) => {
          origin[key] = positionalValues[key](originBbox, elementComputedStyle);
        });
        visualElement.render();
        const targetBbox = visualElement.measureViewportBox();
        changedKeys.forEach((key) => {
          const value = visualElement.getValue(key);
          value && value.jump(origin[key]);
          target[key] = positionalValues[key](targetBbox, elementComputedStyle);
        });
        return target;
      };
      var checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {
        target = __spreadValues({}, target);
        transitionEnd = __spreadValues({}, transitionEnd);
        const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
        let removedTransformValues = [];
        let hasAttemptedToRemoveTransformValues = false;
        const changedValueTypeKeys = [];
        targetPositionalKeys.forEach((key) => {
          const value = visualElement.getValue(key);
          if (!visualElement.hasValue(key))
            return;
          let from = origin[key];
          let fromType = findDimensionValueType(from);
          const to = target[key];
          let toType;
          if (isKeyframesTarget(to)) {
            const numKeyframes = to.length;
            const fromIndex = to[0] === null ? 1 : 0;
            from = to[fromIndex];
            fromType = findDimensionValueType(from);
            for (let i = fromIndex; i < numKeyframes; i++) {
              if (to[i] === null)
                break;
              if (!toType) {
                toType = findDimensionValueType(to[i]);
                exports.invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
              } else {
                exports.invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
              }
            }
          } else {
            toType = findDimensionValueType(to);
          }
          if (fromType !== toType) {
            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
              const current = value.get();
              if (typeof current === "string") {
                value.set(parseFloat(current));
              }
              if (typeof to === "string") {
                target[key] = parseFloat(to);
              } else if (Array.isArray(to) && toType === px) {
                target[key] = to.map(parseFloat);
              }
            } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
              if (from === 0) {
                value.set(toType.transform(from));
              } else {
                target[key] = fromType.transform(to);
              }
            } else {
              if (!hasAttemptedToRemoveTransformValues) {
                removedTransformValues = removeNonTranslationalTransform(visualElement);
                hasAttemptedToRemoveTransformValues = true;
              }
              changedValueTypeKeys.push(key);
              transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
              value.jump(to);
            }
          }
        });
        if (changedValueTypeKeys.length) {
          const scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
          const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
          if (removedTransformValues.length) {
            removedTransformValues.forEach(([key, value]) => {
              visualElement.getValue(key).set(value);
            });
          }
          visualElement.render();
          if (isBrowser && scrollY !== null) {
            window.scrollTo({ top: scrollY });
          }
          return { target: convertedTarget, transitionEnd };
        } else {
          return { target, transitionEnd };
        }
      };
      function unitConversion(visualElement, target, origin, transitionEnd) {
        return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : { target, transitionEnd };
      }
      var parseDomVariant = (visualElement, target, origin, transitionEnd) => {
        const resolved = resolveCSSVariables(visualElement, target, transitionEnd);
        target = resolved.target;
        transitionEnd = resolved.transitionEnd;
        return unitConversion(visualElement, target, origin, transitionEnd);
      };
      var prefersReducedMotion = { current: null };
      var hasReducedMotionListener = { current: false };
      function initPrefersReducedMotion() {
        hasReducedMotionListener.current = true;
        if (!isBrowser)
          return;
        if (window.matchMedia) {
          const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
          const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
          motionMediaQuery.addListener(setReducedMotionPreferences);
          setReducedMotionPreferences();
        } else {
          prefersReducedMotion.current = false;
        }
      }
      function updateMotionValuesFromProps(element, next, prev) {
        const { willChange } = next;
        for (const key in next) {
          const nextValue = next[key];
          const prevValue = prev[key];
          if (isMotionValue(nextValue)) {
            element.addValue(key, nextValue);
            if (isWillChangeMotionValue(willChange)) {
              willChange.add(key);
            }
            if (true) {
              warnOnce(nextValue.version === "10.16.4", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.16.4 may not work as expected.`);
            }
          } else if (isMotionValue(prevValue)) {
            element.addValue(key, motionValue(nextValue, { owner: element }));
            if (isWillChangeMotionValue(willChange)) {
              willChange.remove(key);
            }
          } else if (prevValue !== nextValue) {
            if (element.hasValue(key)) {
              const existingValue = element.getValue(key);
              !existingValue.hasAnimated && existingValue.set(nextValue);
            } else {
              const latestValue = element.getStaticValue(key);
              element.addValue(key, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
            }
          }
        }
        for (const key in prev) {
          if (next[key] === void 0)
            element.removeValue(key);
        }
        return next;
      }
      var featureNames = Object.keys(featureDefinitions);
      var numFeatures = featureNames.length;
      var propEventHandlers = [
        "AnimationStart",
        "AnimationComplete",
        "Update",
        "BeforeLayoutMeasure",
        "LayoutMeasure",
        "LayoutAnimationStart",
        "LayoutAnimationComplete"
      ];
      var numVariantProps = variantProps.length;
      var VisualElement = class {
        constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}) {
          this.current = null;
          this.children = /* @__PURE__ */ new Set();
          this.isVariantNode = false;
          this.isControllingVariants = false;
          this.shouldReduceMotion = null;
          this.values = /* @__PURE__ */ new Map();
          this.features = {};
          this.valueSubscriptions = /* @__PURE__ */ new Map();
          this.prevMotionValues = {};
          this.events = {};
          this.propEventSubscriptions = {};
          this.notifyUpdate = () => this.notify("Update", this.latestValues);
          this.render = () => {
            if (!this.current)
              return;
            this.triggerBuild();
            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
          };
          this.scheduleRender = () => frame.render(this.render, false, true);
          const { latestValues, renderState } = visualState;
          this.latestValues = latestValues;
          this.baseTarget = __spreadValues({}, latestValues);
          this.initialValues = props.initial ? __spreadValues({}, latestValues) : {};
          this.renderState = renderState;
          this.parent = parent;
          this.props = props;
          this.presenceContext = presenceContext;
          this.depth = parent ? parent.depth + 1 : 0;
          this.reducedMotionConfig = reducedMotionConfig;
          this.options = options;
          this.isControllingVariants = isControllingVariants(props);
          this.isVariantNode = isVariantNode(props);
          if (this.isVariantNode) {
            this.variantChildren = /* @__PURE__ */ new Set();
          }
          this.manuallyAnimateOnMount = Boolean(parent && parent.current);
          const _a = this.scrapeMotionValuesFromProps(props, {}), { willChange } = _a, initialMotionValues = __objRest(_a, ["willChange"]);
          for (const key in initialMotionValues) {
            const value = initialMotionValues[key];
            if (latestValues[key] !== void 0 && isMotionValue(value)) {
              value.set(latestValues[key], false);
              if (isWillChangeMotionValue(willChange)) {
                willChange.add(key);
              }
            }
          }
        }
        /**
         * This method takes React props and returns found MotionValues. For example, HTML
         * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
         *
         * This isn't an abstract method as it needs calling in the constructor, but it is
         * intended to be one.
         */
        scrapeMotionValuesFromProps(_props, _prevProps) {
          return {};
        }
        mount(instance) {
          this.current = instance;
          visualElementStore.set(instance, this);
          if (this.projection && !this.projection.instance) {
            this.projection.mount(instance);
          }
          if (this.parent && this.isVariantNode && !this.isControllingVariants) {
            this.removeFromVariantTree = this.parent.addVariantChild(this);
          }
          this.values.forEach((value, key) => this.bindToMotionValue(key, value));
          if (!hasReducedMotionListener.current) {
            initPrefersReducedMotion();
          }
          this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
          if (true) {
            warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
          }
          if (this.parent)
            this.parent.children.add(this);
          this.update(this.props, this.presenceContext);
        }
        unmount() {
          visualElementStore.delete(this.current);
          this.projection && this.projection.unmount();
          cancelFrame(this.notifyUpdate);
          cancelFrame(this.render);
          this.valueSubscriptions.forEach((remove) => remove());
          this.removeFromVariantTree && this.removeFromVariantTree();
          this.parent && this.parent.children.delete(this);
          for (const key in this.events) {
            this.events[key].clear();
          }
          for (const key in this.features) {
            this.features[key].unmount();
          }
          this.current = null;
        }
        bindToMotionValue(key, value) {
          const valueIsTransform = transformProps.has(key);
          const removeOnChange = value.on("change", (latestValue) => {
            this.latestValues[key] = latestValue;
            this.props.onUpdate && frame.update(this.notifyUpdate, false, true);
            if (valueIsTransform && this.projection) {
              this.projection.isTransformDirty = true;
            }
          });
          const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
          this.valueSubscriptions.set(key, () => {
            removeOnChange();
            removeOnRenderRequest();
          });
        }
        sortNodePosition(other) {
          if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
            return 0;
          }
          return this.sortInstanceNodePosition(this.current, other.current);
        }
        loadFeatures(_a, isStrict, preloadedFeatures, initialLayoutGroupConfig) {
          var _b = _a, { children } = _b, renderedProps = __objRest(_b, ["children"]);
          let ProjectionNodeConstructor;
          let MeasureLayout;
          if (preloadedFeatures && isStrict) {
            const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
            renderedProps.ignoreStrict ? exports.warning(false, strictMessage) : exports.invariant(false, strictMessage);
          }
          for (let i = 0; i < numFeatures; i++) {
            const name = featureNames[i];
            const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
            if (ProjectionNode)
              ProjectionNodeConstructor = ProjectionNode;
            if (isEnabled(renderedProps)) {
              if (!this.features[name] && FeatureConstructor) {
                this.features[name] = new FeatureConstructor(this);
              }
              if (MeasureLayoutComponent) {
                MeasureLayout = MeasureLayoutComponent;
              }
            }
          }
          if (!this.projection && ProjectionNodeConstructor) {
            this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);
            const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
            this.projection.setOptions({
              layoutId,
              layout,
              alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),
              visualElement: this,
              scheduleRender: () => this.scheduleRender(),
              /**
               * TODO: Update options in an effect. This could be tricky as it'll be too late
               * to update by the time layout animations run.
               * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
               * ensuring it gets called if there's no potential layout animations.
               *
               */
              animationType: typeof layout === "string" ? layout : "both",
              initialPromotionConfig: initialLayoutGroupConfig,
              layoutScroll,
              layoutRoot
            });
          }
          return MeasureLayout;
        }
        updateFeatures() {
          for (const key in this.features) {
            const feature = this.features[key];
            if (feature.isMounted) {
              feature.update();
            } else {
              feature.mount();
              feature.isMounted = true;
            }
          }
        }
        triggerBuild() {
          this.build(this.renderState, this.latestValues, this.options, this.props);
        }
        /**
         * Measure the current viewport box with or without transforms.
         * Only measures axis-aligned boxes, rotate and skew must be manually
         * removed with a re-render to work.
         */
        measureViewportBox() {
          return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
        }
        getStaticValue(key) {
          return this.latestValues[key];
        }
        setStaticValue(key, value) {
          this.latestValues[key] = value;
        }
        /**
         * Make a target animatable by Popmotion. For instance, if we're
         * trying to animate width from 100px to 100vw we need to measure 100vw
         * in pixels to determine what we really need to animate to. This is also
         * pluggable to support Framer's custom value types like Color,
         * and CSS variables.
         */
        makeTargetAnimatable(target, canMutate = true) {
          return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);
        }
        /**
         * Update the provided props. Ensure any newly-added motion values are
         * added to our map, old ones removed, and listeners updated.
         */
        update(props, presenceContext) {
          if (props.transformTemplate || this.props.transformTemplate) {
            this.scheduleRender();
          }
          this.prevProps = this.props;
          this.props = props;
          this.prevPresenceContext = this.presenceContext;
          this.presenceContext = presenceContext;
          for (let i = 0; i < propEventHandlers.length; i++) {
            const key = propEventHandlers[i];
            if (this.propEventSubscriptions[key]) {
              this.propEventSubscriptions[key]();
              delete this.propEventSubscriptions[key];
            }
            const listener = props["on" + key];
            if (listener) {
              this.propEventSubscriptions[key] = this.on(key, listener);
            }
          }
          this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
          if (this.handleChildMotionValue) {
            this.handleChildMotionValue();
          }
        }
        getProps() {
          return this.props;
        }
        /**
         * Returns the variant definition with a given name.
         */
        getVariant(name) {
          return this.props.variants ? this.props.variants[name] : void 0;
        }
        /**
         * Returns the defined default transition on this component.
         */
        getDefaultTransition() {
          return this.props.transition;
        }
        getTransformPagePoint() {
          return this.props.transformPagePoint;
        }
        getClosestVariantNode() {
          return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
        }
        getVariantContext(startAtParent = false) {
          if (startAtParent) {
            return this.parent ? this.parent.getVariantContext() : void 0;
          }
          if (!this.isControllingVariants) {
            const context2 = this.parent ? this.parent.getVariantContext() || {} : {};
            if (this.props.initial !== void 0) {
              context2.initial = this.props.initial;
            }
            return context2;
          }
          const context = {};
          for (let i = 0; i < numVariantProps; i++) {
            const name = variantProps[i];
            const prop = this.props[name];
            if (isVariantLabel(prop) || prop === false) {
              context[name] = prop;
            }
          }
          return context;
        }
        /**
         * Add a child visual element to our set of children.
         */
        addVariantChild(child) {
          const closestVariantNode = this.getClosestVariantNode();
          if (closestVariantNode) {
            closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
            return () => closestVariantNode.variantChildren.delete(child);
          }
        }
        /**
         * Add a motion value and bind it to this visual element.
         */
        addValue(key, value) {
          if (value !== this.values.get(key)) {
            this.removeValue(key);
            this.bindToMotionValue(key, value);
          }
          this.values.set(key, value);
          this.latestValues[key] = value.get();
        }
        /**
         * Remove a motion value and unbind any active subscriptions.
         */
        removeValue(key) {
          this.values.delete(key);
          const unsubscribe = this.valueSubscriptions.get(key);
          if (unsubscribe) {
            unsubscribe();
            this.valueSubscriptions.delete(key);
          }
          delete this.latestValues[key];
          this.removeValueFromRenderState(key, this.renderState);
        }
        /**
         * Check whether we have a motion value for this key
         */
        hasValue(key) {
          return this.values.has(key);
        }
        getValue(key, defaultValue) {
          if (this.props.values && this.props.values[key]) {
            return this.props.values[key];
          }
          let value = this.values.get(key);
          if (value === void 0 && defaultValue !== void 0) {
            value = motionValue(defaultValue, { owner: this });
            this.addValue(key, value);
          }
          return value;
        }
        /**
         * If we're trying to animate to a previously unencountered value,
         * we need to check for it in our state and as a last resort read it
         * directly from the instance (which might have performance implications).
         */
        readValue(key) {
          var _a;
          return this.latestValues[key] !== void 0 || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);
        }
        /**
         * Set the base target to later animate back to. This is currently
         * only hydrated on creation and when we first read a value.
         */
        setBaseTarget(key, value) {
          this.baseTarget[key] = value;
        }
        /**
         * Find the base target for a value thats been removed from all animation
         * props.
         */
        getBaseTarget(key) {
          var _a;
          const { initial } = this.props;
          const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : void 0;
          if (initial && valueFromInitial !== void 0) {
            return valueFromInitial;
          }
          const target = this.getBaseTargetFromProps(this.props, key);
          if (target !== void 0 && !isMotionValue(target))
            return target;
          return this.initialValues[key] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key];
        }
        on(eventName, callback) {
          if (!this.events[eventName]) {
            this.events[eventName] = new SubscriptionManager();
          }
          return this.events[eventName].add(callback);
        }
        notify(eventName, ...args) {
          if (this.events[eventName]) {
            this.events[eventName].notify(...args);
          }
        }
      };
      var DOMVisualElement = class extends VisualElement {
        sortInstanceNodePosition(a, b) {
          return a.compareDocumentPosition(b) & 2 ? 1 : -1;
        }
        getBaseTargetFromProps(props, key) {
          return props.style ? props.style[key] : void 0;
        }
        removeValueFromRenderState(key, { vars, style }) {
          delete vars[key];
          delete style[key];
        }
        makeTargetAnimatableFromInstance(_a, { transformValues }, isMounted) {
          var _b = _a, { transition, transitionEnd } = _b, target = __objRest(_b, ["transition", "transitionEnd"]);
          let origin = getOrigin(target, transition || {}, this);
          if (transformValues) {
            if (transitionEnd)
              transitionEnd = transformValues(transitionEnd);
            if (target)
              target = transformValues(target);
            if (origin)
              origin = transformValues(origin);
          }
          if (isMounted) {
            checkTargetForNewValues(this, target, origin);
            const parsed = parseDomVariant(this, target, origin, transitionEnd);
            transitionEnd = parsed.transitionEnd;
            target = parsed.target;
          }
          return __spreadValues({
            transition,
            transitionEnd
          }, target);
        }
      };
      var SVGVisualElement = class extends DOMVisualElement {
        constructor() {
          super(...arguments);
          this.isSVGTag = false;
        }
        getBaseTargetFromProps(props, key) {
          return props[key];
        }
        readValueFromInstance(instance, key) {
          if (transformProps.has(key)) {
            const defaultType = getDefaultValueType(key);
            return defaultType ? defaultType.default || 0 : 0;
          }
          key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
          return instance.getAttribute(key);
        }
        measureInstanceViewportBox() {
          return createBox();
        }
        scrapeMotionValuesFromProps(props, prevProps) {
          return scrapeMotionValuesFromProps(props, prevProps);
        }
        build(renderState, latestValues, options, props) {
          buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
        }
        renderInstance(instance, renderState, styleProp, projection) {
          renderSVG(instance, renderState, styleProp, projection);
        }
        mount(instance) {
          this.isSVGTag = isSVGTag(instance.tagName);
          super.mount(instance);
        }
      };
      function getComputedStyle$1(element) {
        return window.getComputedStyle(element);
      }
      var HTMLVisualElement = class extends DOMVisualElement {
        readValueFromInstance(instance, key) {
          if (transformProps.has(key)) {
            const defaultType = getDefaultValueType(key);
            return defaultType ? defaultType.default || 0 : 0;
          } else {
            const computedStyle = getComputedStyle$1(instance);
            const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
            return typeof value === "string" ? value.trim() : value;
          }
        }
        measureInstanceViewportBox(instance, { transformPagePoint }) {
          return measureViewportBox(instance, transformPagePoint);
        }
        build(renderState, latestValues, options, props) {
          buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
        }
        scrapeMotionValuesFromProps(props, prevProps) {
          return scrapeMotionValuesFromProps$1(props, prevProps);
        }
        handleChildMotionValue() {
          if (this.childSubscription) {
            this.childSubscription();
            delete this.childSubscription;
          }
          const { children } = this.props;
          if (isMotionValue(children)) {
            this.childSubscription = children.on("change", (latest) => {
              if (this.current)
                this.current.textContent = `${latest}`;
            });
          }
        }
        renderInstance(instance, renderState, styleProp, projection) {
          renderHTML(instance, renderState, styleProp, projection);
        }
      };
      function createVisualElement(element) {
        const options = {
          presenceContext: null,
          props: {},
          visualState: {
            renderState: {
              transform: {},
              transformOrigin: {},
              style: {},
              vars: {},
              attrs: {}
            },
            latestValues: {}
          }
        };
        const node = isSVGElement(element) ? new SVGVisualElement(options, {
          enableHardwareAcceleration: false
        }) : new HTMLVisualElement(options, {
          enableHardwareAcceleration: true
        });
        node.mount(element);
        visualElementStore.set(element, node);
      }
      function animateSingleValue(value, keyframes2, options) {
        const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
        motionValue$1.start(animateMotionValue("", motionValue$1, keyframes2, options));
        return motionValue$1.animation;
      }
      function createGeneratorEasing(options, scale2 = 100) {
        const generator = spring(__spreadValues({ keyframes: [0, scale2] }, options));
        const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
        return {
          type: "keyframes",
          ease: (progress2) => generator.next(duration * progress2).value / scale2,
          duration: millisecondsToSeconds(duration)
        };
      }
      function calcNextTime(current, next, prev, labels) {
        var _a;
        if (typeof next === "number") {
          return next;
        } else if (next.startsWith("-") || next.startsWith("+")) {
          return Math.max(0, current + parseFloat(next));
        } else if (next === "<") {
          return prev;
        } else {
          return (_a = labels.get(next)) !== null && _a !== void 0 ? _a : current;
        }
      }
      var wrap = (min, max, v) => {
        const rangeSize = max - min;
        return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
      };
      function getEasingForSegment(easing, i) {
        return isEasingArray(easing) ? easing[wrap(0, easing.length, i)] : easing;
      }
      function eraseKeyframes(sequence, startTime, endTime) {
        for (let i = 0; i < sequence.length; i++) {
          const keyframe = sequence[i];
          if (keyframe.at > startTime && keyframe.at < endTime) {
            removeItem(sequence, keyframe);
            i--;
          }
        }
      }
      function addKeyframes(sequence, keyframes2, easing, offset, startTime, endTime) {
        eraseKeyframes(sequence, startTime, endTime);
        for (let i = 0; i < keyframes2.length; i++) {
          sequence.push({
            value: keyframes2[i],
            at: mix(startTime, endTime, offset[i]),
            easing: getEasingForSegment(easing, i)
          });
        }
      }
      function compareByTime(a, b) {
        if (a.at === b.at) {
          if (a.value === null)
            return 1;
          if (b.value === null)
            return -1;
          return 0;
        } else {
          return a.at - b.at;
        }
      }
      var defaultSegmentEasing = "easeInOut";
      function createAnimationsFromSequence(sequence, _a = {}, scope) {
        var _b = _a, { defaultTransition = {} } = _b, sequenceTransition = __objRest(_b, ["defaultTransition"]);
        const defaultDuration = defaultTransition.duration || 0.3;
        const animationDefinitions = /* @__PURE__ */ new Map();
        const sequences = /* @__PURE__ */ new Map();
        const elementCache = {};
        const timeLabels = /* @__PURE__ */ new Map();
        let prevTime = 0;
        let currentTime = 0;
        let totalDuration = 0;
        for (let i = 0; i < sequence.length; i++) {
          const segment = sequence[i];
          if (typeof segment === "string") {
            timeLabels.set(segment, currentTime);
            continue;
          } else if (!Array.isArray(segment)) {
            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));
            continue;
          }
          let [subject, keyframes2, transition = {}] = segment;
          if (transition.at !== void 0) {
            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);
          }
          let maxDuration2 = 0;
          const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {
            const valueKeyframesAsList = keyframesAsList(valueKeyframes);
            const _a2 = valueTransition, { delay: delay2 = 0, times = defaultOffset$1(valueKeyframesAsList), type = "keyframes" } = _a2, remainingTransition = __objRest(_a2, ["delay", "times", "type"]);
            let { ease: ease2 = defaultTransition.ease || "easeOut", duration } = valueTransition;
            const calculatedDelay = typeof delay2 === "function" ? delay2(elementIndex, numElements) : delay2;
            const numKeyframes = valueKeyframesAsList.length;
            if (numKeyframes <= 2 && type === "spring") {
              let absoluteDelta = 100;
              if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {
                const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];
                absoluteDelta = Math.abs(delta);
              }
              const springTransition = __spreadValues({}, remainingTransition);
              if (duration !== void 0) {
                springTransition.duration = secondsToMilliseconds(duration);
              }
              const springEasing = createGeneratorEasing(springTransition, absoluteDelta);
              ease2 = springEasing.ease;
              duration = springEasing.duration;
            }
            duration !== null && duration !== void 0 ? duration : duration = defaultDuration;
            const startTime = currentTime + calculatedDelay;
            const targetTime = startTime + duration;
            if (times.length === 1 && times[0] === 0) {
              times[1] = 1;
            }
            const remainder = times.length - valueKeyframesAsList.length;
            remainder > 0 && fillOffset(times, remainder);
            valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);
            addKeyframes(valueSequence, valueKeyframesAsList, ease2, times, startTime, targetTime);
            maxDuration2 = Math.max(calculatedDelay + duration, maxDuration2);
            totalDuration = Math.max(targetTime, totalDuration);
          };
          if (isMotionValue(subject)) {
            const subjectSequence = getSubjectSequence(subject, sequences);
            resolveValueSequence(keyframes2, transition, getValueSequence("default", subjectSequence));
          } else {
            const elements = resolveElements(subject, scope, elementCache);
            const numElements = elements.length;
            for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {
              keyframes2 = keyframes2;
              transition = transition;
              const element = elements[elementIndex];
              const subjectSequence = getSubjectSequence(element, sequences);
              for (const key in keyframes2) {
                resolveValueSequence(keyframes2[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);
              }
            }
            prevTime = currentTime;
            currentTime += maxDuration2;
          }
        }
        sequences.forEach((valueSequences, element) => {
          for (const key in valueSequences) {
            const valueSequence = valueSequences[key];
            valueSequence.sort(compareByTime);
            const keyframes2 = [];
            const valueOffset = [];
            const valueEasing = [];
            for (let i = 0; i < valueSequence.length; i++) {
              const { at, value, easing } = valueSequence[i];
              keyframes2.push(value);
              valueOffset.push(progress(0, totalDuration, at));
              valueEasing.push(easing || "easeOut");
            }
            if (valueOffset[0] !== 0) {
              valueOffset.unshift(0);
              keyframes2.unshift(keyframes2[0]);
              valueEasing.unshift(defaultSegmentEasing);
            }
            if (valueOffset[valueOffset.length - 1] !== 1) {
              valueOffset.push(1);
              keyframes2.push(null);
            }
            if (!animationDefinitions.has(element)) {
              animationDefinitions.set(element, {
                keyframes: {},
                transition: {}
              });
            }
            const definition = animationDefinitions.get(element);
            definition.keyframes[key] = keyframes2;
            definition.transition[key] = __spreadValues(__spreadProps(__spreadValues({}, defaultTransition), {
              duration: totalDuration,
              ease: valueEasing,
              times: valueOffset
            }), sequenceTransition);
          }
        });
        return animationDefinitions;
      }
      function getSubjectSequence(subject, sequences) {
        !sequences.has(subject) && sequences.set(subject, {});
        return sequences.get(subject);
      }
      function getValueSequence(name, sequences) {
        if (!sequences[name])
          sequences[name] = [];
        return sequences[name];
      }
      function keyframesAsList(keyframes2) {
        return Array.isArray(keyframes2) ? keyframes2 : [keyframes2];
      }
      function getValueTransition(transition, key) {
        return transition[key] ? __spreadValues(__spreadValues({}, transition), transition[key]) : __spreadValues({}, transition);
      }
      var isNumber = (keyframe) => typeof keyframe === "number";
      var isNumberKeyframesArray = (keyframes2) => keyframes2.every(isNumber);
      function animateElements(elementOrSelector, keyframes2, options, scope) {
        const elements = resolveElements(elementOrSelector, scope);
        const numElements = elements.length;
        exports.invariant(Boolean(numElements), "No valid element provided.");
        const animations = [];
        for (let i = 0; i < numElements; i++) {
          const element = elements[i];
          if (!visualElementStore.has(element)) {
            createVisualElement(element);
          }
          const visualElement = visualElementStore.get(element);
          const transition = __spreadValues({}, options);
          if (typeof transition.delay === "function") {
            transition.delay = transition.delay(i, numElements);
          }
          animations.push(...animateTarget(visualElement, __spreadProps(__spreadValues({}, keyframes2), { transition }), {}));
        }
        return new GroupPlaybackControls(animations);
      }
      var isSequence = (value) => Array.isArray(value) && Array.isArray(value[0]);
      function animateSequence(sequence, options, scope) {
        const animations = [];
        const animationDefinitions = createAnimationsFromSequence(sequence, options, scope);
        animationDefinitions.forEach(({ keyframes: keyframes2, transition }, subject) => {
          let animation;
          if (isMotionValue(subject)) {
            animation = animateSingleValue(subject, keyframes2.default, transition.default);
          } else {
            animation = animateElements(subject, keyframes2, transition);
          }
          animations.push(animation);
        });
        return new GroupPlaybackControls(animations);
      }
      var createScopedAnimate = (scope) => {
        function scopedAnimate(valueOrElementOrSequence, keyframes2, options) {
          let animation;
          if (isSequence(valueOrElementOrSequence)) {
            animation = animateSequence(valueOrElementOrSequence, keyframes2, scope);
          } else if (isDOMKeyframes(keyframes2)) {
            animation = animateElements(valueOrElementOrSequence, keyframes2, options, scope);
          } else {
            animation = animateSingleValue(valueOrElementOrSequence, keyframes2, options);
          }
          if (scope) {
            scope.animations.push(animation);
          }
          return animation;
        }
        return scopedAnimate;
      };
      var animate = createScopedAnimate();
      var resizeHandlers = /* @__PURE__ */ new WeakMap();
      var observer;
      function getElementSize(target, borderBoxSize) {
        if (borderBoxSize) {
          const { inlineSize, blockSize } = borderBoxSize[0];
          return { width: inlineSize, height: blockSize };
        } else if (target instanceof SVGElement && "getBBox" in target) {
          return target.getBBox();
        } else {
          return {
            width: target.offsetWidth,
            height: target.offsetHeight
          };
        }
      }
      function notifyTarget({ target, contentRect, borderBoxSize }) {
        var _a;
        (_a = resizeHandlers.get(target)) === null || _a === void 0 ? void 0 : _a.forEach((handler) => {
          handler({
            target,
            contentSize: contentRect,
            get size() {
              return getElementSize(target, borderBoxSize);
            }
          });
        });
      }
      function notifyAll(entries) {
        entries.forEach(notifyTarget);
      }
      function createResizeObserver() {
        if (typeof ResizeObserver === "undefined")
          return;
        observer = new ResizeObserver(notifyAll);
      }
      function resizeElement(target, handler) {
        if (!observer)
          createResizeObserver();
        const elements = resolveElements(target);
        elements.forEach((element) => {
          let elementHandlers = resizeHandlers.get(element);
          if (!elementHandlers) {
            elementHandlers = /* @__PURE__ */ new Set();
            resizeHandlers.set(element, elementHandlers);
          }
          elementHandlers.add(handler);
          observer === null || observer === void 0 ? void 0 : observer.observe(element);
        });
        return () => {
          elements.forEach((element) => {
            const elementHandlers = resizeHandlers.get(element);
            elementHandlers === null || elementHandlers === void 0 ? void 0 : elementHandlers.delete(handler);
            if (!(elementHandlers === null || elementHandlers === void 0 ? void 0 : elementHandlers.size)) {
              observer === null || observer === void 0 ? void 0 : observer.unobserve(element);
            }
          });
        };
      }
      var windowCallbacks = /* @__PURE__ */ new Set();
      var windowResizeHandler;
      function createWindowResizeHandler() {
        windowResizeHandler = () => {
          const size = {
            width: window.innerWidth,
            height: window.innerHeight
          };
          const info = {
            target: window,
            size,
            contentSize: size
          };
          windowCallbacks.forEach((callback) => callback(info));
        };
        window.addEventListener("resize", windowResizeHandler);
      }
      function resizeWindow(callback) {
        windowCallbacks.add(callback);
        if (!windowResizeHandler)
          createWindowResizeHandler();
        return () => {
          windowCallbacks.delete(callback);
          if (!windowCallbacks.size && windowResizeHandler) {
            windowResizeHandler = void 0;
          }
        };
      }
      function resize(a, b) {
        return typeof a === "function" ? resizeWindow(a) : resizeElement(a, b);
      }
      var maxElapsed = 50;
      var createAxisInfo = () => ({
        current: 0,
        offset: [],
        progress: 0,
        scrollLength: 0,
        targetOffset: 0,
        targetLength: 0,
        containerLength: 0,
        velocity: 0
      });
      var createScrollInfo = () => ({
        time: 0,
        x: createAxisInfo(),
        y: createAxisInfo()
      });
      var keys = {
        x: {
          length: "Width",
          position: "Left"
        },
        y: {
          length: "Height",
          position: "Top"
        }
      };
      function updateAxisInfo(element, axisName, info, time) {
        const axis = info[axisName];
        const { length, position } = keys[axisName];
        const prev = axis.current;
        const prevTime = info.time;
        axis.current = element["scroll" + position];
        axis.scrollLength = element["scroll" + length] - element["client" + length];
        axis.offset.length = 0;
        axis.offset[0] = 0;
        axis.offset[1] = axis.scrollLength;
        axis.progress = progress(0, axis.scrollLength, axis.current);
        const elapsed = time - prevTime;
        axis.velocity = elapsed > maxElapsed ? 0 : velocityPerSecond(axis.current - prev, elapsed);
      }
      function updateScrollInfo(element, info, time) {
        updateAxisInfo(element, "x", info, time);
        updateAxisInfo(element, "y", info, time);
        info.time = time;
      }
      function calcInset(element, container) {
        const inset = { x: 0, y: 0 };
        let current = element;
        while (current && current !== container) {
          if (current instanceof HTMLElement) {
            inset.x += current.offsetLeft;
            inset.y += current.offsetTop;
            current = current.offsetParent;
          } else if (current.tagName === "svg") {
            const svgBoundingBox = current.getBoundingClientRect();
            current = current.parentElement;
            const parentBoundingBox = current.getBoundingClientRect();
            inset.x += svgBoundingBox.left - parentBoundingBox.left;
            inset.y += svgBoundingBox.top - parentBoundingBox.top;
          } else if (current instanceof SVGGraphicsElement) {
            const { x, y } = current.getBBox();
            inset.x += x;
            inset.y += y;
            let svg = null;
            let parent = current.parentNode;
            while (!svg) {
              if (parent.tagName === "svg") {
                svg = parent;
              }
              parent = current.parentNode;
            }
            current = svg;
          } else {
            break;
          }
        }
        return inset;
      }
      var ScrollOffset = {
        Enter: [
          [0, 1],
          [1, 1]
        ],
        Exit: [
          [0, 0],
          [1, 0]
        ],
        Any: [
          [1, 0],
          [0, 1]
        ],
        All: [
          [0, 0],
          [1, 1]
        ]
      };
      var namedEdges = {
        start: 0,
        center: 0.5,
        end: 1
      };
      function resolveEdge(edge, length, inset = 0) {
        let delta = 0;
        if (namedEdges[edge] !== void 0) {
          edge = namedEdges[edge];
        }
        if (typeof edge === "string") {
          const asNumber = parseFloat(edge);
          if (edge.endsWith("px")) {
            delta = asNumber;
          } else if (edge.endsWith("%")) {
            edge = asNumber / 100;
          } else if (edge.endsWith("vw")) {
            delta = asNumber / 100 * document.documentElement.clientWidth;
          } else if (edge.endsWith("vh")) {
            delta = asNumber / 100 * document.documentElement.clientHeight;
          } else {
            edge = asNumber;
          }
        }
        if (typeof edge === "number") {
          delta = length * edge;
        }
        return inset + delta;
      }
      var defaultOffset = [0, 0];
      function resolveOffset(offset, containerLength, targetLength, targetInset) {
        let offsetDefinition = Array.isArray(offset) ? offset : defaultOffset;
        let targetPoint = 0;
        let containerPoint = 0;
        if (typeof offset === "number") {
          offsetDefinition = [offset, offset];
        } else if (typeof offset === "string") {
          offset = offset.trim();
          if (offset.includes(" ")) {
            offsetDefinition = offset.split(" ");
          } else {
            offsetDefinition = [offset, namedEdges[offset] ? offset : `0`];
          }
        }
        targetPoint = resolveEdge(offsetDefinition[0], targetLength, targetInset);
        containerPoint = resolveEdge(offsetDefinition[1], containerLength);
        return targetPoint - containerPoint;
      }
      var point = { x: 0, y: 0 };
      function getTargetSize(target) {
        return "getBBox" in target && target.tagName !== "svg" ? target.getBBox() : { width: target.clientWidth, height: target.clientHeight };
      }
      function resolveOffsets(container, info, options) {
        let { offset: offsetDefinition = ScrollOffset.All } = options;
        const { target = container, axis = "y" } = options;
        const lengthLabel = axis === "y" ? "height" : "width";
        const inset = target !== container ? calcInset(target, container) : point;
        const targetSize = target === container ? { width: container.scrollWidth, height: container.scrollHeight } : getTargetSize(target);
        const containerSize = {
          width: container.clientWidth,
          height: container.clientHeight
        };
        info[axis].offset.length = 0;
        let hasChanged = !info[axis].interpolate;
        const numOffsets = offsetDefinition.length;
        for (let i = 0; i < numOffsets; i++) {
          const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);
          if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {
            hasChanged = true;
          }
          info[axis].offset[i] = offset;
        }
        if (hasChanged) {
          info[axis].interpolate = interpolate(info[axis].offset, defaultOffset$1(offsetDefinition));
          info[axis].interpolatorOffsets = [...info[axis].offset];
        }
        info[axis].progress = info[axis].interpolate(info[axis].current);
      }
      function measure(container, target = container, info) {
        info.x.targetOffset = 0;
        info.y.targetOffset = 0;
        if (target !== container) {
          let node = target;
          while (node && node !== container) {
            info.x.targetOffset += node.offsetLeft;
            info.y.targetOffset += node.offsetTop;
            node = node.offsetParent;
          }
        }
        info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;
        info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;
        info.x.containerLength = container.clientWidth;
        info.y.containerLength = container.clientHeight;
      }
      function createOnScrollHandler(element, onScroll, info, options = {}) {
        return {
          measure: () => measure(element, options.target, info),
          update: (time) => {
            updateScrollInfo(element, info, time);
            if (options.offset || options.target) {
              resolveOffsets(element, info, options);
            }
          },
          notify: () => onScroll(info)
        };
      }
      var scrollListeners = /* @__PURE__ */ new WeakMap();
      var resizeListeners = /* @__PURE__ */ new WeakMap();
      var onScrollHandlers = /* @__PURE__ */ new WeakMap();
      var getEventTarget = (element) => element === document.documentElement ? window : element;
      function scrollInfo(onScroll, _a = {}) {
        var _b = _a, { container = document.documentElement } = _b, options = __objRest(_b, ["container"]);
        let containerHandlers = onScrollHandlers.get(container);
        if (!containerHandlers) {
          containerHandlers = /* @__PURE__ */ new Set();
          onScrollHandlers.set(container, containerHandlers);
        }
        const info = createScrollInfo();
        const containerHandler = createOnScrollHandler(container, onScroll, info, options);
        containerHandlers.add(containerHandler);
        if (!scrollListeners.has(container)) {
          const measureAll = () => {
            for (const handler of containerHandlers)
              handler.measure();
          };
          const updateAll = () => {
            for (const handler of containerHandlers) {
              handler.update(frameData.timestamp);
            }
          };
          const notifyAll2 = () => {
            for (const handler of containerHandlers)
              handler.notify();
          };
          const listener2 = () => {
            frame.read(measureAll, false, true);
            frame.update(updateAll, false, true);
            frame.update(notifyAll2, false, true);
          };
          scrollListeners.set(container, listener2);
          const target = getEventTarget(container);
          window.addEventListener("resize", listener2, { passive: true });
          if (container !== document.documentElement) {
            resizeListeners.set(container, resize(container, listener2));
          }
          target.addEventListener("scroll", listener2, { passive: true });
        }
        const listener = scrollListeners.get(container);
        frame.read(listener, false, true);
        return () => {
          var _a2;
          cancelFrame(listener);
          const currentHandlers = onScrollHandlers.get(container);
          if (!currentHandlers)
            return;
          currentHandlers.delete(containerHandler);
          if (currentHandlers.size)
            return;
          const scrollListener = scrollListeners.get(container);
          scrollListeners.delete(container);
          if (scrollListener) {
            getEventTarget(container).removeEventListener("scroll", scrollListener);
            (_a2 = resizeListeners.get(container)) === null || _a2 === void 0 ? void 0 : _a2();
            window.removeEventListener("resize", scrollListener);
          }
        };
      }
      function scrollTimelineFallback({ source, axis = "y" }) {
        const currentTime = { value: 0 };
        const cancel = scrollInfo((info) => {
          currentTime.value = info[axis].progress * 100;
        }, { container: source, axis });
        return { currentTime, cancel };
      }
      var timelineCache = /* @__PURE__ */ new Map();
      function getTimeline({ source = document.documentElement, axis = "y" } = {}) {
        if (!timelineCache.has(source)) {
          timelineCache.set(source, {});
        }
        const elementCache = timelineCache.get(source);
        if (!elementCache[axis]) {
          elementCache[axis] = supportsScrollTimeline() ? new ScrollTimeline({ source, axis }) : scrollTimelineFallback({ source, axis });
        }
        return elementCache[axis];
      }
      function scroll(onScroll, options) {
        const timeline = getTimeline(options);
        if (typeof onScroll === "function") {
          return observeTimeline(onScroll, timeline);
        } else {
          return onScroll.attachTimeline(timeline);
        }
      }
      var thresholds = {
        some: 0,
        all: 1
      };
      function inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = "some" } = {}) {
        const elements = resolveElements(elementOrSelector);
        const activeIntersections = /* @__PURE__ */ new WeakMap();
        const onIntersectionChange = (entries) => {
          entries.forEach((entry) => {
            const onEnd = activeIntersections.get(entry.target);
            if (entry.isIntersecting === Boolean(onEnd))
              return;
            if (entry.isIntersecting) {
              const newOnEnd = onStart(entry);
              if (typeof newOnEnd === "function") {
                activeIntersections.set(entry.target, newOnEnd);
              } else {
                observer2.unobserve(entry.target);
              }
            } else if (onEnd) {
              onEnd(entry);
              activeIntersections.delete(entry.target);
            }
          });
        };
        const observer2 = new IntersectionObserver(onIntersectionChange, {
          root,
          rootMargin,
          threshold: typeof amount === "number" ? amount : thresholds[amount]
        });
        elements.forEach((element) => observer2.observe(element));
        return () => observer2.disconnect();
      }
      function getOriginIndex(from, total) {
        if (from === "first") {
          return 0;
        } else {
          const lastIndex = total - 1;
          return from === "last" ? lastIndex : lastIndex / 2;
        }
      }
      function stagger(duration = 0.1, { startDelay = 0, from = 0, ease: ease2 } = {}) {
        return (i, total) => {
          const fromIndex = typeof from === "number" ? from : getOriginIndex(from, total);
          const distance2 = Math.abs(fromIndex - i);
          let delay2 = duration * distance2;
          if (ease2) {
            const maxDelay = total * duration;
            const easingFunction = easingDefinitionToFunction(ease2);
            delay2 = easingFunction(delay2 / maxDelay) * maxDelay;
          }
          return startDelay + delay2;
        };
      }
      var isCustomValueType = (v) => {
        return typeof v === "object" && v.mix;
      };
      var getMixer = (v) => isCustomValueType(v) ? v.mix : void 0;
      function transform(...args) {
        const useImmediate = !Array.isArray(args[0]);
        const argOffset = useImmediate ? 0 : -1;
        const inputValue = args[0 + argOffset];
        const inputRange = args[1 + argOffset];
        const outputRange = args[2 + argOffset];
        const options = args[3 + argOffset];
        const interpolator = interpolate(inputRange, outputRange, __spreadValues({
          mixer: getMixer(outputRange[0])
        }, options));
        return useImmediate ? interpolator(inputValue) : interpolator;
      }
      var sync = frame;
      var cancelSync = stepsOrder.reduce((acc, key) => {
        acc[key] = (process2) => cancelFrame(process2);
        return acc;
      }, {});
      exports.HTMLVisualElement = HTMLVisualElement;
      exports.MotionValue = MotionValue;
      exports.SVGVisualElement = SVGVisualElement;
      exports.SubscriptionManager = SubscriptionManager;
      exports.VisualElement = VisualElement;
      exports.addScaleCorrector = addScaleCorrector;
      exports.addUniqueItem = addUniqueItem;
      exports.animate = animate;
      exports.animateMotionValue = animateMotionValue;
      exports.animateSingleValue = animateSingleValue;
      exports.animateStyle = animateStyle;
      exports.animateTarget = animateTarget;
      exports.animateValue = animateValue;
      exports.anticipate = anticipate;
      exports.applyBoxDelta = applyBoxDelta;
      exports.applyTreeDeltas = applyTreeDeltas;
      exports.backIn = backIn;
      exports.backInOut = backInOut;
      exports.backOut = backOut;
      exports.buildHTMLStyles = buildHTMLStyles;
      exports.buildSVGAttrs = buildSVGAttrs;
      exports.buildTransform = buildTransform;
      exports.camelToDash = camelToDash;
      exports.cancelFrame = cancelFrame;
      exports.cancelSync = cancelSync;
      exports.checkTargetForNewValues = checkTargetForNewValues;
      exports.circIn = circIn;
      exports.circInOut = circInOut;
      exports.circOut = circOut;
      exports.clamp = clamp;
      exports.collectMotionValues = collectMotionValues;
      exports.color = color;
      exports.complex = complex;
      exports.convertBoundingBoxToBox = convertBoundingBoxToBox;
      exports.convertBoxToBoundingBox = convertBoxToBoundingBox;
      exports.createBox = createBox;
      exports.createDelta = createDelta;
      exports.createScopedAnimate = createScopedAnimate;
      exports.cubicBezier = cubicBezier;
      exports.delay = delay;
      exports.distance = distance;
      exports.distance2D = distance2D;
      exports.easeIn = easeIn;
      exports.easeInOut = easeInOut;
      exports.easeOut = easeOut;
      exports.featureDefinitions = featureDefinitions;
      exports.frame = frame;
      exports.frameData = frameData;
      exports.getOrigin = getOrigin;
      exports.getValueTransition = getValueTransition$1;
      exports.has2DTranslate = has2DTranslate;
      exports.hasReducedMotionListener = hasReducedMotionListener;
      exports.hasScale = hasScale;
      exports.hasTransform = hasTransform;
      exports.inView = inView;
      exports.initPrefersReducedMotion = initPrefersReducedMotion;
      exports.instantAnimationState = instantAnimationState;
      exports.interpolate = interpolate;
      exports.isAnimationControls = isAnimationControls;
      exports.isBrowser = isBrowser;
      exports.isCSSVariableName = isCSSVariableName;
      exports.isControllingVariants = isControllingVariants;
      exports.isCustomValue = isCustomValue;
      exports.isForcedMotionValue = isForcedMotionValue;
      exports.isKeyframesTarget = isKeyframesTarget;
      exports.isMotionValue = isMotionValue;
      exports.isRefObject = isRefObject;
      exports.isSVGElement = isSVGElement;
      exports.isSVGTag = isSVGTag;
      exports.isVariantLabel = isVariantLabel;
      exports.isVariantNode = isVariantNode;
      exports.measurePageBox = measurePageBox;
      exports.millisecondsToSeconds = millisecondsToSeconds;
      exports.mirrorEasing = mirrorEasing;
      exports.mix = mix;
      exports.motionValue = motionValue;
      exports.moveItem = moveItem;
      exports.noop = noop3;
      exports.optimizedAppearDataAttribute = optimizedAppearDataAttribute;
      exports.optimizedAppearDataId = optimizedAppearDataId;
      exports.percent = percent;
      exports.pipe = pipe;
      exports.prefersReducedMotion = prefersReducedMotion;
      exports.progress = progress;
      exports.px = px;
      exports.removeItem = removeItem;
      exports.renderSVG = renderSVG;
      exports.resolveVariant = resolveVariant;
      exports.resolveVariantFromProps = resolveVariantFromProps;
      exports.reverseEasing = reverseEasing;
      exports.scaleCorrectors = scaleCorrectors;
      exports.scalePoint = scalePoint;
      exports.scrapeMotionValuesFromProps = scrapeMotionValuesFromProps;
      exports.scrapeMotionValuesFromProps$1 = scrapeMotionValuesFromProps$1;
      exports.scroll = scroll;
      exports.scrollInfo = scrollInfo;
      exports.secondsToMilliseconds = secondsToMilliseconds;
      exports.setValues = setValues;
      exports.spring = spring;
      exports.stagger = stagger;
      exports.steps = steps;
      exports.sync = sync;
      exports.transform = transform;
      exports.transformBox = transformBox;
      exports.transformProps = transformProps;
      exports.translateAxis = translateAxis;
      exports.variantPriorityOrder = variantPriorityOrder;
      exports.visualElementStore = visualElementStore;
      exports.warnOnce = warnOnce;
      exports.wrap = wrap;
    }
  });

  // node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
  var require_memoize_browser_cjs = __commonJS({
    "node_modules/@emotion/memoize/dist/memoize.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize;
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
  var require_is_prop_valid_browser_cjs = __commonJS({
    "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var memoize = _interopDefault(require_memoize_browser_cjs());
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var index3 = memoize(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
      exports.default = index3;
    }
  });

  // node_modules/framer-motion/dist/cjs/index.js
  var require_cjs2 = __commonJS({
    "node_modules/framer-motion/dist/cjs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var React3 = require_react();
      var indexLegacy = require_index_legacy_eb8b4696();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React3);
      var React__default = /* @__PURE__ */ _interopDefaultLegacy(React3);
      var MotionConfigContext = React3.createContext({
        transformPagePoint: (p) => p,
        isStatic: false,
        reducedMotion: "never"
      });
      var MotionContext = React3.createContext({});
      var PresenceContext = React3.createContext(null);
      var useIsomorphicLayoutEffect = indexLegacy.isBrowser ? React3.useLayoutEffect : React3.useEffect;
      var LazyContext = React3.createContext({ strict: false });
      function useVisualElement(Component, visualState, props, createVisualElement) {
        const { visualElement: parent } = React3.useContext(MotionContext);
        const lazyContext = React3.useContext(LazyContext);
        const presenceContext = React3.useContext(PresenceContext);
        const reducedMotionConfig = React3.useContext(MotionConfigContext).reducedMotion;
        const visualElementRef = React3.useRef();
        createVisualElement = createVisualElement || lazyContext.renderer;
        if (!visualElementRef.current && createVisualElement) {
          visualElementRef.current = createVisualElement(Component, {
            visualState,
            parent,
            props,
            presenceContext,
            blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
            reducedMotionConfig
          });
        }
        const visualElement = visualElementRef.current;
        React3.useInsertionEffect(() => {
          visualElement && visualElement.update(props, presenceContext);
        });
        const canHandoff = React3.useRef(Boolean(window.HandoffAppearAnimations));
        useIsomorphicLayoutEffect(() => {
          if (!visualElement)
            return;
          visualElement.render();
          if (canHandoff.current && visualElement.animationState) {
            visualElement.animationState.animateChanges();
          }
        });
        React3.useEffect(() => {
          if (!visualElement)
            return;
          visualElement.updateFeatures();
          if (!canHandoff.current && visualElement.animationState) {
            visualElement.animationState.animateChanges();
          }
          window.HandoffAppearAnimations = void 0;
          canHandoff.current = false;
        });
        return visualElement;
      }
      function useMotionRef(visualState, visualElement, externalRef) {
        return React3.useCallback(
          (instance) => {
            instance && visualState.mount && visualState.mount(instance);
            if (visualElement) {
              instance ? visualElement.mount(instance) : visualElement.unmount();
            }
            if (externalRef) {
              if (typeof externalRef === "function") {
                externalRef(instance);
              } else if (indexLegacy.isRefObject(externalRef)) {
                externalRef.current = instance;
              }
            }
          },
          /**
           * Only pass a new ref callback to React if we've received a visual element
           * factory. Otherwise we'll be mounting/remounting every time externalRef
           * or other dependencies change.
           */
          [visualElement]
        );
      }
      function getCurrentTreeVariants(props, context) {
        if (indexLegacy.isControllingVariants(props)) {
          const { initial, animate } = props;
          return {
            initial: initial === false || indexLegacy.isVariantLabel(initial) ? initial : void 0,
            animate: indexLegacy.isVariantLabel(animate) ? animate : void 0
          };
        }
        return props.inherit !== false ? context : {};
      }
      function useCreateMotionContext(props) {
        const { initial, animate } = getCurrentTreeVariants(props, React3.useContext(MotionContext));
        return React3.useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
      }
      function variantLabelsAsDependency(prop) {
        return Array.isArray(prop) ? prop.join(" ") : prop;
      }
      function loadFeatures(features) {
        for (const key in features) {
          indexLegacy.featureDefinitions[key] = __spreadValues(__spreadValues({}, indexLegacy.featureDefinitions[key]), features[key]);
        }
      }
      var LayoutGroupContext = React3.createContext({});
      var SwitchLayoutGroupContext = React3.createContext({});
      var motionComponentSymbol = Symbol.for("motionComponentSymbol");
      function createMotionComponent({ preloadedFeatures: preloadedFeatures2, createVisualElement, useRender, useVisualState: useVisualState2, Component }) {
        preloadedFeatures2 && loadFeatures(preloadedFeatures2);
        function MotionComponent(props, externalRef) {
          let MeasureLayout2;
          const configAndProps = __spreadProps(__spreadValues(__spreadValues({}, React3.useContext(MotionConfigContext)), props), {
            layoutId: useLayoutId(props)
          });
          const { isStatic } = configAndProps;
          const context = useCreateMotionContext(props);
          const visualState = useVisualState2(props, isStatic);
          if (!isStatic && indexLegacy.isBrowser) {
            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);
            const initialLayoutGroupConfig = React3.useContext(SwitchLayoutGroupContext);
            const isStrict = React3.useContext(LazyContext).strict;
            if (context.visualElement) {
              MeasureLayout2 = context.visualElement.loadFeatures(
                // Note: Pass the full new combined props to correctly re-render dynamic feature components.
                configAndProps,
                isStrict,
                preloadedFeatures2,
                initialLayoutGroupConfig
              );
            }
          }
          return React__namespace.createElement(
            MotionContext.Provider,
            { value: context },
            MeasureLayout2 && context.visualElement ? React__namespace.createElement(MeasureLayout2, __spreadValues({ visualElement: context.visualElement }, configAndProps)) : null,
            useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)
          );
        }
        const ForwardRefComponent = React3.forwardRef(MotionComponent);
        ForwardRefComponent[motionComponentSymbol] = Component;
        return ForwardRefComponent;
      }
      function useLayoutId({ layoutId }) {
        const layoutGroupId = React3.useContext(LayoutGroupContext).id;
        return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
      }
      function createMotionProxy(createConfig) {
        function custom(Component, customMotionComponentConfig = {}) {
          return createMotionComponent(createConfig(Component, customMotionComponentConfig));
        }
        if (typeof Proxy === "undefined") {
          return custom;
        }
        const componentCache = /* @__PURE__ */ new Map();
        return new Proxy(custom, {
          /**
           * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
           * The prop name is passed through as `key` and we can use that to generate a `motion`
           * DOM component with that name.
           */
          get: (_target, key) => {
            if (!componentCache.has(key)) {
              componentCache.set(key, custom(key));
            }
            return componentCache.get(key);
          }
        });
      }
      var lowercaseSVGElements = [
        "animate",
        "circle",
        "defs",
        "desc",
        "ellipse",
        "g",
        "image",
        "line",
        "filter",
        "marker",
        "mask",
        "metadata",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "rect",
        "stop",
        "switch",
        "symbol",
        "svg",
        "text",
        "tspan",
        "use",
        "view"
      ];
      function isSVGComponent(Component) {
        if (
          /**
           * If it's not a string, it's a custom React component. Currently we only support
           * HTML custom React components.
           */
          typeof Component !== "string" || /**
           * If it contains a dash, the element is a custom HTML webcomponent.
           */
          Component.includes("-")
        ) {
          return false;
        } else if (
          /**
           * If it's in our list of lowercase SVG tags, it's an SVG component
           */
          lowercaseSVGElements.indexOf(Component) > -1 || /**
           * If it contains a capital letter, it's an SVG component
           */
          /[A-Z]/.test(Component)
        ) {
          return true;
        }
        return false;
      }
      var createHtmlRenderState = () => ({
        style: {},
        transform: {},
        transformOrigin: {},
        vars: {}
      });
      function copyRawValuesOnly(target, source, props) {
        for (const key in source) {
          if (!indexLegacy.isMotionValue(source[key]) && !indexLegacy.isForcedMotionValue(key, props)) {
            target[key] = source[key];
          }
        }
      }
      function useInitialMotionValues({ transformTemplate }, visualState, isStatic) {
        return React3.useMemo(() => {
          const state = createHtmlRenderState();
          indexLegacy.buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
          return Object.assign({}, state.vars, state.style);
        }, [visualState]);
      }
      function useStyle(props, visualState, isStatic) {
        const styleProp = props.style || {};
        const style = {};
        copyRawValuesOnly(style, styleProp, props);
        Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
        return props.transformValues ? props.transformValues(style) : style;
      }
      function useHTMLProps(props, visualState, isStatic) {
        const htmlProps = {};
        const style = useStyle(props, visualState, isStatic);
        if (props.drag && props.dragListener !== false) {
          htmlProps.draggable = false;
          style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
          style.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
        }
        if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
          htmlProps.tabIndex = 0;
        }
        htmlProps.style = style;
        return htmlProps;
      }
      var validMotionProps = /* @__PURE__ */ new Set([
        "animate",
        "exit",
        "variants",
        "initial",
        "style",
        "values",
        "variants",
        "transition",
        "transformTemplate",
        "transformValues",
        "custom",
        "inherit",
        "onLayoutAnimationStart",
        "onLayoutAnimationComplete",
        "onLayoutMeasure",
        "onBeforeLayoutMeasure",
        "onAnimationStart",
        "onAnimationComplete",
        "onUpdate",
        "onDragStart",
        "onDrag",
        "onDragEnd",
        "onMeasureDragConstraints",
        "onDirectionLock",
        "onDragTransitionEnd",
        "_dragX",
        "_dragY",
        "onHoverStart",
        "onHoverEnd",
        "onViewportEnter",
        "onViewportLeave",
        "ignoreStrict",
        "viewport"
      ]);
      function isValidMotionProp(key) {
        return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || validMotionProps.has(key);
      }
      var shouldForward = (key) => !isValidMotionProp(key);
      function loadExternalIsValidProp(isValidProp) {
        if (!isValidProp)
          return;
        shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
      }
      try {
        loadExternalIsValidProp(require_is_prop_valid_browser_cjs().default);
      } catch (_a) {
      }
      function filterProps(props, isDom, forwardMotionProps) {
        const filteredProps = {};
        for (const key in props) {
          if (key === "values" && typeof props.values === "object")
            continue;
          if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners
          props["draggable"] && key.startsWith("onDrag")) {
            filteredProps[key] = props[key];
          }
        }
        return filteredProps;
      }
      var createSvgRenderState = () => __spreadProps(__spreadValues({}, createHtmlRenderState()), {
        attrs: {}
      });
      function useSVGProps(props, visualState, _isStatic, Component) {
        const visualProps = React3.useMemo(() => {
          const state = createSvgRenderState();
          indexLegacy.buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, indexLegacy.isSVGTag(Component), props.transformTemplate);
          return __spreadProps(__spreadValues({}, state.attrs), {
            style: __spreadValues({}, state.style)
          });
        }, [visualState]);
        if (props.style) {
          const rawStyles = {};
          copyRawValuesOnly(rawStyles, props.style, props);
          visualProps.style = __spreadValues(__spreadValues({}, rawStyles), visualProps.style);
        }
        return visualProps;
      }
      function createUseRender(forwardMotionProps = false) {
        const useRender = (Component, props, ref, { latestValues }, isStatic) => {
          const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
          const visualProps = useVisualProps(props, latestValues, isStatic, Component);
          const filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
          const elementProps = __spreadProps(__spreadValues(__spreadValues({}, filteredProps), visualProps), {
            ref
          });
          const { children } = props;
          const renderedChildren = React3.useMemo(() => indexLegacy.isMotionValue(children) ? children.get() : children, [children]);
          return React3.createElement(Component, __spreadProps(__spreadValues({}, elementProps), {
            children: renderedChildren
          }));
        };
        return useRender;
      }
      function useConstant(init) {
        const ref = React3.useRef(null);
        if (ref.current === null) {
          ref.current = init();
        }
        return ref.current;
      }
      function resolveMotionValue(value) {
        const unwrappedValue = indexLegacy.isMotionValue(value) ? value.get() : value;
        return indexLegacy.isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
      }
      function makeState({ scrapeMotionValuesFromProps, createRenderState, onMount }, props, context, presenceContext) {
        const state = {
          latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),
          renderState: createRenderState()
        };
        if (onMount) {
          state.mount = (instance) => onMount(props, instance, state);
        }
        return state;
      }
      var makeUseVisualState = (config) => (props, isStatic) => {
        const context = React3.useContext(MotionContext);
        const presenceContext = React3.useContext(PresenceContext);
        const make = () => makeState(config, props, context, presenceContext);
        return isStatic ? make() : useConstant(make);
      };
      function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
        const values = {};
        const motionValues = scrapeMotionValues(props, {});
        for (const key in motionValues) {
          values[key] = resolveMotionValue(motionValues[key]);
        }
        let { initial, animate } = props;
        const isControllingVariants = indexLegacy.isControllingVariants(props);
        const isVariantNode = indexLegacy.isVariantNode(props);
        if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
          if (initial === void 0)
            initial = context.initial;
          if (animate === void 0)
            animate = context.animate;
        }
        let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
        isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
        const variantToSet = isInitialAnimationBlocked ? animate : initial;
        if (variantToSet && typeof variantToSet !== "boolean" && !indexLegacy.isAnimationControls(variantToSet)) {
          const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
          list.forEach((definition) => {
            const resolved = indexLegacy.resolveVariantFromProps(props, definition);
            if (!resolved)
              return;
            const _a = resolved, { transitionEnd, transition } = _a, target = __objRest(_a, ["transitionEnd", "transition"]);
            for (const key in target) {
              let valueTarget = target[key];
              if (Array.isArray(valueTarget)) {
                const index3 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
                valueTarget = valueTarget[index3];
              }
              if (valueTarget !== null) {
                values[key] = valueTarget;
              }
            }
            for (const key in transitionEnd)
              values[key] = transitionEnd[key];
          });
        }
        return values;
      }
      var svgMotionConfig = {
        useVisualState: makeUseVisualState({
          scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps,
          createRenderState: createSvgRenderState,
          onMount: (props, instance, { renderState, latestValues }) => {
            indexLegacy.frame.read(() => {
              try {
                renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
              } catch (e) {
                renderState.dimensions = {
                  x: 0,
                  y: 0,
                  width: 0,
                  height: 0
                };
              }
            });
            indexLegacy.frame.render(() => {
              indexLegacy.buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, indexLegacy.isSVGTag(instance.tagName), props.transformTemplate);
              indexLegacy.renderSVG(instance, renderState);
            });
          }
        })
      };
      var htmlMotionConfig = {
        useVisualState: makeUseVisualState({
          scrapeMotionValuesFromProps: indexLegacy.scrapeMotionValuesFromProps$1,
          createRenderState: createHtmlRenderState
        })
      };
      function createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures2, createVisualElement) {
        const baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;
        return __spreadProps(__spreadValues({}, baseConfig), {
          preloadedFeatures: preloadedFeatures2,
          useRender: createUseRender(forwardMotionProps),
          createVisualElement,
          Component
        });
      }
      function addDomEvent(target, eventName, handler, options = { passive: true }) {
        target.addEventListener(eventName, handler, options);
        return () => target.removeEventListener(eventName, handler);
      }
      var isPrimaryPointer = (event) => {
        if (event.pointerType === "mouse") {
          return typeof event.button !== "number" || event.button <= 0;
        } else {
          return event.isPrimary !== false;
        }
      };
      function extractEventInfo(event, pointType = "page") {
        return {
          point: {
            x: event[pointType + "X"],
            y: event[pointType + "Y"]
          }
        };
      }
      var addPointerInfo = (handler) => {
        return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
      };
      function addPointerEvent(target, eventName, handler, options) {
        return addDomEvent(target, eventName, addPointerInfo(handler), options);
      }
      function createLock(name) {
        let lock = null;
        return () => {
          const openLock = () => {
            lock = null;
          };
          if (lock === null) {
            lock = name;
            return openLock;
          }
          return false;
        };
      }
      var globalHorizontalLock = createLock("dragHorizontal");
      var globalVerticalLock = createLock("dragVertical");
      function getGlobalLock(drag2) {
        let lock = false;
        if (drag2 === "y") {
          lock = globalVerticalLock();
        } else if (drag2 === "x") {
          lock = globalHorizontalLock();
        } else {
          const openHorizontal = globalHorizontalLock();
          const openVertical = globalVerticalLock();
          if (openHorizontal && openVertical) {
            lock = () => {
              openHorizontal();
              openVertical();
            };
          } else {
            if (openHorizontal)
              openHorizontal();
            if (openVertical)
              openVertical();
          }
        }
        return lock;
      }
      function isDragActive() {
        const openGestureLock = getGlobalLock(true);
        if (!openGestureLock)
          return true;
        openGestureLock();
        return false;
      }
      var Feature = class {
        constructor(node) {
          this.isMounted = false;
          this.node = node;
        }
        update() {
        }
      };
      function addHoverEvent(node, isActive) {
        const eventName = "pointer" + (isActive ? "enter" : "leave");
        const callbackName = "onHover" + (isActive ? "Start" : "End");
        const handleEvent = (event, info) => {
          if (event.type === "touch" || isDragActive())
            return;
          const props = node.getProps();
          if (node.animationState && props.whileHover) {
            node.animationState.setActive("whileHover", isActive);
          }
          if (props[callbackName]) {
            indexLegacy.frame.update(() => props[callbackName](event, info));
          }
        };
        return addPointerEvent(node.current, eventName, handleEvent, {
          passive: !node.getProps()[callbackName]
        });
      }
      var HoverGesture = class extends Feature {
        mount() {
          this.unmount = indexLegacy.pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
        }
        unmount() {
        }
      };
      var FocusGesture = class extends Feature {
        constructor() {
          super(...arguments);
          this.isActive = false;
        }
        onFocus() {
          let isFocusVisible = false;
          try {
            isFocusVisible = this.node.current.matches(":focus-visible");
          } catch (e) {
            isFocusVisible = true;
          }
          if (!isFocusVisible || !this.node.animationState)
            return;
          this.node.animationState.setActive("whileFocus", true);
          this.isActive = true;
        }
        onBlur() {
          if (!this.isActive || !this.node.animationState)
            return;
          this.node.animationState.setActive("whileFocus", false);
          this.isActive = false;
        }
        mount() {
          this.unmount = indexLegacy.pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
        }
        unmount() {
        }
      };
      var isNodeOrChild = (parent, child) => {
        if (!child) {
          return false;
        } else if (parent === child) {
          return true;
        } else {
          return isNodeOrChild(parent, child.parentElement);
        }
      };
      function fireSyntheticPointerEvent(name, handler) {
        if (!handler)
          return;
        const syntheticPointerEvent = new PointerEvent("pointer" + name);
        handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));
      }
      var PressGesture = class extends Feature {
        constructor() {
          super(...arguments);
          this.removeStartListeners = indexLegacy.noop;
          this.removeEndListeners = indexLegacy.noop;
          this.removeAccessibleListeners = indexLegacy.noop;
          this.startPointerPress = (startEvent, startInfo) => {
            this.removeEndListeners();
            if (this.isPressing)
              return;
            const props = this.node.getProps();
            const endPointerPress = (endEvent, endInfo) => {
              if (!this.checkPressEnd())
                return;
              const { onTap, onTapCancel } = this.node.getProps();
              indexLegacy.frame.update(() => {
                !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
              });
            };
            const removePointerUpListener = addPointerEvent(window, "pointerup", endPointerPress, { passive: !(props.onTap || props["onPointerUp"]) });
            const removePointerCancelListener = addPointerEvent(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props["onPointerCancel"]) });
            this.removeEndListeners = indexLegacy.pipe(removePointerUpListener, removePointerCancelListener);
            this.startPress(startEvent, startInfo);
          };
          this.startAccessiblePress = () => {
            const handleKeydown = (keydownEvent) => {
              if (keydownEvent.key !== "Enter" || this.isPressing)
                return;
              const handleKeyup = (keyupEvent) => {
                if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
                  return;
                fireSyntheticPointerEvent("up", (event, info) => {
                  const { onTap } = this.node.getProps();
                  if (onTap) {
                    indexLegacy.frame.update(() => onTap(event, info));
                  }
                });
              };
              this.removeEndListeners();
              this.removeEndListeners = addDomEvent(this.node.current, "keyup", handleKeyup);
              fireSyntheticPointerEvent("down", (event, info) => {
                this.startPress(event, info);
              });
            };
            const removeKeydownListener = addDomEvent(this.node.current, "keydown", handleKeydown);
            const handleBlur = () => {
              if (!this.isPressing)
                return;
              fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
            };
            const removeBlurListener = addDomEvent(this.node.current, "blur", handleBlur);
            this.removeAccessibleListeners = indexLegacy.pipe(removeKeydownListener, removeBlurListener);
          };
        }
        startPress(event, info) {
          this.isPressing = true;
          const { onTapStart, whileTap } = this.node.getProps();
          if (whileTap && this.node.animationState) {
            this.node.animationState.setActive("whileTap", true);
          }
          if (onTapStart) {
            indexLegacy.frame.update(() => onTapStart(event, info));
          }
        }
        checkPressEnd() {
          this.removeEndListeners();
          this.isPressing = false;
          const props = this.node.getProps();
          if (props.whileTap && this.node.animationState) {
            this.node.animationState.setActive("whileTap", false);
          }
          return !isDragActive();
        }
        cancelPress(event, info) {
          if (!this.checkPressEnd())
            return;
          const { onTapCancel } = this.node.getProps();
          if (onTapCancel) {
            indexLegacy.frame.update(() => onTapCancel(event, info));
          }
        }
        mount() {
          const props = this.node.getProps();
          const removePointerListener = addPointerEvent(this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props["onPointerStart"]) });
          const removeFocusListener = addDomEvent(this.node.current, "focus", this.startAccessiblePress);
          this.removeStartListeners = indexLegacy.pipe(removePointerListener, removeFocusListener);
        }
        unmount() {
          this.removeStartListeners();
          this.removeEndListeners();
          this.removeAccessibleListeners();
        }
      };
      var observerCallbacks = /* @__PURE__ */ new WeakMap();
      var observers = /* @__PURE__ */ new WeakMap();
      var fireObserverCallback = (entry) => {
        const callback = observerCallbacks.get(entry.target);
        callback && callback(entry);
      };
      var fireAllObserverCallbacks = (entries) => {
        entries.forEach(fireObserverCallback);
      };
      function initIntersectionObserver(_a) {
        var _b = _a, { root } = _b, options = __objRest(_b, ["root"]);
        const lookupRoot = root || document;
        if (!observers.has(lookupRoot)) {
          observers.set(lookupRoot, {});
        }
        const rootObservers = observers.get(lookupRoot);
        const key = JSON.stringify(options);
        if (!rootObservers[key]) {
          rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __spreadValues({ root }, options));
        }
        return rootObservers[key];
      }
      function observeIntersection(element, options, callback) {
        const rootInteresectionObserver = initIntersectionObserver(options);
        observerCallbacks.set(element, callback);
        rootInteresectionObserver.observe(element);
        return () => {
          observerCallbacks.delete(element);
          rootInteresectionObserver.unobserve(element);
        };
      }
      var thresholdNames = {
        some: 0,
        all: 1
      };
      var InViewFeature = class extends Feature {
        constructor() {
          super(...arguments);
          this.hasEnteredView = false;
          this.isInView = false;
        }
        startObserver() {
          this.unmount();
          const { viewport = {} } = this.node.getProps();
          const { root, margin: rootMargin, amount = "some", once } = viewport;
          const options = {
            root: root ? root.current : void 0,
            rootMargin,
            threshold: typeof amount === "number" ? amount : thresholdNames[amount]
          };
          const onIntersectionUpdate = (entry) => {
            const { isIntersecting } = entry;
            if (this.isInView === isIntersecting)
              return;
            this.isInView = isIntersecting;
            if (once && !isIntersecting && this.hasEnteredView) {
              return;
            } else if (isIntersecting) {
              this.hasEnteredView = true;
            }
            if (this.node.animationState) {
              this.node.animationState.setActive("whileInView", isIntersecting);
            }
            const { onViewportEnter, onViewportLeave } = this.node.getProps();
            const callback = isIntersecting ? onViewportEnter : onViewportLeave;
            callback && callback(entry);
          };
          return observeIntersection(this.node.current, options, onIntersectionUpdate);
        }
        mount() {
          this.startObserver();
        }
        update() {
          if (typeof IntersectionObserver === "undefined")
            return;
          const { props, prevProps } = this.node;
          const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
          if (hasOptionsChanged) {
            this.startObserver();
          }
        }
        unmount() {
        }
      };
      function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
        return (name) => viewport[name] !== prevViewport[name];
      }
      var gestureAnimations = {
        inView: {
          Feature: InViewFeature
        },
        tap: {
          Feature: PressGesture
        },
        focus: {
          Feature: FocusGesture
        },
        hover: {
          Feature: HoverGesture
        }
      };
      function shallowCompare(next, prev) {
        if (!Array.isArray(prev))
          return false;
        const prevLength = prev.length;
        if (prevLength !== next.length)
          return false;
        for (let i = 0; i < prevLength; i++) {
          if (prev[i] !== next[i])
            return false;
        }
        return true;
      }
      function animateVariant(visualElement, variant, options = {}) {
        const resolved = indexLegacy.resolveVariant(visualElement, variant, options.custom);
        let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
        if (options.transitionOverride) {
          transition = options.transitionOverride;
        }
        const getAnimation = resolved ? () => Promise.all(indexLegacy.animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
        const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
          const { delayChildren = 0, staggerChildren, staggerDirection } = transition;
          return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
        } : () => Promise.resolve();
        const { when } = transition;
        if (when) {
          const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
          return first().then(() => last());
        } else {
          return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
        }
      }
      function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
        const animations2 = [];
        const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
        const generateStaggerDuration = staggerDirection === 1 ? (i = 0) => i * staggerChildren : (i = 0) => maxStaggerDuration - i * staggerChildren;
        Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {
          child.notify("AnimationStart", variant);
          animations2.push(animateVariant(child, variant, __spreadProps(__spreadValues({}, options), {
            delay: delayChildren + generateStaggerDuration(i)
          })).then(() => child.notify("AnimationComplete", variant)));
        });
        return Promise.all(animations2);
      }
      function sortByTreeOrder(a, b) {
        return a.sortNodePosition(b);
      }
      function animateVisualElement(visualElement, definition, options = {}) {
        visualElement.notify("AnimationStart", definition);
        let animation;
        if (Array.isArray(definition)) {
          const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
          animation = Promise.all(animations2);
        } else if (typeof definition === "string") {
          animation = animateVariant(visualElement, definition, options);
        } else {
          const resolvedDefinition = typeof definition === "function" ? indexLegacy.resolveVariant(visualElement, definition, options.custom) : definition;
          animation = Promise.all(indexLegacy.animateTarget(visualElement, resolvedDefinition, options));
        }
        return animation.then(() => visualElement.notify("AnimationComplete", definition));
      }
      var reversePriorityOrder = [...indexLegacy.variantPriorityOrder].reverse();
      var numAnimationTypes = indexLegacy.variantPriorityOrder.length;
      function animateList(visualElement) {
        return (animations2) => Promise.all(animations2.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
      }
      function createAnimationState(visualElement) {
        let animate = animateList(visualElement);
        const state = createState();
        let isInitialRender = true;
        const buildResolvedTypeValues = (acc, definition) => {
          const resolved = indexLegacy.resolveVariant(visualElement, definition);
          if (resolved) {
            const _a = resolved, { transition, transitionEnd } = _a, target = __objRest(_a, ["transition", "transitionEnd"]);
            acc = __spreadValues(__spreadValues(__spreadValues({}, acc), target), transitionEnd);
          }
          return acc;
        };
        function setAnimateFunction(makeAnimator) {
          animate = makeAnimator(visualElement);
        }
        function animateChanges(options, changedActiveType) {
          const props = visualElement.getProps();
          const context = visualElement.getVariantContext(true) || {};
          const animations2 = [];
          const removedKeys = /* @__PURE__ */ new Set();
          let encounteredKeys = {};
          let removedVariantIndex = Infinity;
          for (let i = 0; i < numAnimationTypes; i++) {
            const type = reversePriorityOrder[i];
            const typeState = state[type];
            const prop = props[type] !== void 0 ? props[type] : context[type];
            const propIsVariant = indexLegacy.isVariantLabel(prop);
            const activeDelta = type === changedActiveType ? typeState.isActive : null;
            if (activeDelta === false)
              removedVariantIndex = i;
            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
            if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
              isInherited = false;
            }
            typeState.protectedKeys = __spreadValues({}, encounteredKeys);
            if (
              // If it isn't active and hasn't *just* been set as inactive
              !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
              !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
              indexLegacy.isAnimationControls(prop) || typeof prop === "boolean"
            ) {
              continue;
            }
            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
            let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
            type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
            i > removedVariantIndex && propIsVariant;
            const definitionList = Array.isArray(prop) ? prop : [prop];
            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
            if (activeDelta === false)
              resolvedValues = {};
            const { prevResolvedValues = {} } = typeState;
            const allKeys = __spreadValues(__spreadValues({}, prevResolvedValues), resolvedValues);
            const markToAnimate = (key) => {
              shouldAnimateType = true;
              removedKeys.delete(key);
              typeState.needsAnimating[key] = true;
            };
            for (const key in allKeys) {
              const next = resolvedValues[key];
              const prev = prevResolvedValues[key];
              if (encounteredKeys.hasOwnProperty(key))
                continue;
              if (next !== prev) {
                if (indexLegacy.isKeyframesTarget(next) && indexLegacy.isKeyframesTarget(prev)) {
                  if (!shallowCompare(next, prev) || variantDidChange) {
                    markToAnimate(key);
                  } else {
                    typeState.protectedKeys[key] = true;
                  }
                } else if (next !== void 0) {
                  markToAnimate(key);
                } else {
                  removedKeys.add(key);
                }
              } else if (next !== void 0 && removedKeys.has(key)) {
                markToAnimate(key);
              } else {
                typeState.protectedKeys[key] = true;
              }
            }
            typeState.prevProp = prop;
            typeState.prevResolvedValues = resolvedValues;
            if (typeState.isActive) {
              encounteredKeys = __spreadValues(__spreadValues({}, encounteredKeys), resolvedValues);
            }
            if (isInitialRender && visualElement.blockInitialAnimation) {
              shouldAnimateType = false;
            }
            if (shouldAnimateType && !isInherited) {
              animations2.push(...definitionList.map((animation) => ({
                animation,
                options: __spreadValues({ type }, options)
              })));
            }
          }
          if (removedKeys.size) {
            const fallbackAnimation = {};
            removedKeys.forEach((key) => {
              const fallbackTarget = visualElement.getBaseTarget(key);
              if (fallbackTarget !== void 0) {
                fallbackAnimation[key] = fallbackTarget;
              }
            });
            animations2.push({ animation: fallbackAnimation });
          }
          let shouldAnimate = Boolean(animations2.length);
          if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {
            shouldAnimate = false;
          }
          isInitialRender = false;
          return shouldAnimate ? animate(animations2) : Promise.resolve();
        }
        function setActive(type, isActive, options) {
          var _a;
          if (state[type].isActive === isActive)
            return Promise.resolve();
          (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => {
            var _a2;
            return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
          });
          state[type].isActive = isActive;
          const animations2 = animateChanges(options, type);
          for (const key in state) {
            state[key].protectedKeys = {};
          }
          return animations2;
        }
        return {
          animateChanges,
          setActive,
          setAnimateFunction,
          getState: () => state
        };
      }
      function checkVariantsDidChange(prev, next) {
        if (typeof next === "string") {
          return next !== prev;
        } else if (Array.isArray(next)) {
          return !shallowCompare(next, prev);
        }
        return false;
      }
      function createTypeState(isActive = false) {
        return {
          isActive,
          protectedKeys: {},
          needsAnimating: {},
          prevResolvedValues: {}
        };
      }
      function createState() {
        return {
          animate: createTypeState(true),
          whileInView: createTypeState(),
          whileHover: createTypeState(),
          whileTap: createTypeState(),
          whileDrag: createTypeState(),
          whileFocus: createTypeState(),
          exit: createTypeState()
        };
      }
      var AnimationFeature = class extends Feature {
        /**
         * We dynamically generate the AnimationState manager as it contains a reference
         * to the underlying animation library. We only want to load that if we load this,
         * so people can optionally code split it out using the `m` component.
         */
        constructor(node) {
          super(node);
          node.animationState || (node.animationState = createAnimationState(node));
        }
        updateAnimationControlsSubscription() {
          const { animate } = this.node.getProps();
          this.unmount();
          if (indexLegacy.isAnimationControls(animate)) {
            this.unmount = animate.subscribe(this.node);
          }
        }
        /**
         * Subscribe any provided AnimationControls to the component's VisualElement
         */
        mount() {
          this.updateAnimationControlsSubscription();
        }
        update() {
          const { animate } = this.node.getProps();
          const { animate: prevAnimate } = this.node.prevProps || {};
          if (animate !== prevAnimate) {
            this.updateAnimationControlsSubscription();
          }
        }
        unmount() {
        }
      };
      var id$2 = 0;
      var ExitAnimationFeature = class extends Feature {
        constructor() {
          super(...arguments);
          this.id = id$2++;
        }
        update() {
          if (!this.node.presenceContext)
            return;
          const { isPresent: isPresent2, onExitComplete, custom } = this.node.presenceContext;
          const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
          if (!this.node.animationState || isPresent2 === prevIsPresent) {
            return;
          }
          const exitAnimation = this.node.animationState.setActive("exit", !isPresent2, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });
          if (onExitComplete && !isPresent2) {
            exitAnimation.then(() => onExitComplete(this.id));
          }
        }
        mount() {
          const { register } = this.node.presenceContext || {};
          if (register) {
            this.unmount = register(this.id);
          }
        }
        unmount() {
        }
      };
      var animations = {
        animation: {
          Feature: AnimationFeature
        },
        exit: {
          Feature: ExitAnimationFeature
        }
      };
      var PanSession = class {
        constructor(event, handlers, { transformPagePoint } = {}) {
          this.startEvent = null;
          this.lastMoveEvent = null;
          this.lastMoveEventInfo = null;
          this.handlers = {};
          this.updatePoint = () => {
            if (!(this.lastMoveEvent && this.lastMoveEventInfo))
              return;
            const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
            const isPanStarted = this.startEvent !== null;
            const isDistancePastThreshold = indexLegacy.distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
            if (!isPanStarted && !isDistancePastThreshold)
              return;
            const { point: point2 } = info2;
            const { timestamp: timestamp2 } = indexLegacy.frameData;
            this.history.push(__spreadProps(__spreadValues({}, point2), { timestamp: timestamp2 }));
            const { onStart, onMove } = this.handlers;
            if (!isPanStarted) {
              onStart && onStart(this.lastMoveEvent, info2);
              this.startEvent = this.lastMoveEvent;
            }
            onMove && onMove(this.lastMoveEvent, info2);
          };
          this.handlePointerMove = (event2, info2) => {
            this.lastMoveEvent = event2;
            this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
            indexLegacy.frame.update(this.updatePoint, true);
          };
          this.handlePointerUp = (event2, info2) => {
            this.end();
            if (!(this.lastMoveEvent && this.lastMoveEventInfo))
              return;
            const { onEnd, onSessionEnd } = this.handlers;
            const panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
            if (this.startEvent && onEnd) {
              onEnd(event2, panInfo);
            }
            onSessionEnd && onSessionEnd(event2, panInfo);
          };
          if (!isPrimaryPointer(event))
            return;
          this.handlers = handlers;
          this.transformPagePoint = transformPagePoint;
          const info = extractEventInfo(event);
          const initialInfo = transformPoint(info, this.transformPagePoint);
          const { point } = initialInfo;
          const { timestamp } = indexLegacy.frameData;
          this.history = [__spreadProps(__spreadValues({}, point), { timestamp })];
          const { onSessionStart } = handlers;
          onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
          this.removeListeners = indexLegacy.pipe(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
        }
        updateHandlers(handlers) {
          this.handlers = handlers;
        }
        end() {
          this.removeListeners && this.removeListeners();
          indexLegacy.cancelFrame(this.updatePoint);
        }
      };
      function transformPoint(info, transformPagePoint) {
        return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
      }
      function subtractPoint(a, b) {
        return { x: a.x - b.x, y: a.y - b.y };
      }
      function getPanInfo({ point }, history) {
        return {
          point,
          delta: subtractPoint(point, lastDevicePoint(history)),
          offset: subtractPoint(point, startDevicePoint(history)),
          velocity: getVelocity(history, 0.1)
        };
      }
      function startDevicePoint(history) {
        return history[0];
      }
      function lastDevicePoint(history) {
        return history[history.length - 1];
      }
      function getVelocity(history, timeDelta) {
        if (history.length < 2) {
          return { x: 0, y: 0 };
        }
        let i = history.length - 1;
        let timestampedPoint = null;
        const lastPoint = lastDevicePoint(history);
        while (i >= 0) {
          timestampedPoint = history[i];
          if (lastPoint.timestamp - timestampedPoint.timestamp > indexLegacy.secondsToMilliseconds(timeDelta)) {
            break;
          }
          i--;
        }
        if (!timestampedPoint) {
          return { x: 0, y: 0 };
        }
        const time = indexLegacy.millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
        if (time === 0) {
          return { x: 0, y: 0 };
        }
        const currentVelocity = {
          x: (lastPoint.x - timestampedPoint.x) / time,
          y: (lastPoint.y - timestampedPoint.y) / time
        };
        if (currentVelocity.x === Infinity) {
          currentVelocity.x = 0;
        }
        if (currentVelocity.y === Infinity) {
          currentVelocity.y = 0;
        }
        return currentVelocity;
      }
      function calcLength(axis) {
        return axis.max - axis.min;
      }
      function isNear(value, target = 0, maxDistance = 0.01) {
        return Math.abs(value - target) <= maxDistance;
      }
      function calcAxisDelta(delta, source, target, origin = 0.5) {
        delta.origin = origin;
        delta.originPoint = indexLegacy.mix(source.min, source.max, delta.origin);
        delta.scale = calcLength(target) / calcLength(source);
        if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
          delta.scale = 1;
        delta.translate = indexLegacy.mix(target.min, target.max, delta.origin) - delta.originPoint;
        if (isNear(delta.translate) || isNaN(delta.translate))
          delta.translate = 0;
      }
      function calcBoxDelta(delta, source, target, origin) {
        calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : void 0);
        calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : void 0);
      }
      function calcRelativeAxis(target, relative, parent) {
        target.min = parent.min + relative.min;
        target.max = target.min + calcLength(relative);
      }
      function calcRelativeBox(target, relative, parent) {
        calcRelativeAxis(target.x, relative.x, parent.x);
        calcRelativeAxis(target.y, relative.y, parent.y);
      }
      function calcRelativeAxisPosition(target, layout2, parent) {
        target.min = layout2.min - parent.min;
        target.max = target.min + calcLength(layout2);
      }
      function calcRelativePosition(target, layout2, parent) {
        calcRelativeAxisPosition(target.x, layout2.x, parent.x);
        calcRelativeAxisPosition(target.y, layout2.y, parent.y);
      }
      function applyConstraints(point, { min, max }, elastic) {
        if (min !== void 0 && point < min) {
          point = elastic ? indexLegacy.mix(min, point, elastic.min) : Math.max(point, min);
        } else if (max !== void 0 && point > max) {
          point = elastic ? indexLegacy.mix(max, point, elastic.max) : Math.min(point, max);
        }
        return point;
      }
      function calcRelativeAxisConstraints(axis, min, max) {
        return {
          min: min !== void 0 ? axis.min + min : void 0,
          max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
        };
      }
      function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
        return {
          x: calcRelativeAxisConstraints(layoutBox.x, left, right),
          y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
        };
      }
      function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
        let min = constraintsAxis.min - layoutAxis.min;
        let max = constraintsAxis.max - layoutAxis.max;
        if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
          [min, max] = [max, min];
        }
        return { min, max };
      }
      function calcViewportConstraints(layoutBox, constraintsBox) {
        return {
          x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
          y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
        };
      }
      function calcOrigin(source, target) {
        let origin = 0.5;
        const sourceLength = calcLength(source);
        const targetLength = calcLength(target);
        if (targetLength > sourceLength) {
          origin = indexLegacy.progress(target.min, target.max - sourceLength, source.min);
        } else if (sourceLength > targetLength) {
          origin = indexLegacy.progress(source.min, source.max - targetLength, target.min);
        }
        return indexLegacy.clamp(0, 1, origin);
      }
      function rebaseAxisConstraints(layout2, constraints) {
        const relativeConstraints = {};
        if (constraints.min !== void 0) {
          relativeConstraints.min = constraints.min - layout2.min;
        }
        if (constraints.max !== void 0) {
          relativeConstraints.max = constraints.max - layout2.min;
        }
        return relativeConstraints;
      }
      var defaultElastic = 0.35;
      function resolveDragElastic(dragElastic = defaultElastic) {
        if (dragElastic === false) {
          dragElastic = 0;
        } else if (dragElastic === true) {
          dragElastic = defaultElastic;
        }
        return {
          x: resolveAxisElastic(dragElastic, "left", "right"),
          y: resolveAxisElastic(dragElastic, "top", "bottom")
        };
      }
      function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
        return {
          min: resolvePointElastic(dragElastic, minLabel),
          max: resolvePointElastic(dragElastic, maxLabel)
        };
      }
      function resolvePointElastic(dragElastic, label) {
        return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
      }
      function eachAxis(callback) {
        return [callback("x"), callback("y")];
      }
      var elementDragControls = /* @__PURE__ */ new WeakMap();
      var VisualElementDragControls = class {
        constructor(visualElement) {
          this.openGlobalLock = null;
          this.isDragging = false;
          this.currentDirection = null;
          this.originPoint = { x: 0, y: 0 };
          this.constraints = false;
          this.hasMutatedConstraints = false;
          this.elastic = indexLegacy.createBox();
          this.visualElement = visualElement;
        }
        start(originEvent, { snapToCursor = false } = {}) {
          const { presenceContext } = this.visualElement;
          if (presenceContext && presenceContext.isPresent === false)
            return;
          const onSessionStart = (event) => {
            this.stopAnimation();
            if (snapToCursor) {
              this.snapToCursor(extractEventInfo(event, "page").point);
            }
          };
          const onStart = (event, info) => {
            const { drag: drag2, dragPropagation, onDragStart } = this.getProps();
            if (drag2 && !dragPropagation) {
              if (this.openGlobalLock)
                this.openGlobalLock();
              this.openGlobalLock = getGlobalLock(drag2);
              if (!this.openGlobalLock)
                return;
            }
            this.isDragging = true;
            this.currentDirection = null;
            this.resolveConstraints();
            if (this.visualElement.projection) {
              this.visualElement.projection.isAnimationBlocked = true;
              this.visualElement.projection.target = void 0;
            }
            eachAxis((axis) => {
              let current = this.getAxisMotionValue(axis).get() || 0;
              if (indexLegacy.percent.test(current)) {
                const { projection } = this.visualElement;
                if (projection && projection.layout) {
                  const measuredAxis = projection.layout.layoutBox[axis];
                  if (measuredAxis) {
                    const length = calcLength(measuredAxis);
                    current = length * (parseFloat(current) / 100);
                  }
                }
              }
              this.originPoint[axis] = current;
            });
            if (onDragStart) {
              indexLegacy.frame.update(() => onDragStart(event, info), false, true);
            }
            const { animationState } = this.visualElement;
            animationState && animationState.setActive("whileDrag", true);
          };
          const onMove = (event, info) => {
            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
            if (!dragPropagation && !this.openGlobalLock)
              return;
            const { offset } = info;
            if (dragDirectionLock && this.currentDirection === null) {
              this.currentDirection = getCurrentDirection(offset);
              if (this.currentDirection !== null) {
                onDirectionLock && onDirectionLock(this.currentDirection);
              }
              return;
            }
            this.updateAxis("x", info.point, offset);
            this.updateAxis("y", info.point, offset);
            this.visualElement.render();
            onDrag && onDrag(event, info);
          };
          const onSessionEnd = (event, info) => this.stop(event, info);
          this.panSession = new PanSession(originEvent, {
            onSessionStart,
            onStart,
            onMove,
            onSessionEnd
          }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
        }
        stop(event, info) {
          const isDragging = this.isDragging;
          this.cancel();
          if (!isDragging)
            return;
          const { velocity } = info;
          this.startAnimation(velocity);
          const { onDragEnd } = this.getProps();
          if (onDragEnd) {
            indexLegacy.frame.update(() => onDragEnd(event, info));
          }
        }
        cancel() {
          this.isDragging = false;
          const { projection, animationState } = this.visualElement;
          if (projection) {
            projection.isAnimationBlocked = false;
          }
          this.panSession && this.panSession.end();
          this.panSession = void 0;
          const { dragPropagation } = this.getProps();
          if (!dragPropagation && this.openGlobalLock) {
            this.openGlobalLock();
            this.openGlobalLock = null;
          }
          animationState && animationState.setActive("whileDrag", false);
        }
        updateAxis(axis, _point, offset) {
          const { drag: drag2 } = this.getProps();
          if (!offset || !shouldDrag(axis, drag2, this.currentDirection))
            return;
          const axisValue = this.getAxisMotionValue(axis);
          let next = this.originPoint[axis] + offset[axis];
          if (this.constraints && this.constraints[axis]) {
            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
          }
          axisValue.set(next);
        }
        resolveConstraints() {
          const { dragConstraints, dragElastic } = this.getProps();
          const { layout: layout2 } = this.visualElement.projection || {};
          const prevConstraints = this.constraints;
          if (dragConstraints && indexLegacy.isRefObject(dragConstraints)) {
            if (!this.constraints) {
              this.constraints = this.resolveRefConstraints();
            }
          } else {
            if (dragConstraints && layout2) {
              this.constraints = calcRelativeConstraints(layout2.layoutBox, dragConstraints);
            } else {
              this.constraints = false;
            }
          }
          this.elastic = resolveDragElastic(dragElastic);
          if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
            eachAxis((axis) => {
              if (this.getAxisMotionValue(axis)) {
                this.constraints[axis] = rebaseAxisConstraints(layout2.layoutBox[axis], this.constraints[axis]);
              }
            });
          }
        }
        resolveRefConstraints() {
          const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
          if (!constraints || !indexLegacy.isRefObject(constraints))
            return false;
          const constraintsElement = constraints.current;
          indexLegacy.invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
          const { projection } = this.visualElement;
          if (!projection || !projection.layout)
            return false;
          const constraintsBox = indexLegacy.measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
          let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
          if (onMeasureDragConstraints) {
            const userConstraints = onMeasureDragConstraints(indexLegacy.convertBoxToBoundingBox(measuredConstraints));
            this.hasMutatedConstraints = !!userConstraints;
            if (userConstraints) {
              measuredConstraints = indexLegacy.convertBoundingBoxToBox(userConstraints);
            }
          }
          return measuredConstraints;
        }
        startAnimation(velocity) {
          const { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
          const constraints = this.constraints || {};
          const momentumAnimations = eachAxis((axis) => {
            if (!shouldDrag(axis, drag2, this.currentDirection)) {
              return;
            }
            let transition = constraints && constraints[axis] || {};
            if (dragSnapToOrigin)
              transition = { min: 0, max: 0 };
            const bounceStiffness = dragElastic ? 200 : 1e6;
            const bounceDamping = dragElastic ? 40 : 1e7;
            const inertia = __spreadValues(__spreadValues({
              type: "inertia",
              velocity: dragMomentum ? velocity[axis] : 0,
              bounceStiffness,
              bounceDamping,
              timeConstant: 750,
              restDelta: 1,
              restSpeed: 10
            }, dragTransition), transition);
            return this.startAxisValueAnimation(axis, inertia);
          });
          return Promise.all(momentumAnimations).then(onDragTransitionEnd);
        }
        startAxisValueAnimation(axis, transition) {
          const axisValue = this.getAxisMotionValue(axis);
          return axisValue.start(indexLegacy.animateMotionValue(axis, axisValue, 0, transition));
        }
        stopAnimation() {
          eachAxis((axis) => this.getAxisMotionValue(axis).stop());
        }
        /**
         * Drag works differently depending on which props are provided.
         *
         * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
         * - Otherwise, we apply the delta to the x/y motion values.
         */
        getAxisMotionValue(axis) {
          const dragKey = "_drag" + axis.toUpperCase();
          const props = this.visualElement.getProps();
          const externalMotionValue = props[dragKey];
          return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
        }
        snapToCursor(point) {
          eachAxis((axis) => {
            const { drag: drag2 } = this.getProps();
            if (!shouldDrag(axis, drag2, this.currentDirection))
              return;
            const { projection } = this.visualElement;
            const axisValue = this.getAxisMotionValue(axis);
            if (projection && projection.layout) {
              const { min, max } = projection.layout.layoutBox[axis];
              axisValue.set(point[axis] - indexLegacy.mix(min, max, 0.5));
            }
          });
        }
        /**
         * When the viewport resizes we want to check if the measured constraints
         * have changed and, if so, reposition the element within those new constraints
         * relative to where it was before the resize.
         */
        scalePositionWithinConstraints() {
          if (!this.visualElement.current)
            return;
          const { drag: drag2, dragConstraints } = this.getProps();
          const { projection } = this.visualElement;
          if (!indexLegacy.isRefObject(dragConstraints) || !projection || !this.constraints)
            return;
          this.stopAnimation();
          const boxProgress = { x: 0, y: 0 };
          eachAxis((axis) => {
            const axisValue = this.getAxisMotionValue(axis);
            if (axisValue) {
              const latest = axisValue.get();
              boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);
            }
          });
          const { transformTemplate } = this.visualElement.getProps();
          this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
          projection.root && projection.root.updateScroll();
          projection.updateLayout();
          this.resolveConstraints();
          eachAxis((axis) => {
            if (!shouldDrag(axis, drag2, null))
              return;
            const axisValue = this.getAxisMotionValue(axis);
            const { min, max } = this.constraints[axis];
            axisValue.set(indexLegacy.mix(min, max, boxProgress[axis]));
          });
        }
        addListeners() {
          if (!this.visualElement.current)
            return;
          elementDragControls.set(this.visualElement, this);
          const element = this.visualElement.current;
          const stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
            const { drag: drag2, dragListener = true } = this.getProps();
            drag2 && dragListener && this.start(event);
          });
          const measureDragConstraints = () => {
            const { dragConstraints } = this.getProps();
            if (indexLegacy.isRefObject(dragConstraints)) {
              this.constraints = this.resolveRefConstraints();
            }
          };
          const { projection } = this.visualElement;
          const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
          if (projection && !projection.layout) {
            projection.root && projection.root.updateScroll();
            projection.updateLayout();
          }
          measureDragConstraints();
          const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
          const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
            if (this.isDragging && hasLayoutChanged) {
              eachAxis((axis) => {
                const motionValue = this.getAxisMotionValue(axis);
                if (!motionValue)
                  return;
                this.originPoint[axis] += delta[axis].translate;
                motionValue.set(motionValue.get() + delta[axis].translate);
              });
              this.visualElement.render();
            }
          });
          return () => {
            stopResizeListener();
            stopPointerListener();
            stopMeasureLayoutListener();
            stopLayoutUpdateListener && stopLayoutUpdateListener();
          };
        }
        getProps() {
          const props = this.visualElement.getProps();
          const { drag: drag2 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;
          return __spreadProps(__spreadValues({}, props), {
            drag: drag2,
            dragDirectionLock,
            dragPropagation,
            dragConstraints,
            dragElastic,
            dragMomentum
          });
        }
      };
      function shouldDrag(direction, drag2, currentDirection) {
        return (drag2 === true || drag2 === direction) && (currentDirection === null || currentDirection === direction);
      }
      function getCurrentDirection(offset, lockThreshold = 10) {
        let direction = null;
        if (Math.abs(offset.y) > lockThreshold) {
          direction = "y";
        } else if (Math.abs(offset.x) > lockThreshold) {
          direction = "x";
        }
        return direction;
      }
      var DragGesture = class extends Feature {
        constructor(node) {
          super(node);
          this.removeGroupControls = indexLegacy.noop;
          this.removeListeners = indexLegacy.noop;
          this.controls = new VisualElementDragControls(node);
        }
        mount() {
          const { dragControls } = this.node.getProps();
          if (dragControls) {
            this.removeGroupControls = dragControls.subscribe(this.controls);
          }
          this.removeListeners = this.controls.addListeners() || indexLegacy.noop;
        }
        unmount() {
          this.removeGroupControls();
          this.removeListeners();
        }
      };
      var asyncHandler = (handler) => (event, info) => {
        if (handler) {
          indexLegacy.frame.update(() => handler(event, info));
        }
      };
      var PanGesture = class extends Feature {
        constructor() {
          super(...arguments);
          this.removePointerDownListener = indexLegacy.noop;
        }
        onPointerDown(pointerDownEvent) {
          this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });
        }
        createPanHandlers() {
          const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
          return {
            onSessionStart: asyncHandler(onPanSessionStart),
            onStart: asyncHandler(onPanStart),
            onMove: onPan,
            onEnd: (event, info) => {
              delete this.session;
              if (onPanEnd) {
                indexLegacy.frame.update(() => onPanEnd(event, info));
              }
            }
          };
        }
        mount() {
          this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
        }
        update() {
          this.session && this.session.updateHandlers(this.createPanHandlers());
        }
        unmount() {
          this.removePointerDownListener();
          this.session && this.session.end();
        }
      };
      var borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
      var numBorders = borders.length;
      var asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
      var isPx = (value) => typeof value === "number" || indexLegacy.px.test(value);
      function mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {
        if (shouldCrossfadeOpacity) {
          target.opacity = indexLegacy.mix(
            0,
            // TODO Reinstate this if only child
            lead.opacity !== void 0 ? lead.opacity : 1,
            easeCrossfadeIn(progress)
          );
          target.opacityExit = indexLegacy.mix(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress));
        } else if (isOnlyMember) {
          target.opacity = indexLegacy.mix(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress);
        }
        for (let i = 0; i < numBorders; i++) {
          const borderLabel = `border${borders[i]}Radius`;
          let followRadius = getRadius(follow, borderLabel);
          let leadRadius = getRadius(lead, borderLabel);
          if (followRadius === void 0 && leadRadius === void 0)
            continue;
          followRadius || (followRadius = 0);
          leadRadius || (leadRadius = 0);
          const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
          if (canMix) {
            target[borderLabel] = Math.max(indexLegacy.mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);
            if (indexLegacy.percent.test(leadRadius) || indexLegacy.percent.test(followRadius)) {
              target[borderLabel] += "%";
            }
          } else {
            target[borderLabel] = leadRadius;
          }
        }
        if (follow.rotate || lead.rotate) {
          target.rotate = indexLegacy.mix(follow.rotate || 0, lead.rotate || 0, progress);
        }
      }
      function getRadius(values, radiusName) {
        return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
      }
      var easeCrossfadeIn = compress(0, 0.5, indexLegacy.circOut);
      var easeCrossfadeOut = compress(0.5, 0.95, indexLegacy.noop);
      function compress(min, max, easing) {
        return (p) => {
          if (p < min)
            return 0;
          if (p > max)
            return 1;
          return easing(indexLegacy.progress(min, max, p));
        };
      }
      function copyAxisInto(axis, originAxis) {
        axis.min = originAxis.min;
        axis.max = originAxis.max;
      }
      function copyBoxInto(box, originBox) {
        copyAxisInto(box.x, originBox.x);
        copyAxisInto(box.y, originBox.y);
      }
      function removePointDelta(point, translate, scale, originPoint, boxScale) {
        point -= translate;
        point = indexLegacy.scalePoint(point, 1 / scale, originPoint);
        if (boxScale !== void 0) {
          point = indexLegacy.scalePoint(point, 1 / boxScale, originPoint);
        }
        return point;
      }
      function removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
        if (indexLegacy.percent.test(translate)) {
          translate = parseFloat(translate);
          const relativeProgress = indexLegacy.mix(sourceAxis.min, sourceAxis.max, translate / 100);
          translate = relativeProgress - sourceAxis.min;
        }
        if (typeof translate !== "number")
          return;
        let originPoint = indexLegacy.mix(originAxis.min, originAxis.max, origin);
        if (axis === originAxis)
          originPoint -= translate;
        axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);
        axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);
      }
      function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
        removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
      }
      var xKeys = ["x", "scaleX", "originX"];
      var yKeys = ["y", "scaleY", "originY"];
      function removeBoxTransforms(box, transforms, originBox, sourceBox) {
        removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
        removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
      }
      function isAxisDeltaZero(delta) {
        return delta.translate === 0 && delta.scale === 1;
      }
      function isDeltaZero(delta) {
        return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
      }
      function boxEquals(a, b) {
        return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;
      }
      function boxEqualsRounded(a, b) {
        return Math.round(a.x.min) === Math.round(b.x.min) && Math.round(a.x.max) === Math.round(b.x.max) && Math.round(a.y.min) === Math.round(b.y.min) && Math.round(a.y.max) === Math.round(b.y.max);
      }
      function aspectRatio(box) {
        return calcLength(box.x) / calcLength(box.y);
      }
      var NodeStack = class {
        constructor() {
          this.members = [];
        }
        add(node) {
          indexLegacy.addUniqueItem(this.members, node);
          node.scheduleRender();
        }
        remove(node) {
          indexLegacy.removeItem(this.members, node);
          if (node === this.prevLead) {
            this.prevLead = void 0;
          }
          if (node === this.lead) {
            const prevLead = this.members[this.members.length - 1];
            if (prevLead) {
              this.promote(prevLead);
            }
          }
        }
        relegate(node) {
          const indexOfNode = this.members.findIndex((member) => node === member);
          if (indexOfNode === 0)
            return false;
          let prevLead;
          for (let i = indexOfNode; i >= 0; i--) {
            const member = this.members[i];
            if (member.isPresent !== false) {
              prevLead = member;
              break;
            }
          }
          if (prevLead) {
            this.promote(prevLead);
            return true;
          } else {
            return false;
          }
        }
        promote(node, preserveFollowOpacity) {
          const prevLead = this.lead;
          if (node === prevLead)
            return;
          this.prevLead = prevLead;
          this.lead = node;
          node.show();
          if (prevLead) {
            prevLead.instance && prevLead.scheduleRender();
            node.scheduleRender();
            node.resumeFrom = prevLead;
            if (preserveFollowOpacity) {
              node.resumeFrom.preserveOpacity = true;
            }
            if (prevLead.snapshot) {
              node.snapshot = prevLead.snapshot;
              node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
            }
            if (node.root && node.root.isUpdating) {
              node.isLayoutDirty = true;
            }
            const { crossfade } = node.options;
            if (crossfade === false) {
              prevLead.hide();
            }
          }
        }
        exitAnimationComplete() {
          this.members.forEach((node) => {
            const { options, resumingFrom } = node;
            options.onExitComplete && options.onExitComplete();
            if (resumingFrom) {
              resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
            }
          });
        }
        scheduleRender() {
          this.members.forEach((node) => {
            node.instance && node.scheduleRender(false);
          });
        }
        /**
         * Clear any leads that have been removed this render to prevent them from being
         * used in future animations and to prevent memory leaks
         */
        removeLeadSnapshot() {
          if (this.lead && this.lead.snapshot) {
            this.lead.snapshot = void 0;
          }
        }
      };
      function buildProjectionTransform(delta, treeScale, latestTransform) {
        let transform = "";
        const xTranslate = delta.x.translate / treeScale.x;
        const yTranslate = delta.y.translate / treeScale.y;
        if (xTranslate || yTranslate) {
          transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;
        }
        if (treeScale.x !== 1 || treeScale.y !== 1) {
          transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
        }
        if (latestTransform) {
          const { rotate, rotateX, rotateY } = latestTransform;
          if (rotate)
            transform += `rotate(${rotate}deg) `;
          if (rotateX)
            transform += `rotateX(${rotateX}deg) `;
          if (rotateY)
            transform += `rotateY(${rotateY}deg) `;
        }
        const elementScaleX = delta.x.scale * treeScale.x;
        const elementScaleY = delta.y.scale * treeScale.y;
        if (elementScaleX !== 1 || elementScaleY !== 1) {
          transform += `scale(${elementScaleX}, ${elementScaleY})`;
        }
        return transform || "none";
      }
      var compareByDepth = (a, b) => a.depth - b.depth;
      var FlatTree = class {
        constructor() {
          this.children = [];
          this.isDirty = false;
        }
        add(child) {
          indexLegacy.addUniqueItem(this.children, child);
          this.isDirty = true;
        }
        remove(child) {
          indexLegacy.removeItem(this.children, child);
          this.isDirty = true;
        }
        forEach(callback) {
          this.isDirty && this.children.sort(compareByDepth);
          this.isDirty = false;
          this.children.forEach(callback);
        }
      };
      var globalProjectionState = {
        /**
         * Global flag as to whether the tree has animated since the last time
         * we resized the window
         */
        hasAnimatedSinceResize: true,
        /**
         * We set this to true once, on the first update. Any nodes added to the tree beyond that
         * update will be given a `data-projection-id` attribute.
         */
        hasEverUpdated: false
      };
      function record(data) {
        if (window.MotionDebug) {
          window.MotionDebug.record(data);
        }
      }
      var transformAxes = ["", "X", "Y", "Z"];
      var animationTarget = 1e3;
      var id$1 = 0;
      var projectionFrameData = {
        type: "projectionFrame",
        totalNodes: 0,
        resolvedTargetDeltas: 0,
        recalculatedProjection: 0
      };
      function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
        return class ProjectionNode {
          constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
            this.id = id$1++;
            this.animationId = 0;
            this.children = /* @__PURE__ */ new Set();
            this.options = {};
            this.isTreeAnimating = false;
            this.isAnimationBlocked = false;
            this.isLayoutDirty = false;
            this.isProjectionDirty = false;
            this.isSharedProjectionDirty = false;
            this.isTransformDirty = false;
            this.updateManuallyBlocked = false;
            this.updateBlockedByResize = false;
            this.isUpdating = false;
            this.isSVG = false;
            this.needsReset = false;
            this.shouldResetTransform = false;
            this.treeScale = { x: 1, y: 1 };
            this.eventHandlers = /* @__PURE__ */ new Map();
            this.hasTreeAnimated = false;
            this.updateScheduled = false;
            this.checkUpdateFailed = () => {
              if (this.isUpdating) {
                this.isUpdating = false;
                this.clearAllSnapshots();
              }
            };
            this.updateProjection = () => {
              projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;
              this.nodes.forEach(propagateDirtyNodes);
              this.nodes.forEach(resolveTargetDelta);
              this.nodes.forEach(calcProjection);
              this.nodes.forEach(cleanDirtyNodes);
              record(projectionFrameData);
            };
            this.hasProjected = false;
            this.isVisible = true;
            this.animationProgress = 0;
            this.sharedNodes = /* @__PURE__ */ new Map();
            this.latestValues = latestValues;
            this.root = parent ? parent.root || parent : this;
            this.path = parent ? [...parent.path, parent] : [];
            this.parent = parent;
            this.depth = parent ? parent.depth + 1 : 0;
            for (let i = 0; i < this.path.length; i++) {
              this.path[i].shouldResetTransform = true;
            }
            if (this.root === this)
              this.nodes = new FlatTree();
          }
          addEventListener(name, handler) {
            if (!this.eventHandlers.has(name)) {
              this.eventHandlers.set(name, new indexLegacy.SubscriptionManager());
            }
            return this.eventHandlers.get(name).add(handler);
          }
          notifyListeners(name, ...args) {
            const subscriptionManager = this.eventHandlers.get(name);
            subscriptionManager && subscriptionManager.notify(...args);
          }
          hasListeners(name) {
            return this.eventHandlers.has(name);
          }
          /**
           * Lifecycles
           */
          mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
            if (this.instance)
              return;
            this.isSVG = indexLegacy.isSVGElement(instance);
            this.instance = instance;
            const { layoutId, layout: layout2, visualElement } = this.options;
            if (visualElement && !visualElement.current) {
              visualElement.mount(instance);
            }
            this.root.nodes.add(this);
            this.parent && this.parent.children.add(this);
            if (isLayoutDirty && (layout2 || layoutId)) {
              this.isLayoutDirty = true;
            }
            if (attachResizeListener) {
              let cancelDelay;
              const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
              attachResizeListener(instance, () => {
                this.root.updateBlockedByResize = true;
                cancelDelay && cancelDelay();
                cancelDelay = indexLegacy.delay(resizeUnblockUpdate, 250);
                if (globalProjectionState.hasAnimatedSinceResize) {
                  globalProjectionState.hasAnimatedSinceResize = false;
                  this.nodes.forEach(finishAnimation);
                }
              });
            }
            if (layoutId) {
              this.root.registerSharedNode(layoutId, this);
            }
            if (this.options.animate !== false && visualElement && (layoutId || layout2)) {
              this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
                if (this.isTreeAnimationBlocked()) {
                  this.target = void 0;
                  this.relativeTarget = void 0;
                  return;
                }
                const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
                const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
                const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;
                const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
                if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
                  if (this.resumeFrom) {
                    this.resumingFrom = this.resumeFrom;
                    this.resumingFrom.resumingFrom = void 0;
                  }
                  this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
                  const animationOptions = __spreadProps(__spreadValues({}, indexLegacy.getValueTransition(layoutTransition, "layout")), {
                    onPlay: onLayoutAnimationStart,
                    onComplete: onLayoutAnimationComplete
                  });
                  if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
                    animationOptions.delay = 0;
                    animationOptions.type = false;
                  }
                  this.startAnimation(animationOptions);
                } else {
                  if (!hasLayoutChanged) {
                    finishAnimation(this);
                  }
                  if (this.isLead() && this.options.onExitComplete) {
                    this.options.onExitComplete();
                  }
                }
                this.targetLayout = newLayout;
              });
            }
          }
          unmount() {
            this.options.layoutId && this.willUpdate();
            this.root.nodes.remove(this);
            const stack = this.getStack();
            stack && stack.remove(this);
            this.parent && this.parent.children.delete(this);
            this.instance = void 0;
            indexLegacy.cancelFrame(this.updateProjection);
          }
          // only on the root
          blockUpdate() {
            this.updateManuallyBlocked = true;
          }
          unblockUpdate() {
            this.updateManuallyBlocked = false;
          }
          isUpdateBlocked() {
            return this.updateManuallyBlocked || this.updateBlockedByResize;
          }
          isTreeAnimationBlocked() {
            return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
          }
          // Note: currently only running on root node
          startUpdate() {
            if (this.isUpdateBlocked())
              return;
            this.isUpdating = true;
            this.nodes && this.nodes.forEach(resetRotation);
            this.animationId++;
          }
          getTransformTemplate() {
            const { visualElement } = this.options;
            return visualElement && visualElement.getProps().transformTemplate;
          }
          willUpdate(shouldNotifyListeners = true) {
            this.root.hasTreeAnimated = true;
            if (this.root.isUpdateBlocked()) {
              this.options.onExitComplete && this.options.onExitComplete();
              return;
            }
            !this.root.isUpdating && this.root.startUpdate();
            if (this.isLayoutDirty)
              return;
            this.isLayoutDirty = true;
            for (let i = 0; i < this.path.length; i++) {
              const node = this.path[i];
              node.shouldResetTransform = true;
              node.updateScroll("snapshot");
              if (node.options.layoutRoot) {
                node.willUpdate(false);
              }
            }
            const { layoutId, layout: layout2 } = this.options;
            if (layoutId === void 0 && !layout2)
              return;
            const transformTemplate = this.getTransformTemplate();
            this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
            this.updateSnapshot();
            shouldNotifyListeners && this.notifyListeners("willUpdate");
          }
          update() {
            this.updateScheduled = false;
            const updateWasBlocked = this.isUpdateBlocked();
            if (updateWasBlocked) {
              this.unblockUpdate();
              this.clearAllSnapshots();
              this.nodes.forEach(clearMeasurements);
              return;
            }
            if (!this.isUpdating) {
              this.nodes.forEach(clearIsLayoutDirty);
            }
            this.isUpdating = false;
            this.nodes.forEach(resetTransformStyle);
            this.nodes.forEach(updateLayout);
            this.nodes.forEach(notifyLayoutUpdate);
            this.clearAllSnapshots();
            const now = performance.now();
            indexLegacy.frameData.delta = indexLegacy.clamp(0, 1e3 / 60, now - indexLegacy.frameData.timestamp);
            indexLegacy.frameData.timestamp = now;
            indexLegacy.frameData.isProcessing = true;
            indexLegacy.steps.update.process(indexLegacy.frameData);
            indexLegacy.steps.preRender.process(indexLegacy.frameData);
            indexLegacy.steps.render.process(indexLegacy.frameData);
            indexLegacy.frameData.isProcessing = false;
          }
          didUpdate() {
            if (!this.updateScheduled) {
              this.updateScheduled = true;
              queueMicrotask(() => this.update());
            }
          }
          clearAllSnapshots() {
            this.nodes.forEach(clearSnapshot);
            this.sharedNodes.forEach(removeLeadSnapshots);
          }
          scheduleUpdateProjection() {
            indexLegacy.frame.preRender(this.updateProjection, false, true);
          }
          scheduleCheckAfterUnmount() {
            indexLegacy.frame.postRender(() => {
              if (this.isLayoutDirty) {
                this.root.didUpdate();
              } else {
                this.root.checkUpdateFailed();
              }
            });
          }
          /**
           * Update measurements
           */
          updateSnapshot() {
            if (this.snapshot || !this.instance)
              return;
            this.snapshot = this.measure();
          }
          updateLayout() {
            if (!this.instance)
              return;
            this.updateScroll();
            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
              return;
            }
            if (this.resumeFrom && !this.resumeFrom.instance) {
              for (let i = 0; i < this.path.length; i++) {
                const node = this.path[i];
                node.updateScroll();
              }
            }
            const prevLayout = this.layout;
            this.layout = this.measure(false);
            this.layoutCorrected = indexLegacy.createBox();
            this.isLayoutDirty = false;
            this.projectionDelta = void 0;
            this.notifyListeners("measure", this.layout.layoutBox);
            const { visualElement } = this.options;
            visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
          }
          updateScroll(phase = "measure") {
            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
            if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
              needsMeasurement = false;
            }
            if (needsMeasurement) {
              this.scroll = {
                animationId: this.root.animationId,
                phase,
                isRoot: checkIsScrollRoot(this.instance),
                offset: measureScroll(this.instance)
              };
            }
          }
          resetTransform() {
            if (!resetTransform)
              return;
            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
            const transformTemplate = this.getTransformTemplate();
            const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
            if (isResetRequested && (hasProjection || indexLegacy.hasTransform(this.latestValues) || transformTemplateHasChanged)) {
              resetTransform(this.instance, transformTemplateValue);
              this.shouldResetTransform = false;
              this.scheduleRender();
            }
          }
          measure(removeTransform = true) {
            const pageBox = this.measurePageBox();
            let layoutBox = this.removeElementScroll(pageBox);
            if (removeTransform) {
              layoutBox = this.removeTransform(layoutBox);
            }
            roundBox(layoutBox);
            return {
              animationId: this.root.animationId,
              measuredBox: pageBox,
              layoutBox,
              latestValues: {},
              source: this.id
            };
          }
          measurePageBox() {
            const { visualElement } = this.options;
            if (!visualElement)
              return indexLegacy.createBox();
            const box = visualElement.measureViewportBox();
            const { scroll } = this.root;
            if (scroll) {
              indexLegacy.translateAxis(box.x, scroll.offset.x);
              indexLegacy.translateAxis(box.y, scroll.offset.y);
            }
            return box;
          }
          removeElementScroll(box) {
            const boxWithoutScroll = indexLegacy.createBox();
            copyBoxInto(boxWithoutScroll, box);
            for (let i = 0; i < this.path.length; i++) {
              const node = this.path[i];
              const { scroll, options } = node;
              if (node !== this.root && scroll && options.layoutScroll) {
                if (scroll.isRoot) {
                  copyBoxInto(boxWithoutScroll, box);
                  const { scroll: rootScroll } = this.root;
                  if (rootScroll) {
                    indexLegacy.translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);
                    indexLegacy.translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);
                  }
                }
                indexLegacy.translateAxis(boxWithoutScroll.x, scroll.offset.x);
                indexLegacy.translateAxis(boxWithoutScroll.y, scroll.offset.y);
              }
            }
            return boxWithoutScroll;
          }
          applyTransform(box, transformOnly = false) {
            const withTransforms = indexLegacy.createBox();
            copyBoxInto(withTransforms, box);
            for (let i = 0; i < this.path.length; i++) {
              const node = this.path[i];
              if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {
                indexLegacy.transformBox(withTransforms, {
                  x: -node.scroll.offset.x,
                  y: -node.scroll.offset.y
                });
              }
              if (!indexLegacy.hasTransform(node.latestValues))
                continue;
              indexLegacy.transformBox(withTransforms, node.latestValues);
            }
            if (indexLegacy.hasTransform(this.latestValues)) {
              indexLegacy.transformBox(withTransforms, this.latestValues);
            }
            return withTransforms;
          }
          removeTransform(box) {
            const boxWithoutTransform = indexLegacy.createBox();
            copyBoxInto(boxWithoutTransform, box);
            for (let i = 0; i < this.path.length; i++) {
              const node = this.path[i];
              if (!node.instance)
                continue;
              if (!indexLegacy.hasTransform(node.latestValues))
                continue;
              indexLegacy.hasScale(node.latestValues) && node.updateSnapshot();
              const sourceBox = indexLegacy.createBox();
              const nodeBox = node.measurePageBox();
              copyBoxInto(sourceBox, nodeBox);
              removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : void 0, sourceBox);
            }
            if (indexLegacy.hasTransform(this.latestValues)) {
              removeBoxTransforms(boxWithoutTransform, this.latestValues);
            }
            return boxWithoutTransform;
          }
          setTargetDelta(delta) {
            this.targetDelta = delta;
            this.root.scheduleUpdateProjection();
            this.isProjectionDirty = true;
          }
          setOptions(options) {
            this.options = __spreadProps(__spreadValues(__spreadValues({}, this.options), options), {
              crossfade: options.crossfade !== void 0 ? options.crossfade : true
            });
          }
          clearMeasurements() {
            this.scroll = void 0;
            this.layout = void 0;
            this.snapshot = void 0;
            this.prevTransformTemplateValue = void 0;
            this.targetDelta = void 0;
            this.target = void 0;
            this.isLayoutDirty = false;
          }
          forceRelativeParentToResolveTarget() {
            if (!this.relativeParent)
              return;
            if (this.relativeParent.resolvedRelativeTargetAt !== indexLegacy.frameData.timestamp) {
              this.relativeParent.resolveTargetDelta(true);
            }
          }
          resolveTargetDelta(forceRecalculation = false) {
            var _a;
            const lead = this.getLead();
            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
            const isShared = Boolean(this.resumingFrom) || this !== lead;
            const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget);
            if (canSkip)
              return;
            const { layout: layout2, layoutId } = this.options;
            if (!this.layout || !(layout2 || layoutId))
              return;
            this.resolvedRelativeTargetAt = indexLegacy.frameData.timestamp;
            if (!this.targetDelta && !this.relativeTarget) {
              const relativeParent = this.getClosestProjectingParent();
              if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
                this.relativeParent = relativeParent;
                this.forceRelativeParentToResolveTarget();
                this.relativeTarget = indexLegacy.createBox();
                this.relativeTargetOrigin = indexLegacy.createBox();
                calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
                copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
              } else {
                this.relativeParent = this.relativeTarget = void 0;
              }
            }
            if (!this.relativeTarget && !this.targetDelta)
              return;
            if (!this.target) {
              this.target = indexLegacy.createBox();
              this.targetWithTransforms = indexLegacy.createBox();
            }
            if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
              this.forceRelativeParentToResolveTarget();
              calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
            } else if (this.targetDelta) {
              if (Boolean(this.resumingFrom)) {
                this.target = this.applyTransform(this.layout.layoutBox);
              } else {
                copyBoxInto(this.target, this.layout.layoutBox);
              }
              indexLegacy.applyBoxDelta(this.target, this.targetDelta);
            } else {
              copyBoxInto(this.target, this.layout.layoutBox);
            }
            if (this.attemptToResolveRelativeTarget) {
              this.attemptToResolveRelativeTarget = false;
              const relativeParent = this.getClosestProjectingParent();
              if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {
                this.relativeParent = relativeParent;
                this.forceRelativeParentToResolveTarget();
                this.relativeTarget = indexLegacy.createBox();
                this.relativeTargetOrigin = indexLegacy.createBox();
                calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
                copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
              } else {
                this.relativeParent = this.relativeTarget = void 0;
              }
            }
            projectionFrameData.resolvedTargetDeltas++;
          }
          getClosestProjectingParent() {
            if (!this.parent || indexLegacy.hasScale(this.parent.latestValues) || indexLegacy.has2DTranslate(this.parent.latestValues)) {
              return void 0;
            }
            if (this.parent.isProjecting()) {
              return this.parent;
            } else {
              return this.parent.getClosestProjectingParent();
            }
          }
          isProjecting() {
            return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
          }
          calcProjection() {
            var _a;
            const lead = this.getLead();
            const isShared = Boolean(this.resumingFrom) || this !== lead;
            let canSkip = true;
            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {
              canSkip = false;
            }
            if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
              canSkip = false;
            }
            if (this.resolvedRelativeTargetAt === indexLegacy.frameData.timestamp) {
              canSkip = false;
            }
            if (canSkip)
              return;
            const { layout: layout2, layoutId } = this.options;
            this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
            if (!this.isTreeAnimating) {
              this.targetDelta = this.relativeTarget = void 0;
            }
            if (!this.layout || !(layout2 || layoutId))
              return;
            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
            const prevTreeScaleX = this.treeScale.x;
            const prevTreeScaleY = this.treeScale.y;
            indexLegacy.applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
            if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
              lead.target = lead.layout.layoutBox;
            }
            const { target } = lead;
            if (!target) {
              if (this.projectionTransform) {
                this.projectionDelta = indexLegacy.createDelta();
                this.projectionTransform = "none";
                this.scheduleRender();
              }
              return;
            }
            if (!this.projectionDelta) {
              this.projectionDelta = indexLegacy.createDelta();
              this.projectionDeltaWithTransform = indexLegacy.createDelta();
            }
            const prevProjectionTransform = this.projectionTransform;
            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
            if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
              this.hasProjected = true;
              this.scheduleRender();
              this.notifyListeners("projectionUpdate", target);
            }
            projectionFrameData.recalculatedProjection++;
          }
          hide() {
            this.isVisible = false;
          }
          show() {
            this.isVisible = true;
          }
          scheduleRender(notifyAll = true) {
            this.options.scheduleRender && this.options.scheduleRender();
            if (notifyAll) {
              const stack = this.getStack();
              stack && stack.scheduleRender();
            }
            if (this.resumingFrom && !this.resumingFrom.instance) {
              this.resumingFrom = void 0;
            }
          }
          setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
            const snapshot = this.snapshot;
            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
            const mixedValues = __spreadValues({}, this.latestValues);
            const targetDelta = indexLegacy.createDelta();
            if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
              this.relativeTarget = this.relativeTargetOrigin = void 0;
            }
            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
            const relativeLayout = indexLegacy.createBox();
            const snapshotSource = snapshot ? snapshot.source : void 0;
            const layoutSource = this.layout ? this.layout.source : void 0;
            const isSharedLayoutAnimation = snapshotSource !== layoutSource;
            const stack = this.getStack();
            const isOnlyMember = !stack || stack.members.length <= 1;
            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
            this.animationProgress = 0;
            let prevRelativeTarget;
            this.mixTargetDelta = (latest) => {
              const progress = latest / 1e3;
              mixAxisDelta(targetDelta.x, delta.x, progress);
              mixAxisDelta(targetDelta.y, delta.y, progress);
              this.setTargetDelta(targetDelta);
              if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
                calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
                mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);
                if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
                  this.isProjectionDirty = false;
                }
                if (!prevRelativeTarget)
                  prevRelativeTarget = indexLegacy.createBox();
                copyBoxInto(prevRelativeTarget, this.relativeTarget);
              }
              if (isSharedLayoutAnimation) {
                this.animationValues = mixedValues;
                mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);
              }
              this.root.scheduleUpdateProjection();
              this.scheduleRender();
              this.animationProgress = progress;
            };
            this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
          }
          startAnimation(options) {
            this.notifyListeners("animationStart");
            this.currentAnimation && this.currentAnimation.stop();
            if (this.resumingFrom && this.resumingFrom.currentAnimation) {
              this.resumingFrom.currentAnimation.stop();
            }
            if (this.pendingAnimation) {
              indexLegacy.cancelFrame(this.pendingAnimation);
              this.pendingAnimation = void 0;
            }
            this.pendingAnimation = indexLegacy.frame.update(() => {
              globalProjectionState.hasAnimatedSinceResize = true;
              this.currentAnimation = indexLegacy.animateSingleValue(0, animationTarget, __spreadProps(__spreadValues({}, options), {
                onUpdate: (latest) => {
                  this.mixTargetDelta(latest);
                  options.onUpdate && options.onUpdate(latest);
                },
                onComplete: () => {
                  options.onComplete && options.onComplete();
                  this.completeAnimation();
                }
              }));
              if (this.resumingFrom) {
                this.resumingFrom.currentAnimation = this.currentAnimation;
              }
              this.pendingAnimation = void 0;
            });
          }
          completeAnimation() {
            if (this.resumingFrom) {
              this.resumingFrom.currentAnimation = void 0;
              this.resumingFrom.preserveOpacity = void 0;
            }
            const stack = this.getStack();
            stack && stack.exitAnimationComplete();
            this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
            this.notifyListeners("animationComplete");
          }
          finishAnimation() {
            if (this.currentAnimation) {
              this.mixTargetDelta && this.mixTargetDelta(animationTarget);
              this.currentAnimation.stop();
            }
            this.completeAnimation();
          }
          applyTransformsToTarget() {
            const lead = this.getLead();
            let { targetWithTransforms, target, layout: layout2, latestValues } = lead;
            if (!targetWithTransforms || !target || !layout2)
              return;
            if (this !== lead && this.layout && layout2 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout2.layoutBox)) {
              target = this.target || indexLegacy.createBox();
              const xLength = calcLength(this.layout.layoutBox.x);
              target.x.min = lead.target.x.min;
              target.x.max = target.x.min + xLength;
              const yLength = calcLength(this.layout.layoutBox.y);
              target.y.min = lead.target.y.min;
              target.y.max = target.y.min + yLength;
            }
            copyBoxInto(targetWithTransforms, target);
            indexLegacy.transformBox(targetWithTransforms, latestValues);
            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
          }
          registerSharedNode(layoutId, node) {
            if (!this.sharedNodes.has(layoutId)) {
              this.sharedNodes.set(layoutId, new NodeStack());
            }
            const stack = this.sharedNodes.get(layoutId);
            stack.add(node);
            const config = node.options.initialPromotionConfig;
            node.promote({
              transition: config ? config.transition : void 0,
              preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : void 0
            });
          }
          isLead() {
            const stack = this.getStack();
            return stack ? stack.lead === this : true;
          }
          getLead() {
            var _a;
            const { layoutId } = this.options;
            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;
          }
          getPrevLead() {
            var _a;
            const { layoutId } = this.options;
            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : void 0;
          }
          getStack() {
            const { layoutId } = this.options;
            if (layoutId)
              return this.root.sharedNodes.get(layoutId);
          }
          promote({ needsReset, transition, preserveFollowOpacity } = {}) {
            const stack = this.getStack();
            if (stack)
              stack.promote(this, preserveFollowOpacity);
            if (needsReset) {
              this.projectionDelta = void 0;
              this.needsReset = true;
            }
            if (transition)
              this.setOptions({ transition });
          }
          relegate() {
            const stack = this.getStack();
            if (stack) {
              return stack.relegate(this);
            } else {
              return false;
            }
          }
          resetRotation() {
            const { visualElement } = this.options;
            if (!visualElement)
              return;
            let hasRotate = false;
            const { latestValues } = visualElement;
            if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {
              hasRotate = true;
            }
            if (!hasRotate)
              return;
            const resetValues = {};
            for (let i = 0; i < transformAxes.length; i++) {
              const key = "rotate" + transformAxes[i];
              if (latestValues[key]) {
                resetValues[key] = latestValues[key];
                visualElement.setStaticValue(key, 0);
              }
            }
            visualElement.render();
            for (const key in resetValues) {
              visualElement.setStaticValue(key, resetValues[key]);
            }
            visualElement.scheduleRender();
          }
          getProjectionStyles(styleProp = {}) {
            var _a, _b;
            const styles = {};
            if (!this.instance || this.isSVG)
              return styles;
            if (!this.isVisible) {
              return { visibility: "hidden" };
            } else {
              styles.visibility = "";
            }
            const transformTemplate = this.getTransformTemplate();
            if (this.needsReset) {
              this.needsReset = false;
              styles.opacity = "";
              styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
              styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
              return styles;
            }
            const lead = this.getLead();
            if (!this.projectionDelta || !this.layout || !lead.target) {
              const emptyStyles = {};
              if (this.options.layoutId) {
                emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
                emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
              }
              if (this.hasProjected && !indexLegacy.hasTransform(this.latestValues)) {
                emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
                this.hasProjected = false;
              }
              return emptyStyles;
            }
            const valuesToRender = lead.animationValues || lead.latestValues;
            this.applyTransformsToTarget();
            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
            if (transformTemplate) {
              styles.transform = transformTemplate(valuesToRender, styles.transform);
            }
            const { x, y } = this.projectionDelta;
            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
            if (lead.animationValues) {
              styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
            } else {
              styles.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
            }
            for (const key in indexLegacy.scaleCorrectors) {
              if (valuesToRender[key] === void 0)
                continue;
              const { correct, applyTo } = indexLegacy.scaleCorrectors[key];
              const corrected = styles.transform === "none" ? valuesToRender[key] : correct(valuesToRender[key], lead);
              if (applyTo) {
                const num = applyTo.length;
                for (let i = 0; i < num; i++) {
                  styles[applyTo[i]] = corrected;
                }
              } else {
                styles[key] = corrected;
              }
            }
            if (this.options.layoutId) {
              styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none";
            }
            return styles;
          }
          clearSnapshot() {
            this.resumeFrom = this.snapshot = void 0;
          }
          // Only run on root
          resetTree() {
            this.root.nodes.forEach((node) => {
              var _a;
              return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();
            });
            this.root.nodes.forEach(clearMeasurements);
            this.root.sharedNodes.clear();
          }
        };
      }
      function updateLayout(node) {
        node.updateLayout();
      }
      function notifyLayoutUpdate(node) {
        var _a;
        const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;
        if (node.isLead() && node.layout && snapshot && node.hasListeners("didUpdate")) {
          const { layoutBox: layout2, measuredBox: measuredLayout } = node.layout;
          const { animationType } = node.options;
          const isShared = snapshot.source !== node.layout.source;
          if (animationType === "size") {
            eachAxis((axis) => {
              const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
              const length = calcLength(axisSnapshot);
              axisSnapshot.min = layout2[axis].min;
              axisSnapshot.max = axisSnapshot.min + length;
            });
          } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout2)) {
            eachAxis((axis) => {
              const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
              const length = calcLength(layout2[axis]);
              axisSnapshot.max = axisSnapshot.min + length;
              if (node.relativeTarget && !node.currentAnimation) {
                node.isProjectionDirty = true;
                node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;
              }
            });
          }
          const layoutDelta = indexLegacy.createDelta();
          calcBoxDelta(layoutDelta, layout2, snapshot.layoutBox);
          const visualDelta = indexLegacy.createDelta();
          if (isShared) {
            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);
          } else {
            calcBoxDelta(visualDelta, layout2, snapshot.layoutBox);
          }
          const hasLayoutChanged = !isDeltaZero(layoutDelta);
          let hasRelativeTargetChanged = false;
          if (!node.resumeFrom) {
            const relativeParent = node.getClosestProjectingParent();
            if (relativeParent && !relativeParent.resumeFrom) {
              const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
              if (parentSnapshot && parentLayout) {
                const relativeSnapshot = indexLegacy.createBox();
                calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
                const relativeLayout = indexLegacy.createBox();
                calcRelativePosition(relativeLayout, layout2, parentLayout.layoutBox);
                if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
                  hasRelativeTargetChanged = true;
                }
                if (relativeParent.options.layoutRoot) {
                  node.relativeTarget = relativeLayout;
                  node.relativeTargetOrigin = relativeSnapshot;
                  node.relativeParent = relativeParent;
                }
              }
            }
          }
          node.notifyListeners("didUpdate", {
            layout: layout2,
            snapshot,
            delta: visualDelta,
            layoutDelta,
            hasLayoutChanged,
            hasRelativeTargetChanged
          });
        } else if (node.isLead()) {
          const { onExitComplete } = node.options;
          onExitComplete && onExitComplete();
        }
        node.options.transition = void 0;
      }
      function propagateDirtyNodes(node) {
        projectionFrameData.totalNodes++;
        if (!node.parent)
          return;
        if (!node.isProjecting()) {
          node.isProjectionDirty = node.parent.isProjectionDirty;
        }
        node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));
        node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);
      }
      function cleanDirtyNodes(node) {
        node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;
      }
      function clearSnapshot(node) {
        node.clearSnapshot();
      }
      function clearMeasurements(node) {
        node.clearMeasurements();
      }
      function clearIsLayoutDirty(node) {
        node.isLayoutDirty = false;
      }
      function resetTransformStyle(node) {
        const { visualElement } = node.options;
        if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
          visualElement.notify("BeforeLayoutMeasure");
        }
        node.resetTransform();
      }
      function finishAnimation(node) {
        node.finishAnimation();
        node.targetDelta = node.relativeTarget = node.target = void 0;
        node.isProjectionDirty = true;
      }
      function resolveTargetDelta(node) {
        node.resolveTargetDelta();
      }
      function calcProjection(node) {
        node.calcProjection();
      }
      function resetRotation(node) {
        node.resetRotation();
      }
      function removeLeadSnapshots(stack) {
        stack.removeLeadSnapshot();
      }
      function mixAxisDelta(output, delta, p) {
        output.translate = indexLegacy.mix(delta.translate, 0, p);
        output.scale = indexLegacy.mix(delta.scale, 1, p);
        output.origin = delta.origin;
        output.originPoint = delta.originPoint;
      }
      function mixAxis(output, from, to, p) {
        output.min = indexLegacy.mix(from.min, to.min, p);
        output.max = indexLegacy.mix(from.max, to.max, p);
      }
      function mixBox(output, from, to, p) {
        mixAxis(output.x, from.x, to.x, p);
        mixAxis(output.y, from.y, to.y, p);
      }
      function hasOpacityCrossfade(node) {
        return node.animationValues && node.animationValues.opacityExit !== void 0;
      }
      var defaultLayoutTransition = {
        duration: 0.45,
        ease: [0.4, 0, 0.1, 1]
      };
      var userAgentContains = (string) => typeof navigator !== "undefined" && navigator.userAgent.toLowerCase().includes(string);
      var roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : indexLegacy.noop;
      function roundAxis(axis) {
        axis.min = roundPoint(axis.min);
        axis.max = roundPoint(axis.max);
      }
      function roundBox(box) {
        roundAxis(box.x);
        roundAxis(box.y);
      }
      function shouldAnimatePositionOnly(animationType, snapshot, layout2) {
        return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout2), 0.2);
      }
      var DocumentProjectionNode = createProjectionNode({
        attachResizeListener: (ref, notify2) => addDomEvent(ref, "resize", notify2),
        measureScroll: () => ({
          x: document.documentElement.scrollLeft || document.body.scrollLeft,
          y: document.documentElement.scrollTop || document.body.scrollTop
        }),
        checkIsScrollRoot: () => true
      });
      var rootProjectionNode = {
        current: void 0
      };
      var HTMLProjectionNode = createProjectionNode({
        measureScroll: (instance) => ({
          x: instance.scrollLeft,
          y: instance.scrollTop
        }),
        defaultParent: () => {
          if (!rootProjectionNode.current) {
            const documentNode = new DocumentProjectionNode({});
            documentNode.mount(window);
            documentNode.setOptions({ layoutScroll: true });
            rootProjectionNode.current = documentNode;
          }
          return rootProjectionNode.current;
        },
        resetTransform: (instance, value) => {
          instance.style.transform = value !== void 0 ? value : "none";
        },
        checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
      });
      var notify = (node) => !node.isLayoutDirty && node.willUpdate(false);
      function nodeGroup() {
        const nodes = /* @__PURE__ */ new Set();
        const subscriptions = /* @__PURE__ */ new WeakMap();
        const dirtyAll = () => nodes.forEach(notify);
        return {
          add: (node) => {
            nodes.add(node);
            subscriptions.set(node, node.addEventListener("willUpdate", dirtyAll));
          },
          remove: (node) => {
            nodes.delete(node);
            const unsubscribe = subscriptions.get(node);
            if (unsubscribe) {
              unsubscribe();
              subscriptions.delete(node);
            }
            dirtyAll();
          },
          dirty: dirtyAll
        };
      }
      function pixelsToPercent(pixels, axis) {
        if (axis.max === axis.min)
          return 0;
        return pixels / (axis.max - axis.min) * 100;
      }
      var correctBorderRadius = {
        correct: (latest, node) => {
          if (!node.target)
            return latest;
          if (typeof latest === "string") {
            if (indexLegacy.px.test(latest)) {
              latest = parseFloat(latest);
            } else {
              return latest;
            }
          }
          const x = pixelsToPercent(latest, node.target.x);
          const y = pixelsToPercent(latest, node.target.y);
          return `${x}% ${y}%`;
        }
      };
      var correctBoxShadow = {
        correct: (latest, { treeScale, projectionDelta }) => {
          const original = latest;
          const shadow = indexLegacy.complex.parse(latest);
          if (shadow.length > 5)
            return original;
          const template = indexLegacy.complex.createTransformer(latest);
          const offset = typeof shadow[0] !== "number" ? 1 : 0;
          const xScale = projectionDelta.x.scale * treeScale.x;
          const yScale = projectionDelta.y.scale * treeScale.y;
          shadow[0 + offset] /= xScale;
          shadow[1 + offset] /= yScale;
          const averageScale = indexLegacy.mix(xScale, yScale, 0.5);
          if (typeof shadow[2 + offset] === "number")
            shadow[2 + offset] /= averageScale;
          if (typeof shadow[3 + offset] === "number")
            shadow[3 + offset] /= averageScale;
          return template(shadow);
        }
      };
      function usePresence() {
        const context = React3.useContext(PresenceContext);
        if (context === null)
          return [true, null];
        const { isPresent: isPresent2, onExitComplete, register } = context;
        const id2 = React3.useId();
        React3.useEffect(() => register(id2), []);
        const safeToRemove = () => onExitComplete && onExitComplete(id2);
        return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
      }
      function useIsPresent() {
        return isPresent(React3.useContext(PresenceContext));
      }
      function isPresent(context) {
        return context === null ? true : context.isPresent;
      }
      var MeasureLayoutWithContext = class extends React__default["default"].Component {
        /**
         * This only mounts projection nodes for components that
         * need measuring, we might want to do it for all components
         * in order to incorporate transforms
         */
        componentDidMount() {
          const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
          const { projection } = visualElement;
          indexLegacy.addScaleCorrector(defaultScaleCorrectors);
          if (projection) {
            if (layoutGroup.group)
              layoutGroup.group.add(projection);
            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
              switchLayoutGroup.register(projection);
            }
            projection.root.didUpdate();
            projection.addEventListener("animationComplete", () => {
              this.safeToRemove();
            });
            projection.setOptions(__spreadProps(__spreadValues({}, projection.options), {
              onExitComplete: () => this.safeToRemove()
            }));
          }
          globalProjectionState.hasEverUpdated = true;
        }
        getSnapshotBeforeUpdate(prevProps) {
          const { layoutDependency, visualElement, drag: drag2, isPresent: isPresent2 } = this.props;
          const projection = visualElement.projection;
          if (!projection)
            return null;
          projection.isPresent = isPresent2;
          if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
            projection.willUpdate();
          } else {
            this.safeToRemove();
          }
          if (prevProps.isPresent !== isPresent2) {
            if (isPresent2) {
              projection.promote();
            } else if (!projection.relegate()) {
              indexLegacy.frame.postRender(() => {
                const stack = projection.getStack();
                if (!stack || !stack.members.length) {
                  this.safeToRemove();
                }
              });
            }
          }
          return null;
        }
        componentDidUpdate() {
          const { projection } = this.props.visualElement;
          if (projection) {
            projection.root.didUpdate();
            queueMicrotask(() => {
              if (!projection.currentAnimation && projection.isLead()) {
                this.safeToRemove();
              }
            });
          }
        }
        componentWillUnmount() {
          const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
          const { projection } = visualElement;
          if (projection) {
            projection.scheduleCheckAfterUnmount();
            if (layoutGroup && layoutGroup.group)
              layoutGroup.group.remove(projection);
            if (promoteContext && promoteContext.deregister)
              promoteContext.deregister(projection);
          }
        }
        safeToRemove() {
          const { safeToRemove } = this.props;
          safeToRemove && safeToRemove();
        }
        render() {
          return null;
        }
      };
      function MeasureLayout(props) {
        const [isPresent2, safeToRemove] = usePresence();
        const layoutGroup = React3.useContext(LayoutGroupContext);
        return React__default["default"].createElement(MeasureLayoutWithContext, __spreadProps(__spreadValues({}, props), { layoutGroup, switchLayoutGroup: React3.useContext(SwitchLayoutGroupContext), isPresent: isPresent2, safeToRemove }));
      }
      var defaultScaleCorrectors = {
        borderRadius: __spreadProps(__spreadValues({}, correctBorderRadius), {
          applyTo: [
            "borderTopLeftRadius",
            "borderTopRightRadius",
            "borderBottomLeftRadius",
            "borderBottomRightRadius"
          ]
        }),
        borderTopLeftRadius: correctBorderRadius,
        borderTopRightRadius: correctBorderRadius,
        borderBottomLeftRadius: correctBorderRadius,
        borderBottomRightRadius: correctBorderRadius,
        boxShadow: correctBoxShadow
      };
      var drag = {
        pan: {
          Feature: PanGesture
        },
        drag: {
          Feature: DragGesture,
          ProjectionNode: HTMLProjectionNode,
          MeasureLayout
        }
      };
      var createDomVisualElement = (Component, options) => {
        return isSVGComponent(Component) ? new indexLegacy.SVGVisualElement(options, { enableHardwareAcceleration: false }) : new indexLegacy.HTMLVisualElement(options, { enableHardwareAcceleration: true });
      };
      var layout = {
        layout: {
          ProjectionNode: HTMLProjectionNode,
          MeasureLayout
        }
      };
      var preloadedFeatures = __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, animations), gestureAnimations), drag), layout);
      var motion = /* @__PURE__ */ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));
      function createDomMotionComponent(key) {
        return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));
      }
      var m = createMotionProxy(createDomMotionConfig);
      function useIsMounted() {
        const isMounted = React3.useRef(false);
        useIsomorphicLayoutEffect(() => {
          isMounted.current = true;
          return () => {
            isMounted.current = false;
          };
        }, []);
        return isMounted;
      }
      function useForceUpdate() {
        const isMounted = useIsMounted();
        const [forcedRenderCount, setForcedRenderCount] = React3.useState(0);
        const forceRender = React3.useCallback(() => {
          isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
        }, [forcedRenderCount]);
        const deferredForceRender = React3.useCallback(() => indexLegacy.frame.postRender(forceRender), [forceRender]);
        return [deferredForceRender, forcedRenderCount];
      }
      var PopChildMeasure = class extends React__namespace.Component {
        getSnapshotBeforeUpdate(prevProps) {
          const element = this.props.childRef.current;
          if (element && prevProps.isPresent && !this.props.isPresent) {
            const size = this.props.sizeRef.current;
            size.height = element.offsetHeight || 0;
            size.width = element.offsetWidth || 0;
            size.top = element.offsetTop;
            size.left = element.offsetLeft;
          }
          return null;
        }
        /**
         * Required with getSnapshotBeforeUpdate to stop React complaining.
         */
        componentDidUpdate() {
        }
        render() {
          return this.props.children;
        }
      };
      function PopChild({ children, isPresent: isPresent2 }) {
        const id2 = React3.useId();
        const ref = React3.useRef(null);
        const size = React3.useRef({
          width: 0,
          height: 0,
          top: 0,
          left: 0
        });
        React3.useInsertionEffect(() => {
          const { width, height, top, left } = size.current;
          if (isPresent2 || !ref.current || !width || !height)
            return;
          ref.current.dataset.motionPopId = id2;
          const style = document.createElement("style");
          document.head.appendChild(style);
          if (style.sheet) {
            style.sheet.insertRule(`
          [data-motion-pop-id="${id2}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
          }
          return () => {
            document.head.removeChild(style);
          };
        }, [isPresent2]);
        return React__namespace.createElement(PopChildMeasure, { isPresent: isPresent2, childRef: ref, sizeRef: size }, React__namespace.cloneElement(children, { ref }));
      }
      var PresenceChild = ({ children, initial, isPresent: isPresent2, onExitComplete, custom, presenceAffectsLayout, mode }) => {
        const presenceChildren = useConstant(newChildrenMap);
        const id2 = React3.useId();
        const context = React3.useMemo(
          () => ({
            id: id2,
            initial,
            isPresent: isPresent2,
            custom,
            onExitComplete: (childId) => {
              presenceChildren.set(childId, true);
              for (const isComplete of presenceChildren.values()) {
                if (!isComplete)
                  return;
              }
              onExitComplete && onExitComplete();
            },
            register: (childId) => {
              presenceChildren.set(childId, false);
              return () => presenceChildren.delete(childId);
            }
          }),
          /**
           * If the presence of a child affects the layout of the components around it,
           * we want to make a new context value to ensure they get re-rendered
           * so they can detect that layout change.
           */
          presenceAffectsLayout ? void 0 : [isPresent2]
        );
        React3.useMemo(() => {
          presenceChildren.forEach((_, key) => presenceChildren.set(key, false));
        }, [isPresent2]);
        React__namespace.useEffect(() => {
          !isPresent2 && !presenceChildren.size && onExitComplete && onExitComplete();
        }, [isPresent2]);
        if (mode === "popLayout") {
          children = React__namespace.createElement(PopChild, { isPresent: isPresent2 }, children);
        }
        return React__namespace.createElement(PresenceContext.Provider, { value: context }, children);
      };
      function newChildrenMap() {
        return /* @__PURE__ */ new Map();
      }
      function useUnmountEffect(callback) {
        return React3.useEffect(() => () => callback(), []);
      }
      var getChildKey = (child) => child.key || "";
      function updateChildLookup(children, allChildren) {
        children.forEach((child) => {
          const key = getChildKey(child);
          allChildren.set(key, child);
        });
      }
      function onlyElements(children) {
        const filtered = [];
        React3.Children.forEach(children, (child) => {
          if (React3.isValidElement(child))
            filtered.push(child);
        });
        return filtered;
      }
      var AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = "sync" }) => {
        indexLegacy.invariant(!exitBeforeEnter, "Replace exitBeforeEnter with mode='wait'");
        const forceRender = React3.useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];
        const isMounted = useIsMounted();
        const filteredChildren = onlyElements(children);
        let childrenToRender = filteredChildren;
        const exitingChildren = React3.useRef(/* @__PURE__ */ new Map()).current;
        const presentChildren = React3.useRef(childrenToRender);
        const allChildren = React3.useRef(/* @__PURE__ */ new Map()).current;
        const isInitialRender = React3.useRef(true);
        useIsomorphicLayoutEffect(() => {
          isInitialRender.current = false;
          updateChildLookup(filteredChildren, allChildren);
          presentChildren.current = childrenToRender;
        });
        useUnmountEffect(() => {
          isInitialRender.current = true;
          allChildren.clear();
          exitingChildren.clear();
        });
        if (isInitialRender.current) {
          return React__namespace.createElement(React__namespace.Fragment, null, childrenToRender.map((child) => React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout, mode }, child)));
        }
        childrenToRender = [...childrenToRender];
        const presentKeys = presentChildren.current.map(getChildKey);
        const targetKeys = filteredChildren.map(getChildKey);
        const numPresent = presentKeys.length;
        for (let i = 0; i < numPresent; i++) {
          const key = presentKeys[i];
          if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {
            exitingChildren.set(key, void 0);
          }
        }
        if (mode === "wait" && exitingChildren.size) {
          childrenToRender = [];
        }
        exitingChildren.forEach((component, key) => {
          if (targetKeys.indexOf(key) !== -1)
            return;
          const child = allChildren.get(key);
          if (!child)
            return;
          const insertionIndex = presentKeys.indexOf(key);
          let exitingComponent = component;
          if (!exitingComponent) {
            const onExit = () => {
              allChildren.delete(key);
              exitingChildren.delete(key);
              const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);
              presentChildren.current.splice(removeIndex, 1);
              if (!exitingChildren.size) {
                presentChildren.current = filteredChildren;
                if (isMounted.current === false)
                  return;
                forceRender();
                onExitComplete && onExitComplete();
              }
            };
            exitingComponent = React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout, mode }, child);
            exitingChildren.set(key, exitingComponent);
          }
          childrenToRender.splice(insertionIndex, 0, exitingComponent);
        });
        childrenToRender = childrenToRender.map((child) => {
          const key = child.key;
          return exitingChildren.has(key) ? child : React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout, mode }, child);
        });
        if (mode === "wait" && childrenToRender.length > 1) {
          console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
        }
        return React__namespace.createElement(React__namespace.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map((child) => React3.cloneElement(child)));
      };
      function MotionConfig(_a) {
        var _b = _a, { children, isValidProp } = _b, config = __objRest(_b, ["children", "isValidProp"]);
        isValidProp && loadExternalIsValidProp(isValidProp);
        config = __spreadValues(__spreadValues({}, React3.useContext(MotionConfigContext)), config);
        config.isStatic = useConstant(() => config.isStatic);
        const context = React3.useMemo(() => config, [JSON.stringify(config.transition), config.transformPagePoint, config.reducedMotion]);
        return React__namespace.createElement(MotionConfigContext.Provider, { value: context }, children);
      }
      function LazyMotion({ children, features, strict = false }) {
        const [, setIsLoaded] = React3.useState(!isLazyBundle(features));
        const loadedRenderer = React3.useRef(void 0);
        if (!isLazyBundle(features)) {
          const _a = features, { renderer } = _a, loadedFeatures = __objRest(_a, ["renderer"]);
          loadedRenderer.current = renderer;
          loadFeatures(loadedFeatures);
        }
        React3.useEffect(() => {
          if (isLazyBundle(features)) {
            features().then((_a2) => {
              var _b = _a2, { renderer } = _b, loadedFeatures = __objRest(_b, ["renderer"]);
              loadFeatures(loadedFeatures);
              loadedRenderer.current = renderer;
              setIsLoaded(true);
            });
          }
        }, []);
        return React__namespace.createElement(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict } }, children);
      }
      function isLazyBundle(features) {
        return typeof features === "function";
      }
      var DeprecatedLayoutGroupContext = React3.createContext(null);
      var shouldInheritGroup = (inherit) => inherit === true;
      var shouldInheritId = (inherit) => shouldInheritGroup(inherit === true) || inherit === "id";
      var LayoutGroup = ({ children, id: id2, inherit = true }) => {
        const layoutGroupContext = React3.useContext(LayoutGroupContext);
        const deprecatedLayoutGroupContext = React3.useContext(DeprecatedLayoutGroupContext);
        const [forceRender, key] = useForceUpdate();
        const context = React3.useRef(null);
        const upstreamId = layoutGroupContext.id || deprecatedLayoutGroupContext;
        if (context.current === null) {
          if (shouldInheritId(inherit) && upstreamId) {
            id2 = id2 ? upstreamId + "-" + id2 : upstreamId;
          }
          context.current = {
            id: id2,
            group: shouldInheritGroup(inherit) ? layoutGroupContext.group || nodeGroup() : nodeGroup()
          };
        }
        const memoizedContext = React3.useMemo(() => __spreadProps(__spreadValues({}, context.current), { forceRender }), [key]);
        return React__namespace.createElement(LayoutGroupContext.Provider, { value: memoizedContext }, children);
      };
      var ReorderContext = React3.createContext(null);
      function checkReorder(order, value, offset, velocity) {
        if (!velocity)
          return order;
        const index3 = order.findIndex((item2) => item2.value === value);
        if (index3 === -1)
          return order;
        const nextOffset = velocity > 0 ? 1 : -1;
        const nextItem = order[index3 + nextOffset];
        if (!nextItem)
          return order;
        const item = order[index3];
        const nextLayout = nextItem.layout;
        const nextItemCenter = indexLegacy.mix(nextLayout.min, nextLayout.max, 0.5);
        if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {
          return indexLegacy.moveItem(order, index3, index3 + nextOffset);
        }
        return order;
      }
      function ReorderGroup(_a, externalRef) {
        var _b = _a, { children, as = "ul", axis = "y", onReorder, values } = _b, props = __objRest(_b, ["children", "as", "axis", "onReorder", "values"]);
        const Component = useConstant(() => motion(as));
        const order = [];
        const isReordering = React3.useRef(false);
        indexLegacy.invariant(Boolean(values), "Reorder.Group must be provided a values prop");
        const context = {
          axis,
          registerItem: (value, layout2) => {
            if (layout2 && order.findIndex((entry) => value === entry.value) === -1) {
              order.push({ value, layout: layout2[axis] });
              order.sort(compareMin);
            }
          },
          updateOrder: (id2, offset, velocity) => {
            if (isReordering.current)
              return;
            const newOrder = checkReorder(order, id2, offset, velocity);
            if (order !== newOrder) {
              isReordering.current = true;
              onReorder(newOrder.map(getValue).filter((value) => values.indexOf(value) !== -1));
            }
          }
        };
        React3.useEffect(() => {
          isReordering.current = false;
        });
        return React__namespace.createElement(
          Component,
          __spreadProps(__spreadValues({}, props), { ref: externalRef, ignoreStrict: true }),
          React__namespace.createElement(ReorderContext.Provider, { value: context }, children)
        );
      }
      var Group = React3.forwardRef(ReorderGroup);
      function getValue(item) {
        return item.value;
      }
      function compareMin(a, b) {
        return a.layout.min - b.layout.min;
      }
      function useMotionValue(initial) {
        const value = useConstant(() => indexLegacy.motionValue(initial));
        const { isStatic } = React3.useContext(MotionConfigContext);
        if (isStatic) {
          const [, setLatest] = React3.useState(initial);
          React3.useEffect(() => value.on("change", setLatest), []);
        }
        return value;
      }
      function useCombineMotionValues(values, combineValues) {
        const value = useMotionValue(combineValues());
        const updateValue = () => value.set(combineValues());
        updateValue();
        useIsomorphicLayoutEffect(() => {
          const scheduleUpdate = () => indexLegacy.frame.update(updateValue, false, true);
          const subscriptions = values.map((v) => v.on("change", scheduleUpdate));
          return () => {
            subscriptions.forEach((unsubscribe) => unsubscribe());
            indexLegacy.cancelFrame(updateValue);
          };
        });
        return value;
      }
      function useComputed(compute) {
        indexLegacy.collectMotionValues.current = [];
        compute();
        const value = useCombineMotionValues(indexLegacy.collectMotionValues.current, compute);
        indexLegacy.collectMotionValues.current = void 0;
        return value;
      }
      function useTransform(input, inputRangeOrTransformer, outputRange, options) {
        if (typeof input === "function") {
          return useComputed(input);
        }
        const transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : indexLegacy.transform(inputRangeOrTransformer, outputRange, options);
        return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], ([latest]) => transformer(latest));
      }
      function useListTransform(values, transformer) {
        const latest = useConstant(() => []);
        return useCombineMotionValues(values, () => {
          latest.length = 0;
          const numValues = values.length;
          for (let i = 0; i < numValues; i++) {
            latest[i] = values[i].get();
          }
          return transformer(latest);
        });
      }
      function useDefaultMotionValue(value, defaultValue = 0) {
        return indexLegacy.isMotionValue(value) ? value : useMotionValue(defaultValue);
      }
      function ReorderItem(_a, externalRef) {
        var _b = _a, { children, style = {}, value, as = "li", onDrag, layout: layout2 = true } = _b, props = __objRest(_b, ["children", "style", "value", "as", "onDrag", "layout"]);
        const Component = useConstant(() => motion(as));
        const context = React3.useContext(ReorderContext);
        const point = {
          x: useDefaultMotionValue(style.x),
          y: useDefaultMotionValue(style.y)
        };
        const zIndex = useTransform([point.x, point.y], ([latestX, latestY]) => latestX || latestY ? 1 : "unset");
        const measuredLayout = React3.useRef(null);
        indexLegacy.invariant(Boolean(context), "Reorder.Item must be a child of Reorder.Group");
        const { axis, registerItem, updateOrder } = context;
        React3.useEffect(() => {
          registerItem(value, measuredLayout.current);
        }, [context]);
        return React__namespace.createElement(Component, __spreadProps(__spreadValues({ drag: axis }, props), { dragSnapToOrigin: true, style: __spreadProps(__spreadValues({}, style), { x: point.x, y: point.y, zIndex }), layout: layout2, onDrag: (event, gesturePoint) => {
          const { velocity } = gesturePoint;
          velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);
          onDrag && onDrag(event, gesturePoint);
        }, onLayoutMeasure: (measured) => {
          measuredLayout.current = measured;
        }, ref: externalRef, ignoreStrict: true }), children);
      }
      var Item = React3.forwardRef(ReorderItem);
      var Reorder = {
        Group,
        Item
      };
      var domAnimation = __spreadValues(__spreadValues({
        renderer: createDomVisualElement
      }, animations), gestureAnimations);
      var domMax = __spreadValues(__spreadValues(__spreadValues({}, domAnimation), drag), layout);
      function useMotionTemplate(fragments, ...values) {
        const numFragments = fragments.length;
        function buildValue() {
          let output = ``;
          for (let i = 0; i < numFragments; i++) {
            output += fragments[i];
            const value = values[i];
            if (value) {
              output += indexLegacy.isMotionValue(value) ? value.get() : value;
            }
          }
          return output;
        }
        return useCombineMotionValues(values.filter(indexLegacy.isMotionValue), buildValue);
      }
      function useSpring(source, config = {}) {
        const { isStatic } = React3.useContext(MotionConfigContext);
        const activeSpringAnimation = React3.useRef(null);
        const value = useMotionValue(indexLegacy.isMotionValue(source) ? source.get() : source);
        const stopAnimation2 = () => {
          if (activeSpringAnimation.current) {
            activeSpringAnimation.current.stop();
          }
        };
        React3.useInsertionEffect(() => {
          return value.attach((v, set) => {
            if (isStatic)
              return set(v);
            stopAnimation2();
            activeSpringAnimation.current = indexLegacy.animateValue(__spreadProps(__spreadValues({
              keyframes: [value.get(), v],
              velocity: value.getVelocity(),
              type: "spring",
              restDelta: 1e-3,
              restSpeed: 0.01
            }, config), {
              onUpdate: set
            }));
            if (!indexLegacy.frameData.isProcessing) {
              const delta = performance.now() - indexLegacy.frameData.timestamp;
              if (delta < 30) {
                activeSpringAnimation.current.time = indexLegacy.millisecondsToSeconds(delta);
              }
            }
            return value.get();
          }, stopAnimation2);
        }, [JSON.stringify(config)]);
        useIsomorphicLayoutEffect(() => {
          if (indexLegacy.isMotionValue(source)) {
            return source.on("change", (v) => value.set(parseFloat(v)));
          }
        }, [value]);
        return value;
      }
      function useMotionValueEvent(value, event, callback) {
        React3.useInsertionEffect(() => value.on(event, callback), [value, event, callback]);
      }
      function useVelocity(value) {
        const velocity = useMotionValue(value.getVelocity());
        useMotionValueEvent(value, "velocityChange", (newVelocity) => {
          velocity.set(newVelocity);
        });
        return velocity;
      }
      function refWarning(name, ref) {
        indexLegacy.warning(Boolean(!ref || ref.current), `You have defined a ${name} options but the provided ref is not yet hydrated, probably because it's defined higher up the tree. Try calling useScroll() in the same component as the ref, or setting its \`layoutEffect: false\` option.`);
      }
      var createScrollMotionValues = () => ({
        scrollX: indexLegacy.motionValue(0),
        scrollY: indexLegacy.motionValue(0),
        scrollXProgress: indexLegacy.motionValue(0),
        scrollYProgress: indexLegacy.motionValue(0)
      });
      function useScroll(_a = {}) {
        var _b = _a, { container, target, layoutEffect = true } = _b, options = __objRest(_b, ["container", "target", "layoutEffect"]);
        const values = useConstant(createScrollMotionValues);
        const useLifecycleEffect = layoutEffect ? useIsomorphicLayoutEffect : React3.useEffect;
        useLifecycleEffect(() => {
          refWarning("target", target);
          refWarning("container", container);
          return indexLegacy.scrollInfo(({ x, y }) => {
            values.scrollX.set(x.current);
            values.scrollXProgress.set(x.progress);
            values.scrollY.set(y.current);
            values.scrollYProgress.set(y.progress);
          }, __spreadProps(__spreadValues({}, options), {
            container: (container === null || container === void 0 ? void 0 : container.current) || void 0,
            target: (target === null || target === void 0 ? void 0 : target.current) || void 0
          }));
        }, [container, target, JSON.stringify(options.offset)]);
        return values;
      }
      function useElementScroll(ref) {
        if (true) {
          indexLegacy.warnOnce(false, "useElementScroll is deprecated. Convert to useScroll({ container: ref }).");
        }
        return useScroll({ container: ref });
      }
      function useViewportScroll() {
        if (true) {
          indexLegacy.warnOnce(false, "useViewportScroll is deprecated. Convert to useScroll().");
        }
        return useScroll();
      }
      function useAnimationFrame(callback) {
        const initialTimestamp = React3.useRef(0);
        const { isStatic } = React3.useContext(MotionConfigContext);
        React3.useEffect(() => {
          if (isStatic)
            return;
          const provideTimeSinceStart = ({ timestamp, delta }) => {
            if (!initialTimestamp.current)
              initialTimestamp.current = timestamp;
            callback(timestamp - initialTimestamp.current, delta);
          };
          indexLegacy.frame.update(provideTimeSinceStart, true);
          return () => indexLegacy.cancelFrame(provideTimeSinceStart);
        }, [callback]);
      }
      function useTime() {
        const time = useMotionValue(0);
        useAnimationFrame((t) => time.set(t));
        return time;
      }
      var WillChangeMotionValue = class extends indexLegacy.MotionValue {
        constructor() {
          super(...arguments);
          this.members = [];
          this.transforms = /* @__PURE__ */ new Set();
        }
        add(name) {
          let memberName;
          if (indexLegacy.transformProps.has(name)) {
            this.transforms.add(name);
            memberName = "transform";
          } else if (!name.startsWith("origin") && !indexLegacy.isCSSVariableName(name) && name !== "willChange") {
            memberName = indexLegacy.camelToDash(name);
          }
          if (memberName) {
            indexLegacy.addUniqueItem(this.members, memberName);
            this.update();
          }
        }
        remove(name) {
          if (indexLegacy.transformProps.has(name)) {
            this.transforms.delete(name);
            if (!this.transforms.size) {
              indexLegacy.removeItem(this.members, "transform");
            }
          } else {
            indexLegacy.removeItem(this.members, indexLegacy.camelToDash(name));
          }
          this.update();
        }
        update() {
          this.set(this.members.length ? this.members.join(", ") : "auto");
        }
      };
      function useWillChange() {
        return useConstant(() => new WillChangeMotionValue("auto"));
      }
      function useReducedMotion() {
        !indexLegacy.hasReducedMotionListener.current && indexLegacy.initPrefersReducedMotion();
        const [shouldReduceMotion] = React3.useState(indexLegacy.prefersReducedMotion.current);
        if (true) {
          indexLegacy.warnOnce(shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
        }
        return shouldReduceMotion;
      }
      function useReducedMotionConfig() {
        const reducedMotionPreference = useReducedMotion();
        const { reducedMotion } = React3.useContext(MotionConfigContext);
        if (reducedMotion === "never") {
          return false;
        } else if (reducedMotion === "always") {
          return true;
        } else {
          return reducedMotionPreference;
        }
      }
      function stopAnimation(visualElement) {
        visualElement.values.forEach((value) => value.stop());
      }
      function animationControls() {
        let hasMounted = false;
        const subscribers = /* @__PURE__ */ new Set();
        const controls = {
          subscribe(visualElement) {
            subscribers.add(visualElement);
            return () => void subscribers.delete(visualElement);
          },
          start(definition, transitionOverride) {
            indexLegacy.invariant(hasMounted, "controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.");
            const animations2 = [];
            subscribers.forEach((visualElement) => {
              animations2.push(animateVisualElement(visualElement, definition, {
                transitionOverride
              }));
            });
            return Promise.all(animations2);
          },
          set(definition) {
            indexLegacy.invariant(hasMounted, "controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.");
            return subscribers.forEach((visualElement) => {
              indexLegacy.setValues(visualElement, definition);
            });
          },
          stop() {
            subscribers.forEach((visualElement) => {
              stopAnimation(visualElement);
            });
          },
          mount() {
            hasMounted = true;
            return () => {
              hasMounted = false;
              controls.stop();
            };
          }
        };
        return controls;
      }
      function useAnimate() {
        const scope = useConstant(() => ({
          current: null,
          animations: []
        }));
        const animate = useConstant(() => indexLegacy.createScopedAnimate(scope));
        useUnmountEffect(() => {
          scope.animations.forEach((animation) => animation.stop());
        });
        return [scope, animate];
      }
      function useAnimationControls() {
        const controls = useConstant(animationControls);
        useIsomorphicLayoutEffect(controls.mount, []);
        return controls;
      }
      var useAnimation = useAnimationControls;
      function useCycle(...items) {
        const index3 = React3.useRef(0);
        const [item, setItem] = React3.useState(items[index3.current]);
        const runCycle = React3.useCallback(
          (next) => {
            index3.current = typeof next !== "number" ? indexLegacy.wrap(0, items.length, index3.current + 1) : next;
            setItem(items[index3.current]);
          },
          // The array will change on each call, but by putting items.length at
          // the front of this array, we guarantee the dependency comparison will match up
          // eslint-disable-next-line react-hooks/exhaustive-deps
          [items.length, ...items]
        );
        return [item, runCycle];
      }
      function useInView(ref, { root, margin, amount, once = false } = {}) {
        const [isInView, setInView] = React3.useState(false);
        React3.useEffect(() => {
          if (!ref.current || once && isInView)
            return;
          const onEnter = () => {
            setInView(true);
            return once ? void 0 : () => setInView(false);
          };
          const options = {
            root: root && root.current || void 0,
            margin,
            amount
          };
          return indexLegacy.inView(ref.current, onEnter, options);
        }, [root, ref, margin, once]);
        return isInView;
      }
      var DragControls = class {
        constructor() {
          this.componentControls = /* @__PURE__ */ new Set();
        }
        /**
         * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.
         *
         * @internal
         */
        subscribe(controls) {
          this.componentControls.add(controls);
          return () => this.componentControls.delete(controls);
        }
        /**
         * Start a drag gesture on every `motion` component that has this set of drag controls
         * passed into it via the `dragControls` prop.
         *
         * ```jsx
         * dragControls.start(e, {
         *   snapToCursor: true
         * })
         * ```
         *
         * @param event - PointerEvent
         * @param options - Options
         *
         * @public
         */
        start(event, options) {
          this.componentControls.forEach((controls) => {
            controls.start(event.nativeEvent || event, options);
          });
        }
      };
      var createDragControls = () => new DragControls();
      function useDragControls() {
        return useConstant(createDragControls);
      }
      function useDomEvent(ref, eventName, handler, options) {
        React3.useEffect(() => {
          const element = ref.current;
          if (handler && element) {
            return addDomEvent(element, eventName, handler, options);
          }
        }, [ref, eventName, handler, options]);
      }
      function isMotionComponent(component) {
        return component !== null && typeof component === "object" && motionComponentSymbol in component;
      }
      function unwrapMotionComponent(component) {
        if (isMotionComponent(component)) {
          return component[motionComponentSymbol];
        }
        return void 0;
      }
      function useInstantLayoutTransition() {
        return startTransition;
      }
      function startTransition(callback) {
        if (!rootProjectionNode.current)
          return;
        rootProjectionNode.current.isUpdating = false;
        rootProjectionNode.current.blockUpdate();
        callback && callback();
      }
      function useInstantTransition() {
        const [forceUpdate, forcedRenderCount] = useForceUpdate();
        const startInstantLayoutTransition = useInstantLayoutTransition();
        const unlockOnFrameRef = React3.useRef();
        React3.useEffect(() => {
          indexLegacy.frame.postRender(() => indexLegacy.frame.postRender(() => {
            if (forcedRenderCount !== unlockOnFrameRef.current)
              return;
            indexLegacy.instantAnimationState.current = false;
          }));
        }, [forcedRenderCount]);
        return (callback) => {
          startInstantLayoutTransition(() => {
            indexLegacy.instantAnimationState.current = true;
            forceUpdate();
            callback();
            unlockOnFrameRef.current = forcedRenderCount + 1;
          });
        };
      }
      function useResetProjection() {
        const reset = React__namespace.useCallback(() => {
          const root = rootProjectionNode.current;
          if (!root)
            return;
          root.resetTree();
        }, []);
        return reset;
      }
      var appearStoreId = (id2, value) => `${id2}: ${value}`;
      var appearAnimationStore = /* @__PURE__ */ new Map();
      function handoffOptimizedAppearAnimation(id2, name, _value, frame) {
        const storeId = appearStoreId(id2, indexLegacy.transformProps.has(name) ? "transform" : name);
        const appearAnimation = appearAnimationStore.get(storeId);
        if (!appearAnimation)
          return 0;
        const { animation, startTime } = appearAnimation;
        const cancelOptimisedAnimation = () => {
          appearAnimationStore.delete(storeId);
          try {
            animation.cancel();
          } catch (e) {
          }
        };
        if (startTime !== null) {
          frame.render(cancelOptimisedAnimation);
          return performance.now() - startTime || 0;
        } else {
          cancelOptimisedAnimation();
          return 0;
        }
      }
      function startOptimizedAppearAnimation(element, name, keyframes, options, onReady) {
        const id2 = element.dataset[indexLegacy.optimizedAppearDataId];
        if (!id2)
          return;
        window.HandoffAppearAnimations = handoffOptimizedAppearAnimation;
        const storeId = appearStoreId(id2, name);
        const readyAnimation = indexLegacy.animateStyle(
          element,
          name,
          [keyframes[0], keyframes[0]],
          /**
           * 10 secs is basically just a super-safe duration to give Chrome
           * long enough to get the animation ready.
           */
          { duration: 1e4, ease: "linear" }
        );
        appearAnimationStore.set(storeId, {
          animation: readyAnimation,
          startTime: null
        });
        const startAnimation = () => {
          readyAnimation.cancel();
          const appearAnimation = indexLegacy.animateStyle(element, name, keyframes, options);
          if (document.timeline) {
            appearAnimation.startTime = document.timeline.currentTime;
          }
          appearAnimationStore.set(storeId, {
            animation: appearAnimation,
            startTime: performance.now()
          });
          if (onReady)
            onReady(appearAnimation);
        };
        if (readyAnimation.ready) {
          readyAnimation.ready.then(startAnimation).catch(indexLegacy.noop);
        } else {
          startAnimation();
        }
      }
      var createObject = () => ({});
      var StateVisualElement = class extends indexLegacy.VisualElement {
        build() {
        }
        measureInstanceViewportBox() {
          return indexLegacy.createBox();
        }
        resetTransform() {
        }
        restoreTransform() {
        }
        removeValueFromRenderState() {
        }
        renderInstance() {
        }
        scrapeMotionValuesFromProps() {
          return createObject();
        }
        getBaseTargetFromProps() {
          return void 0;
        }
        readValueFromInstance(_state, key, options) {
          return options.initialState[key] || 0;
        }
        sortInstanceNodePosition() {
          return 0;
        }
        makeTargetAnimatableFromInstance(_a) {
          var _b = _a, { transition, transitionEnd } = _b, target = __objRest(_b, ["transition", "transitionEnd"]);
          const origin = indexLegacy.getOrigin(target, transition || {}, this);
          indexLegacy.checkTargetForNewValues(this, target, origin);
          return __spreadValues({ transition, transitionEnd }, target);
        }
      };
      var useVisualState = makeUseVisualState({
        scrapeMotionValuesFromProps: createObject,
        createRenderState: createObject
      });
      function useAnimatedState(initialState) {
        const [animationState, setAnimationState] = React3.useState(initialState);
        const visualState = useVisualState({}, false);
        const element = useConstant(() => {
          return new StateVisualElement({ props: {}, visualState, presenceContext: null }, { initialState });
        });
        React3.useEffect(() => {
          element.mount({});
          return () => element.unmount();
        }, [element]);
        React3.useEffect(() => {
          element.update({
            onUpdate: (v) => {
              setAnimationState(__spreadValues({}, v));
            }
          }, null);
        }, [setAnimationState, element]);
        const startAnimation = useConstant(() => (animationDefinition) => {
          return animateVisualElement(element, animationDefinition);
        });
        return [animationState, startAnimation];
      }
      var maxScale = 1e5;
      var invertScale = (scale) => scale > 1e-3 ? 1 / scale : maxScale;
      var hasWarned = false;
      function useInvertedScale(scale) {
        let parentScaleX = useMotionValue(1);
        let parentScaleY = useMotionValue(1);
        const { visualElement } = React3.useContext(MotionContext);
        indexLegacy.invariant(!!(scale || visualElement), "If no scale values are provided, useInvertedScale must be used within a child of another motion component.");
        indexLegacy.warning(hasWarned, "useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.");
        hasWarned = true;
        if (scale) {
          parentScaleX = scale.scaleX || parentScaleX;
          parentScaleY = scale.scaleY || parentScaleY;
        } else if (visualElement) {
          parentScaleX = visualElement.getValue("scaleX", 1);
          parentScaleY = visualElement.getValue("scaleY", 1);
        }
        const scaleX = useTransform(parentScaleX, invertScale);
        const scaleY = useTransform(parentScaleY, invertScale);
        return { scaleX, scaleY };
      }
      var id = 0;
      var AnimateSharedLayout = ({ children }) => {
        React__namespace.useEffect(() => {
          indexLegacy.invariant(false, "AnimateSharedLayout is deprecated: https://www.framer.com/docs/guide-upgrade/##shared-layout-animations");
        }, []);
        return React__namespace.createElement(LayoutGroup, { id: useConstant(() => `asl-${id++}`) }, children);
      };
      exports.MotionValue = indexLegacy.MotionValue;
      exports.VisualElement = indexLegacy.VisualElement;
      exports.addScaleCorrector = indexLegacy.addScaleCorrector;
      exports.animate = indexLegacy.animate;
      exports.animateValue = indexLegacy.animateValue;
      exports.anticipate = indexLegacy.anticipate;
      exports.backIn = indexLegacy.backIn;
      exports.backInOut = indexLegacy.backInOut;
      exports.backOut = indexLegacy.backOut;
      exports.buildTransform = indexLegacy.buildTransform;
      exports.cancelFrame = indexLegacy.cancelFrame;
      exports.cancelSync = indexLegacy.cancelSync;
      exports.checkTargetForNewValues = indexLegacy.checkTargetForNewValues;
      exports.circIn = indexLegacy.circIn;
      exports.circInOut = indexLegacy.circInOut;
      exports.circOut = indexLegacy.circOut;
      exports.clamp = indexLegacy.clamp;
      exports.color = indexLegacy.color;
      exports.complex = indexLegacy.complex;
      exports.createBox = indexLegacy.createBox;
      exports.createScopedAnimate = indexLegacy.createScopedAnimate;
      exports.cubicBezier = indexLegacy.cubicBezier;
      exports.delay = indexLegacy.delay;
      exports.distance = indexLegacy.distance;
      exports.distance2D = indexLegacy.distance2D;
      exports.easeIn = indexLegacy.easeIn;
      exports.easeInOut = indexLegacy.easeInOut;
      exports.easeOut = indexLegacy.easeOut;
      exports.frame = indexLegacy.frame;
      exports.frameData = indexLegacy.frameData;
      exports.inView = indexLegacy.inView;
      exports.interpolate = indexLegacy.interpolate;
      Object.defineProperty(exports, "invariant", {
        enumerable: true,
        get: function() {
          return indexLegacy.invariant;
        }
      });
      exports.isBrowser = indexLegacy.isBrowser;
      exports.isMotionValue = indexLegacy.isMotionValue;
      exports.mirrorEasing = indexLegacy.mirrorEasing;
      exports.mix = indexLegacy.mix;
      exports.motionValue = indexLegacy.motionValue;
      exports.optimizedAppearDataAttribute = indexLegacy.optimizedAppearDataAttribute;
      exports.pipe = indexLegacy.pipe;
      exports.progress = indexLegacy.progress;
      exports.px = indexLegacy.px;
      exports.reverseEasing = indexLegacy.reverseEasing;
      exports.scroll = indexLegacy.scroll;
      exports.scrollInfo = indexLegacy.scrollInfo;
      exports.spring = indexLegacy.spring;
      exports.stagger = indexLegacy.stagger;
      exports.steps = indexLegacy.steps;
      exports.sync = indexLegacy.sync;
      exports.transform = indexLegacy.transform;
      exports.visualElementStore = indexLegacy.visualElementStore;
      Object.defineProperty(exports, "warning", {
        enumerable: true,
        get: function() {
          return indexLegacy.warning;
        }
      });
      exports.wrap = indexLegacy.wrap;
      exports.AnimatePresence = AnimatePresence;
      exports.AnimateSharedLayout = AnimateSharedLayout;
      exports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;
      exports.DragControls = DragControls;
      exports.FlatTree = FlatTree;
      exports.LayoutGroup = LayoutGroup;
      exports.LayoutGroupContext = LayoutGroupContext;
      exports.LazyMotion = LazyMotion;
      exports.MotionConfig = MotionConfig;
      exports.MotionConfigContext = MotionConfigContext;
      exports.MotionContext = MotionContext;
      exports.PresenceContext = PresenceContext;
      exports.Reorder = Reorder;
      exports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;
      exports.addPointerEvent = addPointerEvent;
      exports.addPointerInfo = addPointerInfo;
      exports.animateVisualElement = animateVisualElement;
      exports.animationControls = animationControls;
      exports.animations = animations;
      exports.calcLength = calcLength;
      exports.createDomMotionComponent = createDomMotionComponent;
      exports.createMotionComponent = createMotionComponent;
      exports.domAnimation = domAnimation;
      exports.domMax = domMax;
      exports.filterProps = filterProps;
      exports.isDragActive = isDragActive;
      exports.isMotionComponent = isMotionComponent;
      exports.isValidMotionProp = isValidMotionProp;
      exports.m = m;
      exports.makeUseVisualState = makeUseVisualState;
      exports.motion = motion;
      exports.resolveMotionValue = resolveMotionValue;
      exports.startOptimizedAppearAnimation = startOptimizedAppearAnimation;
      exports.unwrapMotionComponent = unwrapMotionComponent;
      exports.useAnimate = useAnimate;
      exports.useAnimation = useAnimation;
      exports.useAnimationControls = useAnimationControls;
      exports.useAnimationFrame = useAnimationFrame;
      exports.useCycle = useCycle;
      exports.useDeprecatedAnimatedState = useAnimatedState;
      exports.useDeprecatedInvertedScale = useInvertedScale;
      exports.useDomEvent = useDomEvent;
      exports.useDragControls = useDragControls;
      exports.useElementScroll = useElementScroll;
      exports.useForceUpdate = useForceUpdate;
      exports.useInView = useInView;
      exports.useInstantLayoutTransition = useInstantLayoutTransition;
      exports.useInstantTransition = useInstantTransition;
      exports.useIsPresent = useIsPresent;
      exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
      exports.useMotionTemplate = useMotionTemplate;
      exports.useMotionValue = useMotionValue;
      exports.useMotionValueEvent = useMotionValueEvent;
      exports.usePresence = usePresence;
      exports.useReducedMotion = useReducedMotion;
      exports.useReducedMotionConfig = useReducedMotionConfig;
      exports.useResetProjection = useResetProjection;
      exports.useScroll = useScroll;
      exports.useSpring = useSpring;
      exports.useTime = useTime;
      exports.useTransform = useTransform;
      exports.useUnmountEffect = useUnmountEffect;
      exports.useVelocity = useVelocity;
      exports.useViewportScroll = useViewportScroll;
      exports.useWillChange = useWillChange;
    }
  });

  // node_modules/@nextui-org/react-rsc-utils/dist/index.js
  var require_dist7 = __commonJS({
    "node_modules/@nextui-org/react-rsc-utils/dist/index.js"(exports, module) {
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __commonJS2 = (cb, mod) => function __require() {
        return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
      };
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var require_react_production_min = __commonJS2({
        "../../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.production.min.js"(exports2) {
          "use strict";
          var l = Symbol.for("react.element");
          var n = Symbol.for("react.portal");
          var p = Symbol.for("react.fragment");
          var q = Symbol.for("react.strict_mode");
          var r = Symbol.for("react.profiler");
          var t = Symbol.for("react.provider");
          var u = Symbol.for("react.context");
          var v = Symbol.for("react.forward_ref");
          var w = Symbol.for("react.suspense");
          var x = Symbol.for("react.memo");
          var y = Symbol.for("react.lazy");
          var z = Symbol.iterator;
          function A(a) {
            if (null === a || "object" !== typeof a)
              return null;
            a = z && a[z] || a["@@iterator"];
            return "function" === typeof a ? a : null;
          }
          var B = { isMounted: function() {
            return false;
          }, enqueueForceUpdate: function() {
          }, enqueueReplaceState: function() {
          }, enqueueSetState: function() {
          } };
          var C = Object.assign;
          var D = {};
          function E(a, b, e) {
            this.props = a;
            this.context = b;
            this.refs = D;
            this.updater = e || B;
          }
          E.prototype.isReactComponent = {};
          E.prototype.setState = function(a, b) {
            if ("object" !== typeof a && "function" !== typeof a && null != a)
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            this.updater.enqueueSetState(this, a, b, "setState");
          };
          E.prototype.forceUpdate = function(a) {
            this.updater.enqueueForceUpdate(this, a, "forceUpdate");
          };
          function F() {
          }
          F.prototype = E.prototype;
          function G(a, b, e) {
            this.props = a;
            this.context = b;
            this.refs = D;
            this.updater = e || B;
          }
          var H = G.prototype = new F();
          H.constructor = G;
          C(H, E.prototype);
          H.isPureReactComponent = true;
          var I = Array.isArray;
          var J = Object.prototype.hasOwnProperty;
          var K = { current: null };
          var L = { key: true, ref: true, __self: true, __source: true };
          function M(a, b, e) {
            var d, c = {}, k = null, h = null;
            if (null != b)
              for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b)
                J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
            var g = arguments.length - 2;
            if (1 === g)
              c.children = e;
            else if (1 < g) {
              for (var f = Array(g), m = 0; m < g; m++)
                f[m] = arguments[m + 2];
              c.children = f;
            }
            if (a && a.defaultProps)
              for (d in g = a.defaultProps, g)
                void 0 === c[d] && (c[d] = g[d]);
            return { $$typeof: l, type: a, key: k, ref: h, props: c, _owner: K.current };
          }
          function N(a, b) {
            return { $$typeof: l, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
          }
          function O(a) {
            return "object" === typeof a && null !== a && a.$$typeof === l;
          }
          function escape(a) {
            var b = { "=": "=0", ":": "=2" };
            return "$" + a.replace(/[=:]/g, function(a2) {
              return b[a2];
            });
          }
          var P = /\/+/g;
          function Q(a, b) {
            return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
          }
          function R(a, b, e, d, c) {
            var k = typeof a;
            if ("undefined" === k || "boolean" === k)
              a = null;
            var h = false;
            if (null === a)
              h = true;
            else
              switch (k) {
                case "string":
                case "number":
                  h = true;
                  break;
                case "object":
                  switch (a.$$typeof) {
                    case l:
                    case n:
                      h = true;
                  }
              }
            if (h)
              return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function(a2) {
                return a2;
              })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
            h = 0;
            d = "" === d ? "." : d + ":";
            if (I(a))
              for (var g = 0; g < a.length; g++) {
                k = a[g];
                var f = d + Q(k, g);
                h += R(k, b, e, f, c);
              }
            else if (f = A(a), "function" === typeof f)
              for (a = f.call(a), g = 0; !(k = a.next()).done; )
                k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);
            else if ("object" === k)
              throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
            return h;
          }
          function S(a, b, e) {
            if (null == a)
              return a;
            var d = [], c = 0;
            R(a, d, "", "", function(a2) {
              return b.call(e, a2, c++);
            });
            return d;
          }
          function T(a) {
            if (-1 === a._status) {
              var b = a._result;
              b = b();
              b.then(function(b2) {
                if (0 === a._status || -1 === a._status)
                  a._status = 1, a._result = b2;
              }, function(b2) {
                if (0 === a._status || -1 === a._status)
                  a._status = 2, a._result = b2;
              });
              -1 === a._status && (a._status = 0, a._result = b);
            }
            if (1 === a._status)
              return a._result.default;
            throw a._result;
          }
          var U = { current: null };
          var V = { transition: null };
          var W = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V, ReactCurrentOwner: K };
          exports2.Children = { map: S, forEach: function(a, b, e) {
            S(a, function() {
              b.apply(this, arguments);
            }, e);
          }, count: function(a) {
            var b = 0;
            S(a, function() {
              b++;
            });
            return b;
          }, toArray: function(a) {
            return S(a, function(a2) {
              return a2;
            }) || [];
          }, only: function(a) {
            if (!O(a))
              throw Error("React.Children.only expected to receive a single React element child.");
            return a;
          } };
          exports2.Component = E;
          exports2.Fragment = p;
          exports2.Profiler = r;
          exports2.PureComponent = G;
          exports2.StrictMode = q;
          exports2.Suspense = w;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
          exports2.cloneElement = function(a, b, e) {
            if (null === a || void 0 === a)
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
            var d = C({}, a.props), c = a.key, k = a.ref, h = a._owner;
            if (null != b) {
              void 0 !== b.ref && (k = b.ref, h = K.current);
              void 0 !== b.key && (c = "" + b.key);
              if (a.type && a.type.defaultProps)
                var g = a.type.defaultProps;
              for (f in b)
                J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
            }
            var f = arguments.length - 2;
            if (1 === f)
              d.children = e;
            else if (1 < f) {
              g = Array(f);
              for (var m = 0; m < f; m++)
                g[m] = arguments[m + 2];
              d.children = g;
            }
            return { $$typeof: l, type: a.type, key: c, ref: k, props: d, _owner: h };
          };
          exports2.createContext = function(a) {
            a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
            a.Provider = { $$typeof: t, _context: a };
            return a.Consumer = a;
          };
          exports2.createElement = M;
          exports2.createFactory = function(a) {
            var b = M.bind(null, a);
            b.type = a;
            return b;
          };
          exports2.createRef = function() {
            return { current: null };
          };
          exports2.forwardRef = function(a) {
            return { $$typeof: v, render: a };
          };
          exports2.isValidElement = O;
          exports2.lazy = function(a) {
            return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T };
          };
          exports2.memo = function(a, b) {
            return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
          };
          exports2.startTransition = function(a) {
            var b = V.transition;
            V.transition = {};
            try {
              a();
            } finally {
              V.transition = b;
            }
          };
          exports2.unstable_act = function() {
            throw Error("act(...) is not supported in production builds of React.");
          };
          exports2.useCallback = function(a, b) {
            return U.current.useCallback(a, b);
          };
          exports2.useContext = function(a) {
            return U.current.useContext(a);
          };
          exports2.useDebugValue = function() {
          };
          exports2.useDeferredValue = function(a) {
            return U.current.useDeferredValue(a);
          };
          exports2.useEffect = function(a, b) {
            return U.current.useEffect(a, b);
          };
          exports2.useId = function() {
            return U.current.useId();
          };
          exports2.useImperativeHandle = function(a, b, e) {
            return U.current.useImperativeHandle(a, b, e);
          };
          exports2.useInsertionEffect = function(a, b) {
            return U.current.useInsertionEffect(a, b);
          };
          exports2.useLayoutEffect = function(a, b) {
            return U.current.useLayoutEffect(a, b);
          };
          exports2.useMemo = function(a, b) {
            return U.current.useMemo(a, b);
          };
          exports2.useReducer = function(a, b, e) {
            return U.current.useReducer(a, b, e);
          };
          exports2.useRef = function(a) {
            return U.current.useRef(a);
          };
          exports2.useState = function(a) {
            return U.current.useState(a);
          };
          exports2.useSyncExternalStore = function(a, b, e) {
            return U.current.useSyncExternalStore(a, b, e);
          };
          exports2.useTransition = function() {
            return U.current.useTransition();
          };
          exports2.version = "18.2.0";
        }
      });
      var require_react_development2 = __commonJS2({
        "../../../node_modules/.pnpm/react@18.2.0/node_modules/react/cjs/react.development.js"(exports2, module2) {
          "use strict";
          if (true) {
            (function() {
              "use strict";
              if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
              }
              var ReactVersion = "18.2.0";
              var REACT_ELEMENT_TYPE = Symbol.for("react.element");
              var REACT_PORTAL_TYPE = Symbol.for("react.portal");
              var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
              var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
              var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
              var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
              var REACT_CONTEXT_TYPE = Symbol.for("react.context");
              var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
              var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
              var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
              var REACT_MEMO_TYPE = Symbol.for("react.memo");
              var REACT_LAZY_TYPE = Symbol.for("react.lazy");
              var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
              var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
              var FAUX_ITERATOR_SYMBOL = "@@iterator";
              function getIteratorFn(maybeIterable) {
                if (maybeIterable === null || typeof maybeIterable !== "object") {
                  return null;
                }
                var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
                if (typeof maybeIterator === "function") {
                  return maybeIterator;
                }
                return null;
              }
              var ReactCurrentDispatcher = {
                current: null
              };
              var ReactCurrentBatchConfig = {
                transition: null
              };
              var ReactCurrentActQueue = {
                current: null,
                isBatchingLegacy: false,
                didScheduleLegacyUpdate: false
              };
              var ReactCurrentOwner = {
                current: null
              };
              var ReactDebugCurrentFrame = {};
              var currentExtraStackFrame = null;
              function setExtraStackFrame(stack) {
                {
                  currentExtraStackFrame = stack;
                }
              }
              {
                ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
                  {
                    currentExtraStackFrame = stack;
                  }
                };
                ReactDebugCurrentFrame.getCurrentStack = null;
                ReactDebugCurrentFrame.getStackAddendum = function() {
                  var stack = "";
                  if (currentExtraStackFrame) {
                    stack += currentExtraStackFrame;
                  }
                  var impl = ReactDebugCurrentFrame.getCurrentStack;
                  if (impl) {
                    stack += impl() || "";
                  }
                  return stack;
                };
              }
              var enableScopeAPI = false;
              var enableCacheElement = false;
              var enableTransitionTracing = false;
              var enableLegacyHidden = false;
              var enableDebugTracing = false;
              var ReactSharedInternals = {
                ReactCurrentDispatcher,
                ReactCurrentBatchConfig,
                ReactCurrentOwner
              };
              {
                ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
                ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
              }
              function warn(format) {
                {
                  {
                    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      args[_key - 1] = arguments[_key];
                    }
                    printWarning("warn", format, args);
                  }
                }
              }
              function error(format) {
                {
                  {
                    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                      args[_key2 - 1] = arguments[_key2];
                    }
                    printWarning("error", format, args);
                  }
                }
              }
              function printWarning(level, format, args) {
                {
                  var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
                  var stack = ReactDebugCurrentFrame2.getStackAddendum();
                  if (stack !== "") {
                    format += "%s";
                    args = args.concat([stack]);
                  }
                  var argsWithFormat = args.map(function(item) {
                    return String(item);
                  });
                  argsWithFormat.unshift("Warning: " + format);
                  Function.prototype.apply.call(console[level], console, argsWithFormat);
                }
              }
              var didWarnStateUpdateForUnmountedComponent = {};
              function warnNoop(publicInstance, callerName) {
                {
                  var _constructor = publicInstance.constructor;
                  var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
                  var warningKey = componentName + "." + callerName;
                  if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                    return;
                  }
                  error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
                  didWarnStateUpdateForUnmountedComponent[warningKey] = true;
                }
              }
              var ReactNoopUpdateQueue = {
                isMounted: function(publicInstance) {
                  return false;
                },
                enqueueForceUpdate: function(publicInstance, callback, callerName) {
                  warnNoop(publicInstance, "forceUpdate");
                },
                enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
                  warnNoop(publicInstance, "replaceState");
                },
                enqueueSetState: function(publicInstance, partialState, callback, callerName) {
                  warnNoop(publicInstance, "setState");
                }
              };
              var assign = Object.assign;
              var emptyObject = {};
              {
                Object.freeze(emptyObject);
              }
              function Component(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
              }
              Component.prototype.isReactComponent = {};
              Component.prototype.setState = function(partialState, callback) {
                if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
                  throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
                }
                this.updater.enqueueSetState(this, partialState, callback, "setState");
              };
              Component.prototype.forceUpdate = function(callback) {
                this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
              };
              {
                var deprecatedAPIs = {
                  isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
                  replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
                };
                var defineDeprecationWarning = function(methodName, info) {
                  Object.defineProperty(Component.prototype, methodName, {
                    get: function() {
                      warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                      return void 0;
                    }
                  });
                };
                for (var fnName in deprecatedAPIs) {
                  if (deprecatedAPIs.hasOwnProperty(fnName)) {
                    defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
                  }
                }
              }
              function ComponentDummy() {
              }
              ComponentDummy.prototype = Component.prototype;
              function PureComponent(props, context, updater) {
                this.props = props;
                this.context = context;
                this.refs = emptyObject;
                this.updater = updater || ReactNoopUpdateQueue;
              }
              var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
              pureComponentPrototype.constructor = PureComponent;
              assign(pureComponentPrototype, Component.prototype);
              pureComponentPrototype.isPureReactComponent = true;
              function createRef() {
                var refObject = {
                  current: null
                };
                {
                  Object.seal(refObject);
                }
                return refObject;
              }
              var isArrayImpl = Array.isArray;
              function isArray(a) {
                return isArrayImpl(a);
              }
              function typeName(value) {
                {
                  var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
                  var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
                  return type;
                }
              }
              function willCoercionThrow(value) {
                {
                  try {
                    testStringCoercion(value);
                    return false;
                  } catch (e) {
                    return true;
                  }
                }
              }
              function testStringCoercion(value) {
                return "" + value;
              }
              function checkKeyStringCoercion(value) {
                {
                  if (willCoercionThrow(value)) {
                    error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                    return testStringCoercion(value);
                  }
                }
              }
              function getWrappedName(outerType, innerType, wrapperName) {
                var displayName = outerType.displayName;
                if (displayName) {
                  return displayName;
                }
                var functionName = innerType.displayName || innerType.name || "";
                return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
              }
              function getContextName(type) {
                return type.displayName || "Context";
              }
              function getComponentNameFromType(type) {
                if (type == null) {
                  return null;
                }
                {
                  if (typeof type.tag === "number") {
                    error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
                  }
                }
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return "Fragment";
                  case REACT_PORTAL_TYPE:
                    return "Portal";
                  case REACT_PROFILER_TYPE:
                    return "Profiler";
                  case REACT_STRICT_MODE_TYPE:
                    return "StrictMode";
                  case REACT_SUSPENSE_TYPE:
                    return "Suspense";
                  case REACT_SUSPENSE_LIST_TYPE:
                    return "SuspenseList";
                }
                if (typeof type === "object") {
                  switch (type.$$typeof) {
                    case REACT_CONTEXT_TYPE:
                      var context = type;
                      return getContextName(context) + ".Consumer";
                    case REACT_PROVIDER_TYPE:
                      var provider = type;
                      return getContextName(provider._context) + ".Provider";
                    case REACT_FORWARD_REF_TYPE:
                      return getWrappedName(type, type.render, "ForwardRef");
                    case REACT_MEMO_TYPE:
                      var outerName = type.displayName || null;
                      if (outerName !== null) {
                        return outerName;
                      }
                      return getComponentNameFromType(type.type) || "Memo";
                    case REACT_LAZY_TYPE: {
                      var lazyComponent = type;
                      var payload = lazyComponent._payload;
                      var init = lazyComponent._init;
                      try {
                        return getComponentNameFromType(init(payload));
                      } catch (x) {
                        return null;
                      }
                    }
                  }
                }
                return null;
              }
              var hasOwnProperty = Object.prototype.hasOwnProperty;
              var RESERVED_PROPS = {
                key: true,
                ref: true,
                __self: true,
                __source: true
              };
              var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
              {
                didWarnAboutStringRefs = {};
              }
              function hasValidRef(config) {
                {
                  if (hasOwnProperty.call(config, "ref")) {
                    var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                    if (getter && getter.isReactWarning) {
                      return false;
                    }
                  }
                }
                return config.ref !== void 0;
              }
              function hasValidKey(config) {
                {
                  if (hasOwnProperty.call(config, "key")) {
                    var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                    if (getter && getter.isReactWarning) {
                      return false;
                    }
                  }
                }
                return config.key !== void 0;
              }
              function defineKeyPropWarningGetter(props, displayName) {
                var warnAboutAccessingKey = function() {
                  {
                    if (!specialPropKeyWarningShown) {
                      specialPropKeyWarningShown = true;
                      error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                    }
                  }
                };
                warnAboutAccessingKey.isReactWarning = true;
                Object.defineProperty(props, "key", {
                  get: warnAboutAccessingKey,
                  configurable: true
                });
              }
              function defineRefPropWarningGetter(props, displayName) {
                var warnAboutAccessingRef = function() {
                  {
                    if (!specialPropRefWarningShown) {
                      specialPropRefWarningShown = true;
                      error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                    }
                  }
                };
                warnAboutAccessingRef.isReactWarning = true;
                Object.defineProperty(props, "ref", {
                  get: warnAboutAccessingRef,
                  configurable: true
                });
              }
              function warnIfStringRefCannotBeAutoConverted(config) {
                {
                  if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                    var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                    if (!didWarnAboutStringRefs[componentName]) {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                      didWarnAboutStringRefs[componentName] = true;
                    }
                  }
                }
              }
              var ReactElement = function(type, key, ref, self2, source, owner, props) {
                var element = {
                  $$typeof: REACT_ELEMENT_TYPE,
                  type,
                  key,
                  ref,
                  props,
                  _owner: owner
                };
                {
                  element._store = {};
                  Object.defineProperty(element._store, "validated", {
                    configurable: false,
                    enumerable: false,
                    writable: true,
                    value: false
                  });
                  Object.defineProperty(element, "_self", {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: self2
                  });
                  Object.defineProperty(element, "_source", {
                    configurable: false,
                    enumerable: false,
                    writable: false,
                    value: source
                  });
                  if (Object.freeze) {
                    Object.freeze(element.props);
                    Object.freeze(element);
                  }
                }
                return element;
              };
              function createElement2(type, config, children) {
                var propName;
                var props = {};
                var key = null;
                var ref = null;
                var self2 = null;
                var source = null;
                if (config != null) {
                  if (hasValidRef(config)) {
                    ref = config.ref;
                    {
                      warnIfStringRefCannotBeAutoConverted(config);
                    }
                  }
                  if (hasValidKey(config)) {
                    {
                      checkKeyStringCoercion(config.key);
                    }
                    key = "" + config.key;
                  }
                  self2 = config.__self === void 0 ? null : config.__self;
                  source = config.__source === void 0 ? null : config.__source;
                  for (propName in config) {
                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                      props[propName] = config[propName];
                    }
                  }
                }
                var childrenLength = arguments.length - 2;
                if (childrenLength === 1) {
                  props.children = children;
                } else if (childrenLength > 1) {
                  var childArray = Array(childrenLength);
                  for (var i = 0; i < childrenLength; i++) {
                    childArray[i] = arguments[i + 2];
                  }
                  {
                    if (Object.freeze) {
                      Object.freeze(childArray);
                    }
                  }
                  props.children = childArray;
                }
                if (type && type.defaultProps) {
                  var defaultProps = type.defaultProps;
                  for (propName in defaultProps) {
                    if (props[propName] === void 0) {
                      props[propName] = defaultProps[propName];
                    }
                  }
                }
                {
                  if (key || ref) {
                    var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                    if (key) {
                      defineKeyPropWarningGetter(props, displayName);
                    }
                    if (ref) {
                      defineRefPropWarningGetter(props, displayName);
                    }
                  }
                }
                return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
              }
              function cloneAndReplaceKey(oldElement, newKey) {
                var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
                return newElement;
              }
              function cloneElement(element, config, children) {
                if (element === null || element === void 0) {
                  throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
                }
                var propName;
                var props = assign({}, element.props);
                var key = element.key;
                var ref = element.ref;
                var self2 = element._self;
                var source = element._source;
                var owner = element._owner;
                if (config != null) {
                  if (hasValidRef(config)) {
                    ref = config.ref;
                    owner = ReactCurrentOwner.current;
                  }
                  if (hasValidKey(config)) {
                    {
                      checkKeyStringCoercion(config.key);
                    }
                    key = "" + config.key;
                  }
                  var defaultProps;
                  if (element.type && element.type.defaultProps) {
                    defaultProps = element.type.defaultProps;
                  }
                  for (propName in config) {
                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                      if (config[propName] === void 0 && defaultProps !== void 0) {
                        props[propName] = defaultProps[propName];
                      } else {
                        props[propName] = config[propName];
                      }
                    }
                  }
                }
                var childrenLength = arguments.length - 2;
                if (childrenLength === 1) {
                  props.children = children;
                } else if (childrenLength > 1) {
                  var childArray = Array(childrenLength);
                  for (var i = 0; i < childrenLength; i++) {
                    childArray[i] = arguments[i + 2];
                  }
                  props.children = childArray;
                }
                return ReactElement(element.type, key, ref, self2, source, owner, props);
              }
              function isValidElement2(object) {
                return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
              }
              var SEPARATOR = ".";
              var SUBSEPARATOR = ":";
              function escape(key) {
                var escapeRegex = /[=:]/g;
                var escaperLookup = {
                  "=": "=0",
                  ":": "=2"
                };
                var escapedString = key.replace(escapeRegex, function(match) {
                  return escaperLookup[match];
                });
                return "$" + escapedString;
              }
              var didWarnAboutMaps = false;
              var userProvidedKeyEscapeRegex = /\/+/g;
              function escapeUserProvidedKey(text) {
                return text.replace(userProvidedKeyEscapeRegex, "$&/");
              }
              function getElementKey(element, index3) {
                if (typeof element === "object" && element !== null && element.key != null) {
                  {
                    checkKeyStringCoercion(element.key);
                  }
                  return escape("" + element.key);
                }
                return index3.toString(36);
              }
              function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
                var type = typeof children;
                if (type === "undefined" || type === "boolean") {
                  children = null;
                }
                var invokeCallback = false;
                if (children === null) {
                  invokeCallback = true;
                } else {
                  switch (type) {
                    case "string":
                    case "number":
                      invokeCallback = true;
                      break;
                    case "object":
                      switch (children.$$typeof) {
                        case REACT_ELEMENT_TYPE:
                        case REACT_PORTAL_TYPE:
                          invokeCallback = true;
                      }
                  }
                }
                if (invokeCallback) {
                  var _child = children;
                  var mappedChild = callback(_child);
                  var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
                  if (isArray(mappedChild)) {
                    var escapedChildKey = "";
                    if (childKey != null) {
                      escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                    }
                    mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                      return c;
                    });
                  } else if (mappedChild != null) {
                    if (isValidElement2(mappedChild)) {
                      {
                        if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                          checkKeyStringCoercion(mappedChild.key);
                        }
                      }
                      mappedChild = cloneAndReplaceKey(
                        mappedChild,
                        escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                      );
                    }
                    array.push(mappedChild);
                  }
                  return 1;
                }
                var child;
                var nextName;
                var subtreeCount = 0;
                var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    child = children[i];
                    nextName = nextNamePrefix + getElementKey(child, i);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var iterableChildren = children;
                    {
                      if (iteratorFn === iterableChildren.entries) {
                        if (!didWarnAboutMaps) {
                          warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                        }
                        didWarnAboutMaps = true;
                      }
                    }
                    var iterator = iteratorFn.call(iterableChildren);
                    var step;
                    var ii = 0;
                    while (!(step = iterator.next()).done) {
                      child = step.value;
                      nextName = nextNamePrefix + getElementKey(child, ii++);
                      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                    }
                  } else if (type === "object") {
                    var childrenString = String(children);
                    throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
                return subtreeCount;
              }
              function mapChildren(children, func, context) {
                if (children == null) {
                  return children;
                }
                var result = [];
                var count2 = 0;
                mapIntoArray(children, result, "", "", function(child) {
                  return func.call(context, child, count2++);
                });
                return result;
              }
              function countChildren(children) {
                var n = 0;
                mapChildren(children, function() {
                  n++;
                });
                return n;
              }
              function forEachChildren(children, forEachFunc, forEachContext) {
                mapChildren(children, function() {
                  forEachFunc.apply(this, arguments);
                }, forEachContext);
              }
              function toArray(children) {
                return mapChildren(children, function(child) {
                  return child;
                }) || [];
              }
              function onlyChild(children) {
                if (!isValidElement2(children)) {
                  throw new Error("React.Children.only expected to receive a single React element child.");
                }
                return children;
              }
              function createContext2(defaultValue) {
                var context = {
                  $$typeof: REACT_CONTEXT_TYPE,
                  _currentValue: defaultValue,
                  _currentValue2: defaultValue,
                  _threadCount: 0,
                  Provider: null,
                  Consumer: null,
                  _defaultValue: null,
                  _globalName: null
                };
                context.Provider = {
                  $$typeof: REACT_PROVIDER_TYPE,
                  _context: context
                };
                var hasWarnedAboutUsingNestedContextConsumers = false;
                var hasWarnedAboutUsingConsumerProvider = false;
                var hasWarnedAboutDisplayNameOnConsumer = false;
                {
                  var Consumer = {
                    $$typeof: REACT_CONTEXT_TYPE,
                    _context: context
                  };
                  Object.defineProperties(Consumer, {
                    Provider: {
                      get: function() {
                        if (!hasWarnedAboutUsingConsumerProvider) {
                          hasWarnedAboutUsingConsumerProvider = true;
                          error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                        }
                        return context.Provider;
                      },
                      set: function(_Provider) {
                        context.Provider = _Provider;
                      }
                    },
                    _currentValue: {
                      get: function() {
                        return context._currentValue;
                      },
                      set: function(_currentValue) {
                        context._currentValue = _currentValue;
                      }
                    },
                    _currentValue2: {
                      get: function() {
                        return context._currentValue2;
                      },
                      set: function(_currentValue2) {
                        context._currentValue2 = _currentValue2;
                      }
                    },
                    _threadCount: {
                      get: function() {
                        return context._threadCount;
                      },
                      set: function(_threadCount) {
                        context._threadCount = _threadCount;
                      }
                    },
                    Consumer: {
                      get: function() {
                        if (!hasWarnedAboutUsingNestedContextConsumers) {
                          hasWarnedAboutUsingNestedContextConsumers = true;
                          error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                        }
                        return context.Consumer;
                      }
                    },
                    displayName: {
                      get: function() {
                        return context.displayName;
                      },
                      set: function(displayName) {
                        if (!hasWarnedAboutDisplayNameOnConsumer) {
                          warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                          hasWarnedAboutDisplayNameOnConsumer = true;
                        }
                      }
                    }
                  });
                  context.Consumer = Consumer;
                }
                {
                  context._currentRenderer = null;
                  context._currentRenderer2 = null;
                }
                return context;
              }
              var Uninitialized = -1;
              var Pending = 0;
              var Resolved = 1;
              var Rejected = 2;
              function lazyInitializer(payload) {
                if (payload._status === Uninitialized) {
                  var ctor = payload._result;
                  var thenable = ctor();
                  thenable.then(function(moduleObject2) {
                    if (payload._status === Pending || payload._status === Uninitialized) {
                      var resolved = payload;
                      resolved._status = Resolved;
                      resolved._result = moduleObject2;
                    }
                  }, function(error2) {
                    if (payload._status === Pending || payload._status === Uninitialized) {
                      var rejected = payload;
                      rejected._status = Rejected;
                      rejected._result = error2;
                    }
                  });
                  if (payload._status === Uninitialized) {
                    var pending = payload;
                    pending._status = Pending;
                    pending._result = thenable;
                  }
                }
                if (payload._status === Resolved) {
                  var moduleObject = payload._result;
                  {
                    if (moduleObject === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                    }
                  }
                  {
                    if (!("default" in moduleObject)) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  return moduleObject.default;
                } else {
                  throw payload._result;
                }
              }
              function lazy(ctor) {
                var payload = {
                  _status: Uninitialized,
                  _result: ctor
                };
                var lazyType = {
                  $$typeof: REACT_LAZY_TYPE,
                  _payload: payload,
                  _init: lazyInitializer
                };
                {
                  var defaultProps;
                  var propTypes;
                  Object.defineProperties(lazyType, {
                    defaultProps: {
                      configurable: true,
                      get: function() {
                        return defaultProps;
                      },
                      set: function(newDefaultProps) {
                        error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                        defaultProps = newDefaultProps;
                        Object.defineProperty(lazyType, "defaultProps", {
                          enumerable: true
                        });
                      }
                    },
                    propTypes: {
                      configurable: true,
                      get: function() {
                        return propTypes;
                      },
                      set: function(newPropTypes) {
                        error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                        propTypes = newPropTypes;
                        Object.defineProperty(lazyType, "propTypes", {
                          enumerable: true
                        });
                      }
                    }
                  });
                }
                return lazyType;
              }
              function forwardRef2(render) {
                {
                  if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                    error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
                  } else if (typeof render !== "function") {
                    error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
                  } else {
                    if (render.length !== 0 && render.length !== 2) {
                      error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                    }
                  }
                  if (render != null) {
                    if (render.defaultProps != null || render.propTypes != null) {
                      error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                    }
                  }
                }
                var elementType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render
                };
                {
                  var ownName;
                  Object.defineProperty(elementType, "displayName", {
                    enumerable: false,
                    configurable: true,
                    get: function() {
                      return ownName;
                    },
                    set: function(name) {
                      ownName = name;
                      if (!render.name && !render.displayName) {
                        render.displayName = name;
                      }
                    }
                  });
                }
                return elementType;
              }
              var REACT_MODULE_REFERENCE;
              {
                REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
              }
              function isValidElementType(type) {
                if (typeof type === "string" || typeof type === "function") {
                  return true;
                }
                if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
                  return true;
                }
                if (typeof type === "object" && type !== null) {
                  if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                    return true;
                  }
                }
                return false;
              }
              function memo(type, compare) {
                {
                  if (!isValidElementType(type)) {
                    error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
                  }
                }
                var elementType = {
                  $$typeof: REACT_MEMO_TYPE,
                  type,
                  compare: compare === void 0 ? null : compare
                };
                {
                  var ownName;
                  Object.defineProperty(elementType, "displayName", {
                    enumerable: false,
                    configurable: true,
                    get: function() {
                      return ownName;
                    },
                    set: function(name) {
                      ownName = name;
                      if (!type.name && !type.displayName) {
                        type.displayName = name;
                      }
                    }
                  });
                }
                return elementType;
              }
              function resolveDispatcher() {
                var dispatcher = ReactCurrentDispatcher.current;
                {
                  if (dispatcher === null) {
                    error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
                  }
                }
                return dispatcher;
              }
              function useContext(Context) {
                var dispatcher = resolveDispatcher();
                {
                  if (Context._context !== void 0) {
                    var realContext = Context._context;
                    if (realContext.Consumer === Context) {
                      error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                    } else if (realContext.Provider === Context) {
                      error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                    }
                  }
                }
                return dispatcher.useContext(Context);
              }
              function useState(initialState) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useState(initialState);
              }
              function useReducer(reducer, initialArg, init) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useReducer(reducer, initialArg, init);
              }
              function useRef4(initialValue) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useRef(initialValue);
              }
              function useEffect(create, deps) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useEffect(create, deps);
              }
              function useInsertionEffect(create, deps) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useInsertionEffect(create, deps);
              }
              function useLayoutEffect3(create, deps) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useLayoutEffect(create, deps);
              }
              function useCallback2(callback, deps) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useCallback(callback, deps);
              }
              function useMemo(create, deps) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useMemo(create, deps);
              }
              function useImperativeHandle(ref, create, deps) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useImperativeHandle(ref, create, deps);
              }
              function useDebugValue(value, formatterFn) {
                {
                  var dispatcher = resolveDispatcher();
                  return dispatcher.useDebugValue(value, formatterFn);
                }
              }
              function useTransition() {
                var dispatcher = resolveDispatcher();
                return dispatcher.useTransition();
              }
              function useDeferredValue(value) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useDeferredValue(value);
              }
              function useId() {
                var dispatcher = resolveDispatcher();
                return dispatcher.useId();
              }
              function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
                var dispatcher = resolveDispatcher();
                return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              }
              var disabledDepth = 0;
              var prevLog;
              var prevInfo;
              var prevWarn;
              var prevError;
              var prevGroup;
              var prevGroupCollapsed;
              var prevGroupEnd;
              function disabledLog() {
              }
              disabledLog.__reactDisabledLog = true;
              function disableLogs() {
                {
                  if (disabledDepth === 0) {
                    prevLog = console.log;
                    prevInfo = console.info;
                    prevWarn = console.warn;
                    prevError = console.error;
                    prevGroup = console.group;
                    prevGroupCollapsed = console.groupCollapsed;
                    prevGroupEnd = console.groupEnd;
                    var props = {
                      configurable: true,
                      enumerable: true,
                      value: disabledLog,
                      writable: true
                    };
                    Object.defineProperties(console, {
                      info: props,
                      log: props,
                      warn: props,
                      error: props,
                      group: props,
                      groupCollapsed: props,
                      groupEnd: props
                    });
                  }
                  disabledDepth++;
                }
              }
              function reenableLogs() {
                {
                  disabledDepth--;
                  if (disabledDepth === 0) {
                    var props = {
                      configurable: true,
                      enumerable: true,
                      writable: true
                    };
                    Object.defineProperties(console, {
                      log: assign({}, props, {
                        value: prevLog
                      }),
                      info: assign({}, props, {
                        value: prevInfo
                      }),
                      warn: assign({}, props, {
                        value: prevWarn
                      }),
                      error: assign({}, props, {
                        value: prevError
                      }),
                      group: assign({}, props, {
                        value: prevGroup
                      }),
                      groupCollapsed: assign({}, props, {
                        value: prevGroupCollapsed
                      }),
                      groupEnd: assign({}, props, {
                        value: prevGroupEnd
                      })
                    });
                  }
                  if (disabledDepth < 0) {
                    error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
                  }
                }
              }
              var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
              var prefix;
              function describeBuiltInComponentFrame(name, source, ownerFn) {
                {
                  if (prefix === void 0) {
                    try {
                      throw Error();
                    } catch (x) {
                      var match = x.stack.trim().match(/\n( *(at )?)/);
                      prefix = match && match[1] || "";
                    }
                  }
                  return "\n" + prefix + name;
                }
              }
              var reentry = false;
              var componentFrameCache;
              {
                var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
                componentFrameCache = new PossiblyWeakMap();
              }
              function describeNativeComponentFrame(fn, construct) {
                if (!fn || reentry) {
                  return "";
                }
                {
                  var frame = componentFrameCache.get(fn);
                  if (frame !== void 0) {
                    return frame;
                  }
                }
                var control;
                reentry = true;
                var previousPrepareStackTrace = Error.prepareStackTrace;
                Error.prepareStackTrace = void 0;
                var previousDispatcher;
                {
                  previousDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = null;
                  disableLogs();
                }
                try {
                  if (construct) {
                    var Fake = function() {
                      throw Error();
                    };
                    Object.defineProperty(Fake.prototype, "props", {
                      set: function() {
                        throw Error();
                      }
                    });
                    if (typeof Reflect === "object" && Reflect.construct) {
                      try {
                        Reflect.construct(Fake, []);
                      } catch (x) {
                        control = x;
                      }
                      Reflect.construct(fn, [], Fake);
                    } else {
                      try {
                        Fake.call();
                      } catch (x) {
                        control = x;
                      }
                      fn.call(Fake.prototype);
                    }
                  } else {
                    try {
                      throw Error();
                    } catch (x) {
                      control = x;
                    }
                    fn();
                  }
                } catch (sample) {
                  if (sample && control && typeof sample.stack === "string") {
                    var sampleLines = sample.stack.split("\n");
                    var controlLines = control.stack.split("\n");
                    var s = sampleLines.length - 1;
                    var c = controlLines.length - 1;
                    while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                      c--;
                    }
                    for (; s >= 1 && c >= 0; s--, c--) {
                      if (sampleLines[s] !== controlLines[c]) {
                        if (s !== 1 || c !== 1) {
                          do {
                            s--;
                            c--;
                            if (c < 0 || sampleLines[s] !== controlLines[c]) {
                              var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                              if (fn.displayName && _frame.includes("<anonymous>")) {
                                _frame = _frame.replace("<anonymous>", fn.displayName);
                              }
                              {
                                if (typeof fn === "function") {
                                  componentFrameCache.set(fn, _frame);
                                }
                              }
                              return _frame;
                            }
                          } while (s >= 1 && c >= 0);
                        }
                        break;
                      }
                    }
                  }
                } finally {
                  reentry = false;
                  {
                    ReactCurrentDispatcher$1.current = previousDispatcher;
                    reenableLogs();
                  }
                  Error.prepareStackTrace = previousPrepareStackTrace;
                }
                var name = fn ? fn.displayName || fn.name : "";
                var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
                {
                  if (typeof fn === "function") {
                    componentFrameCache.set(fn, syntheticFrame);
                  }
                }
                return syntheticFrame;
              }
              function describeFunctionComponentFrame(fn, source, ownerFn) {
                {
                  return describeNativeComponentFrame(fn, false);
                }
              }
              function shouldConstruct(Component2) {
                var prototype = Component2.prototype;
                return !!(prototype && prototype.isReactComponent);
              }
              function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
                if (type == null) {
                  return "";
                }
                if (typeof type === "function") {
                  {
                    return describeNativeComponentFrame(type, shouldConstruct(type));
                  }
                }
                if (typeof type === "string") {
                  return describeBuiltInComponentFrame(type);
                }
                switch (type) {
                  case REACT_SUSPENSE_TYPE:
                    return describeBuiltInComponentFrame("Suspense");
                  case REACT_SUSPENSE_LIST_TYPE:
                    return describeBuiltInComponentFrame("SuspenseList");
                }
                if (typeof type === "object") {
                  switch (type.$$typeof) {
                    case REACT_FORWARD_REF_TYPE:
                      return describeFunctionComponentFrame(type.render);
                    case REACT_MEMO_TYPE:
                      return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                    case REACT_LAZY_TYPE: {
                      var lazyComponent = type;
                      var payload = lazyComponent._payload;
                      var init = lazyComponent._init;
                      try {
                        return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                      } catch (x) {
                      }
                    }
                  }
                }
                return "";
              }
              var loggedTypeFailures = {};
              var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
              function setCurrentlyValidatingElement(element) {
                {
                  if (element) {
                    var owner = element._owner;
                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                  } else {
                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                  }
                }
              }
              function checkPropTypes(typeSpecs, values, location2, componentName, element) {
                {
                  var has = Function.call.bind(hasOwnProperty);
                  for (var typeSpecName in typeSpecs) {
                    if (has(typeSpecs, typeSpecName)) {
                      var error$1 = void 0;
                      try {
                        if (typeof typeSpecs[typeSpecName] !== "function") {
                          var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                          err.name = "Invariant Violation";
                          throw err;
                        }
                        error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                      } catch (ex) {
                        error$1 = ex;
                      }
                      if (error$1 && !(error$1 instanceof Error)) {
                        setCurrentlyValidatingElement(element);
                        error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                        setCurrentlyValidatingElement(null);
                      }
                      if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                        loggedTypeFailures[error$1.message] = true;
                        setCurrentlyValidatingElement(element);
                        error("Failed %s type: %s", location2, error$1.message);
                        setCurrentlyValidatingElement(null);
                      }
                    }
                  }
                }
              }
              function setCurrentlyValidatingElement$1(element) {
                {
                  if (element) {
                    var owner = element._owner;
                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                    setExtraStackFrame(stack);
                  } else {
                    setExtraStackFrame(null);
                  }
                }
              }
              var propTypesMisspellWarningShown;
              {
                propTypesMisspellWarningShown = false;
              }
              function getDeclarationErrorAddendum() {
                if (ReactCurrentOwner.current) {
                  var name = getComponentNameFromType(ReactCurrentOwner.current.type);
                  if (name) {
                    return "\n\nCheck the render method of `" + name + "`.";
                  }
                }
                return "";
              }
              function getSourceInfoErrorAddendum(source) {
                if (source !== void 0) {
                  var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                  var lineNumber = source.lineNumber;
                  return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
                }
                return "";
              }
              function getSourceInfoErrorAddendumForProps(elementProps) {
                if (elementProps !== null && elementProps !== void 0) {
                  return getSourceInfoErrorAddendum(elementProps.__source);
                }
                return "";
              }
              var ownerHasKeyUseWarning = {};
              function getCurrentComponentErrorInfo(parentType) {
                var info = getDeclarationErrorAddendum();
                if (!info) {
                  var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                  if (parentName) {
                    info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                  }
                }
                return info;
              }
              function validateExplicitKey(element, parentType) {
                if (!element._store || element._store.validated || element.key != null) {
                  return;
                }
                element._store.validated = true;
                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                  return;
                }
                ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                var childOwner = "";
                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
                  childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
                }
                {
                  setCurrentlyValidatingElement$1(element);
                  error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
                  setCurrentlyValidatingElement$1(null);
                }
              }
              function validateChildKeys(node, parentType) {
                if (typeof node !== "object") {
                  return;
                }
                if (isArray(node)) {
                  for (var i = 0; i < node.length; i++) {
                    var child = node[i];
                    if (isValidElement2(child)) {
                      validateExplicitKey(child, parentType);
                    }
                  }
                } else if (isValidElement2(node)) {
                  if (node._store) {
                    node._store.validated = true;
                  }
                } else if (node) {
                  var iteratorFn = getIteratorFn(node);
                  if (typeof iteratorFn === "function") {
                    if (iteratorFn !== node.entries) {
                      var iterator = iteratorFn.call(node);
                      var step;
                      while (!(step = iterator.next()).done) {
                        if (isValidElement2(step.value)) {
                          validateExplicitKey(step.value, parentType);
                        }
                      }
                    }
                  }
                }
              }
              function validatePropTypes(element) {
                {
                  var type = element.type;
                  if (type === null || type === void 0 || typeof type === "string") {
                    return;
                  }
                  var propTypes;
                  if (typeof type === "function") {
                    propTypes = type.propTypes;
                  } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                    propTypes = type.propTypes;
                  } else {
                    return;
                  }
                  if (propTypes) {
                    var name = getComponentNameFromType(type);
                    checkPropTypes(propTypes, element.props, "prop", name, element);
                  } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                    propTypesMisspellWarningShown = true;
                    var _name = getComponentNameFromType(type);
                    error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
                  }
                  if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                    error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
                  }
                }
              }
              function validateFragmentProps(fragment) {
                {
                  var keys = Object.keys(fragment.props);
                  for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (key !== "children" && key !== "key") {
                      setCurrentlyValidatingElement$1(fragment);
                      error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                      setCurrentlyValidatingElement$1(null);
                      break;
                    }
                  }
                  if (fragment.ref !== null) {
                    setCurrentlyValidatingElement$1(fragment);
                    error("Invalid attribute `ref` supplied to `React.Fragment`.");
                    setCurrentlyValidatingElement$1(null);
                  }
                }
              }
              function createElementWithValidation(type, props, children) {
                var validType = isValidElementType(type);
                if (!validType) {
                  var info = "";
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var sourceInfo = getSourceInfoErrorAddendumForProps(props);
                  if (sourceInfo) {
                    info += sourceInfo;
                  } else {
                    info += getDeclarationErrorAddendum();
                  }
                  var typeString;
                  if (type === null) {
                    typeString = "null";
                  } else if (isArray(type)) {
                    typeString = "array";
                  } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                    typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                    info = " Did you accidentally export a JSX literal instead of a component?";
                  } else {
                    typeString = typeof type;
                  }
                  {
                    error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
                  }
                }
                var element = createElement2.apply(this, arguments);
                if (element == null) {
                  return element;
                }
                if (validType) {
                  for (var i = 2; i < arguments.length; i++) {
                    validateChildKeys(arguments[i], type);
                  }
                }
                if (type === REACT_FRAGMENT_TYPE) {
                  validateFragmentProps(element);
                } else {
                  validatePropTypes(element);
                }
                return element;
              }
              var didWarnAboutDeprecatedCreateFactory = false;
              function createFactoryWithValidation(type) {
                var validatedFactory = createElementWithValidation.bind(null, type);
                validatedFactory.type = type;
                {
                  if (!didWarnAboutDeprecatedCreateFactory) {
                    didWarnAboutDeprecatedCreateFactory = true;
                    warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
                  }
                  Object.defineProperty(validatedFactory, "type", {
                    enumerable: false,
                    get: function() {
                      warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                      Object.defineProperty(this, "type", {
                        value: type
                      });
                      return type;
                    }
                  });
                }
                return validatedFactory;
              }
              function cloneElementWithValidation(element, props, children) {
                var newElement = cloneElement.apply(this, arguments);
                for (var i = 2; i < arguments.length; i++) {
                  validateChildKeys(arguments[i], newElement.type);
                }
                validatePropTypes(newElement);
                return newElement;
              }
              function startTransition(scope, options) {
                var prevTransition = ReactCurrentBatchConfig.transition;
                ReactCurrentBatchConfig.transition = {};
                var currentTransition = ReactCurrentBatchConfig.transition;
                {
                  ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                try {
                  scope();
                } finally {
                  ReactCurrentBatchConfig.transition = prevTransition;
                  {
                    if (prevTransition === null && currentTransition._updatedFibers) {
                      var updatedFibersCount = currentTransition._updatedFibers.size;
                      if (updatedFibersCount > 10) {
                        warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                      }
                      currentTransition._updatedFibers.clear();
                    }
                  }
                }
              }
              var didWarnAboutMessageChannel = false;
              var enqueueTaskImpl = null;
              function enqueueTask(task) {
                if (enqueueTaskImpl === null) {
                  try {
                    var requireString = ("require" + Math.random()).slice(0, 7);
                    var nodeRequire = module2 && module2[requireString];
                    enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
                  } catch (_err) {
                    enqueueTaskImpl = function(callback) {
                      {
                        if (didWarnAboutMessageChannel === false) {
                          didWarnAboutMessageChannel = true;
                          if (typeof MessageChannel === "undefined") {
                            error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                          }
                        }
                      }
                      var channel = new MessageChannel();
                      channel.port1.onmessage = callback;
                      channel.port2.postMessage(void 0);
                    };
                  }
                }
                return enqueueTaskImpl(task);
              }
              var actScopeDepth = 0;
              var didWarnNoAwaitAct = false;
              function act(callback) {
                {
                  var prevActScopeDepth = actScopeDepth;
                  actScopeDepth++;
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                  }
                  var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
                  var result;
                  try {
                    ReactCurrentActQueue.isBatchingLegacy = true;
                    result = callback();
                    if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                      var queue = ReactCurrentActQueue.current;
                      if (queue !== null) {
                        ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                        flushActQueue(queue);
                      }
                    }
                  } catch (error2) {
                    popActScope(prevActScopeDepth);
                    throw error2;
                  } finally {
                    ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
                  }
                  if (result !== null && typeof result === "object" && typeof result.then === "function") {
                    var thenableResult = result;
                    var wasAwaited = false;
                    var thenable = {
                      then: function(resolve, reject) {
                        wasAwaited = true;
                        thenableResult.then(function(returnValue2) {
                          popActScope(prevActScopeDepth);
                          if (actScopeDepth === 0) {
                            recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                          } else {
                            resolve(returnValue2);
                          }
                        }, function(error2) {
                          popActScope(prevActScopeDepth);
                          reject(error2);
                        });
                      }
                    };
                    {
                      if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                        Promise.resolve().then(function() {
                        }).then(function() {
                          if (!wasAwaited) {
                            didWarnNoAwaitAct = true;
                            error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                          }
                        });
                      }
                    }
                    return thenable;
                  } else {
                    var returnValue = result;
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      var _queue = ReactCurrentActQueue.current;
                      if (_queue !== null) {
                        flushActQueue(_queue);
                        ReactCurrentActQueue.current = null;
                      }
                      var _thenable = {
                        then: function(resolve, reject) {
                          if (ReactCurrentActQueue.current === null) {
                            ReactCurrentActQueue.current = [];
                            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                          } else {
                            resolve(returnValue);
                          }
                        }
                      };
                      return _thenable;
                    } else {
                      var _thenable2 = {
                        then: function(resolve, reject) {
                          resolve(returnValue);
                        }
                      };
                      return _thenable2;
                    }
                  }
                }
              }
              function popActScope(prevActScopeDepth) {
                {
                  if (prevActScopeDepth !== actScopeDepth - 1) {
                    error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
                  }
                  actScopeDepth = prevActScopeDepth;
                }
              }
              function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
                {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    try {
                      flushActQueue(queue);
                      enqueueTask(function() {
                        if (queue.length === 0) {
                          ReactCurrentActQueue.current = null;
                          resolve(returnValue);
                        } else {
                          recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        }
                      });
                    } catch (error2) {
                      reject(error2);
                    }
                  } else {
                    resolve(returnValue);
                  }
                }
              }
              var isFlushing = false;
              function flushActQueue(queue) {
                {
                  if (!isFlushing) {
                    isFlushing = true;
                    var i = 0;
                    try {
                      for (; i < queue.length; i++) {
                        var callback = queue[i];
                        do {
                          callback = callback(true);
                        } while (callback !== null);
                      }
                      queue.length = 0;
                    } catch (error2) {
                      queue = queue.slice(i + 1);
                      throw error2;
                    } finally {
                      isFlushing = false;
                    }
                  }
                }
              }
              var createElement$1 = createElementWithValidation;
              var cloneElement$1 = cloneElementWithValidation;
              var createFactory = createFactoryWithValidation;
              var Children2 = {
                map: mapChildren,
                forEach: forEachChildren,
                count: countChildren,
                toArray,
                only: onlyChild
              };
              exports2.Children = Children2;
              exports2.Component = Component;
              exports2.Fragment = REACT_FRAGMENT_TYPE;
              exports2.Profiler = REACT_PROFILER_TYPE;
              exports2.PureComponent = PureComponent;
              exports2.StrictMode = REACT_STRICT_MODE_TYPE;
              exports2.Suspense = REACT_SUSPENSE_TYPE;
              exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
              exports2.cloneElement = cloneElement$1;
              exports2.createContext = createContext2;
              exports2.createElement = createElement$1;
              exports2.createFactory = createFactory;
              exports2.createRef = createRef;
              exports2.forwardRef = forwardRef2;
              exports2.isValidElement = isValidElement2;
              exports2.lazy = lazy;
              exports2.memo = memo;
              exports2.startTransition = startTransition;
              exports2.unstable_act = act;
              exports2.useCallback = useCallback2;
              exports2.useContext = useContext;
              exports2.useDebugValue = useDebugValue;
              exports2.useDeferredValue = useDeferredValue;
              exports2.useEffect = useEffect;
              exports2.useId = useId;
              exports2.useImperativeHandle = useImperativeHandle;
              exports2.useInsertionEffect = useInsertionEffect;
              exports2.useLayoutEffect = useLayoutEffect3;
              exports2.useMemo = useMemo;
              exports2.useReducer = useReducer;
              exports2.useRef = useRef4;
              exports2.useState = useState;
              exports2.useSyncExternalStore = useSyncExternalStore;
              exports2.useTransition = useTransition;
              exports2.version = ReactVersion;
              if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
                __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
              }
            })();
          }
        }
      });
      var require_react2 = __commonJS2({
        "../../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"(exports2, module2) {
          "use strict";
          if (false) {
            module2.exports = require_react_production_min();
          } else {
            module2.exports = require_react_development2();
          }
        }
      });
      var src_exports = {};
      __export2(src_exports, {
        DOMEventNames: () => DOMEventNames,
        DOMPropNames: () => DOMPropNames,
        filterDOMProps: () => filterDOMProps,
        getValidChildren: () => getValidChildren,
        pickChildren: () => pickChildren
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = __toESM2(require_react2());
      function getValidChildren(children) {
        return import_react3.Children.toArray(children).filter(
          (child) => (0, import_react3.isValidElement)(child)
        );
      }
      var pickChildren = (children, targetChild) => {
        let target = [];
        const withoutTargetChildren = import_react3.Children.map(children, (item) => {
          if (!(0, import_react3.isValidElement)(item))
            return item;
          if (item.type === targetChild) {
            target.push(item);
            return null;
          }
          return item;
        });
        const targetChildren = target.length >= 0 ? target : void 0;
        return [withoutTargetChildren, targetChildren];
      };
      var DOMPropNames = /* @__PURE__ */ new Set([
        "id",
        "type",
        "style",
        "title",
        "role",
        "tabIndex",
        "htmlFor",
        "width",
        "height",
        "abbr",
        "accept",
        "acceptCharset",
        "accessKey",
        "action",
        "allowFullScreen",
        "allowTransparency",
        "alt",
        "async",
        "autoComplete",
        "autoFocus",
        "autoPlay",
        "cellPadding",
        "cellSpacing",
        "challenge",
        "charset",
        "checked",
        "cite",
        "class",
        "className",
        "cols",
        "colSpan",
        "command",
        "content",
        "contentEditable",
        "contextMenu",
        "controls",
        "coords",
        "crossOrigin",
        "data",
        "dateTime",
        "default",
        "defer",
        "dir",
        "disabled",
        "download",
        "draggable",
        "dropzone",
        "encType",
        "for",
        "form",
        "formAction",
        "formEncType",
        "formMethod",
        "formNoValidate",
        "formTarget",
        "frameBorder",
        "headers",
        "hidden",
        "high",
        "href",
        "hrefLang",
        "httpEquiv",
        "icon",
        "inputMode",
        "isMap",
        "itemId",
        "itemProp",
        "itemRef",
        "itemScope",
        "itemType",
        "kind",
        "label",
        "lang",
        "list",
        "loop",
        "manifest",
        "max",
        "maxLength",
        "media",
        "mediaGroup",
        "method",
        "min",
        "minLength",
        "multiple",
        "muted",
        "name",
        "noValidate",
        "open",
        "optimum",
        "pattern",
        "ping",
        "placeholder",
        "poster",
        "preload",
        "radioGroup",
        "readOnly",
        "rel",
        "required",
        "rows",
        "rowSpan",
        "sandbox",
        "scope",
        "scoped",
        "scrolling",
        "seamless",
        "selected",
        "shape",
        "size",
        "sizes",
        "slot",
        "sortable",
        "span",
        "spellCheck",
        "src",
        "srcDoc",
        "srcSet",
        "start",
        "step",
        "target",
        "translate",
        "typeMustMatch",
        "useMap",
        "value",
        "wmode",
        "wrap"
      ]);
      var DOMEventNames = /* @__PURE__ */ new Set([
        "onCopy",
        "onCut",
        "onPaste",
        "onLoad",
        "onError",
        "onWheel",
        "onScroll",
        "onCompositionEnd",
        "onCompositionStart",
        "onCompositionUpdate",
        "onKeyDown",
        "onKeyPress",
        "onKeyUp",
        "onFocus",
        "onBlur",
        "onChange",
        "onInput",
        "onSubmit",
        "onClick",
        "onContextMenu",
        "onDoubleClick",
        "onDrag",
        "onDragEnd",
        "onDragEnter",
        "onDragExit",
        "onDragLeave",
        "onDragOver",
        "onDragStart",
        "onDrop",
        "onMouseDown",
        "onMouseEnter",
        "onMouseLeave",
        "onMouseMove",
        "onMouseOut",
        "onMouseOver",
        "onMouseUp",
        "onPointerDown",
        "onPointerEnter",
        "onPointerLeave",
        "onPointerUp",
        "onSelect",
        "onTouchCancel",
        "onTouchEnd",
        "onTouchMove",
        "onTouchStart",
        "onAnimationStart",
        "onAnimationEnd",
        "onAnimationIteration",
        "onTransitionEnd"
      ]);
      var propRe = /^(data-.*)$/;
      var ariaRe = /^(aria-.*)$/;
      var funcRe = /^(on[A-Z].*)$/;
      function filterDOMProps(props, opts = {}) {
        let { labelable = true, enabled = true, propNames, omitPropNames, omitEventNames } = opts;
        let filteredProps = {};
        if (!enabled) {
          return props;
        }
        for (const prop in props) {
          if (omitPropNames == null ? void 0 : omitPropNames.has(prop)) {
            continue;
          }
          if ((omitEventNames == null ? void 0 : omitEventNames.has(prop)) && funcRe.test(prop)) {
            continue;
          }
          if (funcRe.test(prop) && !DOMEventNames.has(prop)) {
            continue;
          }
          if (Object.prototype.hasOwnProperty.call(props, prop) && (DOMPropNames.has(prop) || labelable && ariaRe.test(prop) || (propNames == null ? void 0 : propNames.has(prop)) || propRe.test(prop)) || funcRe.test(prop)) {
            filteredProps[prop] = props[prop];
          }
        }
        return filteredProps;
      }
    }
  });

  // node_modules/@nextui-org/divider/dist/index.js
  var require_dist8 = __commonJS({
    "node_modules/@nextui-org/divider/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Divider: () => divider_default,
        useDivider: () => useDivider
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system_rsc = require_dist3();
      var import_theme = require_dist5();
      var import_react3 = require_react();
      var import_react_rsc_utils = require_dist7();
      function useSeparator(props) {
        let domProps = (0, import_react_rsc_utils.filterDOMProps)(props, {
          enabled: typeof props.elementType === "string"
        });
        let ariaOrientation;
        if (props.orientation === "vertical") {
          ariaOrientation = "vertical";
        }
        if (props.elementType !== "hr") {
          return {
            separatorProps: __spreadProps(__spreadValues({}, domProps), {
              role: "separator",
              "aria-orientation": ariaOrientation
            })
          };
        }
        return { separatorProps: domProps };
      }
      function useDivider(props) {
        const _a = props, { as, className, orientation } = _a, otherProps = __objRest(_a, ["as", "className", "orientation"]);
        let Component = as || "hr";
        if (Component === "hr" && orientation === "vertical") {
          Component = "div";
        }
        const { separatorProps } = useSeparator({
          elementType: typeof Component === "string" ? Component : "hr",
          orientation
        });
        const styles = (0, import_react3.useMemo)(
          () => (0, import_theme.divider)({
            orientation,
            className
          }),
          [orientation, className]
        );
        const getDividerProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues(__spreadValues(__spreadValues({
            className: styles,
            role: "separator",
            "data-orientation": orientation
          }, separatorProps), otherProps), props2),
          [styles, orientation, separatorProps, otherProps]
        );
        return { Component, getDividerProps };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Divider = (0, import_system_rsc.forwardRef)((props, ref) => {
        const { Component, getDividerProps } = useDivider(__spreadValues({}, props));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadValues({ ref }, getDividerProps()));
      });
      Divider.displayName = "NextUI.Divider";
      var divider_default = Divider;
    }
  });

  // node_modules/@nextui-org/shared-utils/dist/index.js
  var require_dist9 = __commonJS({
    "node_modules/@nextui-org/shared-utils/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        __DEV__: () => __DEV__,
        __TEST__: () => __TEST__,
        arrayToObject: () => arrayToObject,
        callAll: () => callAll,
        callAllHandlers: () => callAllHandlers,
        capitalize: () => capitalize,
        clampPercentage: () => clampPercentage,
        cleanObject: () => cleanObject,
        cleanObjectKeys: () => cleanObjectKeys,
        clsx: () => clsx,
        compact: () => compact,
        copyObject: () => copyObject,
        dataAttr: () => dataAttr,
        extractProperty: () => extractProperty,
        getKeyValue: () => getKeyValue2,
        getMargin: () => getMargin,
        getProp: () => getProp,
        getUniqueID: () => getUniqueID,
        isArray: () => isArray,
        isEmpty: () => isEmpty,
        isEmptyArray: () => isEmptyArray,
        isEmptyObject: () => isEmptyObject,
        isFunction: () => isFunction,
        isNumeric: () => isNumeric,
        isObject: () => isObject,
        omitObject: () => omitObject,
        range: () => range,
        removeEvents: () => removeEvents,
        renameProp: () => renameProp,
        safeAriaLabel: () => safeAriaLabel,
        safeText: () => safeText,
        warn: () => warn
      });
      module.exports = __toCommonJS2(src_exports);
      var __DEV__ = true;
      var __TEST__ = false;
      function isArray(value) {
        return Array.isArray(value);
      }
      function isEmptyArray(value) {
        return isArray(value) && value.length === 0;
      }
      function isObject(value) {
        const type = typeof value;
        return value != null && (type === "object" || type === "function") && !isArray(value);
      }
      function isEmptyObject(value) {
        return isObject(value) && Object.keys(value).length === 0;
      }
      function isEmpty(value) {
        if (isArray(value))
          return isEmptyArray(value);
        if (isObject(value))
          return isEmptyObject(value);
        if (value == null || value === "")
          return true;
        return false;
      }
      function isFunction(value) {
        return typeof value === "function";
      }
      var dataAttr = (condition) => condition ? "true" : void 0;
      var isNumeric = (value) => value != null && parseInt(value.toString(), 10) > 0;
      function toVal(mix) {
        var k, y, str = "";
        if (typeof mix === "string" || typeof mix === "number") {
          str += mix;
        } else if (typeof mix === "object") {
          if (Array.isArray(mix)) {
            for (k = 0; k < mix.length; k++) {
              if (mix[k]) {
                if (y = toVal(mix[k])) {
                  str && (str += " ");
                  str += y;
                }
              }
            }
          } else {
            for (k in mix) {
              if (mix[k]) {
                str && (str += " ");
                str += k;
              }
            }
          }
        }
        return str;
      }
      function clsx(...args) {
        var i = 0, tmp, x, str = "";
        while (i < args.length) {
          if (tmp = args[i++]) {
            if (x = toVal(tmp)) {
              str && (str += " ");
              str += x;
            }
          }
        }
        return str;
      }
      var renameProp = (oldProp, newProp, _a) => {
        var _b = _a, { [oldProp]: old } = _b, others = __objRest(_b, [__restKey(oldProp)]);
        return __spreadValues({
          [newProp]: old
        }, others);
      };
      var copyObject = (obj) => {
        if (!isObject(obj))
          return obj;
        if (obj instanceof Array)
          return [...obj];
        return __spreadValues({}, obj);
      };
      var omitObject = (obj, omitKeys) => {
        if (!isObject(obj))
          return obj;
        if (obj instanceof Array)
          return [...obj];
        const newObj = __spreadValues({}, obj);
        omitKeys.forEach((key) => newObj[key] && delete newObj[key]);
        return newObj;
      };
      var cleanObject = (obj) => {
        if (!isObject(obj))
          return obj;
        if (obj instanceof Array)
          return [...obj];
        const newObj = __spreadValues({}, obj);
        Object.keys(newObj).forEach((key) => {
          if (newObj[key] === void 0 || newObj[key] === null) {
            delete newObj[key];
          }
        });
        return newObj;
      };
      var cleanObjectKeys = (obj, keys = []) => {
        if (!isObject(obj))
          return obj;
        if (obj instanceof Array)
          return [...obj];
        const newObj = __spreadValues({}, obj);
        keys.forEach((key) => {
          if (newObj[key]) {
            delete newObj[key];
          }
        });
        return newObj;
      };
      var getKeyValue2 = (obj, key) => {
        if (!isObject(obj))
          return obj;
        if (obj instanceof Array)
          return [...obj];
        return obj[key];
      };
      var getProp = (obj, path, fallback, index3) => {
        const key = typeof path === "string" ? path.split(".") : [path];
        for (index3 = 0; index3 < key.length; index3 += 1) {
          if (!obj)
            break;
          obj = obj[key[index3]];
        }
        return obj === void 0 ? fallback : obj;
      };
      var arrayToObject = (arr) => {
        if (!arr.length || !Array.isArray(arr))
          return {};
        return arr.reduce((acc, item) => {
          return __spreadValues(__spreadValues({}, acc), item);
        }, {});
      };
      function compact(object) {
        const clone = Object.assign({}, object);
        for (let key in clone) {
          if (clone[key] === void 0)
            delete clone[key];
        }
        return clone;
      }
      var safeText = (text) => {
        if ((text == null ? void 0 : text.length) <= 4)
          return text;
        return text == null ? void 0 : text.slice(0, 3);
      };
      var safeAriaLabel = (...texts) => {
        let ariaLabel = " ";
        for (const text of texts) {
          if (typeof text === "string" && text.length > 0) {
            ariaLabel = text;
            break;
          }
        }
        return ariaLabel;
      };
      var getMargin = (num) => {
        return `calc(${num * 15.25}pt + 1px * ${num - 1})`;
      };
      var capitalize = (text) => {
        return text.charAt(0).toUpperCase() + text.slice(1);
      };
      function callAllHandlers(...fns) {
        return function func(event) {
          fns.some((fn) => {
            fn == null ? void 0 : fn(event);
            return event == null ? void 0 : event.defaultPrevented;
          });
        };
      }
      function callAll(...fns) {
        return function mergedFn(arg) {
          fns.forEach((fn) => {
            fn == null ? void 0 : fn(arg);
          });
        };
      }
      function extractProperty(key, defaultValue, ...objs) {
        let result = defaultValue;
        for (const obj of objs) {
          if (obj && key in obj && !!obj[key]) {
            result = obj[key];
          }
        }
        return result;
      }
      function getUniqueID(prefix) {
        return `${prefix}-${Math.floor(Math.random() * 1e6)}`;
      }
      function removeEvents(input) {
        for (const key in input) {
          if (key.startsWith("on")) {
            delete input[key];
          }
        }
        return input;
      }
      function range(start, end) {
        const length = end - start + 1;
        return Array.from({ length }, (_, index3) => index3 + start);
      }
      function clampPercentage(value, max = 100) {
        return Math.min(Math.max(value, 0), max);
      }
      var warningStack = {};
      function warn(message, component, ...args) {
        var _a;
        const tag = component ? ` [${component}]` : " ";
        const log = `[Next UI]${tag}: ${message}`;
        if (typeof console === "undefined")
          return;
        if (warningStack[log])
          return;
        warningStack[log] = true;
        if (((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.NODE_ENV) !== "production") {
          return console.warn(log, args);
        }
      }
    }
  });

  // node_modules/@nextui-org/react-utils/dist/index.js
  var require_dist10 = __commonJS({
    "node_modules/@nextui-org/react-utils/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        assignRef: () => assignRef,
        canUseDOM: () => canUseDOM,
        createContext: () => createContext2,
        createDOMRef: () => createDOMRef,
        createFocusableRef: () => createFocusableRef,
        detectBrowser: () => detectBrowser,
        detectDeviceType: () => detectDeviceType,
        detectOS: () => detectOS,
        detectTouch: () => detectTouch,
        getCSSStyleVal: () => getCSSStyleVal,
        getRealShape: () => getRealShape,
        getUserAgentBrowser: () => getUserAgentBrowser,
        getUserAgentOS: () => getUserAgentOS,
        isBrowser: () => isBrowser,
        mergeRefs: () => mergeRefs,
        useDOMRef: () => useDOMRef,
        useFocusableRef: () => useFocusableRef,
        useSyncRef: () => useSyncRef
      });
      module.exports = __toCommonJS2(src_exports);
      var React3 = __toESM2(require_react());
      function createContext2(options = {}) {
        const {
          strict = true,
          errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
          name
        } = options;
        const Context = React3.createContext(void 0);
        Context.displayName = name;
        function useContext2() {
          var _a;
          const context = React3.useContext(Context);
          if (!context && strict) {
            const error = new Error(errorMessage);
            error.name = "ContextError";
            (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext2);
            throw error;
          }
          return context;
        }
        return [Context.Provider, useContext2, Context];
      }
      var import_shared_utils = require_dist9();
      function assignRef(ref, value) {
        if (ref == null)
          return;
        if ((0, import_shared_utils.isFunction)(ref)) {
          ref(value);
          return;
        }
        try {
          ref.current = value;
        } catch (error) {
          throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
        }
      }
      function mergeRefs(...refs) {
        return (node) => {
          refs.forEach((ref) => assignRef(ref, node));
        };
      }
      var import_react3 = require_react();
      function canUseDOM() {
        return !!(typeof window !== "undefined" && window.document && window.document.createElement);
      }
      var isBrowser = canUseDOM();
      function getUserAgentBrowser(navigator2) {
        const { userAgent: ua, vendor } = navigator2;
        const android = /(android)/i.test(ua);
        switch (true) {
          case /CriOS/.test(ua):
            return "Chrome for iOS";
          case /Edg\//.test(ua):
            return "Edge";
          case (android && /Silk\//.test(ua)):
            return "Silk";
          case (/Chrome/.test(ua) && /Google Inc/.test(vendor)):
            return "Chrome";
          case /Firefox\/\d+\.\d+$/.test(ua):
            return "Firefox";
          case android:
            return "AOSP";
          case /MSIE|Trident/.test(ua):
            return "IE";
          case (/Safari/.test(navigator2.userAgent) && /Apple Computer/.test(ua)):
            return "Safari";
          case /AppleWebKit/.test(ua):
            return "WebKit";
          default:
            return null;
        }
      }
      function getUserAgentOS(navigator2) {
        const { userAgent: ua, platform } = navigator2;
        switch (true) {
          case /Android/.test(ua):
            return "Android";
          case /iPhone|iPad|iPod/.test(platform):
            return "iOS";
          case /Win/.test(platform):
            return "Windows";
          case /Mac/.test(platform):
            return "Mac";
          case /CrOS/.test(ua):
            return "Chrome OS";
          case /Firefox/.test(ua):
            return "Firefox OS";
          default:
            return null;
        }
      }
      function detectDeviceType(navigator2) {
        const { userAgent: ua } = navigator2;
        if (/(tablet)|(iPad)|(Nexus 9)/i.test(ua))
          return "tablet";
        if (/(mobi)/i.test(ua))
          return "phone";
        return "desktop";
      }
      function detectOS(os) {
        if (!isBrowser)
          return false;
        return getUserAgentOS(window.navigator) === os;
      }
      function detectBrowser(browser) {
        if (!isBrowser)
          return false;
        return getUserAgentBrowser(window.navigator) === browser;
      }
      function detectTouch() {
        if (!isBrowser)
          return false;
        return window.ontouchstart === null && window.ontouchmove === null && window.ontouchend === null;
      }
      function createDOMRef(ref) {
        return {
          UNSAFE_getDOMNode() {
            return ref.current;
          }
        };
      }
      function createFocusableRef(domRef, focusableRef = domRef) {
        return __spreadProps(__spreadValues({}, createDOMRef(domRef)), {
          focus() {
            if (focusableRef.current) {
              focusableRef.current.focus();
            }
          }
        });
      }
      function useDOMRef(ref) {
        const domRef = (0, import_react3.useRef)(null);
        (0, import_react3.useImperativeHandle)(ref, () => domRef.current);
        return domRef;
      }
      function useFocusableRef(ref, focusableRef) {
        const domRef = (0, import_react3.useRef)(null);
        (0, import_react3.useImperativeHandle)(ref, () => createFocusableRef(domRef, focusableRef));
        return domRef;
      }
      function useSyncRef(context, ref) {
        (0, import_react3.useLayoutEffect)(() => {
          if (context && context.ref && ref && ref.current) {
            context.ref.current = ref.current;
            return () => {
              var _a;
              if ((_a = context.ref) == null ? void 0 : _a.current) {
                context.ref.current = null;
              }
            };
          }
        }, [context, ref]);
      }
      var getCSSStyleVal = (str, parentNum) => {
        if (!str)
          return 0;
        const strVal = str.includes("px") ? +str.split("px")[0] : str.includes("%") ? +str.split("%")[0] * parentNum * 0.01 : str;
        return Number.isNaN(+strVal) ? 0 : +strVal;
      };
      var getRealShape = (el) => {
        const defaultShape = { width: 0, height: 0 };
        if (!el || typeof window === "undefined")
          return defaultShape;
        const rect = el.getBoundingClientRect();
        const { width, height } = window.getComputedStyle(el);
        return {
          width: getCSSStyleVal(`${width}`, rect.width),
          height: getCSSStyleVal(`${height}`, rect.height)
        };
      };
      __reExport(src_exports, require_dist7(), module.exports);
    }
  });

  // node_modules/@react-stately/selection/dist/main.js
  var require_main16 = __commonJS({
    "node_modules/@react-stately/selection/dist/main.js"(exports, module) {
      var $83d9f$react = require_react();
      var $83d9f$reactstatelyutils = require_main6();
      var $83d9f$reactstatelycollections = require_main15();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useMultipleSelectionState", () => $1adc19da2128bba9$export$253fe78d46329472);
      $parcel$export(module.exports, "SelectionManager", () => $8112da6fa5bbc322$export$6c8a5aaad13c9852);
      var $21c847070f1f9569$export$52baac22726c72bf = class _$21c847070f1f9569$export$52baac22726c72bf extends Set {
        constructor(keys, anchorKey, currentKey) {
          super(keys);
          if (keys instanceof _$21c847070f1f9569$export$52baac22726c72bf) {
            this.anchorKey = anchorKey || keys.anchorKey;
            this.currentKey = currentKey || keys.currentKey;
          } else {
            this.anchorKey = anchorKey;
            this.currentKey = currentKey;
          }
        }
      };
      function $1adc19da2128bba9$var$equalSets(setA, setB) {
        if (setA.size !== setB.size)
          return false;
        for (let item of setA) {
          if (!setB.has(item))
            return false;
        }
        return true;
      }
      function $1adc19da2128bba9$export$253fe78d46329472(props) {
        let { selectionMode = "none", disallowEmptySelection, allowDuplicateSelectionEvents, selectionBehavior: selectionBehaviorProp = "toggle", disabledBehavior = "all" } = props;
        let isFocusedRef = (0, $83d9f$react.useRef)(false);
        let [, setFocused] = (0, $83d9f$react.useState)(false);
        let focusedKeyRef = (0, $83d9f$react.useRef)(null);
        let childFocusStrategyRef = (0, $83d9f$react.useRef)(null);
        let [, setFocusedKey] = (0, $83d9f$react.useState)(null);
        let selectedKeysProp = (0, $83d9f$react.useMemo)(() => $1adc19da2128bba9$var$convertSelection(props.selectedKeys), [
          props.selectedKeys
        ]);
        let defaultSelectedKeys = (0, $83d9f$react.useMemo)(() => $1adc19da2128bba9$var$convertSelection(props.defaultSelectedKeys, new (0, $21c847070f1f9569$export$52baac22726c72bf)()), [
          props.defaultSelectedKeys
        ]);
        let [selectedKeys, setSelectedKeys] = (0, $83d9f$reactstatelyutils.useControlledState)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
        let disabledKeysProp = (0, $83d9f$react.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
          props.disabledKeys
        ]);
        let [selectionBehavior, setSelectionBehavior] = (0, $83d9f$react.useState)(selectionBehaviorProp);
        if (selectionBehaviorProp === "replace" && selectionBehavior === "toggle" && typeof selectedKeys === "object" && selectedKeys.size === 0)
          setSelectionBehavior("replace");
        let lastSelectionBehavior = (0, $83d9f$react.useRef)(selectionBehaviorProp);
        (0, $83d9f$react.useEffect)(() => {
          if (selectionBehaviorProp !== lastSelectionBehavior.current) {
            setSelectionBehavior(selectionBehaviorProp);
            lastSelectionBehavior.current = selectionBehaviorProp;
          }
        }, [
          selectionBehaviorProp
        ]);
        return {
          selectionMode,
          disallowEmptySelection,
          selectionBehavior,
          setSelectionBehavior,
          get isFocused() {
            return isFocusedRef.current;
          },
          setFocused(f) {
            isFocusedRef.current = f;
            setFocused(f);
          },
          get focusedKey() {
            return focusedKeyRef.current;
          },
          get childFocusStrategy() {
            return childFocusStrategyRef.current;
          },
          setFocusedKey(k, childFocusStrategy = "first") {
            focusedKeyRef.current = k;
            childFocusStrategyRef.current = childFocusStrategy;
            setFocusedKey(k);
          },
          selectedKeys,
          setSelectedKeys(keys) {
            if (allowDuplicateSelectionEvents || !$1adc19da2128bba9$var$equalSets(keys, selectedKeys))
              setSelectedKeys(keys);
          },
          disabledKeys: disabledKeysProp,
          disabledBehavior
        };
      }
      function $1adc19da2128bba9$var$convertSelection(selection, defaultValue) {
        if (!selection)
          return defaultValue;
        return selection === "all" ? "all" : new (0, $21c847070f1f9569$export$52baac22726c72bf)(selection);
      }
      var $8112da6fa5bbc322$export$6c8a5aaad13c9852 = class {
        /**
        * The type of selection that is allowed in the collection.
        */
        get selectionMode() {
          return this.state.selectionMode;
        }
        /**
        * Whether the collection allows empty selection.
        */
        get disallowEmptySelection() {
          return this.state.disallowEmptySelection;
        }
        /**
        * The selection behavior for the collection.
        */
        get selectionBehavior() {
          return this.state.selectionBehavior;
        }
        /**
        * Sets the selection behavior for the collection.
        */
        setSelectionBehavior(selectionBehavior) {
          this.state.setSelectionBehavior(selectionBehavior);
        }
        /**
        * Whether the collection is currently focused.
        */
        get isFocused() {
          return this.state.isFocused;
        }
        /**
        * Sets whether the collection is focused.
        */
        setFocused(isFocused) {
          this.state.setFocused(isFocused);
        }
        /**
        * The current focused key in the collection.
        */
        get focusedKey() {
          return this.state.focusedKey;
        }
        /** Whether the first or last child of the focused key should receive focus. */
        get childFocusStrategy() {
          return this.state.childFocusStrategy;
        }
        /**
        * Sets the focused key.
        */
        setFocusedKey(key, childFocusStrategy) {
          if (key == null || this.collection.getItem(key))
            this.state.setFocusedKey(key, childFocusStrategy);
        }
        /**
        * The currently selected keys in the collection.
        */
        get selectedKeys() {
          return this.state.selectedKeys === "all" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
        }
        /**
        * The raw selection value for the collection.
        * Either 'all' for select all, or a set of keys.
        */
        get rawSelection() {
          return this.state.selectedKeys;
        }
        /**
        * Returns whether a key is selected.
        */
        isSelected(key) {
          if (this.state.selectionMode === "none")
            return false;
          key = this.getKey(key);
          return this.state.selectedKeys === "all" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);
        }
        /**
        * Whether the selection is empty.
        */
        get isEmpty() {
          return this.state.selectedKeys !== "all" && this.state.selectedKeys.size === 0;
        }
        /**
        * Whether all items in the collection are selected.
        */
        get isSelectAll() {
          if (this.isEmpty)
            return false;
          if (this.state.selectedKeys === "all")
            return true;
          if (this._isSelectAll != null)
            return this._isSelectAll;
          let allKeys = this.getSelectAllKeys();
          let selectedKeys = this.state.selectedKeys;
          this._isSelectAll = allKeys.every((k) => selectedKeys.has(k));
          return this._isSelectAll;
        }
        get firstSelectedKey() {
          let first = null;
          for (let key of this.state.selectedKeys) {
            let item = this.collection.getItem(key);
            if (!first || item && (0, $83d9f$reactstatelycollections.compareNodeOrder)(this.collection, item, first) < 0)
              first = item;
          }
          return first === null || first === void 0 ? void 0 : first.key;
        }
        get lastSelectedKey() {
          let last = null;
          for (let key of this.state.selectedKeys) {
            let item = this.collection.getItem(key);
            if (!last || item && (0, $83d9f$reactstatelycollections.compareNodeOrder)(this.collection, item, last) > 0)
              last = item;
          }
          return last === null || last === void 0 ? void 0 : last.key;
        }
        get disabledKeys() {
          return this.state.disabledKeys;
        }
        get disabledBehavior() {
          return this.state.disabledBehavior;
        }
        /**
        * Extends the selection to the given key.
        */
        extendSelection(toKey) {
          if (this.selectionMode === "none")
            return;
          if (this.selectionMode === "single") {
            this.replaceSelection(toKey);
            return;
          }
          toKey = this.getKey(toKey);
          let selection;
          if (this.state.selectedKeys === "all")
            selection = new (0, $21c847070f1f9569$export$52baac22726c72bf)([
              toKey
            ], toKey, toKey);
          else {
            let selectedKeys = this.state.selectedKeys;
            let anchorKey = selectedKeys.anchorKey || toKey;
            selection = new (0, $21c847070f1f9569$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);
            for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))
              selection.delete(key);
            for (let key of this.getKeyRange(toKey, anchorKey))
              if (this.canSelectItem(key))
                selection.add(key);
          }
          this.state.setSelectedKeys(selection);
        }
        getKeyRange(from, to) {
          let fromItem = this.collection.getItem(from);
          let toItem = this.collection.getItem(to);
          if (fromItem && toItem) {
            if ((0, $83d9f$reactstatelycollections.compareNodeOrder)(this.collection, fromItem, toItem) <= 0)
              return this.getKeyRangeInternal(from, to);
            return this.getKeyRangeInternal(to, from);
          }
          return [];
        }
        getKeyRangeInternal(from, to) {
          let keys = [];
          let key = from;
          while (key) {
            let item = this.collection.getItem(key);
            if (item && item.type === "item" || item.type === "cell" && this.allowsCellSelection)
              keys.push(key);
            if (key === to)
              return keys;
            key = this.collection.getKeyAfter(key);
          }
          return [];
        }
        getKey(key) {
          let item = this.collection.getItem(key);
          if (!item)
            return key;
          if (item.type === "cell" && this.allowsCellSelection)
            return key;
          while (item.type !== "item" && item.parentKey != null)
            item = this.collection.getItem(item.parentKey);
          if (!item || item.type !== "item")
            return null;
          return item.key;
        }
        /**
        * Toggles whether the given key is selected.
        */
        toggleSelection(key) {
          if (this.selectionMode === "none")
            return;
          if (this.selectionMode === "single" && !this.isSelected(key)) {
            this.replaceSelection(key);
            return;
          }
          key = this.getKey(key);
          if (key == null)
            return;
          let keys = new (0, $21c847070f1f9569$export$52baac22726c72bf)(this.state.selectedKeys === "all" ? this.getSelectAllKeys() : this.state.selectedKeys);
          if (keys.has(key))
            keys.delete(key);
          else if (this.canSelectItem(key)) {
            keys.add(key);
            keys.anchorKey = key;
            keys.currentKey = key;
          }
          if (this.disallowEmptySelection && keys.size === 0)
            return;
          this.state.setSelectedKeys(keys);
        }
        /**
        * Replaces the selection with only the given key.
        */
        replaceSelection(key) {
          if (this.selectionMode === "none")
            return;
          key = this.getKey(key);
          if (key == null)
            return;
          let selection = this.canSelectItem(key) ? new (0, $21c847070f1f9569$export$52baac22726c72bf)([
            key
          ], key, key) : new (0, $21c847070f1f9569$export$52baac22726c72bf)();
          this.state.setSelectedKeys(selection);
        }
        /**
        * Replaces the selection with the given keys.
        */
        setSelectedKeys(keys) {
          if (this.selectionMode === "none")
            return;
          let selection = new (0, $21c847070f1f9569$export$52baac22726c72bf)();
          for (let key of keys) {
            key = this.getKey(key);
            if (key != null) {
              selection.add(key);
              if (this.selectionMode === "single")
                break;
            }
          }
          this.state.setSelectedKeys(selection);
        }
        getSelectAllKeys() {
          let keys = [];
          let addKeys = (key) => {
            while (key) {
              if (this.canSelectItem(key)) {
                let item = this.collection.getItem(key);
                if (item.type === "item")
                  keys.push(key);
                if (item.hasChildNodes && (this.allowsCellSelection || item.type !== "item"))
                  addKeys((0, $83d9f$reactstatelycollections.getFirstItem)((0, $83d9f$reactstatelycollections.getChildNodes)(item, this.collection)).key);
              }
              key = this.collection.getKeyAfter(key);
            }
          };
          addKeys(this.collection.getFirstKey());
          return keys;
        }
        /**
        * Selects all items in the collection.
        */
        selectAll() {
          if (!this.isSelectAll && this.selectionMode === "multiple")
            this.state.setSelectedKeys("all");
        }
        /**
        * Removes all keys from the selection.
        */
        clearSelection() {
          if (!this.disallowEmptySelection && (this.state.selectedKeys === "all" || this.state.selectedKeys.size > 0))
            this.state.setSelectedKeys(new (0, $21c847070f1f9569$export$52baac22726c72bf)());
        }
        /**
        * Toggles between select all and an empty selection.
        */
        toggleSelectAll() {
          if (this.isSelectAll)
            this.clearSelection();
          else
            this.selectAll();
        }
        select(key, e) {
          if (this.selectionMode === "none")
            return;
          if (this.selectionMode === "single") {
            if (this.isSelected(key) && !this.disallowEmptySelection)
              this.toggleSelection(key);
            else
              this.replaceSelection(key);
          } else if (this.selectionBehavior === "toggle" || e && (e.pointerType === "touch" || e.pointerType === "virtual"))
            this.toggleSelection(key);
          else
            this.replaceSelection(key);
        }
        /**
        * Returns whether the current selection is equal to the given selection.
        */
        isSelectionEqual(selection) {
          if (selection === this.state.selectedKeys)
            return true;
          let selectedKeys = this.selectedKeys;
          if (selection.size !== selectedKeys.size)
            return false;
          for (let key of selection) {
            if (!selectedKeys.has(key))
              return false;
          }
          for (let key of selectedKeys) {
            if (!selection.has(key))
              return false;
          }
          return true;
        }
        canSelectItem(key) {
          if (this.state.selectionMode === "none" || this.state.disabledKeys.has(key))
            return false;
          let item = this.collection.getItem(key);
          if (!item || item.type === "cell" && !this.allowsCellSelection)
            return false;
          return true;
        }
        isDisabled(key) {
          return this.state.disabledKeys.has(key) && this.state.disabledBehavior === "all";
        }
        isLink(key) {
          var _this_collection_getItem, _this_collection_getItem_props;
          return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);
        }
        constructor(collection, state, options) {
          this.collection = collection;
          this.state = state;
          var _options_allowsCellSelection;
          this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;
          this._isSelectAll = null;
        }
      };
    }
  });

  // node_modules/@react-stately/tree/dist/main.js
  var require_main17 = __commonJS({
    "node_modules/@react-stately/tree/dist/main.js"(exports, module) {
      var $cfIzB$react = require_react();
      var $cfIzB$reactstatelyselection = require_main16();
      var $cfIzB$reactstatelycollections = require_main15();
      var $cfIzB$reactstatelyutils = require_main6();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useTreeState", () => $38effb299000faaf$export$728d6ba534403756);
      $parcel$export(module.exports, "TreeCollection", () => $fae56b53b03726ff$export$863faf230ee2118a);
      var $fae56b53b03726ff$export$863faf230ee2118a = class {
        *[Symbol.iterator]() {
          yield* __yieldStar(this.iterable);
        }
        get size() {
          return this.keyMap.size;
        }
        getKeys() {
          return this.keyMap.keys();
        }
        getKeyBefore(key) {
          let node = this.keyMap.get(key);
          return node ? node.prevKey : null;
        }
        getKeyAfter(key) {
          let node = this.keyMap.get(key);
          return node ? node.nextKey : null;
        }
        getFirstKey() {
          return this.firstKey;
        }
        getLastKey() {
          return this.lastKey;
        }
        getItem(key) {
          return this.keyMap.get(key);
        }
        at(idx) {
          const keys = [
            ...this.getKeys()
          ];
          return this.getItem(keys[idx]);
        }
        constructor(nodes, { expandedKeys } = {}) {
          this.keyMap = /* @__PURE__ */ new Map();
          this.iterable = nodes;
          expandedKeys = expandedKeys || /* @__PURE__ */ new Set();
          let visit = (node) => {
            this.keyMap.set(node.key, node);
            if (node.childNodes && (node.type === "section" || expandedKeys.has(node.key)))
              for (let child of node.childNodes)
                visit(child);
          };
          for (let node of nodes)
            visit(node);
          let last;
          let index3 = 0;
          for (let [key, node] of this.keyMap) {
            if (last) {
              last.nextKey = key;
              node.prevKey = last.key;
            } else {
              this.firstKey = key;
              node.prevKey = void 0;
            }
            if (node.type === "item")
              node.index = index3++;
            last = node;
            last.nextKey = void 0;
          }
          this.lastKey = last === null || last === void 0 ? void 0 : last.key;
        }
      };
      function $38effb299000faaf$export$728d6ba534403756(props) {
        let [expandedKeys, setExpandedKeys] = (0, $cfIzB$reactstatelyutils.useControlledState)(props.expandedKeys ? new Set(props.expandedKeys) : void 0, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : /* @__PURE__ */ new Set(), props.onExpandedChange);
        let selectionState = (0, $cfIzB$reactstatelyselection.useMultipleSelectionState)(props);
        let disabledKeys = (0, $cfIzB$react.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
          props.disabledKeys
        ]);
        let tree = (0, $cfIzB$reactstatelycollections.useCollection)(props, (0, $cfIzB$react.useCallback)((nodes) => new (0, $fae56b53b03726ff$export$863faf230ee2118a)(nodes, {
          expandedKeys
        }), [
          expandedKeys
        ]), null);
        (0, $cfIzB$react.useEffect)(() => {
          if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey))
            selectionState.setFocusedKey(null);
        }, [
          tree,
          selectionState.focusedKey
        ]);
        let onToggle = (key) => {
          setExpandedKeys($38effb299000faaf$var$toggleKey(expandedKeys, key));
        };
        return {
          collection: tree,
          expandedKeys,
          disabledKeys,
          toggleKey: onToggle,
          setExpandedKeys,
          selectionManager: new (0, $cfIzB$reactstatelyselection.SelectionManager)(tree, selectionState)
        };
      }
      function $38effb299000faaf$var$toggleKey(set, key) {
        let res = new Set(set);
        if (res.has(key))
          res.delete(key);
        else
          res.add(key);
        return res;
      }
    }
  });

  // node_modules/@react-aria/selection/dist/main.js
  var require_main18 = __commonJS({
    "node_modules/@react-aria/selection/dist/main.js"(exports, module) {
      var $glPPV$reactdom = require_react_dom();
      var $glPPV$react = require_react();
      var $glPPV$reactariafocus = require_main12();
      var $glPPV$reactariautils = require_main7();
      var $glPPV$reactariainteractions = require_main11();
      var $glPPV$reactariai18n = require_main10();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useSelectableCollection", () => $b6837c2f80a3c32f$export$d6daf82dcd84e87c);
      $parcel$export(module.exports, "useSelectableItem", () => $433b1145b0781e10$export$ecf600387e221c37);
      $parcel$export(module.exports, "useSelectableList", () => $bd230acee196f50c$export$b95089534ab7c1fd);
      $parcel$export(module.exports, "ListKeyboardDelegate", () => $836f880b12dcae5c$export$a05409b8bb224a5a);
      $parcel$export(module.exports, "useTypeSelect", () => $a1189052f36475e8$export$e32c88dfddc6e1d8);
      function $ee0bdf4faa47f2a8$export$d3e3bd3e26688c04(e) {
        return (0, $glPPV$reactariautils.isAppleDevice)() ? e.altKey : e.ctrlKey;
      }
      function $ee0bdf4faa47f2a8$export$16792effe837dba3(e) {
        if ((0, $glPPV$reactariautils.isMac)())
          return e.metaKey;
        return e.ctrlKey;
      }
      var $a1189052f36475e8$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1e3;
      function $a1189052f36475e8$export$e32c88dfddc6e1d8(options) {
        let { keyboardDelegate, selectionManager, onTypeSelect } = options;
        let state = (0, $glPPV$react.useRef)({
          search: "",
          timeout: null
        }).current;
        let onKeyDown = (e) => {
          let character = $a1189052f36475e8$var$getStringForKey(e.key);
          if (!character || e.ctrlKey || e.metaKey || !e.currentTarget.contains(e.target))
            return;
          if (character === " " && state.search.trim().length > 0) {
            e.preventDefault();
            if (!("continuePropagation" in e))
              e.stopPropagation();
          }
          state.search += character;
          let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);
          if (key == null)
            key = keyboardDelegate.getKeyForSearch(state.search);
          if (key != null) {
            selectionManager.setFocusedKey(key);
            if (onTypeSelect)
              onTypeSelect(key);
          }
          clearTimeout(state.timeout);
          state.timeout = setTimeout(() => {
            state.search = "";
          }, $a1189052f36475e8$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);
        };
        return {
          typeSelectProps: {
            // Using a capturing listener to catch the keydown event before
            // other hooks in order to handle the Spacebar event.
            onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null
          }
        };
      }
      function $a1189052f36475e8$var$getStringForKey(key) {
        if (key.length === 1 || !/^[A-Z]/i.test(key))
          return key;
        return "";
      }
      function $b6837c2f80a3c32f$export$d6daf82dcd84e87c(options) {
        let { selectionManager: manager, keyboardDelegate: delegate, ref, autoFocus = false, shouldFocusWrap = false, disallowEmptySelection = false, disallowSelectAll = false, selectOnFocus = manager.selectionBehavior === "replace", disallowTypeAhead = false, shouldUseVirtualFocus, allowsTabNavigation = false, isVirtualized, scrollRef = ref, linkBehavior = "action" } = options;
        let { direction } = (0, $glPPV$reactariai18n.useLocale)();
        let router = (0, $glPPV$reactariautils.useRouter)();
        let onKeyDown = (e) => {
          if (e.altKey && e.key === "Tab")
            e.preventDefault();
          if (!ref.current.contains(e.target))
            return;
          const navigateToKey = (key, childFocus) => {
            if (key != null) {
              if (manager.isLink(key) && linkBehavior === "selection" && selectOnFocus && !(0, $ee0bdf4faa47f2a8$export$d3e3bd3e26688c04)(e)) {
                (0, $glPPV$reactdom.flushSync)(() => {
                  manager.setFocusedKey(key, childFocus);
                });
                let item = scrollRef.current.querySelector(`[data-key="${key}"]`);
                router.open(item, e);
                return;
              }
              manager.setFocusedKey(key, childFocus);
              if (manager.isLink(key) && linkBehavior === "override")
                return;
              if (e.shiftKey && manager.selectionMode === "multiple")
                manager.extendSelection(key);
              else if (selectOnFocus && !(0, $ee0bdf4faa47f2a8$export$d3e3bd3e26688c04)(e))
                manager.replaceSelection(key);
            }
          };
          switch (e.key) {
            case "ArrowDown":
              if (delegate.getKeyBelow) {
                var _delegate_getFirstKey, _delegate_getFirstKey1;
                e.preventDefault();
                let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);
                if (nextKey == null && shouldFocusWrap)
                  nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);
                navigateToKey(nextKey);
              }
              break;
            case "ArrowUp":
              if (delegate.getKeyAbove) {
                var _delegate_getLastKey, _delegate_getLastKey1;
                e.preventDefault();
                let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);
                if (nextKey == null && shouldFocusWrap)
                  nextKey = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);
                navigateToKey(nextKey);
              }
              break;
            case "ArrowLeft":
              if (delegate.getKeyLeftOf) {
                var _delegate_getFirstKey2, _delegate_getLastKey2;
                e.preventDefault();
                let nextKey = delegate.getKeyLeftOf(manager.focusedKey);
                if (nextKey == null && shouldFocusWrap)
                  nextKey = direction === "rtl" ? (_delegate_getFirstKey2 = delegate.getFirstKey) === null || _delegate_getFirstKey2 === void 0 ? void 0 : _delegate_getFirstKey2.call(delegate, manager.focusedKey) : (_delegate_getLastKey2 = delegate.getLastKey) === null || _delegate_getLastKey2 === void 0 ? void 0 : _delegate_getLastKey2.call(delegate, manager.focusedKey);
                navigateToKey(nextKey, direction === "rtl" ? "first" : "last");
              }
              break;
            case "ArrowRight":
              if (delegate.getKeyRightOf) {
                var _delegate_getLastKey3, _delegate_getFirstKey3;
                e.preventDefault();
                let nextKey = delegate.getKeyRightOf(manager.focusedKey);
                if (nextKey == null && shouldFocusWrap)
                  nextKey = direction === "rtl" ? (_delegate_getLastKey3 = delegate.getLastKey) === null || _delegate_getLastKey3 === void 0 ? void 0 : _delegate_getLastKey3.call(delegate, manager.focusedKey) : (_delegate_getFirstKey3 = delegate.getFirstKey) === null || _delegate_getFirstKey3 === void 0 ? void 0 : _delegate_getFirstKey3.call(delegate, manager.focusedKey);
                navigateToKey(nextKey, direction === "rtl" ? "last" : "first");
              }
              break;
            case "Home":
              if (delegate.getFirstKey) {
                e.preventDefault();
                let firstKey = delegate.getFirstKey(manager.focusedKey, (0, $ee0bdf4faa47f2a8$export$16792effe837dba3)(e));
                manager.setFocusedKey(firstKey);
                if ((0, $ee0bdf4faa47f2a8$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === "multiple")
                  manager.extendSelection(firstKey);
                else if (selectOnFocus)
                  manager.replaceSelection(firstKey);
              }
              break;
            case "End":
              if (delegate.getLastKey) {
                e.preventDefault();
                let lastKey = delegate.getLastKey(manager.focusedKey, (0, $ee0bdf4faa47f2a8$export$16792effe837dba3)(e));
                manager.setFocusedKey(lastKey);
                if ((0, $ee0bdf4faa47f2a8$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === "multiple")
                  manager.extendSelection(lastKey);
                else if (selectOnFocus)
                  manager.replaceSelection(lastKey);
              }
              break;
            case "PageDown":
              if (delegate.getKeyPageBelow) {
                e.preventDefault();
                let nextKey = delegate.getKeyPageBelow(manager.focusedKey);
                navigateToKey(nextKey);
              }
              break;
            case "PageUp":
              if (delegate.getKeyPageAbove) {
                e.preventDefault();
                let nextKey = delegate.getKeyPageAbove(manager.focusedKey);
                navigateToKey(nextKey);
              }
              break;
            case "a":
              if ((0, $ee0bdf4faa47f2a8$export$16792effe837dba3)(e) && manager.selectionMode === "multiple" && disallowSelectAll !== true) {
                e.preventDefault();
                manager.selectAll();
              }
              break;
            case "Escape":
              e.preventDefault();
              if (!disallowEmptySelection)
                manager.clearSelection();
              break;
            case "Tab":
              if (!allowsTabNavigation) {
                if (e.shiftKey)
                  ref.current.focus();
                else {
                  let walker = (0, $glPPV$reactariafocus.getFocusableTreeWalker)(ref.current, {
                    tabbable: true
                  });
                  let next;
                  let last;
                  do {
                    last = walker.lastChild();
                    if (last)
                      next = last;
                  } while (last);
                  if (next && !next.contains(document.activeElement))
                    (0, $glPPV$reactariautils.focusWithoutScrolling)(next);
                }
                break;
              }
          }
        };
        let scrollPos = (0, $glPPV$react.useRef)({
          top: 0,
          left: 0
        });
        (0, $glPPV$reactariautils.useEvent)(scrollRef, "scroll", isVirtualized ? null : () => {
          scrollPos.current = {
            top: scrollRef.current.scrollTop,
            left: scrollRef.current.scrollLeft
          };
        });
        let onFocus = (e) => {
          if (manager.isFocused) {
            if (!e.currentTarget.contains(e.target))
              manager.setFocused(false);
            return;
          }
          if (!e.currentTarget.contains(e.target))
            return;
          manager.setFocused(true);
          if (manager.focusedKey == null) {
            let navigateToFirstKey = (key) => {
              if (key != null) {
                manager.setFocusedKey(key);
                if (selectOnFocus)
                  manager.replaceSelection(key);
              }
            };
            let relatedTarget = e.relatedTarget;
            var _manager_lastSelectedKey, _manager_firstSelectedKey;
            if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING)
              navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());
            else
              navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());
          } else if (!isVirtualized) {
            scrollRef.current.scrollTop = scrollPos.current.top;
            scrollRef.current.scrollLeft = scrollPos.current.left;
          }
          if (!isVirtualized && manager.focusedKey != null) {
            let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
            if (element) {
              if (!element.contains(document.activeElement))
                (0, $glPPV$reactariautils.focusWithoutScrolling)(element);
              let modality = (0, $glPPV$reactariainteractions.getInteractionModality)();
              if (modality === "keyboard")
                (0, $glPPV$reactariautils.scrollIntoViewport)(element, {
                  containingElement: ref.current
                });
            }
          }
        };
        let onBlur = (e) => {
          if (!e.currentTarget.contains(e.relatedTarget))
            manager.setFocused(false);
        };
        const autoFocusRef = (0, $glPPV$react.useRef)(autoFocus);
        (0, $glPPV$react.useEffect)(() => {
          if (autoFocusRef.current) {
            let focusedKey = null;
            if (autoFocus === "first")
              focusedKey = delegate.getFirstKey();
            if (autoFocus === "last")
              focusedKey = delegate.getLastKey();
            let selectedKeys = manager.selectedKeys;
            if (selectedKeys.size)
              focusedKey = selectedKeys.values().next().value;
            manager.setFocused(true);
            manager.setFocusedKey(focusedKey);
            if (focusedKey == null && !shouldUseVirtualFocus)
              (0, $glPPV$reactariafocus.focusSafely)(ref.current);
          }
          autoFocusRef.current = false;
        }, []);
        let lastFocusedKey = (0, $glPPV$react.useRef)(manager.focusedKey);
        (0, $glPPV$react.useEffect)(() => {
          let modality = (0, $glPPV$reactariainteractions.getInteractionModality)();
          if (manager.isFocused && manager.focusedKey != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {
            let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
            if (element && modality === "keyboard") {
              if (!isVirtualized)
                (0, $glPPV$reactariautils.scrollIntoView)(scrollRef.current, element);
              (0, $glPPV$reactariautils.scrollIntoViewport)(element, {
                containingElement: ref.current
              });
            }
          }
          if (manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null)
            (0, $glPPV$reactariafocus.focusSafely)(ref.current);
          lastFocusedKey.current = manager.focusedKey;
        }, [
          isVirtualized,
          scrollRef,
          manager.focusedKey,
          manager.isFocused,
          ref
        ]);
        let handlers = {
          onKeyDown,
          onFocus,
          onBlur,
          onMouseDown(e) {
            if (scrollRef.current === e.target)
              e.preventDefault();
          }
        };
        let { typeSelectProps } = (0, $a1189052f36475e8$export$e32c88dfddc6e1d8)({
          keyboardDelegate: delegate,
          selectionManager: manager
        });
        if (!disallowTypeAhead)
          handlers = (0, $glPPV$reactariautils.mergeProps)(typeSelectProps, handlers);
        let tabIndex;
        if (!shouldUseVirtualFocus)
          tabIndex = manager.focusedKey == null ? 0 : -1;
        return {
          collectionProps: __spreadProps(__spreadValues({}, handlers), {
            tabIndex
          })
        };
      }
      function $433b1145b0781e10$export$ecf600387e221c37(options) {
        let { selectionManager: manager, key, ref, shouldSelectOnPressUp, shouldUseVirtualFocus, focus, isDisabled, onAction, allowsDifferentPressOrigin, linkBehavior = "action" } = options;
        let router = (0, $glPPV$reactariautils.useRouter)();
        let onSelect = (e) => {
          if (e.pointerType === "keyboard" && (0, $ee0bdf4faa47f2a8$export$d3e3bd3e26688c04)(e))
            manager.toggleSelection(key);
          else {
            if (manager.selectionMode === "none")
              return;
            if (manager.isLink(key)) {
              if (linkBehavior === "selection") {
                router.open(ref.current, e);
                manager.setSelectedKeys(manager.selectedKeys);
                return;
              } else if (linkBehavior === "override" || linkBehavior === "none")
                return;
            }
            if (manager.selectionMode === "single") {
              if (manager.isSelected(key) && !manager.disallowEmptySelection)
                manager.toggleSelection(key);
              else
                manager.replaceSelection(key);
            } else if (e && e.shiftKey)
              manager.extendSelection(key);
            else if (manager.selectionBehavior === "toggle" || e && ((0, $ee0bdf4faa47f2a8$export$16792effe837dba3)(e) || e.pointerType === "touch" || e.pointerType === "virtual"))
              manager.toggleSelection(key);
            else
              manager.replaceSelection(key);
          }
        };
        (0, $glPPV$react.useEffect)(() => {
          let isFocused = key === manager.focusedKey;
          if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {
            if (focus)
              focus();
            else if (document.activeElement !== ref.current)
              (0, $glPPV$reactariafocus.focusSafely)(ref.current);
          }
        }, [
          ref,
          key,
          manager.focusedKey,
          manager.childFocusStrategy,
          manager.isFocused,
          shouldUseVirtualFocus
        ]);
        isDisabled = isDisabled || manager.isDisabled(key);
        let itemProps = {};
        if (!shouldUseVirtualFocus && !isDisabled)
          itemProps = {
            tabIndex: key === manager.focusedKey ? 0 : -1,
            onFocus(e) {
              if (e.target === ref.current)
                manager.setFocusedKey(key);
            }
          };
        else if (isDisabled)
          itemProps.onMouseDown = (e) => {
            e.preventDefault();
          };
        let isLinkOverride = manager.isLink(key) && linkBehavior === "override";
        let hasLinkAction = manager.isLink(key) && linkBehavior !== "selection" && linkBehavior !== "none";
        let allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride;
        let allowsActions = (onAction || hasLinkAction) && !isDisabled;
        let hasPrimaryAction = allowsActions && (manager.selectionBehavior === "replace" ? !allowsSelection : !allowsSelection || manager.isEmpty);
        let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === "replace";
        let hasAction = hasPrimaryAction || hasSecondaryAction;
        let modality = (0, $glPPV$react.useRef)(null);
        let longPressEnabled = hasAction && allowsSelection;
        let longPressEnabledOnPressStart = (0, $glPPV$react.useRef)(false);
        let hadPrimaryActionOnPressStart = (0, $glPPV$react.useRef)(false);
        let performAction = (e) => {
          if (onAction)
            onAction();
          if (hasLinkAction)
            router.open(ref.current, e);
        };
        let itemPressProps = {};
        if (shouldSelectOnPressUp) {
          itemPressProps.onPressStart = (e) => {
            modality.current = e.pointerType;
            longPressEnabledOnPressStart.current = longPressEnabled;
            if (e.pointerType === "keyboard" && (!hasAction || $433b1145b0781e10$var$isSelectionKey()))
              onSelect(e);
          };
          if (!allowsDifferentPressOrigin)
            itemPressProps.onPress = (e) => {
              if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== "mouse") {
                if (e.pointerType === "keyboard" && !$433b1145b0781e10$var$isActionKey())
                  return;
                performAction(e);
              } else if (e.pointerType !== "keyboard" && allowsSelection)
                onSelect(e);
            };
          else {
            itemPressProps.onPressUp = hasPrimaryAction ? null : (e) => {
              if (e.pointerType !== "keyboard" && allowsSelection)
                onSelect(e);
            };
            itemPressProps.onPress = hasPrimaryAction ? performAction : null;
          }
        } else {
          itemPressProps.onPressStart = (e) => {
            modality.current = e.pointerType;
            longPressEnabledOnPressStart.current = longPressEnabled;
            hadPrimaryActionOnPressStart.current = hasPrimaryAction;
            if (allowsSelection && (e.pointerType === "mouse" && !hasPrimaryAction || e.pointerType === "keyboard" && (!allowsActions || $433b1145b0781e10$var$isSelectionKey())))
              onSelect(e);
          };
          itemPressProps.onPress = (e) => {
            if (e.pointerType === "touch" || e.pointerType === "pen" || e.pointerType === "virtual" || e.pointerType === "keyboard" && hasAction && $433b1145b0781e10$var$isActionKey() || e.pointerType === "mouse" && hadPrimaryActionOnPressStart.current) {
              if (hasAction)
                performAction(e);
              else if (allowsSelection)
                onSelect(e);
            }
          };
        }
        itemProps["data-key"] = key;
        itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;
        let { pressProps, isPressed } = (0, $glPPV$reactariainteractions.usePress)(itemPressProps);
        let onDoubleClick = hasSecondaryAction ? (e) => {
          if (modality.current === "mouse") {
            e.stopPropagation();
            e.preventDefault();
            performAction(e);
          }
        } : void 0;
        let { longPressProps } = (0, $glPPV$reactariainteractions.useLongPress)({
          isDisabled: !longPressEnabled,
          onLongPress(e) {
            if (e.pointerType === "touch") {
              onSelect(e);
              manager.setSelectionBehavior("toggle");
            }
          }
        });
        let onDragStartCapture = (e) => {
          if (modality.current === "touch" && longPressEnabledOnPressStart.current)
            e.preventDefault();
        };
        let onClick = manager.isLink(key) ? (e) => {
          if (!(0, $glPPV$reactariautils.openLink).isOpening)
            e.preventDefault();
        } : void 0;
        return {
          itemProps: (0, $glPPV$reactariautils.mergeProps)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {
            onDoubleClick,
            onDragStartCapture,
            onClick
          }),
          isPressed,
          isSelected: manager.isSelected(key),
          isFocused: manager.isFocused && manager.focusedKey === key,
          isDisabled,
          allowsSelection,
          hasAction
        };
      }
      function $433b1145b0781e10$var$isActionKey() {
        let event = window.event;
        return (event === null || event === void 0 ? void 0 : event.key) === "Enter";
      }
      function $433b1145b0781e10$var$isSelectionKey() {
        let event = window.event;
        return (event === null || event === void 0 ? void 0 : event.key) === " " || (event === null || event === void 0 ? void 0 : event.code) === "Space";
      }
      var $836f880b12dcae5c$export$a05409b8bb224a5a = class {
        getNextKey(key) {
          key = this.collection.getKeyAfter(key);
          while (key != null) {
            let item = this.collection.getItem(key);
            if (item.type === "item" && !this.disabledKeys.has(key))
              return key;
            key = this.collection.getKeyAfter(key);
          }
          return null;
        }
        getPreviousKey(key) {
          key = this.collection.getKeyBefore(key);
          while (key != null) {
            let item = this.collection.getItem(key);
            if (item.type === "item" && !this.disabledKeys.has(key))
              return key;
            key = this.collection.getKeyBefore(key);
          }
          return null;
        }
        findKey(key, nextKey, shouldSkip) {
          let item = this.getItem(key);
          if (!item)
            return null;
          let prevRect = item.getBoundingClientRect();
          do {
            key = nextKey(key);
            item = this.getItem(key);
          } while (item && shouldSkip(prevRect, item.getBoundingClientRect()));
          return key;
        }
        isSameRow(prevRect, itemRect) {
          return prevRect.top === itemRect.top || prevRect.left !== itemRect.left;
        }
        isSameColumn(prevRect, itemRect) {
          return prevRect.left === itemRect.left || prevRect.top !== itemRect.top;
        }
        getKeyBelow(key) {
          if (this.layout === "grid" && this.orientation === "vertical")
            return this.findKey(key, (key2) => this.getNextKey(key2), this.isSameRow);
          else
            return this.getNextKey(key);
        }
        getKeyAbove(key) {
          if (this.layout === "grid" && this.orientation === "vertical")
            return this.findKey(key, (key2) => this.getPreviousKey(key2), this.isSameRow);
          else
            return this.getPreviousKey(key);
        }
        getNextColumn(key, right) {
          return right ? this.getPreviousKey(key) : this.getNextKey(key);
        }
        getKeyRightOf(key) {
          if (this.layout === "grid") {
            if (this.orientation === "vertical")
              return this.getNextColumn(key, this.direction === "rtl");
            else
              return this.findKey(key, (key2) => this.getNextColumn(key2, this.direction === "rtl"), this.isSameColumn);
          } else if (this.orientation === "horizontal")
            return this.getNextColumn(key, this.direction === "rtl");
          return null;
        }
        getKeyLeftOf(key) {
          if (this.layout === "grid") {
            if (this.orientation === "vertical")
              return this.getNextColumn(key, this.direction === "ltr");
            else
              return this.findKey(key, (key2) => this.getNextColumn(key2, this.direction === "ltr"), this.isSameColumn);
          } else if (this.orientation === "horizontal")
            return this.getNextColumn(key, this.direction === "ltr");
          return null;
        }
        getFirstKey() {
          let key = this.collection.getFirstKey();
          while (key != null) {
            let item = this.collection.getItem(key);
            if (item.type === "item" && !this.disabledKeys.has(key))
              return key;
            key = this.collection.getKeyAfter(key);
          }
          return null;
        }
        getLastKey() {
          let key = this.collection.getLastKey();
          while (key != null) {
            let item = this.collection.getItem(key);
            if (item.type === "item" && !this.disabledKeys.has(key))
              return key;
            key = this.collection.getKeyBefore(key);
          }
          return null;
        }
        getItem(key) {
          return this.ref.current.querySelector(`[data-key="${key}"]`);
        }
        getKeyPageAbove(key) {
          let menu = this.ref.current;
          let item = this.getItem(key);
          if (!item)
            return null;
          if (!(0, $glPPV$reactariautils.isScrollable)(menu))
            return this.getFirstKey();
          let containerRect = menu.getBoundingClientRect();
          let itemRect = item.getBoundingClientRect();
          if (this.orientation === "horizontal") {
            let containerX = containerRect.x - menu.scrollLeft;
            let pageX = Math.max(0, itemRect.x - containerX + itemRect.width - containerRect.width);
            while (item && itemRect.x - containerX > pageX) {
              key = this.getKeyAbove(key);
              item = key == null ? null : this.getItem(key);
              itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
            }
          } else {
            let containerY = containerRect.y - menu.scrollTop;
            let pageY = Math.max(0, itemRect.y - containerY + itemRect.height - containerRect.height);
            while (item && itemRect.y - containerY > pageY) {
              key = this.getKeyAbove(key);
              item = key == null ? null : this.getItem(key);
              itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
            }
          }
          return key !== null && key !== void 0 ? key : this.getFirstKey();
        }
        getKeyPageBelow(key) {
          let menu = this.ref.current;
          let item = this.getItem(key);
          if (!item)
            return null;
          if (!(0, $glPPV$reactariautils.isScrollable)(menu))
            return this.getLastKey();
          let containerRect = menu.getBoundingClientRect();
          let itemRect = item.getBoundingClientRect();
          if (this.orientation === "horizontal") {
            let containerX = containerRect.x - menu.scrollLeft;
            let pageX = Math.min(menu.scrollWidth, itemRect.x - containerX - itemRect.width + containerRect.width);
            while (item && itemRect.x - containerX < pageX) {
              key = this.getKeyBelow(key);
              item = key == null ? null : this.getItem(key);
              itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
            }
          } else {
            let containerY = containerRect.y - menu.scrollTop;
            let pageY = Math.min(menu.scrollHeight, itemRect.y - containerY - itemRect.height + containerRect.height);
            while (item && itemRect.y - containerY < pageY) {
              key = this.getKeyBelow(key);
              item = key == null ? null : this.getItem(key);
              itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
            }
          }
          return key !== null && key !== void 0 ? key : this.getLastKey();
        }
        getKeyForSearch(search, fromKey) {
          if (!this.collator)
            return null;
          let collection = this.collection;
          let key = fromKey || this.getFirstKey();
          while (key != null) {
            let item = collection.getItem(key);
            let substring = item.textValue.slice(0, search.length);
            if (item.textValue && this.collator.compare(substring, search) === 0)
              return key;
            key = this.getKeyBelow(key);
          }
          return null;
        }
        constructor(...args) {
          if (args.length === 1) {
            let opts = args[0];
            this.collection = opts.collection;
            this.ref = opts.ref;
            this.collator = opts.collator;
            this.disabledKeys = opts.disabledKeys || /* @__PURE__ */ new Set();
            this.orientation = opts.orientation;
            this.direction = opts.direction;
            this.layout = opts.layout || "stack";
          } else {
            this.collection = args[0];
            this.disabledKeys = args[1];
            this.ref = args[2];
            this.collator = args[3];
            this.layout = "stack";
            this.orientation = "vertical";
          }
          if (this.layout === "stack" && this.orientation === "vertical") {
            this.getKeyLeftOf = void 0;
            this.getKeyRightOf = void 0;
          }
        }
      };
      function $bd230acee196f50c$export$b95089534ab7c1fd(props) {
        let { selectionManager, collection, disabledKeys, ref, keyboardDelegate } = props;
        let collator = (0, $glPPV$reactariai18n.useCollator)({
          usage: "search",
          sensitivity: "base"
        });
        let disabledBehavior = selectionManager.disabledBehavior;
        let delegate = (0, $glPPV$react.useMemo)(() => keyboardDelegate || new (0, $836f880b12dcae5c$export$a05409b8bb224a5a)(collection, disabledBehavior === "selection" ? /* @__PURE__ */ new Set() : disabledKeys, ref, collator), [
          keyboardDelegate,
          collection,
          disabledKeys,
          ref,
          collator,
          disabledBehavior
        ]);
        let { collectionProps } = (0, $b6837c2f80a3c32f$export$d6daf82dcd84e87c)(__spreadProps(__spreadValues({}, props), {
          ref,
          selectionManager,
          keyboardDelegate: delegate
        }));
        return {
          listProps: collectionProps
        };
      }
    }
  });

  // node_modules/@react-aria/button/dist/main.js
  var require_main19 = __commonJS({
    "node_modules/@react-aria/button/dist/main.js"(exports, module) {
      var $eeQ2i$reactariautils = require_main7();
      var $eeQ2i$reactariafocus = require_main12();
      var $eeQ2i$reactariainteractions = require_main11();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useButton", () => $988353faa005faf8$export$ea18c227d4417cc3);
      $parcel$export(module.exports, "useToggleButton", () => $c49208f7d2aac50b$export$51e84d46ca0bc451);
      function $988353faa005faf8$export$ea18c227d4417cc3(props, ref) {
        let {
          elementType = "button",
          isDisabled,
          onPress,
          onPressStart,
          onPressEnd,
          onPressChange,
          preventFocusOnPress,
          allowFocusWhenDisabled,
          // @ts-ignore
          onClick: deprecatedOnClick,
          href,
          target,
          rel,
          type = "button"
        } = props;
        let additionalProps;
        if (elementType === "button")
          additionalProps = {
            type,
            disabled: isDisabled
          };
        else
          additionalProps = {
            role: "button",
            tabIndex: isDisabled ? void 0 : 0,
            href: elementType === "a" && isDisabled ? void 0 : href,
            target: elementType === "a" ? target : void 0,
            type: elementType === "input" ? type : void 0,
            disabled: elementType === "input" ? isDisabled : void 0,
            "aria-disabled": !isDisabled || elementType === "input" ? void 0 : isDisabled,
            rel: elementType === "a" ? rel : void 0
          };
        let { pressProps, isPressed } = (0, $eeQ2i$reactariainteractions.usePress)({
          onPressStart,
          onPressEnd,
          onPressChange,
          onPress,
          isDisabled,
          preventFocusOnPress,
          ref
        });
        let { focusableProps } = (0, $eeQ2i$reactariafocus.useFocusable)(props, ref);
        if (allowFocusWhenDisabled)
          focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
        let buttonProps = (0, $eeQ2i$reactariautils.mergeProps)(focusableProps, pressProps, (0, $eeQ2i$reactariautils.filterDOMProps)(props, {
          labelable: true
        }));
        return {
          isPressed,
          buttonProps: (0, $eeQ2i$reactariautils.mergeProps)(additionalProps, buttonProps, {
            "aria-haspopup": props["aria-haspopup"],
            "aria-expanded": props["aria-expanded"],
            "aria-controls": props["aria-controls"],
            "aria-pressed": props["aria-pressed"],
            onClick: (e) => {
              if (deprecatedOnClick) {
                deprecatedOnClick(e);
                console.warn("onClick is deprecated, please use onPress");
              }
            }
          })
        };
      }
      function $c49208f7d2aac50b$export$51e84d46ca0bc451(props, state, ref) {
        const { isSelected } = state;
        const { isPressed, buttonProps } = (0, $988353faa005faf8$export$ea18c227d4417cc3)(__spreadProps(__spreadValues({}, props), {
          onPress: (0, $eeQ2i$reactariautils.chain)(state.toggle, props.onPress)
        }), ref);
        return {
          isPressed,
          buttonProps: (0, $eeQ2i$reactariautils.mergeProps)(buttonProps, {
            "aria-pressed": isSelected
          })
        };
      }
    }
  });

  // node_modules/@nextui-org/use-aria-accordion/dist/index.js
  var require_dist11 = __commonJS({
    "node_modules/@nextui-org/use-aria-accordion/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useReactAriaAccordion: () => useReactAriaAccordion,
        useReactAriaAccordionItem: () => useReactAriaAccordionItem
      });
      module.exports = __toCommonJS2(src_exports);
      var import_selection = require_main18();
      function useReactAriaAccordion(props, state, ref) {
        let { listProps } = (0, import_selection.useSelectableList)(__spreadProps(__spreadValues(__spreadValues({}, props), state), {
          allowsTabNavigation: true,
          ref
        }));
        delete listProps.onKeyDownCapture;
        return {
          accordionProps: __spreadProps(__spreadValues({}, listProps), {
            tabIndex: void 0
          })
        };
      }
      var import_react3 = require_react();
      var import_focus = require_main12();
      var import_button = require_main19();
      function useReactAriaAccordionItem(props, state, ref) {
        let { item, isDisabled: isDisabledProp } = props;
        let key = item.key;
        let manager = state.selectionManager;
        let buttonId = (0, import_react3.useId)();
        let regionId = (0, import_react3.useId)();
        let isDisabled = state.disabledKeys.has(item.key) || isDisabledProp;
        (0, import_react3.useEffect)(() => {
          let isFocused = key === state.focusedKey;
          if (isFocused && document.activeElement !== ref.current) {
            ref.current && (0, import_focus.focusSafely)(ref.current);
          }
        }, [ref, key, state.focusedKey]);
        let onSelect = (0, import_react3.useCallback)(
          (e) => {
            if (!manager.canSelectItem(key)) {
              return;
            }
            manager.select(key, e);
            state.toggleKey(key);
          },
          [key, manager]
        );
        const extendFocusSelection = (0, import_react3.useCallback)(
          (toKey) => {
            if (manager.selectionBehavior === "replace") {
              manager.extendSelection(toKey);
            }
            manager.setFocusedKey(toKey);
          },
          [manager]
        );
        const onKeyDown = (0, import_react3.useCallback)(
          (event) => {
            const keyMap = {
              ArrowDown: () => {
                const nextKey = state.collection.getKeyAfter(key);
                if (nextKey && state.disabledKeys.has(nextKey)) {
                  const nextEnabledKey = state.collection.getKeyAfter(nextKey);
                  nextEnabledKey && extendFocusSelection(nextEnabledKey);
                } else {
                  nextKey && extendFocusSelection(nextKey);
                }
              },
              ArrowUp: () => {
                const prevKey = state.collection.getKeyBefore(key);
                if (prevKey && state.disabledKeys.has(prevKey)) {
                  const prevEnabledKey = state.collection.getKeyBefore(prevKey);
                  prevEnabledKey && extendFocusSelection(prevEnabledKey);
                } else {
                  prevKey && extendFocusSelection(prevKey);
                }
              },
              Home: () => {
                const firstKey = state.collection.getFirstKey();
                firstKey && extendFocusSelection(firstKey);
              },
              End: () => {
                const lastKey = state.collection.getLastKey();
                lastKey && extendFocusSelection(lastKey);
              }
            };
            const action = keyMap[event.key];
            if (action) {
              event.preventDefault();
              if (manager.canSelectItem(key)) {
                action(event);
              }
            }
          },
          [key, manager]
        );
        let { buttonProps } = (0, import_button.useButton)(
          {
            id: buttonId,
            elementType: "button",
            isDisabled,
            onKeyDown,
            onPress: onSelect
          },
          ref
        );
        let isExpanded = state.selectionManager.isSelected(item.key);
        return {
          buttonProps: __spreadProps(__spreadValues({}, buttonProps), {
            "aria-expanded": isExpanded,
            "aria-controls": isExpanded ? regionId : void 0
          }),
          regionProps: {
            id: regionId,
            role: "region",
            "aria-labelledby": buttonId
          }
        };
      }
    }
  });

  // node_modules/@nextui-org/shared-icons/dist/index.js
  var require_dist12 = __commonJS({
    "node_modules/@nextui-org/shared-icons/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Activity: () => Activity,
        AddNoteBulk: () => AddNoteBulk,
        AddNoteBulkIcon: () => AddNoteBulkIcon,
        AlignBottomBoldIcon: () => AlignBottomBoldIcon,
        AlignHorizontallyBoldIcon: () => AlignHorizontallyBoldIcon,
        AlignLeftBoldIcon: () => AlignLeftBoldIcon,
        AlignRightBoldIcon: () => AlignRightBoldIcon,
        AlignTopBoldIcon: () => AlignTopBoldIcon,
        AlignVerticallyBoldIcon: () => AlignVerticallyBoldIcon,
        AnchorIcon: () => AnchorIcon,
        ArrowLeftIcon: () => ArrowLeftIcon,
        ArrowRightIcon: () => ArrowRightIcon,
        AvatarIcon: () => AvatarIcon,
        Camera: () => Camera,
        CartIcon: () => CartIcon,
        CheckIcon: () => CheckIcon,
        CheckLinearIcon: () => CheckLinearIcon,
        ChevronCircleTopLinearIcon: () => ChevronCircleTopLinearIcon,
        ChevronDown: () => ChevronDown,
        ChevronDownBold: () => ChevronDownBold,
        ChevronDownIcon: () => ChevronDownIcon,
        ChevronIcon: () => ChevronIcon,
        ChevronRightIcon: () => ChevronRightIcon,
        ChevronUpIcon: () => ChevronUpIcon,
        CloseFilledIcon: () => CloseFilledIcon,
        CloseIcon: () => CloseIcon,
        CopyDocumentBulk: () => CopyDocumentBulk,
        CopyDocumentBulkIcon: () => CopyDocumentBulkIcon,
        CopyIcon: () => CopyIcon,
        CopyLinearIcon: () => CopyLinearIcon,
        Delete: () => Delete,
        DeleteDocumentBulk: () => DeleteDocumentBulk,
        DeleteDocumentBulkIcon: () => DeleteDocumentBulkIcon,
        DeleteIcon: () => DeleteIcon,
        Edit: () => Edit,
        EditDocumentBulk: () => EditDocumentBulk,
        EditDocumentBulkIcon: () => EditDocumentBulkIcon,
        EditIcon: () => EditIcon,
        EllipsisIcon: () => EllipsisIcon,
        Eye: () => Eye,
        EyeFilledIcon: () => EyeFilledIcon,
        EyeIcon: () => EyeIcon,
        EyeSlashFilledIcon: () => EyeSlashFilledIcon,
        Flash: () => Flash,
        ForwardIcon: () => ForwardIcon,
        HeadphonesIcon: () => HeadphonesIcon,
        InfoIcon: () => InfoIcon,
        InvalidCardIcon: () => InvalidCardIcon,
        LinkIcon: () => LinkIcon2,
        Lock: () => Lock,
        LockFilledIcon: () => LockFilledIcon,
        Mail: () => Mail,
        MailFilledIcon: () => MailFilledIcon,
        MailIcon: () => MailIcon,
        Minus: () => Minus,
        MonitorMobileIcon: () => MonitorMobileIcon,
        Moon: () => Moon,
        MoonFilledIcon: () => MoonFilledIcon,
        MoonIcon: () => MoonIcon,
        NewFile: () => NewFile,
        Notification: () => Notification,
        Password: () => Password,
        PetBoldIcon: () => PetBoldIcon,
        Plus: () => Plus,
        Scale: () => Scale,
        Search: () => Search,
        SearchIcon: () => SearchIcon,
        SelectorIcon: () => SelectorIcon,
        Server: () => Server,
        ShieldSecurityIcon: () => ShieldSecurityIcon,
        Sun: () => Sun,
        SunFilledIcon: () => SunFilledIcon,
        SunIcon: () => SunIcon,
        TagUser: () => TagUser,
        Unlock: () => Unlock,
        User: () => User,
        VolumeUp: () => VolumeUp
      });
      module.exports = __toCommonJS2(src_exports);
      var import_jsx_runtime = require_jsx_runtime();
      var Sun = (_a) => {
        var _b = _a, { fill, filled, size, height, width } = _b, props = __objRest(_b, ["fill", "filled", "size", "height", "width"]);
        if (filled) {
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "svg",
            __spreadProps(__spreadValues({
              height: size || height || 24,
              viewBox: "0 0 512 512",
              width: size || width || 24
            }, props), {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M256 118a22 22 0 01-22-22V48a22 22 0 0144 0v48a22 22 0 01-22 22zM256 486a22 22 0 01-22-22v-48a22 22 0 0144 0v48a22 22 0 01-22 22zM369.14 164.86a22 22 0 01-15.56-37.55l33.94-33.94a22 22 0 0131.11 31.11l-33.94 33.94a21.93 21.93 0 01-15.55 6.44zM108.92 425.08a22 22 0 01-15.55-37.56l33.94-33.94a22 22 0 1131.11 31.11l-33.94 33.94a21.94 21.94 0 01-15.56 6.45zM464 278h-48a22 22 0 010-44h48a22 22 0 010 44zM96 278H48a22 22 0 010-44h48a22 22 0 010 44zM403.08 425.08a21.94 21.94 0 01-15.56-6.45l-33.94-33.94a22 22 0 0131.11-31.11l33.94 33.94a22 22 0 01-15.55 37.56zM142.86 164.86a21.89 21.89 0 01-15.55-6.44l-33.94-33.94a22 22 0 0131.11-31.11l33.94 33.94a22 22 0 01-15.56 37.55zM256 358a102 102 0 11102-102 102.12 102.12 0 01-102 102z",
                  fill
                }
              )
            })
          );
        }
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", __spreadProps(__spreadValues({ height: size || height || 24, viewBox: "0 0 512 512", width: size || width || 24 }, props), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "path",
            {
              d: "M256 48v48M256 416v48M403.08 108.92l-33.94 33.94M142.86 369.14l-33.94 33.94M464 256h-48M96 256H48M403.08 403.08l-33.94-33.94M142.86 142.86l-33.94-33.94",
              fill: "none",
              stroke: fill,
              strokeLinecap: "round",
              strokeMiterlimit: 10,
              strokeWidth: 32
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "circle",
            {
              cx: 256,
              cy: 256,
              fill: "none",
              r: 80,
              stroke: fill,
              strokeLinecap: "round",
              strokeMiterlimit: 10,
              strokeWidth: 32
            }
          )
        ] }));
      };
      var Mail = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", __spreadProps(__spreadValues({ height: size || height || 24, viewBox: "0 0 24 24", width: size || width || 24 }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { fill: "none", stroke: fill, strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 1.5, children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M12 20.5H7c-3 0-5-1.5-5-5v-7c0-3.5 2-5 5-5h10c3 0 5 1.5 5 5v3" }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M17 9l-3.13 2.5a3.166 3.166 0 01-3.75 0L7 9M19.21 14.77l-3.539 3.54a1.232 1.232 0 00-.3.59l-.19 1.35a.635.635 0 00.76.76l1.35-.19a1.189 1.189 0 00.59-.3l3.54-3.54a1.365 1.365 0 000-2.22 1.361 1.361 0 00-2.211.01zM18.7 15.28a3.185 3.185 0 002.22 2.22" })
        ] }) }));
      };
      var Moon = (_a) => {
        var _b = _a, { fill, filled, size, height, width } = _b, props = __objRest(_b, ["fill", "filled", "size", "height", "width"]);
        if (filled) {
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "svg",
            __spreadProps(__spreadValues({
              height: size || height || 24,
              viewBox: "0 0 512 512",
              width: size || width || 24
            }, props), {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M152.62 126.77c0-33 4.85-66.35 17.23-94.77C87.54 67.83 32 151.89 32 247.38 32 375.85 136.15 480 264.62 480c95.49 0 179.55-55.54 215.38-137.85-28.42 12.38-61.8 17.23-94.77 17.23-128.47 0-232.61-104.14-232.61-232.61z",
                  fill
                }
              )
            })
          );
        }
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", __spreadProps(__spreadValues({ height: size || height || 24, viewBox: "0 0 512 512", width: size || width || 24 }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M160 136c0-30.62 4.51-61.61 16-88C99.57 81.27 48 159.32 48 248c0 119.29 96.71 216 216 216 88.68 0 166.73-51.57 200-128-26.39 11.49-57.38 16-88 16-119.29 0-216-96.71-216-216z",
            fill: "none",
            stroke: fill,
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 32
          }
        ) }));
      };
      var Lock = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        const color = fill;
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "data-name": "Iconly/Curved/Lock",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { transform: "translate(3.5 2)", children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M9.121,6.653V4.5A4.561,4.561,0,0,0,0,4.484V6.653",
                  fill: "none",
                  stroke: color,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth: 1.5,
                  transform: "translate(3.85 0.75)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M.5,0V2.221",
                  fill: "none",
                  stroke: color,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth: 1.5,
                  transform: "translate(7.91 12.156)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M7.66,0C1.915,0,0,1.568,0,6.271s1.915,6.272,7.66,6.272,7.661-1.568,7.661-6.272S13.4,0,7.66,0Z",
                  fill: "none",
                  stroke: color,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth: 1.5,
                  transform: "translate(0.75 6.824)"
                }
              )
            ] })
          })
        );
      };
      var Unlock = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        const color = fill;
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "data-name": "Iconly/Curved/Lock",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { transform: "translate(3.5 2)", children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M8.927,3.237A4.562,4.562,0,0,0,0,4.484V6.653",
                  fill: "none",
                  stroke: color,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth: 1.5,
                  transform: "translate(3.849 0.75)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M.5,0V2.221",
                  fill: "none",
                  stroke: color,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth: 1.5,
                  transform: "translate(7.91 12.156)"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M7.66,0C1.915,0,0,1.568,0,6.271s1.915,6.272,7.66,6.272,7.661-1.568,7.661-6.272S13.406,0,7.66,0Z",
                  fill: "none",
                  stroke: color,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth: 1.5,
                  transform: "translate(0.75 6.824)"
                }
              )
            ] })
          })
        );
      };
      var Password = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", __spreadProps(__spreadValues({ height: size || height || 24, viewBox: "0 0 24 24", width: size || width || 24 }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { fill, children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M18.75 8v2.1a12.984 12.984 0 00-1.5-.1V8c0-3.15-.89-5.25-5.25-5.25S6.75 4.85 6.75 8v2a12.984 12.984 0 00-1.5.1V8c0-2.9.7-6.75 6.75-6.75S18.75 5.1 18.75 8z" }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M18.75 10.1a12.984 12.984 0 00-1.5-.1H6.75a12.984 12.984 0 00-1.5.1C2.7 10.41 2 11.66 2 15v2c0 4 1 5 5 5h10c4 0 5-1 5-5v-2c0-3.34-.7-4.59-3.25-4.9zM8.71 16.71A1.052 1.052 0 018 17a1 1 0 01-.38-.08 1.032 1.032 0 01-.33-.21A1.052 1.052 0 017 16a1 1 0 01.08-.38 1.155 1.155 0 01.21-.33 1.032 1.032 0 01.33-.21 1 1 0 011.09.21 1.155 1.155 0 01.21.33A1 1 0 019 16a1.052 1.052 0 01-.29.71zm4.21-.33a1.155 1.155 0 01-.21.33A1.052 1.052 0 0112 17a1.033 1.033 0 01-.71-.29 1.155 1.155 0 01-.21-.33A1 1 0 0111 16a1.033 1.033 0 01.29-.71 1.047 1.047 0 011.42 0A1.033 1.033 0 0113 16a1 1 0 01-.08.38zm3.79.33a1.014 1.014 0 01-1.42 0 1.014 1.014 0 010-1.42 1.047 1.047 0 011.42 0c.04.05.08.1.12.16a.556.556 0 01.09.17.636.636 0 01.06.18 1.5 1.5 0 01.02.2 1.052 1.052 0 01-.29.71z" })
        ] }) }));
      };
      var Notification = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                clipRule: "evenodd",
                d: "M18.707 8.796c0 1.256.332 1.997 1.063 2.85.553.628.73 1.435.73 2.31 0 .874-.287 1.704-.863 2.378a4.537 4.537 0 01-2.9 1.413c-1.571.134-3.143.247-4.736.247-1.595 0-3.166-.068-4.737-.247a4.532 4.532 0 01-2.9-1.413 3.616 3.616 0 01-.864-2.378c0-.875.178-1.682.73-2.31.754-.854 1.064-1.594 1.064-2.85V8.37c0-1.682.42-2.781 1.283-3.858C7.861 2.942 9.919 2 11.956 2h.09c2.08 0 4.204.987 5.466 2.625.82 1.054 1.195 2.108 1.195 3.745v.426zM9.074 20.061c0-.504.462-.734.89-.833.5-.106 3.545-.106 4.045 0 .428.099.89.33.89.833-.025.48-.306.904-.695 1.174a3.635 3.635 0 01-1.713.731 3.795 3.795 0 01-1.008 0 3.618 3.618 0 01-1.714-.732c-.39-.269-.67-.694-.695-1.173z",
                fill,
                fillRule: "evenodd"
              }
            )
          })
        );
      };
      var User = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
              "g",
              {
                fill: "none",
                stroke: fill,
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: 10,
                strokeWidth: 1.5,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                    "path",
                    {
                      d: "M11.845 21.662C8.153 21.662 5 21.088 5 18.787s3.133-4.425 6.845-4.425c3.692 0 6.845 2.1 6.845 4.4s-3.134 2.9-6.845 2.9z",
                      "data-name": "Stroke 1"
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M11.837 11.174a4.372 4.372 0 10-.031 0z", "data-name": "Stroke 3" })
                ]
              }
            )
          })
        );
      };
      var VolumeUp = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                clipRule: "evenodd",
                d: "M13.357 6.45c-.05-.486-.103-.99-.232-1.494C12.775 3.752 11.801 3 10.758 3c-.582-.002-1.318.356-1.736.72l-3.46 2.897h-1.81c-1.333 0-2.404 1.027-2.607 2.51-.172 1.424-.214 4.11 0 5.677.186 1.567 1.21 2.579 2.607 2.579h1.81l3.527 2.94c.362.315 1 .676 1.588.676l.105.001c1.063 0 2-.78 2.35-1.98.133-.509.18-.985.224-1.445l.001-.008.047-.459c.18-1.487.18-8.739 0-10.215l-.047-.442zm4.05.045a.907.907 0 00-1.279-.237.957.957 0 00-.228 1.308c.802 1.182 1.243 2.756 1.243 4.434 0 1.677-.441 3.252-1.243 4.434a.956.956 0 00.23 1.308.905.905 0 001.277-.237c1.012-1.492 1.571-3.447 1.571-5.505s-.559-4.013-1.571-5.505zM19.29 3.22a.905.905 0 011.277.236C22.136 5.767 23 8.802 23 12c0 3.2-.864 6.234-2.433 8.544a.902.902 0 01-1.276.236.957.957 0 01-.23-1.308c1.356-1.999 2.104-4.653 2.104-7.472 0-2.818-.748-5.472-2.105-7.471a.958.958 0 01.23-1.308z",
                fill,
                fillRule: "evenodd"
              }
            )
          })
        );
      };
      var Camera = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                clipRule: "evenodd",
                d: "M17.44 6.236c.04.07.11.12.2.12 2.4 0 4.36 1.958 4.36 4.355v5.934A4.368 4.368 0 0117.64 21H6.36A4.361 4.361 0 012 16.645V10.71a4.361 4.361 0 014.36-4.355c.08 0 .16-.04.19-.12l.06-.12.106-.222a97.79 97.79 0 01.714-1.486C7.89 3.51 8.67 3.01 9.64 3h4.71c.97.01 1.76.51 2.22 1.408.157.315.397.822.629 1.31l.141.299.1.22zm-.73 3.836c0 .5.4.9.9.9s.91-.4.91-.9-.41-.909-.91-.909-.9.41-.9.91zm-6.44 1.548c.47-.47 1.08-.719 1.73-.719.65 0 1.26.25 1.72.71.46.459.71 1.068.71 1.717A2.438 2.438 0 0112 15.756c-.65 0-1.26-.25-1.72-.71a2.408 2.408 0 01-.71-1.717v-.01c-.01-.63.24-1.24.7-1.699zm4.5 4.485a3.91 3.91 0 01-2.77 1.15 3.921 3.921 0 01-3.93-3.926 3.865 3.865 0 011.14-2.767A3.921 3.921 0 0112 9.402c1.05 0 2.04.41 2.78 1.15.74.749 1.15 1.738 1.15 2.777a3.958 3.958 0 01-1.16 2.776z",
                fill,
                fillRule: "evenodd"
              }
            )
          })
        );
      };
      var Activity = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "data-name": "Iconly/Curved/Activity",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
              "g",
              {
                fill: "none",
                stroke: fill,
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: 10,
                strokeWidth: 1.5,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M6.918 14.854l2.993-3.889 3.414 2.68 2.929-3.78" }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M19.668 2.35a1.922 1.922 0 11-1.922 1.922 1.921 1.921 0 011.922-1.922z" }),
                  /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M20.756 9.269a20.809 20.809 0 01.194 3.034c0 6.938-2.312 9.25-9.25 9.25s-9.25-2.312-9.25-9.25 2.313-9.25 9.25-9.25a20.931 20.931 0 012.983.187" })
                ]
              }
            )
          })
        );
      };
      var Plus = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("g", { fill: "none", stroke: fill, strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 1.5, children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M6 12h12" }),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { d: "M12 18V6" })
            ] })
          })
        );
      };
      var Minus = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                d: "M6 12h12",
                fill: "none",
                stroke: fill,
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            )
          })
        );
      };
      var Eye = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 20 20",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M12.9833 10C12.9833 11.65 11.65 12.9833 10 12.9833C8.35 12.9833 7.01666 11.65 7.01666 10C7.01666 8.35 8.35 7.01666 10 7.01666C11.65 7.01666 12.9833 8.35 12.9833 10Z",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M9.99999 16.8916C12.9417 16.8916 15.6833 15.1583 17.5917 12.1583C18.3417 10.9833 18.3417 9.00831 17.5917 7.83331C15.6833 4.83331 12.9417 3.09998 9.99999 3.09998C7.05833 3.09998 4.31666 4.83331 2.40833 7.83331C1.65833 9.00831 1.65833 10.9833 2.40833 12.1583C4.31666 15.1583 7.05833 16.8916 9.99999 16.8916Z",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              )
            ]
          })
        );
      };
      var Edit = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 20 20",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M11.05 3.00002L4.20835 10.2417C3.95002 10.5167 3.70002 11.0584 3.65002 11.4334L3.34169 14.1334C3.23335 15.1084 3.93335 15.775 4.90002 15.6084L7.58335 15.15C7.95835 15.0834 8.48335 14.8084 8.74168 14.525L15.5834 7.28335C16.7667 6.03335 17.3 4.60835 15.4583 2.86668C13.625 1.14168 12.2334 1.75002 11.05 3.00002Z",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M9.90833 4.20831C10.2667 6.50831 12.1333 8.26665 14.45 8.49998",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M2.5 18.3333H17.5",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              )
            ]
          })
        );
      };
      var Delete = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 20 20",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M17.5 4.98332C14.725 4.70832 11.9333 4.56665 9.15 4.56665C7.5 4.56665 5.85 4.64998 4.2 4.81665L2.5 4.98332",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M7.08331 4.14169L7.26665 3.05002C7.39998 2.25835 7.49998 1.66669 8.90831 1.66669H11.0916C12.5 1.66669 12.6083 2.29169 12.7333 3.05835L12.9166 4.14169",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M15.7084 7.61664L15.1667 16.0083C15.075 17.3166 15 18.3333 12.675 18.3333H7.32502C5.00002 18.3333 4.92502 17.3166 4.83335 16.0083L4.29169 7.61664",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M8.60834 13.75H11.3833",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M7.91669 10.4167H12.0834",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              )
            ]
          })
        );
      };
      var ChevronDown = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                d: "m19.92 8.95-6.52 6.52c-.77.77-2.03.77-2.8 0L4.08 8.95",
                stroke: fill,
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: 10,
                strokeWidth: 1.5
              }
            )
          })
        );
      };
      var ChevronDownBold = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                d: "M17.9188 8.17969H11.6888H6.07877C5.11877 8.17969 4.63877 9.33969 5.31877 10.0197L10.4988 15.1997C11.3288 16.0297 12.6788 16.0297 13.5088 15.1997L15.4788 13.2297L18.6888 10.0197C19.3588 9.33969 18.8788 8.17969 17.9188 8.17969Z",
                fill
              }
            )
          })
        );
      };
      var NewFile = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M8 2V5",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M16 2V5",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M21 8.5V13.63C20.11 12.92 18.98 12.5 17.75 12.5C16.52 12.5 15.37 12.93 14.47 13.66C13.26 14.61 12.5 16.1 12.5 17.75C12.5 18.73 12.78 19.67 13.26 20.45C13.63 21.06 14.11 21.59 14.68 22H8C4.5 22 3 20 3 17V8.5C3 5.5 4.5 3.5 8 3.5H16C19.5 3.5 21 5.5 21 8.5Z",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M7 11H13",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M7 16H9.62",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M23 17.75C23 18.73 22.72 19.67 22.24 20.45C21.96 20.93 21.61 21.35 21.2 21.69C20.28 22.51 19.08 23 17.75 23C16.6 23 15.54 22.63 14.68 22C14.11 21.59 13.63 21.06 13.26 20.45C12.78 19.67 12.5 18.73 12.5 17.75C12.5 16.1 13.26 14.61 14.47 13.66C15.37 12.93 16.52 12.5 17.75 12.5C18.98 12.5 20.11 12.92 21 13.63C22.22 14.59 23 16.08 23 17.75Z",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M17.75 20.25C17.75 18.87 18.87 17.75 20.25 17.75C18.87 17.75 17.75 16.63 17.75 15.25C17.75 16.63 16.63 17.75 15.25 17.75C16.63 17.75 17.75 18.87 17.75 20.25Z",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              )
            ]
          })
        );
      };
      var AddNoteBulk = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z",
                  fill,
                  opacity: 0.4
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z",
                  fill
                }
              )
            ]
          })
        );
      };
      var CopyDocumentBulk = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z",
                  fill,
                  opacity: 0.4
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z",
                  fill
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z",
                  fill
                }
              )
            ]
          })
        );
      };
      var EditDocumentBulk = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z",
                  fill,
                  opacity: 0.4
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z",
                  fill
                }
              )
            ]
          })
        );
      };
      var DeleteDocumentBulk = (_a) => {
        var _b = _a, { fill, size, height, width } = _b, props = __objRest(_b, ["fill", "size", "height", "width"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z",
                  fill
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z",
                  fill,
                  opacity: 0.399
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  clipRule: "evenodd",
                  d: "M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z",
                  fill,
                  fillRule: "evenodd"
                }
              )
            ]
          })
        );
      };
      var CartIcon = (_a) => {
        var _b = _a, {
          fill = "currentColor",
          size,
          height,
          width
        } = _b, props = __objRest(_b, [
          "fill",
          "size",
          "height",
          "width"
        ]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height || 24,
            viewBox: "0 0 24 24",
            width: size || width || 24,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M16.25 22.5C17.2165 22.5 18 21.7165 18 20.75C18 19.7835 17.2165 19 16.25 19C15.2835 19 14.5 19.7835 14.5 20.75C14.5 21.7165 15.2835 22.5 16.25 22.5Z",
                  fill
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M8.25 22.5C9.2165 22.5 10 21.7165 10 20.75C10 19.7835 9.2165 19 8.25 19C7.2835 19 6.5 19.7835 6.5 20.75C6.5 21.7165 7.2835 22.5 8.25 22.5Z",
                  fill
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M4.84 3.94L4.64 6.39C4.6 6.86 4.97 7.25 5.44 7.25H20.75C21.17 7.25 21.52 6.93 21.55 6.51C21.68 4.74 20.33 3.3 18.56 3.3H6.27C6.17 2.86 5.97 2.44 5.66 2.09C5.16 1.56 4.46 1.25 3.74 1.25H2C1.59 1.25 1.25 1.59 1.25 2C1.25 2.41 1.59 2.75 2 2.75H3.74C4.05 2.75 4.34 2.88 4.55 3.1C4.76 3.33 4.86 3.63 4.84 3.94Z",
                  fill
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M20.5101 8.75H5.17005C4.75005 8.75 4.41005 9.07 4.37005 9.48L4.01005 13.83C3.87005 15.54 5.21005 17 6.92005 17H18.0401C19.5401 17 20.8601 15.77 20.9701 14.27L21.3001 9.6C21.3401 9.14 20.9801 8.75 20.5101 8.75Z",
                  fill
                }
              )
            ]
          })
        );
      };
      var Flash = (_a) => {
        var _b = _a, {
          fill = "currentColor",
          size,
          height,
          width
        } = _b, props = __objRest(_b, [
          "fill",
          "size",
          "height",
          "width"
        ]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height,
            viewBox: "0 0 24 24",
            width: size || width,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                d: "M6.09 13.28h3.09v7.2c0 1.68.91 2.02 2.02.76l7.57-8.6c.93-1.05.54-1.92-.87-1.92h-3.09v-7.2c0-1.68-.91-2.02-2.02-.76l-7.57 8.6c-.92 1.06-.53 1.92.87 1.92Z",
                stroke: fill,
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: 10,
                strokeWidth: 1.5
              }
            )
          })
        );
      };
      var Server = (_a) => {
        var _b = _a, {
          fill = "currentColor",
          size,
          height,
          width
        } = _b, props = __objRest(_b, [
          "fill",
          "size",
          "height",
          "width"
        ]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height,
            viewBox: "0 0 24 24",
            width: size || width,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                d: "M19.32 10H4.69c-1.48 0-2.68-1.21-2.68-2.68V4.69c0-1.48 1.21-2.68 2.68-2.68h14.63C20.8 2.01 22 3.22 22 4.69v2.63C22 8.79 20.79 10 19.32 10ZM19.32 22H4.69c-1.48 0-2.68-1.21-2.68-2.68v-2.63c0-1.48 1.21-2.68 2.68-2.68h14.63c1.48 0 2.68 1.21 2.68 2.68v2.63c0 1.47-1.21 2.68-2.68 2.68ZM6 5v2M10 5v2M6 17v2M10 17v2M14 6h4M14 18h4",
                stroke: fill,
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            )
          })
        );
      };
      var TagUser = (_a) => {
        var _b = _a, {
          fill = "currentColor",
          size,
          height,
          width
        } = _b, props = __objRest(_b, [
          "fill",
          "size",
          "height",
          "width"
        ]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height,
            viewBox: "0 0 24 24",
            width: size || width,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M18 18.86h-.76c-.8 0-1.56.31-2.12.87l-1.71 1.69c-.78.77-2.05.77-2.83 0l-1.71-1.69c-.56-.56-1.33-.87-2.12-.87H6c-1.66 0-3-1.33-3-2.97V4.98c0-1.64 1.34-2.97 3-2.97h12c1.66 0 3 1.33 3 2.97v10.91c0 1.63-1.34 2.97-3 2.97Z",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: 10,
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M12 10a2.33 2.33 0 1 0 0-4.66A2.33 2.33 0 0 0 12 10ZM16 15.66c0-1.8-1.79-3.26-4-3.26s-4 1.46-4 3.26",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              )
            ]
          })
        );
      };
      var Scale = (_a) => {
        var _b = _a, {
          fill = "currentColor",
          size,
          height,
          width
        } = _b, props = __objRest(_b, [
          "fill",
          "size",
          "height",
          "width"
        ]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            fill: "none",
            height: size || height,
            viewBox: "0 0 24 24",
            width: size || width,
            xmlns: "http://www.w3.org/2000/svg"
          }, props), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M9 22h6c5 0 7-2 7-7V9c0-5-2-7-7-7H9C4 2 2 4 2 9v6c0 5 2 7 7 7ZM18 6 6 18",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M18 10V6h-4M6 14v4h4",
                  stroke: fill,
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 1.5
                }
              )
            ]
          })
        );
      };
      var Search = (_a) => {
        var _b = _a, { size, fill, width = 24, height = 24 } = _b, props = __objRest(_b, ["size", "fill", "width", "height"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", __spreadProps(__spreadValues({ fill: "none", height: size || height, viewBox: "0 0 24 24", width: size || width }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 21a9.5 9.5 0 1 0 0-19 9.5 9.5 0 0 0 0 19ZM22 22l-2-2",
            stroke: fill,
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 2
          }
        ) }));
      };
      var import_jsx_runtime2 = require_jsx_runtime();
      var CopyIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            "path",
            {
              d: "M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z",
              fill: "currentColor"
            }
          )
        })
      );
      var import_jsx_runtime3 = require_jsx_runtime();
      var CheckIcon = (_a) => {
        var _b = _a, { filled = false } = _b, props = __objRest(_b, ["filled"]);
        return filled ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "aria-hidden": "true",
            fill: "none",
            focusable: "false",
            height: "1em",
            viewBox: "0 0 24 24",
            width: "1em"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
              "path",
              {
                d: "M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM16.78 9.7L11.11 15.37C10.97 15.51 10.78 15.59 10.58 15.59C10.38 15.59 10.19 15.51 10.05 15.37L7.22 12.54C6.93 12.25 6.93 11.77 7.22 11.48C7.51 11.19 7.99 11.19 8.28 11.48L10.58 13.78L15.72 8.64C16.01 8.35 16.49 8.35 16.78 8.64C17.07 8.93 17.07 9.4 16.78 9.7Z",
                fill: "currentColor"
              }
            )
          })
        ) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "aria-hidden": "true",
            fill: "none",
            focusable: "false",
            height: "1em",
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 2,
            viewBox: "0 0 24 24",
            width: "1em"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("polyline", { points: "20 6 9 17 4 12" })
          })
        );
      };
      var import_jsx_runtime4 = require_jsx_runtime();
      var AvatarIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              "path",
              {
                d: "M12 2C9.38 2 7.25 4.13 7.25 6.75C7.25 9.32 9.26 11.4 11.88 11.49C11.96 11.48 12.04 11.48 12.1 11.49C12.12 11.49 12.13 11.49 12.15 11.49C12.16 11.49 12.16 11.49 12.17 11.49C14.73 11.4 16.74 9.32 16.75 6.75C16.75 4.13 14.62 2 12 2Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              "path",
              {
                d: "M17.0809 14.1489C14.2909 12.2889 9.74094 12.2889 6.93094 14.1489C5.66094 14.9989 4.96094 16.1489 4.96094 17.3789C4.96094 18.6089 5.66094 19.7489 6.92094 20.5889C8.32094 21.5289 10.1609 21.9989 12.0009 21.9989C13.8409 21.9989 15.6809 21.5289 17.0809 20.5889C18.3409 19.7389 19.0409 18.5989 19.0409 17.3589C19.0309 16.1289 18.3409 14.9889 17.0809 14.1489Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime5 = require_jsx_runtime();
      var CloseIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 2,
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("path", { d: "M18 6L6 18M6 6l12 12" })
        })
      );
      var import_jsx_runtime6 = require_jsx_runtime();
      var CloseFilledIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            "path",
            {
              d: "M12 2a10 10 0 1010 10A10.016 10.016 0 0012 2zm3.36 12.3a.754.754 0 010 1.06.748.748 0 01-1.06 0l-2.3-2.3-2.3 2.3a.748.748 0 01-1.06 0 .754.754 0 010-1.06l2.3-2.3-2.3-2.3A.75.75 0 019.7 8.64l2.3 2.3 2.3-2.3a.75.75 0 011.06 1.06l-2.3 2.3z",
              fill: "currentColor"
            }
          )
        })
      );
      var import_jsx_runtime7 = require_jsx_runtime();
      var ChevronIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            "path",
            {
              d: "M15.5 19l-7-7 7-7",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: "1.5"
            }
          )
        })
      );
      var import_jsx_runtime8 = require_jsx_runtime();
      var ChevronDownIcon = (_a) => {
        var _b = _a, { strokeWidth = 1.5 } = _b, props = __objRest(_b, ["strokeWidth"]);
        return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "aria-hidden": "true",
            fill: "none",
            focusable: "false",
            height: "1em",
            role: "presentation",
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth,
            viewBox: "0 0 24 24",
            width: "1em"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { d: "m6 9 6 6 6-6" })
          })
        );
      };
      var import_jsx_runtime9 = require_jsx_runtime();
      var ChevronRightIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "1.5",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("path", { d: "m9 18 6-6-6-6" })
        })
      );
      var import_jsx_runtime10 = require_jsx_runtime();
      var ChevronUpIcon = (_a) => {
        var _b = _a, { strokeWidth = 1.5 } = _b, props = __objRest(_b, ["strokeWidth"]);
        return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "aria-hidden": "true",
            fill: "none",
            focusable: "false",
            height: "1em",
            role: "presentation",
            stroke: "currentColor",
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth,
            viewBox: "0 0 24 24",
            width: "1em"
          }, props), {
            children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("path", { d: "m18 15-6-6-6 6" })
          })
        );
      };
      var import_jsx_runtime11 = require_jsx_runtime();
      var EllipsisIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          height: "1em",
          shapeRendering: "geometricPrecision",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "1.5",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("circle", { cx: "12", cy: "12", fill: "currentColor", r: "1" }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("circle", { cx: "19", cy: "12", fill: "currentColor", r: "1" }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("circle", { cx: "5", cy: "12", fill: "currentColor", r: "1" })
          ]
        })
      );
      var import_jsx_runtime12 = require_jsx_runtime();
      var ForwardIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          shapeRendering: "geometricPrecision",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "1.5",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("path", { d: "M13 17l5-5-5-5" }),
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("path", { d: "M6 17l5-5-5-5" })
          ]
        })
      );
      var import_jsx_runtime13 = require_jsx_runtime();
      var SunIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 512 512",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              "path",
              {
                d: "M256 48v48M256 416v48M403.08 108.92l-33.94 33.94M142.86 369.14l-33.94 33.94M464 256h-48M96 256H48M403.08 403.08l-33.94-33.94M142.86 142.86l-33.94-33.94",
                fill: "none",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeMiterlimit: 10,
                strokeWidth: 32
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              "circle",
              {
                cx: 256,
                cy: 256,
                fill: "none",
                r: 80,
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeMiterlimit: 10,
                strokeWidth: 32
              }
            )
          ]
        })
      );
      var import_jsx_runtime14 = require_jsx_runtime();
      var SunFilledIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("g", { fill: "currentColor", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("path", { d: "M19 12a7 7 0 11-7-7 7 7 0 017 7z" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("path", { d: "M12 22.96a.969.969 0 01-1-.96v-.08a1 1 0 012 0 1.038 1.038 0 01-1 1.04zm7.14-2.82a1.024 1.024 0 01-.71-.29l-.13-.13a1 1 0 011.41-1.41l.13.13a1 1 0 010 1.41.984.984 0 01-.7.29zm-14.28 0a1.024 1.024 0 01-.71-.29 1 1 0 010-1.41l.13-.13a1 1 0 011.41 1.41l-.13.13a1 1 0 01-.7.29zM22 13h-.08a1 1 0 010-2 1.038 1.038 0 011.04 1 .969.969 0 01-.96 1zM2.08 13H2a1 1 0 010-2 1.038 1.038 0 011.04 1 .969.969 0 01-.96 1zm16.93-7.01a1.024 1.024 0 01-.71-.29 1 1 0 010-1.41l.13-.13a1 1 0 011.41 1.41l-.13.13a.984.984 0 01-.7.29zm-14.02 0a1.024 1.024 0 01-.71-.29l-.13-.14a1 1 0 011.41-1.41l.13.13a1 1 0 010 1.41.97.97 0 01-.7.3zM12 3.04a.969.969 0 01-1-.96V2a1 1 0 012 0 1.038 1.038 0 01-1 1.04z" })
          ] })
        })
      );
      var import_jsx_runtime15 = require_jsx_runtime();
      var MailIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
            "g",
            {
              fill: "none",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 1.5,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M12 20.5H7c-3 0-5-1.5-5-5v-7c0-3.5 2-5 5-5h10c3 0 5 1.5 5 5v3" }),
                /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("path", { d: "M17 9l-3.13 2.5a3.166 3.166 0 01-3.75 0L7 9M19.21 14.77l-3.539 3.54a1.232 1.232 0 00-.3.59l-.19 1.35a.635.635 0 00.76.76l1.35-.19a1.189 1.189 0 00.59-.3l3.54-3.54a1.365 1.365 0 000-2.22 1.361 1.361 0 00-2.211.01zM18.7 15.28a3.185 3.185 0 002.22 2.22" })
              ]
            }
          )
        })
      );
      var import_jsx_runtime16 = require_jsx_runtime();
      var MailFilledIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
            "path",
            {
              d: "M17 3.5H7C4 3.5 2 5 2 8.5V15.5C2 19 4 20.5 7 20.5H17C20 20.5 22 19 22 15.5V8.5C22 5 20 3.5 17 3.5ZM17.47 9.59L14.34 12.09C13.68 12.62 12.84 12.88 12 12.88C11.16 12.88 10.31 12.62 9.66 12.09L6.53 9.59C6.21 9.33 6.16 8.85 6.41 8.53C6.67 8.21 7.14 8.15 7.46 8.41L10.59 10.91C11.35 11.52 12.64 11.52 13.4 10.91L16.53 8.41C16.85 8.15 17.33 8.2 17.58 8.53C17.84 8.85 17.79 9.33 17.47 9.59Z",
              fill: "currentColor"
            }
          )
        })
      );
      var import_jsx_runtime17 = require_jsx_runtime();
      var MoonIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 512 512",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            "path",
            {
              d: "M160 136c0-30.62 4.51-61.61 16-88C99.57 81.27 48 159.32 48 248c0 119.29 96.71 216 216 216 88.68 0 166.73-51.57 200-128-26.39 11.49-57.38 16-88 16-119.29 0-216-96.71-216-216z",
              fill: "none",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: 32
            }
          )
        })
      );
      var import_jsx_runtime18 = require_jsx_runtime();
      var MoonFilledIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            "path",
            {
              d: "M21.53 15.93c-.16-.27-.61-.69-1.73-.49a8.46 8.46 0 01-1.88.13 8.409 8.409 0 01-5.91-2.82 8.068 8.068 0 01-1.44-8.66c.44-1.01.13-1.54-.09-1.76s-.77-.55-1.83-.11a10.318 10.318 0 00-6.32 10.21 10.475 10.475 0 007.04 8.99 10 10 0 002.89.55c.16.01.32.02.48.02a10.5 10.5 0 008.47-4.27c.67-.93.49-1.519.32-1.79z",
              fill: "currentColor"
            }
          )
        })
      );
      var import_jsx_runtime19 = require_jsx_runtime();
      var HeadphonesIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              "path",
              {
                d: "M2.74982 18.6508C2.33982 18.6508 1.99982 18.3108 1.99982 17.9008V12.2008C1.94982 9.49078 2.95982 6.93078 4.83982 5.01078C6.71982 3.10078 9.23982 2.05078 11.9498 2.05078C17.4898 2.05078 21.9998 6.56078 21.9998 12.1008V17.8008C21.9998 18.2108 21.6598 18.5508 21.2498 18.5508C20.8398 18.5508 20.4998 18.2108 20.4998 17.8008V12.1008C20.4998 7.39078 16.6698 3.55078 11.9498 3.55078C9.63982 3.55078 7.49982 4.44078 5.90982 6.06078C4.30982 7.69078 3.45982 9.86078 3.49982 12.1808V17.8908C3.49982 18.3108 3.16982 18.6508 2.74982 18.6508Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              "path",
              {
                d: "M5.94 12.4492H5.81C3.71 12.4492 2 14.1592 2 16.2592V18.1392C2 20.2392 3.71 21.9492 5.81 21.9492H5.94C8.04 21.9492 9.75 20.2392 9.75 18.1392V16.2592C9.75 14.1592 8.04 12.4492 5.94 12.4492Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              "path",
              {
                d: "M18.19 12.4492H18.06C15.96 12.4492 14.25 14.1592 14.25 16.2592V18.1392C14.25 20.2392 15.96 21.9492 18.06 21.9492H18.19C20.29 21.9492 22 20.2392 22 18.1392V16.2592C22 14.1592 20.29 12.4492 18.19 12.4492Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime20 = require_jsx_runtime();
      var AnchorIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              "path",
              {
                d: "M8.465,11.293c1.133-1.133,3.109-1.133,4.242,0L13.414,12l1.414-1.414l-0.707-0.707c-0.943-0.944-2.199-1.465-3.535-1.465 S7.994,8.935,7.051,9.879L4.929,12c-1.948,1.949-1.948,5.122,0,7.071c0.975,0.975,2.255,1.462,3.535,1.462 c1.281,0,2.562-0.487,3.536-1.462l0.707-0.707l-1.414-1.414l-0.707,0.707c-1.17,1.167-3.073,1.169-4.243,0 c-1.169-1.17-1.169-3.073,0-4.243L8.465,11.293z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
              "path",
              {
                d: "M12,4.929l-0.707,0.707l1.414,1.414l0.707-0.707c1.169-1.167,3.072-1.169,4.243,0c1.169,1.17,1.169,3.073,0,4.243 l-2.122,2.121c-1.133,1.133-3.109,1.133-4.242,0L10.586,12l-1.414,1.414l0.707,0.707c0.943,0.944,2.199,1.465,3.535,1.465 s2.592-0.521,3.535-1.465L19.071,12c1.948-1.949,1.948-5.122,0-7.071C17.121,2.979,13.948,2.98,12,4.929z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime21 = require_jsx_runtime();
      var InfoIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              "path",
              {
                d: "M12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              "path",
              {
                d: "M12 8V13",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
              "path",
              {
                d: "M11.9945 16H12.0035",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2"
              }
            )
          ]
        })
      );
      var import_jsx_runtime22 = require_jsx_runtime();
      var ShieldSecurityIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
              "path",
              {
                d: "M10.49 2.23006L5.49997 4.11006C4.34997 4.54006 3.40997 5.90006 3.40997 7.12006V14.5501C3.40997 15.7301 4.18997 17.2801 5.13997 17.9901L9.43997 21.2001C10.85 22.2601 13.17 22.2601 14.58 21.2001L18.88 17.9901C19.83 17.2801 20.61 15.7301 20.61 14.5501V7.12006C20.61 5.89006 19.67 4.53006 18.52 4.10006L13.53 2.23006C12.68 1.92006 11.32 1.92006 10.49 2.23006Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
              "path",
              {
                d: "M12 12.5C13.1046 12.5 14 11.6046 14 10.5C14 9.39543 13.1046 8.5 12 8.5C10.8954 8.5 10 9.39543 10 10.5C10 11.6046 10.8954 12.5 12 12.5Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: "10",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
              "path",
              {
                d: "M12 12.5V15.5",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: "10",
                strokeWidth: "1.5"
              }
            )
          ]
        })
      );
      var import_jsx_runtime23 = require_jsx_runtime();
      var MonitorMobileIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              "path",
              {
                d: "M10 16.95H6.21C2.84 16.95 2 16.11 2 12.74V6.74003C2 3.37003 2.84 2.53003 6.21 2.53003H16.74C20.11 2.53003 20.95 3.37003 20.95 6.74003",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              "path",
              {
                d: "M10 21.4699V16.95",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              "path",
              {
                d: "M2 12.95H10",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              "path",
              {
                d: "M6.73999 21.47H9.99999",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              "path",
              {
                d: "M22 12.8V18.51C22 20.88 21.41 21.47 19.04 21.47H15.49C13.12 21.47 12.53 20.88 12.53 18.51V12.8C12.53 10.43 13.12 9.83997 15.49 9.83997H19.04C21.41 9.83997 22 10.43 22 12.8Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
              "path",
              {
                d: "M17.2445 18.25H17.2535",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2"
              }
            )
          ]
        })
      );
      var import_jsx_runtime24 = require_jsx_runtime();
      var InvalidCardIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
              "path",
              {
                d: "M10 16.95H6.21C2.84 16.95 2 16.11 2 12.74V6.74003C2 3.37003 2.84 2.53003 6.21 2.53003H16.74C20.11 2.53003 20.95 3.37003 20.95 6.74003",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
              "path",
              {
                d: "M10 21.4699V16.95",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
              "path",
              {
                d: "M2 12.95H10",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
              "path",
              {
                d: "M6.73999 21.47H9.99999",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
              "path",
              {
                d: "M22 12.8V18.51C22 20.88 21.41 21.47 19.04 21.47H15.49C13.12 21.47 12.53 20.88 12.53 18.51V12.8C12.53 10.43 13.12 9.83997 15.49 9.83997H19.04C21.41 9.83997 22 10.43 22 12.8Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
              "path",
              {
                d: "M17.2445 18.25H17.2535",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2"
              }
            )
          ]
        })
      );
      var import_jsx_runtime25 = require_jsx_runtime();
      var EyeFilledIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
              "path",
              {
                d: "M21.25 9.14969C18.94 5.51969 15.56 3.42969 12 3.42969C10.22 3.42969 8.49 3.94969 6.91 4.91969C5.33 5.89969 3.91 7.32969 2.75 9.14969C1.75 10.7197 1.75 13.2697 2.75 14.8397C5.06 18.4797 8.44 20.5597 12 20.5597C13.78 20.5597 15.51 20.0397 17.09 19.0697C18.67 18.0897 20.09 16.6597 21.25 14.8397C22.25 13.2797 22.25 10.7197 21.25 9.14969ZM12 16.0397C9.76 16.0397 7.96 14.2297 7.96 11.9997C7.96 9.76969 9.76 7.95969 12 7.95969C14.24 7.95969 16.04 9.76969 16.04 11.9997C16.04 14.2297 14.24 16.0397 12 16.0397Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
              "path",
              {
                d: "M11.9984 9.14062C10.4284 9.14062 9.14844 10.4206 9.14844 12.0006C9.14844 13.5706 10.4284 14.8506 11.9984 14.8506C13.5684 14.8506 14.8584 13.5706 14.8584 12.0006C14.8584 10.4306 13.5684 9.14062 11.9984 9.14062Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime26 = require_jsx_runtime();
      var EyeSlashFilledIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
              "path",
              {
                d: "M21.2714 9.17834C20.9814 8.71834 20.6714 8.28834 20.3514 7.88834C19.9814 7.41834 19.2814 7.37834 18.8614 7.79834L15.8614 10.7983C16.0814 11.4583 16.1214 12.2183 15.9214 13.0083C15.5714 14.4183 14.4314 15.5583 13.0214 15.9083C12.2314 16.1083 11.4714 16.0683 10.8114 15.8483C10.8114 15.8483 9.38141 17.2783 8.35141 18.3083C7.85141 18.8083 8.01141 19.6883 8.68141 19.9483C9.75141 20.3583 10.8614 20.5683 12.0014 20.5683C13.7814 20.5683 15.5114 20.0483 17.0914 19.0783C18.7014 18.0783 20.1514 16.6083 21.3214 14.7383C22.2714 13.2283 22.2214 10.6883 21.2714 9.17834Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
              "path",
              {
                d: "M14.0206 9.98062L9.98062 14.0206C9.47062 13.5006 9.14062 12.7806 9.14062 12.0006C9.14062 10.4306 10.4206 9.14062 12.0006 9.14062C12.7806 9.14062 13.5006 9.47062 14.0206 9.98062Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
              "path",
              {
                d: "M18.25 5.74969L14.86 9.13969C14.13 8.39969 13.12 7.95969 12 7.95969C9.76 7.95969 7.96 9.76969 7.96 11.9997C7.96 13.1197 8.41 14.1297 9.14 14.8597L5.76 18.2497H5.75C4.64 17.3497 3.62 16.1997 2.75 14.8397C1.75 13.2697 1.75 10.7197 2.75 9.14969C3.91 7.32969 5.33 5.89969 6.91 4.91969C8.49 3.95969 10.22 3.42969 12 3.42969C14.23 3.42969 16.39 4.24969 18.25 5.74969Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
              "path",
              {
                d: "M14.8581 11.9981C14.8581 13.5681 13.5781 14.8581 11.9981 14.8581C11.9381 14.8581 11.8881 14.8581 11.8281 14.8381L14.8381 11.8281C14.8581 11.8881 14.8581 11.9381 14.8581 11.9981Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
              "path",
              {
                d: "M21.7689 2.22891C21.4689 1.92891 20.9789 1.92891 20.6789 2.22891L2.22891 20.6889C1.92891 20.9889 1.92891 21.4789 2.22891 21.7789C2.37891 21.9189 2.56891 21.9989 2.76891 21.9989C2.96891 21.9989 3.15891 21.9189 3.30891 21.7689L21.7689 3.30891C22.0789 3.00891 22.0789 2.52891 21.7689 2.22891Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime27 = require_jsx_runtime();
      var SearchIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
              "path",
              {
                d: "M11.5 21C16.7467 21 21 16.7467 21 11.5C21 6.25329 16.7467 2 11.5 2C6.25329 2 2 6.25329 2 11.5C2 16.7467 6.25329 21 11.5 21Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
              "path",
              {
                d: "M22 22L20 20",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "2"
              }
            )
          ]
        })
      );
      var import_jsx_runtime28 = require_jsx_runtime();
      var LockFilledIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
              "path",
              {
                d: "M12.0011 17.3498C12.9013 17.3498 13.6311 16.6201 13.6311 15.7198C13.6311 14.8196 12.9013 14.0898 12.0011 14.0898C11.1009 14.0898 10.3711 14.8196 10.3711 15.7198C10.3711 16.6201 11.1009 17.3498 12.0011 17.3498Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
              "path",
              {
                d: "M18.28 9.53V8.28C18.28 5.58 17.63 2 12 2C6.37 2 5.72 5.58 5.72 8.28V9.53C2.92 9.88 2 11.3 2 14.79V16.65C2 20.75 3.25 22 7.35 22H16.65C20.75 22 22 20.75 22 16.65V14.79C22 11.3 21.08 9.88 18.28 9.53ZM12 18.74C10.33 18.74 8.98 17.38 8.98 15.72C8.98 14.05 10.34 12.7 12 12.7C13.66 12.7 15.02 14.06 15.02 15.72C15.02 17.39 13.67 18.74 12 18.74ZM7.35 9.44C7.27 9.44 7.2 9.44 7.12 9.44V8.28C7.12 5.35 7.95 3.4 12 3.4C16.05 3.4 16.88 5.35 16.88 8.28V9.45C16.8 9.45 16.73 9.45 16.65 9.45H7.35V9.44Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime29 = require_jsx_runtime();
      var EditIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 20 20",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
              "path",
              {
                d: "M11.05 3.00002L4.20835 10.2417C3.95002 10.5167 3.70002 11.0584 3.65002 11.4334L3.34169 14.1334C3.23335 15.1084 3.93335 15.775 4.90002 15.6084L7.58335 15.15C7.95835 15.0834 8.48335 14.8084 8.74168 14.525L15.5834 7.28335C16.7667 6.03335 17.3 4.60835 15.4583 2.86668C13.625 1.14168 12.2334 1.75002 11.05 3.00002Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: 10,
                strokeWidth: 1.5
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
              "path",
              {
                d: "M9.90833 4.20831C10.2667 6.50831 12.1333 8.26665 14.45 8.49998",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: 10,
                strokeWidth: 1.5
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
              "path",
              {
                d: "M2.5 18.3333H17.5",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: 10,
                strokeWidth: 1.5
              }
            )
          ]
        })
      );
      var import_jsx_runtime30 = require_jsx_runtime();
      var DeleteIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 20 20",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
              "path",
              {
                d: "M17.5 4.98332C14.725 4.70832 11.9333 4.56665 9.15 4.56665C7.5 4.56665 5.85 4.64998 4.2 4.81665L2.5 4.98332",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
              "path",
              {
                d: "M7.08331 4.14169L7.26665 3.05002C7.39998 2.25835 7.49998 1.66669 8.90831 1.66669H11.0916C12.5 1.66669 12.6083 2.29169 12.7333 3.05835L12.9166 4.14169",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
              "path",
              {
                d: "M15.7084 7.61664L15.1667 16.0083C15.075 17.3166 15 18.3333 12.675 18.3333H7.32502C5.00002 18.3333 4.92502 17.3166 4.83335 16.0083L4.29169 7.61664",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
              "path",
              {
                d: "M8.60834 13.75H11.3833",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
              "path",
              {
                d: "M7.91669 10.4167H12.0834",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            )
          ]
        })
      );
      var import_jsx_runtime31 = require_jsx_runtime();
      var EyeIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 20 20",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
              "path",
              {
                d: "M12.9833 10C12.9833 11.65 11.65 12.9833 10 12.9833C8.35 12.9833 7.01666 11.65 7.01666 10C7.01666 8.35 8.35 7.01666 10 7.01666C11.65 7.01666 12.9833 8.35 12.9833 10Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
              "path",
              {
                d: "M9.99999 16.8916C12.9417 16.8916 15.6833 15.1583 17.5917 12.1583C18.3417 10.9833 18.3417 9.00831 17.5917 7.83331C15.6833 4.83331 12.9417 3.09998 9.99999 3.09998C7.05833 3.09998 4.31666 4.83331 2.40833 7.83331C1.65833 9.00831 1.65833 10.9833 2.40833 12.1583C4.31666 15.1583 7.05833 16.8916 9.99999 16.8916Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5
              }
            )
          ]
        })
      );
      var import_jsx_runtime32 = require_jsx_runtime();
      var ArrowRightIcon = (_a) => {
        var _b = _a, { strokeWidth = 1.5 } = _b, otherProps = __objRest(_b, ["strokeWidth"]);
        return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            "aria-hidden": "true",
            fill: "none",
            focusable: "false",
            height: "1em",
            role: "presentation",
            viewBox: "0 0 24 24",
            width: "1em"
          }, otherProps), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
                "path",
                {
                  d: "M16.835 6.91821L23.9166 13.9999L16.835 21.0815",
                  stroke: "currentColor",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
                "path",
                {
                  d: "M4.08325 14H23.7183",
                  stroke: "currentColor",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth
                }
              )
            ]
          })
        );
      };
      var import_jsx_runtime33 = require_jsx_runtime();
      var ArrowLeftIcon = (_a) => {
        var _b = _a, { strokeWidth = 1.5 } = _b, otherProps = __objRest(_b, ["strokeWidth"]);
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
          "svg",
          __spreadProps(__spreadValues({
            "aria-hidden": "true",
            fill: "none",
            focusable: "false",
            height: "1em",
            role: "presentation",
            viewBox: "0 0 24 24",
            width: "1em"
          }, otherProps), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                "path",
                {
                  d: "M9.57 5.92993L3.5 11.9999L9.57 18.0699",
                  stroke: "currentColor",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                "path",
                {
                  d: "M20.5 12H3.67004",
                  stroke: "currentColor",
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeMiterlimit: "10",
                  strokeWidth
                }
              )
            ]
          })
        );
      };
      var import_jsx_runtime34 = require_jsx_runtime();
      var LinkIcon2 = (props) => /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          shapeRendering: "geometricPrecision",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "1.5",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("path", { d: "M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6" }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("path", { d: "M15 3h6v6" }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("path", { d: "M10 14L21 3" })
          ]
        })
      );
      var import_jsx_runtime35 = require_jsx_runtime();
      var SelectorIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "1.5",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { d: "M0 0h24v24H0z", fill: "none", stroke: "none" }),
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { d: "M8 9l4 -4l4 4" }),
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { d: "M16 15l-4 4l-4 -4" })
          ]
        })
      );
      var import_jsx_runtime36 = require_jsx_runtime();
      var AddNoteBulkIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
              "path",
              {
                d: "M7.37 22h9.25a4.87 4.87 0 0 0 4.87-4.87V8.37a4.87 4.87 0 0 0-4.87-4.87H7.37A4.87 4.87 0 0 0 2.5 8.37v8.75c0 2.7 2.18 4.88 4.87 4.88Z",
                fill: "currentColor",
                opacity: 0.4
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
              "path",
              {
                d: "M8.29 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM15.71 6.29c-.42 0-.75-.34-.75-.75V2.75a.749.749 0 1 1 1.5 0v2.78c0 .42-.33.76-.75.76ZM12 14.75h-1.69V13c0-.41-.34-.75-.75-.75s-.75.34-.75.75v1.75H7c-.41 0-.75.34-.75.75s.34.75.75.75h1.81V18c0 .41.34.75.75.75s.75-.34.75-.75v-1.75H12c.41 0 .75-.34.75-.75s-.34-.75-.75-.75Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime37 = require_jsx_runtime();
      var CopyDocumentBulkIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
              "path",
              {
                d: "M15.5 13.15h-2.17c-1.78 0-3.23-1.44-3.23-3.23V7.75c0-.41-.33-.75-.75-.75H6.18C3.87 7 2 8.5 2 11.18v6.64C2 20.5 3.87 22 6.18 22h5.89c2.31 0 4.18-1.5 4.18-4.18V13.9c0-.42-.34-.75-.75-.75Z",
                fill: "currentColor",
                opacity: 0.4
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
              "path",
              {
                d: "M17.82 2H11.93C9.67 2 7.84 3.44 7.76 6.01c.06 0 .11-.01.17-.01h5.89C16.13 6 18 7.5 18 10.18V16.83c0 .06-.01.11-.01.16 2.23-.07 4.01-1.55 4.01-4.16V6.18C22 3.5 20.13 2 17.82 2Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
              "path",
              {
                d: "M11.98 7.15c-.31-.31-.84-.1-.84.33v2.62c0 1.1.93 2 2.07 2 .71.01 1.7.01 2.55.01.43 0 .65-.5.35-.8-1.09-1.09-3.03-3.04-4.13-4.16Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime38 = require_jsx_runtime();
      var DeleteDocumentBulkIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
              "path",
              {
                d: "M21.07 5.23c-1.61-.16-3.22-.28-4.84-.37v-.01l-.22-1.3c-.15-.92-.37-2.3-2.71-2.3h-2.62c-2.33 0-2.55 1.32-2.71 2.29l-.21 1.28c-.93.06-1.86.12-2.79.21l-2.04.2c-.42.04-.72.41-.68.82.04.41.4.71.82.67l2.04-.2c5.24-.52 10.52-.32 15.82.21h.08c.38 0 .71-.29.75-.68a.766.766 0 0 0-.69-.82Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
              "path",
              {
                d: "M19.23 8.14c-.24-.25-.57-.39-.91-.39H5.68c-.34 0-.68.14-.91.39-.23.25-.36.59-.34.94l.62 10.26c.11 1.52.25 3.42 3.74 3.42h6.42c3.49 0 3.63-1.89 3.74-3.42l.62-10.25c.02-.36-.11-.7-.34-.95Z",
                fill: "currentColor",
                opacity: 0.399
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
              "path",
              {
                clipRule: "evenodd",
                d: "M9.58 17a.75.75 0 0 1 .75-.75h3.33a.75.75 0 0 1 0 1.5h-3.33a.75.75 0 0 1-.75-.75ZM8.75 13a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z",
                fill: "currentColor",
                fillRule: "evenodd"
              }
            )
          ]
        })
      );
      var import_jsx_runtime39 = require_jsx_runtime();
      var EditDocumentBulkIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
              "path",
              {
                d: "M15.48 3H7.52C4.07 3 2 5.06 2 8.52v7.95C2 19.94 4.07 22 7.52 22h7.95c3.46 0 5.52-2.06 5.52-5.52V8.52C21 5.06 18.93 3 15.48 3Z",
                fill: "currentColor",
                opacity: 0.4
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
              "path",
              {
                d: "M21.02 2.98c-1.79-1.8-3.54-1.84-5.38 0L14.51 4.1c-.1.1-.13.24-.09.37.7 2.45 2.66 4.41 5.11 5.11.03.01.08.01.11.01.1 0 .2-.04.27-.11l1.11-1.12c.91-.91 1.36-1.78 1.36-2.67 0-.9-.45-1.79-1.36-2.71ZM17.86 10.42c-.27-.13-.53-.26-.77-.41-.2-.12-.4-.25-.59-.39-.16-.1-.34-.25-.52-.4-.02-.01-.08-.06-.16-.14-.31-.25-.64-.59-.95-.96-.02-.02-.08-.08-.13-.17-.1-.11-.25-.3-.38-.51-.11-.14-.24-.34-.36-.55-.15-.25-.28-.5-.4-.76-.13-.28-.23-.54-.32-.79L7.9 10.72c-.35.35-.69 1.01-.76 1.5l-.43 2.98c-.09.63.08 1.22.47 1.61.33.33.78.5 1.28.5.11 0 .22-.01.33-.02l2.97-.42c.49-.07 1.15-.4 1.5-.76l5.38-5.38c-.25-.08-.5-.19-.78-.31Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime40 = require_jsx_runtime();
      var AlignTopBoldIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
              "path",
              {
                d: "M15.98 19.3789H17.02C18.61 19.3789 19.25 18.7789 19.25 17.2589V5.37891H13.75V17.2589C13.76 18.7789 14.4 19.3789 15.98 19.3789Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
              "path",
              {
                d: "M7.48 14.3789H8.52C10.11 14.3789 10.75 13.7689 10.75 12.2589V5.37891H5.25V12.2589C5.26 13.7689 5.9 14.3789 7.48 14.3789Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
              "path",
              {
                d: "M21.25 6.11891H2.75C2.34 6.11891 2 5.78891 2 5.37891C2 4.96891 2.34 4.62891 2.75 4.62891H21.25C21.66 4.62891 22 4.96891 22 5.37891C22 5.78891 21.66 6.11891 21.25 6.11891Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime41 = require_jsx_runtime();
      var AlignBottomBoldIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
              "path",
              {
                d: "M8.02 4.62109H6.98C5.39 4.62109 4.75 5.22109 4.75 6.74109V18.6211H10.25V6.74109C10.24 5.22109 9.6 4.62109 8.02 4.62109Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
              "path",
              {
                d: "M16.52 9.62109H15.48C13.89 9.62109 13.25 10.2311 13.25 11.7411V18.6211H18.75V11.7411C18.75 10.2311 18.1 9.62109 16.52 9.62109Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
              "path",
              {
                d: "M2.75 17.8789H21.25C21.66 17.8789 22 18.2189 22 18.6289C22 19.0389 21.66 19.3789 21.25 19.3789H2.75C2.34 19.3789 2 19.0389 2 18.6189C2 18.1989 2.34 17.8789 2.75 17.8789Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime42 = require_jsx_runtime();
      var AlignLeftBoldIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
              "path",
              {
                d: "M19.3809 15.98V17.02C19.3809 18.61 18.7809 19.25 17.2609 19.25H5.38086V13.75H17.2609C18.7809 13.75 19.3809 14.39 19.3809 15.98Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
              "path",
              {
                d: "M14.3809 7.48V8.52C14.3809 10.11 13.7709 10.75 12.2609 10.75H5.38086V5.25H12.2609C13.7709 5.25 14.3809 5.89 14.3809 7.48Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
              "path",
              {
                d: "M5.37912 22C4.96912 22 4.62912 21.66 4.62912 21.25V2.75C4.61912 2.33 4.95912 2 5.37912 2C5.79912 2 6.12912 2.34 6.12912 2.75V21.25C6.11912 21.66 5.78912 22 5.37912 22Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime43 = require_jsx_runtime();
      var AlignRightBoldIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
              "path",
              {
                d: "M4.61914 15.98V17.02C4.61914 18.61 5.21914 19.25 6.73914 19.25H18.6191V13.75H6.73914C5.21914 13.75 4.61914 14.39 4.61914 15.98Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
              "path",
              {
                d: "M9.61914 7.48V8.52C9.61914 10.11 10.2291 10.75 11.7391 10.75H18.6191V5.25H11.7391C10.2291 5.25 9.61914 5.89 9.61914 7.48Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
              "path",
              {
                d: "M18.6191 22C18.2091 22 17.8691 21.66 17.8691 21.25V2.75C17.8691 2.34 18.2091 2 18.6191 2C19.0291 2 19.3691 2.34 19.3691 2.75V21.25C19.3791 21.66 19.0391 22 18.6191 22Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime44 = require_jsx_runtime();
      var AlignVerticallyBoldIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
              "path",
              {
                d: "M17.4 19.25H6.6C5.1 19.25 4.5 18.61 4.5 17.02V15.98C4.5 14.39 5.1 13.75 6.6 13.75H17.4C18.9 13.75 19.5 14.39 19.5 15.98V17.02C19.5 18.61 18.9 19.25 17.4 19.25Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
              "path",
              {
                d: "M12.75 19.25V21.25C12.75 21.66 12.41 22 12 22C11.59 22 11.25 21.66 11.25 21.25V19.25H12.75Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("path", { d: "M12.75 10.75H11.25V13.75H12.75V10.75Z", fill: "currentColor" }),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
              "path",
              {
                d: "M12.75 2.75V5.25H11.25V2.75C11.25 2.34 11.59 2 12 2C12.41 2 12.75 2.34 12.75 2.75Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
              "path",
              {
                d: "M15.4 10.75H8.6C7.1 10.75 6.5 10.11 6.5 8.52V7.48C6.5 5.89 7.1 5.25 8.6 5.25H15.4C16.9 5.25 17.5 5.89 17.5 7.48V8.52C17.5 10.11 16.9 10.75 15.4 10.75Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime45 = require_jsx_runtime();
      var AlignHorizontallyBoldIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              "path",
              {
                d: "M4.75 17.4V6.6C4.75 5.1 5.39 4.5 6.98 4.5H8.02C9.61 4.5 10.25 5.1 10.25 6.6V17.4C10.25 18.9 9.61 19.5 8.02 19.5H6.98C5.39 19.5 4.75 18.9 4.75 17.4Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              "path",
              {
                d: "M4.75 12.75H2.75C2.34 12.75 2 12.41 2 12C2 11.59 2.34 11.25 2.75 11.25H4.75V12.75Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", { d: "M13.25 11.25H10.25V12.75H13.25V11.25Z", fill: "currentColor" }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              "path",
              {
                d: "M21.25 12.75H18.75V11.25H21.25C21.66 11.25 22 11.59 22 12C22 12.41 21.66 12.75 21.25 12.75Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
              "path",
              {
                d: "M13.25 15.4V8.6C13.25 7.1 13.89 6.5 15.48 6.5H16.52C18.11 6.5 18.75 7.1 18.75 8.6V15.4C18.75 16.9 18.11 17.5 16.52 17.5H15.48C13.89 17.5 13.25 16.9 13.25 15.4Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime46 = require_jsx_runtime();
      var PetBoldIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
              "path",
              {
                d: "M19.0803 15.7203C18.4903 12.1903 15.1003 9.32031 11.5203 9.32031C7.63028 9.32031 4.21028 12.4703 3.88028 16.3503C3.75028 17.8503 4.23028 19.2703 5.22028 20.3403C6.20028 21.4103 7.58028 22.0003 9.08028 22.0003H13.7603C15.4503 22.0003 16.9303 21.3403 17.9403 20.1503C18.9503 18.9603 19.3503 17.3803 19.0803 15.7203Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
              "path",
              {
                d: "M10.2796 7.86C11.8978 7.86 13.2096 6.54819 13.2096 4.93C13.2096 3.31181 11.8978 2 10.2796 2C8.66141 2 7.34961 3.31181 7.34961 4.93C7.34961 6.54819 8.66141 7.86 10.2796 7.86Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
              "path",
              {
                d: "M16.94 9.02844C18.2876 9.02844 19.38 7.93601 19.38 6.58844C19.38 5.24086 18.2876 4.14844 16.94 4.14844C15.5924 4.14844 14.5 5.24086 14.5 6.58844C14.5 7.93601 15.5924 9.02844 16.94 9.02844Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
              "path",
              {
                d: "M20.5496 12.9313C21.6266 12.9313 22.4996 12.0582 22.4996 10.9812C22.4996 9.90429 21.6266 9.03125 20.5496 9.03125C19.4727 9.03125 18.5996 9.90429 18.5996 10.9812C18.5996 12.0582 19.4727 12.9313 20.5496 12.9313Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
              "path",
              {
                d: "M3.94 10.9816C5.28757 10.9816 6.38 9.88914 6.38 8.54156C6.38 7.19399 5.28757 6.10156 3.94 6.10156C2.59243 6.10156 1.5 7.19399 1.5 8.54156C1.5 9.88914 2.59243 10.9816 3.94 10.9816Z",
                fill: "currentColor"
              }
            )
          ]
        })
      );
      var import_jsx_runtime47 = require_jsx_runtime();
      var CheckLinearIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 2,
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("polyline", { points: "20 6 9 17 4 12" })
        })
      );
      var import_jsx_runtime48 = require_jsx_runtime();
      var CopyLinearIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "1.5",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", { d: "M16 17.1c0 3.5-1.4 4.9-4.9 4.9H6.9C3.4 22 2 20.6 2 17.1v-4.2C2 9.4 3.4 8 6.9 8h4.2c3.5 0 4.9 1.4 4.9 4.9Z" }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", { d: "M8 8V6.9C8 3.4 9.4 2 12.9 2h4.2C20.6 2 22 3.4 22 6.9v4.2c0 3.5-1.4 4.9-4.9 4.9H16" }),
            /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", { d: "M16 12.9C16 9.4 14.6 8 11.1 8" })
          ]
        })
      );
      var import_jsx_runtime49 = require_jsx_runtime();
      var ChevronCircleTopLinearIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
        "svg",
        __spreadProps(__spreadValues({
          "aria-hidden": "true",
          fill: "none",
          focusable: "false",
          height: "1em",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "1em"
        }, props), {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
              "path",
              {
                d: "M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeMiterlimit: "10",
                strokeWidth: "1.5"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
              "path",
              {
                d: "M8.46997 13.26L12 9.73999L15.53 13.26",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: "1.5"
              }
            )
          ]
        })
      );
    }
  });

  // node_modules/@nextui-org/framer-transitions/dist/index.js
  var require_dist13 = __commonJS({
    "node_modules/@nextui-org/framer-transitions/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        TRANSITION_DEFAULTS: () => TRANSITION_DEFAULTS,
        TRANSITION_EASINGS: () => TRANSITION_EASINGS,
        TRANSITION_VARIANTS: () => TRANSITION_VARIANTS
      });
      module.exports = __toCommonJS2(src_exports);
      var TRANSITION_EASINGS = {
        ease: [0.36, 0.66, 0.4, 1],
        easeIn: [0.4, 0, 1, 1],
        easeOut: [0, 0, 0.2, 1],
        easeInOut: [0.4, 0, 0.2, 1],
        spring: [0.155, 1.105, 0.295, 1.12],
        springOut: [0.57, -0.15, 0.62, 0.07],
        softSpring: [0.16, 1.11, 0.3, 1.02]
      };
      var TRANSITION_DEFAULTS = {
        enter: {
          duration: 0.2,
          ease: TRANSITION_EASINGS.easeOut
        },
        exit: {
          duration: 0.1,
          ease: TRANSITION_EASINGS.easeIn
        }
      };
      var TRANSITION_VARIANTS = {
        scaleSpring: {
          enter: {
            transform: "scale(1)",
            opacity: 1,
            transition: {
              type: "spring",
              bounce: 0,
              duration: 0.3
            }
          },
          exit: {
            transform: "scale(0.6)",
            opacity: 0,
            transition: {
              type: "easeOut",
              duration: 0.2
            }
          }
        },
        scaleSpringOpacity: {
          initial: {
            opacity: 0,
            transform: "scale(0.6)"
          },
          enter: {
            opacity: 1,
            transform: "scale(1)",
            transition: {
              type: "spring",
              bounce: 0,
              duration: 0.3
            }
          },
          exit: {
            opacity: 0,
            transform: "scale(0.3)",
            transition: {
              type: "spring",
              bounce: 0,
              duration: 0.4
            }
          }
        },
        scale: {
          enter: { scale: 1 },
          exit: { scale: 0.95 }
        },
        scaleFadeIn: {
          enter: {
            transform: "scale(1)",
            opacity: 1,
            transition: {
              duration: 0.25,
              ease: TRANSITION_EASINGS.easeIn
            }
          },
          exit: {
            transform: "scale(0.95)",
            opacity: 0,
            transition: {
              duration: 0.2,
              ease: TRANSITION_EASINGS.easeOut
            }
          }
        },
        scaleInOut: {
          enter: {
            transform: "scale(1)",
            opacity: 1,
            transition: {
              duration: 0.4,
              ease: TRANSITION_EASINGS.ease
            }
          },
          exit: {
            transform: "scale(1.03)",
            opacity: 0,
            transition: {
              duration: 0.3,
              ease: TRANSITION_EASINGS.ease
            }
          }
        },
        fade: {
          enter: {
            opacity: 1,
            transition: {
              duration: 0.4,
              ease: TRANSITION_EASINGS.ease
            }
          },
          exit: {
            opacity: 0,
            transition: {
              duration: 0.3,
              ease: TRANSITION_EASINGS.ease
            }
          }
        },
        collapse: {
          enter: {
            opacity: 1,
            height: "auto",
            transition: {
              height: {
                type: "spring",
                bounce: 0,
                duration: 0.3
              },
              opacity: {
                easings: "ease",
                duration: 0.4
              }
            }
          },
          exit: {
            opacity: 0,
            height: 0,
            transition: {
              easings: "ease",
              duration: 0.3
            }
          }
        }
      };
    }
  });

  // node_modules/@nextui-org/accordion/dist/index.js
  var require_dist14 = __commonJS({
    "node_modules/@nextui-org/accordion/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Accordion: () => accordion_default,
        AccordionItem: () => accordion_item_base_default,
        useAccordion: () => useAccordion,
        useAccordionItem: () => useAccordionItem
      });
      module.exports = __toCommonJS2(src_exports);
      var import_aria_utils = require_dist6();
      var AccordionItemBase = import_aria_utils.BaseItem;
      var accordion_item_base_default = AccordionItemBase;
      var import_system2 = require_dist4();
      var import_framer_motion2 = require_cjs2();
      var import_divider = require_dist8();
      var import_react5 = require_react();
      var import_react_utils = require_dist10();
      var import_react3 = __toESM2(require_react());
      var import_tree = require_main17();
      var import_utils = require_main7();
      var import_theme = require_dist5();
      var import_react_utils2 = require_dist10();
      var import_react22 = require_react();
      var import_use_aria_accordion = require_dist11();
      function useAccordion(props) {
        const _a = props, {
          ref,
          as,
          children,
          className,
          items,
          variant,
          motionProps,
          expandedKeys,
          disabledKeys,
          selectedKeys,
          defaultExpandedKeys,
          selectionMode = "single",
          selectionBehavior = "toggle",
          keepContentMounted = false,
          disallowEmptySelection,
          defaultSelectedKeys,
          onExpandedChange,
          onSelectionChange,
          dividerProps = {},
          isCompact = false,
          isDisabled = false,
          showDivider = true,
          hideIndicator = false,
          disableAnimation = false,
          disableIndicatorAnimation = false,
          itemClasses
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "children",
          "className",
          "items",
          "variant",
          "motionProps",
          "expandedKeys",
          "disabledKeys",
          "selectedKeys",
          "defaultExpandedKeys",
          "selectionMode",
          "selectionBehavior",
          "keepContentMounted",
          "disallowEmptySelection",
          "defaultSelectedKeys",
          "onExpandedChange",
          "onSelectionChange",
          "dividerProps",
          "isCompact",
          "isDisabled",
          "showDivider",
          "hideIndicator",
          "disableAnimation",
          "disableIndicatorAnimation",
          "itemClasses"
        ]);
        const [focusedKey, setFocusedKey] = (0, import_react22.useState)(null);
        const Component = as || "div";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const classNames = (0, import_react22.useMemo)(
          () => (0, import_theme.accordion)({
            variant,
            className
          }),
          [variant, className]
        );
        const treeChildren = (0, import_react22.useMemo)(() => {
          let treeChildren2 = [];
          import_react3.default.Children.map(children, (child) => {
            var _a2;
            if (import_react3.default.isValidElement(child) && typeof ((_a2 = child.props) == null ? void 0 : _a2.children) !== "string") {
              const clonedChild = import_react3.default.cloneElement(child, {
                hasChildItems: false
              });
              treeChildren2.push(clonedChild);
            } else {
              treeChildren2.push(child);
            }
          });
          return treeChildren2;
        }, [children]);
        const commonProps = {
          children: treeChildren,
          items
        };
        const expandableProps = {
          expandedKeys,
          defaultExpandedKeys,
          onExpandedChange
        };
        const treeProps = __spreadValues(__spreadValues({
          disabledKeys,
          selectedKeys,
          selectionMode,
          selectionBehavior,
          disallowEmptySelection,
          defaultSelectedKeys: defaultSelectedKeys != null ? defaultSelectedKeys : defaultExpandedKeys,
          onSelectionChange
        }, commonProps), expandableProps);
        const state = (0, import_tree.useTreeState)(treeProps);
        state.selectionManager.setFocusedKey = (key) => {
          setFocusedKey(key);
        };
        const { accordionProps } = (0, import_use_aria_accordion.useReactAriaAccordion)(
          __spreadValues(__spreadValues({}, commonProps), expandableProps),
          state,
          domRef
        );
        const values = (0, import_react22.useMemo)(
          () => ({
            state,
            focusedKey,
            motionProps,
            isCompact,
            isDisabled,
            hideIndicator,
            disableAnimation,
            keepContentMounted,
            disableIndicatorAnimation
          }),
          [
            focusedKey,
            isCompact,
            isDisabled,
            hideIndicator,
            selectedKeys,
            disableAnimation,
            keepContentMounted,
            state == null ? void 0 : state.expandedKeys.values,
            disableIndicatorAnimation,
            state.expandedKeys.size,
            state.disabledKeys.size,
            motionProps
          ]
        );
        const getBaseProps = (0, import_react3.useCallback)((props2 = {}) => {
          return __spreadValues({
            ref: domRef,
            className: classNames,
            "data-orientation": "vertical"
          }, (0, import_utils.mergeProps)(
            accordionProps,
            (0, import_react_utils.filterDOMProps)(otherProps, {
              enabled: shouldFilterDOMProps
            }),
            props2
          ));
        }, []);
        const handleFocusChanged = (0, import_react3.useCallback)((isFocused, key) => {
          isFocused && setFocusedKey(key);
        }, []);
        return {
          Component,
          values,
          state,
          focusedKey,
          getBaseProps,
          isSplitted: variant === "splitted",
          classNames,
          showDivider,
          dividerProps,
          disableAnimation,
          handleFocusChanged,
          itemClasses
        };
      }
      var import_system = require_dist4();
      var import_react4 = require_react();
      var import_shared_icons = require_dist12();
      var import_framer_motion = require_cjs2();
      var import_framer_transitions = require_dist13();
      var import_focus = require_main12();
      var import_theme2 = require_dist5();
      var import_shared_utils = require_dist9();
      var import_react_utils3 = require_dist10();
      var import_use_aria_accordion2 = require_dist11();
      var import_react32 = require_react();
      var import_utils2 = require_main7();
      var import_interactions = require_main11();
      function useAccordionItem(props) {
        var _a;
        const { ref, as, item, onFocusChange } = props;
        const _a2 = props, {
          state,
          className,
          indicator,
          children,
          title,
          subtitle,
          startContent,
          motionProps,
          focusedKey,
          isCompact = false,
          classNames: classNamesProp = {},
          isDisabled: isDisabledProp = false,
          hideIndicator = false,
          disableAnimation = false,
          keepContentMounted = false,
          disableIndicatorAnimation = false,
          onPress,
          onPressStart,
          onPressEnd,
          onPressChange,
          onPressUp,
          onClick
        } = _a2, otherProps = __objRest(_a2, [
          "state",
          "className",
          "indicator",
          "children",
          "title",
          "subtitle",
          "startContent",
          "motionProps",
          "focusedKey",
          "isCompact",
          "classNames",
          "isDisabled",
          "hideIndicator",
          "disableAnimation",
          "keepContentMounted",
          "disableIndicatorAnimation",
          "onPress",
          "onPressStart",
          "onPressEnd",
          "onPressChange",
          "onPressUp",
          "onClick"
        ]);
        const Component = as || "div";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const isDisabled = state.disabledKeys.has(item.key) || isDisabledProp;
        const isOpen = state.selectionManager.isSelected(item.key);
        const { buttonProps: buttonCompleteProps, regionProps } = (0, import_use_aria_accordion2.useReactAriaAccordionItem)(
          { item, isDisabled },
          __spreadProps(__spreadValues({}, state), { focusedKey }),
          domRef
        );
        const _b = buttonCompleteProps, { onFocus: onFocusButton, onBlur: onBlurButton } = _b, buttonProps = __objRest(_b, ["onFocus", "onBlur"]);
        const { isFocused, isFocusVisible, focusProps } = (0, import_focus.useFocusRing)({
          autoFocus: (_a = item.props) == null ? void 0 : _a.autoFocus
        });
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({ isDisabled });
        const { pressProps, isPressed } = (0, import_interactions.usePress)({
          ref: domRef,
          isDisabled,
          onPress,
          onPressStart,
          onPressEnd,
          onPressChange,
          onPressUp
        });
        const handleFocus = (0, import_react32.useCallback)(() => {
          onFocusChange == null ? void 0 : onFocusChange(true, item.key);
        }, []);
        const handleBlur = (0, import_react32.useCallback)(() => {
          onFocusChange == null ? void 0 : onFocusChange(false, item.key);
        }, []);
        const classNames = (0, import_react32.useMemo)(
          () => __spreadValues({}, classNamesProp),
          [...Object.values(classNamesProp)]
        );
        const slots = (0, import_react32.useMemo)(
          () => (0, import_theme2.accordionItem)({
            isCompact,
            isDisabled,
            hideIndicator,
            disableAnimation,
            disableIndicatorAnimation
          }),
          [isCompact, isDisabled, hideIndicator, disableAnimation, disableIndicatorAnimation]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getBaseProps = (0, import_react32.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              "data-open": (0, import_shared_utils.dataAttr)(isOpen),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              className: slots.base({ class: baseStyles })
            }, (0, import_utils2.mergeProps)(
              (0, import_react_utils3.filterDOMProps)(otherProps, {
                enabled: shouldFilterDOMProps
              }),
              props2
            ));
          },
          [baseStyles, shouldFilterDOMProps, otherProps, slots, item.props, isOpen, isDisabled]
        );
        const getButtonProps = (props2 = {}) => {
          var _a22, _b2;
          return __spreadProps(__spreadValues({
            ref: domRef,
            "data-open": (0, import_shared_utils.dataAttr)(isOpen),
            "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
            "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
            "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
            "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
            "data-pressed": (0, import_shared_utils.dataAttr)(isPressed),
            className: slots.trigger({ class: classNames == null ? void 0 : classNames.trigger }),
            onFocus: (0, import_shared_utils.callAllHandlers)(
              handleFocus,
              onFocusButton,
              focusProps.onFocus,
              otherProps.onFocus,
              (_a22 = item.props) == null ? void 0 : _a22.onFocus
            ),
            onBlur: (0, import_shared_utils.callAllHandlers)(
              handleBlur,
              onBlurButton,
              focusProps.onBlur,
              otherProps.onBlur,
              (_b2 = item.props) == null ? void 0 : _b2.onBlur
            )
          }, (0, import_utils2.mergeProps)(buttonProps, hoverProps, pressProps, props2)), {
            onClick: (0, import_utils2.chain)(pressProps.onClick, onClick)
          });
        };
        const getContentProps = (0, import_react32.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              "data-open": (0, import_shared_utils.dataAttr)(isOpen),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              className: slots.content({ class: classNames == null ? void 0 : classNames.content })
            }, (0, import_utils2.mergeProps)(regionProps, props2));
          },
          [slots, classNames, regionProps, isOpen, isDisabled, classNames == null ? void 0 : classNames.content]
        );
        const getIndicatorProps = (0, import_react32.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              "aria-hidden": (0, import_shared_utils.dataAttr)(true),
              "data-open": (0, import_shared_utils.dataAttr)(isOpen),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              className: slots.indicator({ class: classNames == null ? void 0 : classNames.indicator })
            }, props2);
          },
          [slots, classNames == null ? void 0 : classNames.indicator, isOpen, isDisabled, classNames == null ? void 0 : classNames.indicator]
        );
        const getHeadingProps = (0, import_react32.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              "data-open": (0, import_shared_utils.dataAttr)(isOpen),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              className: slots.heading({ class: classNames == null ? void 0 : classNames.heading })
            }, props2);
          },
          [slots, classNames == null ? void 0 : classNames.heading, isOpen, isDisabled, classNames == null ? void 0 : classNames.heading]
        );
        const getTitleProps = (0, import_react32.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              "data-open": (0, import_shared_utils.dataAttr)(isOpen),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              className: slots.title({ class: classNames == null ? void 0 : classNames.title })
            }, props2);
          },
          [slots, classNames == null ? void 0 : classNames.title, isOpen, isDisabled, classNames == null ? void 0 : classNames.title]
        );
        const getSubtitleProps = (0, import_react32.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              "data-open": (0, import_shared_utils.dataAttr)(isOpen),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              className: slots.subtitle({ class: classNames == null ? void 0 : classNames.subtitle })
            }, props2);
          },
          [slots, classNames, isOpen, isDisabled, classNames == null ? void 0 : classNames.subtitle]
        );
        return {
          Component,
          item,
          slots,
          classNames,
          domRef,
          indicator,
          children,
          title,
          subtitle,
          startContent,
          isOpen,
          isDisabled,
          hideIndicator,
          keepContentMounted,
          disableAnimation,
          motionProps,
          getBaseProps,
          getHeadingProps,
          getButtonProps,
          getContentProps,
          getIndicatorProps,
          getTitleProps,
          getSubtitleProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var AccordionItem = (0, import_system.forwardRef)((props, ref) => {
        const {
          Component,
          classNames,
          slots,
          indicator,
          children,
          title,
          subtitle,
          startContent,
          isOpen,
          isDisabled,
          hideIndicator,
          keepContentMounted,
          disableAnimation,
          motionProps,
          getBaseProps,
          getHeadingProps,
          getButtonProps,
          getTitleProps,
          getSubtitleProps,
          getContentProps,
          getIndicatorProps
        } = useAccordionItem(__spreadProps(__spreadValues({}, props), { ref }));
        const willChange = (0, import_framer_motion.useWillChange)();
        const indicatorContent = (0, import_react4.useMemo)(() => {
          if (typeof indicator === "function") {
            return indicator({ indicator: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_shared_icons.ChevronIcon, {}), isOpen, isDisabled });
          }
          if (indicator)
            return indicator;
          return null;
        }, [indicator, isOpen, isDisabled]);
        const indicatorComponent = indicatorContent || /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_shared_icons.ChevronIcon, {});
        const content = (0, import_react4.useMemo)(() => {
          if (disableAnimation) {
            return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", __spreadProps(__spreadValues({}, getContentProps()), { children }));
          }
          return keepContentMounted ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_framer_motion.motion.section,
            __spreadProps(__spreadValues({
              animate: isOpen ? "enter" : "exit",
              exit: "exit",
              initial: "exit",
              style: { overflowY: "hidden", willChange },
              variants: import_framer_transitions.TRANSITION_VARIANTS.collapse
            }, motionProps), {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", __spreadProps(__spreadValues({}, getContentProps()), { children }))
            }),
            "accordion-content"
          ) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, { initial: false, children: isOpen && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_framer_motion.motion.section,
            __spreadProps(__spreadValues({
              animate: "enter",
              exit: "exit",
              initial: "exit",
              style: { overflowY: "hidden", willChange },
              variants: import_framer_transitions.TRANSITION_VARIANTS.collapse
            }, motionProps), {
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", __spreadProps(__spreadValues({}, getContentProps()), { children }))
            }),
            "accordion-content"
          ) });
        }, [isOpen, disableAnimation, keepContentMounted, children, motionProps]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("h2", __spreadProps(__spreadValues({}, getHeadingProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("button", __spreadProps(__spreadValues({}, getButtonProps()), { children: [
            startContent && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: slots.startContent({ class: classNames == null ? void 0 : classNames.startContent }), children: startContent }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: slots.titleWrapper({ class: classNames == null ? void 0 : classNames.titleWrapper }), children: [
              title && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getTitleProps()), { children: title })),
              subtitle && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getSubtitleProps()), { children: subtitle }))
            ] }),
            !hideIndicator && indicatorComponent && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getIndicatorProps()), { children: indicatorComponent }))
          ] })) })),
          content
        ] }));
      });
      AccordionItem.displayName = "NextUI.AccordionItem";
      var accordion_item_default = AccordionItem;
      var import_jsx_runtime2 = require_jsx_runtime();
      var AccordionGroup = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          values,
          state,
          isSplitted,
          showDivider,
          getBaseProps,
          disableAnimation,
          handleFocusChanged: handleFocusChangedProps,
          itemClasses
        } = useAccordion(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        const handleFocusChanged = (0, import_react5.useCallback)(
          (isFocused, key) => handleFocusChangedProps(isFocused, key),
          [handleFocusChangedProps]
        );
        const content = (0, import_react5.useMemo)(() => {
          return [...state.collection].map((item, index3) => {
            const classNames = __spreadValues(__spreadValues({}, itemClasses), item.props.classNames || {});
            return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_react5.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
                accordion_item_default,
                __spreadProps(__spreadValues(__spreadValues({
                  item,
                  onFocusChange: handleFocusChanged
                }, values), item.props), {
                  classNames
                })
              ),
              !isSplitted && showDivider && index3 < state.collection.size - 1 && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_divider.Divider, {})
            ] }, item.key);
          });
        }, [values, itemClasses, handleFocusChanged, isSplitted, showDivider, state.collection]);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: disableAnimation ? content : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_framer_motion2.LayoutGroup, { children: content }) }));
      });
      AccordionGroup.displayName = "NextUI.Accordion";
      var accordion_default = AccordionGroup;
    }
  });

  // node_modules/@nextui-org/use-safe-layout-effect/dist/index.js
  var require_dist15 = __commonJS({
    "node_modules/@nextui-org/use-safe-layout-effect/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useSafeLayoutEffect: () => useSafeLayoutEffect
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react3.useLayoutEffect : import_react3.useEffect;
    }
  });

  // node_modules/@nextui-org/use-image/dist/index.js
  var require_dist16 = __commonJS({
    "node_modules/@nextui-org/use-image/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        shouldShowFallbackImage: () => shouldShowFallbackImage,
        useImage: () => useImage
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var import_use_safe_layout_effect = require_dist15();
      function useImage(props = {}) {
        const { loading, src, srcSet, onLoad, onError, crossOrigin, sizes, ignoreFallback } = props;
        const [status, setStatus] = (0, import_react3.useState)("pending");
        (0, import_react3.useEffect)(() => {
          setStatus(src ? "loading" : "pending");
        }, [src]);
        const imageRef = (0, import_react3.useRef)();
        const load = (0, import_react3.useCallback)(() => {
          if (!src)
            return;
          flush();
          const img = new Image();
          img.src = src;
          if (crossOrigin)
            img.crossOrigin = crossOrigin;
          if (srcSet)
            img.srcset = srcSet;
          if (sizes)
            img.sizes = sizes;
          if (loading)
            img.loading = loading;
          img.onload = (event) => {
            flush();
            setStatus("loaded");
            onLoad == null ? void 0 : onLoad(event);
          };
          img.onerror = (error) => {
            flush();
            setStatus("failed");
            onError == null ? void 0 : onError(error);
          };
          imageRef.current = img;
        }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);
        const flush = () => {
          if (imageRef.current) {
            imageRef.current.onload = null;
            imageRef.current.onerror = null;
            imageRef.current = null;
          }
        };
        (0, import_use_safe_layout_effect.useSafeLayoutEffect)(() => {
          if (ignoreFallback)
            return void 0;
          if (status === "loading") {
            load();
          }
          return () => {
            flush();
          };
        }, [status, load, ignoreFallback]);
        return ignoreFallback ? "loaded" : status;
      }
      var shouldShowFallbackImage = (status, fallbackStrategy) => status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";
    }
  });

  // node_modules/@nextui-org/avatar/dist/index.js
  var require_dist17 = __commonJS({
    "node_modules/@nextui-org/avatar/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Avatar: () => avatar_default,
        AvatarGroup: () => avatar_group_default,
        AvatarGroupProvider: () => AvatarGroupProvider,
        AvatarIcon: () => AvatarIcon,
        useAvatar: () => useAvatar,
        useAvatarGroup: () => useAvatarGroup,
        useAvatarGroupContext: () => useAvatarGroupContext
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react22 = require_react();
      var import_system = require_dist4();
      var import_jsx_runtime = require_jsx_runtime();
      var AvatarIcon = () => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
        "svg",
        {
          "aria-hidden": "true",
          fill: "none",
          height: "80%",
          role: "presentation",
          viewBox: "0 0 24 24",
          width: "80%",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                d: "M12 2C9.38 2 7.25 4.13 7.25 6.75C7.25 9.32 9.26 11.4 11.88 11.49C11.96 11.48 12.04 11.48 12.1 11.49C12.12 11.49 12.13 11.49 12.15 11.49C12.16 11.49 12.16 11.49 12.17 11.49C14.73 11.4 16.74 9.32 16.75 6.75C16.75 4.13 14.62 2 12 2Z",
                fill: "currentColor"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "path",
              {
                d: "M17.0809 14.1489C14.2909 12.2889 9.74094 12.2889 6.93094 14.1489C5.66094 14.9989 4.96094 16.1489 4.96094 17.3789C4.96094 18.6089 5.66094 19.7489 6.92094 20.5889C8.32094 21.5289 10.1609 21.9989 12.0009 21.9989C13.8409 21.9989 15.6809 21.5289 17.0809 20.5889C18.3409 19.7389 19.0409 18.5989 19.0409 17.3589C19.0309 16.1289 18.3409 14.9889 17.0809 14.1489Z",
                fill: "currentColor"
              }
            )
          ]
        }
      );
      var import_theme = require_dist5();
      var import_utils = require_main7();
      var import_react_utils2 = require_dist10();
      var import_shared_utils = require_dist9();
      var import_focus = require_main12();
      var import_react3 = require_react();
      var import_use_image = require_dist16();
      var import_interactions = require_main11();
      var import_react_utils = require_dist10();
      var [AvatarGroupProvider, useAvatarGroupContext] = (0, import_react_utils.createContext)({
        name: "AvatarGroupContext",
        strict: false
      });
      function useAvatar(props = {}) {
        var _a, _b, _c, _d, _e;
        const groupContext = useAvatarGroupContext();
        const isInGroup = !!groupContext;
        const _a2 = props, {
          as,
          ref,
          src,
          name,
          icon,
          classNames,
          fallback,
          alt = name || "avatar",
          imgRef: imgRefProp,
          color = (_a = groupContext == null ? void 0 : groupContext.color) != null ? _a : "default",
          radius = (_b = groupContext == null ? void 0 : groupContext.radius) != null ? _b : "full",
          size = (_c = groupContext == null ? void 0 : groupContext.size) != null ? _c : "md",
          isBordered = (_d = groupContext == null ? void 0 : groupContext.isBordered) != null ? _d : false,
          isDisabled = (_e = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _e : false,
          isFocusable = false,
          getInitials = import_shared_utils.safeText,
          ignoreFallback = false,
          showFallback: showFallbackProp = false,
          ImgComponent = "img",
          imgProps,
          className,
          onError
        } = _a2, otherProps = __objRest(_a2, [
          "as",
          "ref",
          "src",
          "name",
          "icon",
          "classNames",
          "fallback",
          "alt",
          "imgRef",
          "color",
          "radius",
          "size",
          "isBordered",
          "isDisabled",
          "isFocusable",
          "getInitials",
          "ignoreFallback",
          "showFallback",
          "ImgComponent",
          "imgProps",
          "className",
          "onError"
        ]);
        const Component = as || "span";
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const imgRef = (0, import_react_utils2.useDOMRef)(imgRefProp);
        const { isFocusVisible, isFocused, focusProps } = (0, import_focus.useFocusRing)();
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({ isDisabled });
        const imageStatus = (0, import_use_image.useImage)({ src, onError, ignoreFallback });
        const isImgLoaded = imageStatus === "loaded";
        const showFallback = (!src || !isImgLoaded) && showFallbackProp;
        const slots = (0, import_react3.useMemo)(
          () => {
            var _a22;
            return (0, import_theme.avatar)({
              color,
              radius,
              size,
              isBordered,
              isDisabled,
              isInGroup,
              isInGridGroup: (_a22 = groupContext == null ? void 0 : groupContext.isGrid) != null ? _a22 : false
            });
          },
          [color, radius, size, isBordered, isDisabled, isInGroup, groupContext == null ? void 0 : groupContext.isGrid]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const canBeFocused = (0, import_react3.useMemo)(() => {
          return isFocusable || as === "button";
        }, [isFocusable, as]);
        const getAvatarProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues({
            ref: domRef,
            tabIndex: canBeFocused ? 0 : -1,
            "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
            "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
            "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
            className: slots.base({
              class: (0, import_shared_utils.clsx)(baseStyles, props2 == null ? void 0 : props2.className)
            })
          }, (0, import_utils.mergeProps)(otherProps, hoverProps, canBeFocused ? focusProps : {})),
          [canBeFocused, slots, baseStyles, focusProps, otherProps]
        );
        const getImageProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues({
            ref: imgRef,
            src,
            "data-loaded": (0, import_shared_utils.dataAttr)(isImgLoaded),
            className: slots.img({ class: classNames == null ? void 0 : classNames.img })
          }, (0, import_utils.mergeProps)(imgProps, props2)),
          [slots, isImgLoaded, imgProps, src, imgRef]
        );
        return {
          Component,
          ImgComponent,
          src,
          alt,
          icon,
          name,
          imgRef,
          slots,
          classNames,
          fallback,
          isImgLoaded,
          showFallback,
          ignoreFallback,
          getInitials,
          getAvatarProps,
          getImageProps
        };
      }
      var import_jsx_runtime2 = require_jsx_runtime();
      var Avatar = (0, import_system.forwardRef)((props, ref) => {
        const {
          Component,
          ImgComponent,
          src,
          icon = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(AvatarIcon, {}),
          alt,
          classNames,
          slots,
          name,
          showFallback,
          fallback: fallbackComponent,
          getInitials,
          getAvatarProps,
          getImageProps
        } = useAvatar(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        const fallback = (0, import_react22.useMemo)(() => {
          if (!showFallback && src)
            return null;
          if (fallbackComponent) {
            return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { "aria-label": alt, className: slots.fallback({ class: classNames == null ? void 0 : classNames.fallback }), role: "img", children: fallbackComponent });
          }
          return name ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { "aria-label": alt, className: slots.name({ class: classNames == null ? void 0 : classNames.name }), role: "img", children: getInitials(name) }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { "aria-label": alt, className: slots.icon({ class: classNames == null ? void 0 : classNames.icon }), role: "img", children: icon });
        }, [showFallback, src, fallbackComponent, name, classNames]);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, getAvatarProps()), { children: [
          src && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ImgComponent, __spreadProps(__spreadValues({}, getImageProps()), { alt })),
          fallback
        ] }));
      });
      Avatar.displayName = "NextUI.Avatar";
      var avatar_default = Avatar;
      var import_system2 = require_dist4();
      var import_theme2 = require_dist5();
      var import_react_utils3 = require_dist10();
      var import_shared_utils2 = require_dist9();
      var import_react_utils4 = require_dist10();
      var import_react32 = require_react();
      function useAvatarGroup(props = {}) {
        const _a = props, {
          as,
          ref,
          max = 5,
          total,
          size,
          color,
          radius,
          children,
          isBordered,
          isDisabled,
          isGrid,
          renderCount,
          className
        } = _a, otherProps = __objRest(_a, [
          "as",
          "ref",
          "max",
          "total",
          "size",
          "color",
          "radius",
          "children",
          "isBordered",
          "isDisabled",
          "isGrid",
          "renderCount",
          "className"
        ]);
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const Component = as || "div";
        const context = (0, import_react32.useMemo)(
          () => ({
            size,
            color,
            radius,
            isGrid,
            isBordered,
            isDisabled
          }),
          [size, color, radius, isGrid, isBordered, isDisabled]
        );
        const classNames = (0, import_react32.useMemo)(() => (0, import_theme2.avatarGroup)({ className, isGrid }), [className, isGrid]);
        const validChildren = (0, import_react_utils4.getValidChildren)(children);
        const childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;
        const remainingCount = total ? total : max != null ? validChildren.length - max : -1;
        const clones = childrenWithinMax.map((child, index3) => {
          const isFirstAvatar = index3 === 0;
          const isLastAvatar = index3 === childrenWithinMax.length - 1;
          const childProps = {
            className: (0, import_shared_utils2.clsx)(
              isFirstAvatar ? "ml-0" : !isGrid ? "-ml-2" : "",
              isLastAvatar && remainingCount < 1 ? "hover:-translate-x-0" : ""
            )
          };
          return (0, import_react32.cloneElement)(child, (0, import_shared_utils2.compact)(childProps));
        });
        const getAvatarGroupProps = () => {
          return __spreadValues({
            ref: domRef,
            className: classNames,
            role: "group"
          }, otherProps);
        };
        return {
          Component,
          context,
          remainingCount,
          clones,
          renderCount,
          getAvatarGroupProps
        };
      }
      var import_jsx_runtime3 = require_jsx_runtime();
      var AvatarGroup = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          clones,
          context,
          remainingCount,
          renderCount = (count2) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(avatar_default, { className: "hover:-translate-x-0", name: `+${count2}` }),
          getAvatarGroupProps
        } = useAvatarGroup(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Component, __spreadProps(__spreadValues({}, getAvatarGroupProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(AvatarGroupProvider, { value: context, children: [
          clones,
          remainingCount > 0 && renderCount(remainingCount)
        ] }) }));
      });
      AvatarGroup.displayName = "NextUI.AvatarGroup";
      var avatar_group_default = AvatarGroup;
    }
  });

  // node_modules/@nextui-org/badge/dist/index.js
  var require_dist18 = __commonJS({
    "node_modules/@nextui-org/badge/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Badge: () => badge_default,
        useBadge: () => useBadge
      });
      module.exports = __toCommonJS2(src_exports);
      var import_theme = require_dist5();
      var import_system_rsc = require_dist3();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      function useBadge(originalProps) {
        const [props, variantProps] = (0, import_system_rsc.mapPropsVariants)(originalProps, import_theme.badge.variantKeys);
        const _a = props, { as, children, className, content, classNames } = _a, otherProps = __objRest(_a, ["as", "children", "className", "content", "classNames"]);
        const Component = as || "span";
        const isOneChar = (0, import_react3.useMemo)(
          () => {
            var _a2;
            return ((_a2 = String(content)) == null ? void 0 : _a2.length) === 1 || (originalProps == null ? void 0 : originalProps.isOneChar);
          },
          [content, originalProps == null ? void 0 : originalProps.isOneChar]
        );
        const isDot = (0, import_react3.useMemo)(() => {
          var _a2;
          return ((_a2 = String(content)) == null ? void 0 : _a2.length) === 0;
        }, [content]);
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.badge, className);
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.badge)(__spreadProps(__spreadValues({}, variantProps), {
            isOneChar,
            isDot
          })),
          [...Object.values(variantProps), isOneChar, isDot]
        );
        const getBadgeProps = () => {
          return __spreadValues({
            className: slots.badge({ class: baseStyles }),
            "data-invisible": originalProps.isInvisible
          }, otherProps);
        };
        return {
          Component,
          children,
          content,
          slots,
          classNames,
          disableAnimation: originalProps == null ? void 0 : originalProps.disableAnimation,
          isInvisible: originalProps == null ? void 0 : originalProps.isInvisible,
          getBadgeProps
        };
      }
      var import_system_rsc2 = require_dist3();
      var import_jsx_runtime = require_jsx_runtime();
      var Badge = (0, import_system_rsc2.forwardRef)((props, ref) => {
        const { Component, children, content, slots, classNames, getBadgeProps } = useBadge(__spreadValues({}, props));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: slots.base({ class: classNames == null ? void 0 : classNames.base }), children: [
          children,
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadProps(__spreadValues({ ref }, getBadgeProps()), { children: content }))
        ] });
      });
      Badge.displayName = "NextUI.Badge";
      var badge_default = Badge;
    }
  });

  // node_modules/@nextui-org/spinner/dist/index.js
  var require_dist19 = __commonJS({
    "node_modules/@nextui-org/spinner/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Spinner: () => spinner_default,
        useSpinner: () => useSpinner
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system_rsc = require_dist3();
      var import_theme = require_dist5();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      function useSpinner(originalProps) {
        const [props, variantProps] = (0, import_system_rsc.mapPropsVariants)(originalProps, import_theme.spinner.variantKeys);
        const _a = props, { children, className, classNames, label: labelProp } = _a, otherProps = __objRest(_a, ["children", "className", "classNames", "label"]);
        const slots = (0, import_react3.useMemo)(() => (0, import_theme.spinner)(__spreadValues({}, variantProps)), [...Object.values(variantProps)]);
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const label = labelProp || children;
        const ariaLabel = (0, import_react3.useMemo)(() => {
          if (label && typeof label === "string") {
            return label;
          }
          return !otherProps["aria-label"] ? "Loading" : "";
        }, [children, label, otherProps["aria-label"]]);
        const getSpinnerProps = (0, import_react3.useCallback)(
          () => __spreadValues({
            "aria-label": ariaLabel,
            className: slots.base({
              class: baseStyles
            })
          }, otherProps),
          [ariaLabel, slots, baseStyles, otherProps]
        );
        return { label, slots, classNames, getSpinnerProps };
      }
      var import_system_rsc2 = require_dist3();
      var import_jsx_runtime = require_jsx_runtime();
      var Spinner = (0, import_system_rsc2.forwardRef)((props, ref) => {
        const { slots, classNames, label, getSpinnerProps } = useSpinner(__spreadValues({}, props));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({ ref }, getSpinnerProps()), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }), children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("i", { className: slots.circle1({ class: classNames == null ? void 0 : classNames.circle1 }) }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("i", { className: slots.circle2({ class: classNames == null ? void 0 : classNames.circle2 }) })
          ] }),
          label && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.label(), children: label })
        ] }));
      });
      Spinner.displayName = "NextUI.Spinner";
      var spinner_default = Spinner;
    }
  });

  // node_modules/@nextui-org/ripple/dist/index.js
  var require_dist20 = __commonJS({
    "node_modules/@nextui-org/ripple/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Ripple: () => ripple_default,
        useRipple: () => useRipple
      });
      module.exports = __toCommonJS2(src_exports);
      var import_framer_motion = require_cjs2();
      var import_jsx_runtime = require_jsx_runtime();
      var clamp = (value, min, max) => {
        return Math.min(Math.max(value, min), max);
      };
      var Ripple = (props) => {
        const { ripples = [], motionProps, color = "currentColor", style, onClear } = props;
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: ripples.map((ripple) => {
          const duration = clamp(0.01 * ripple.size, 0.2, ripple.size > 100 ? 0.75 : 0.5);
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, { mode: "popLayout", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            import_framer_motion.motion.span,
            __spreadValues({
              animate: { transform: "scale(2)", opacity: 0 },
              className: "nextui-ripple",
              exit: { opacity: 0 },
              initial: { transform: "scale(0)", opacity: 0.35 },
              style: __spreadValues({
                position: "absolute",
                backgroundColor: color,
                borderRadius: "100%",
                transformOrigin: "center",
                pointerEvents: "none",
                zIndex: 10,
                top: ripple.y,
                left: ripple.x,
                width: `${ripple.size}px`,
                height: `${ripple.size}px`
              }, style),
              transition: { duration },
              onAnimationEnd: () => onClear(ripple.key),
              onTransitionEnd: () => onClear(ripple.key)
            }, motionProps)
          ) }, ripple.key);
        }) });
      };
      Ripple.displayName = "NextUI.Ripple";
      var ripple_default = Ripple;
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      function useRipple(props = {}) {
        const [ripples, setRipples] = (0, import_react3.useState)([]);
        const onClick = (0, import_react3.useCallback)((event) => {
          const trigger = event.currentTarget;
          const size = Math.max(trigger.clientWidth, trigger.clientHeight);
          const rect = trigger.getBoundingClientRect();
          setRipples((prevRipples) => [
            ...prevRipples,
            {
              key: (0, import_shared_utils.getUniqueID)(prevRipples.length.toString()),
              size,
              x: event.clientX - rect.x - size / 2,
              y: event.clientY - rect.y - size / 2
            }
          ]);
        }, []);
        const onClear = (0, import_react3.useCallback)((key) => {
          setRipples((prevState) => prevState.filter((ripple) => ripple.key !== key));
        }, []);
        return __spreadValues({ ripples, onClick, onClear }, props);
      }
    }
  });

  // node_modules/@nextui-org/use-aria-button/dist/index.js
  var require_dist21 = __commonJS({
    "node_modules/@nextui-org/use-aria-button/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useAriaButton: () => useAriaButton
      });
      module.exports = __toCommonJS2(src_exports);
      var import_utils = require_main7();
      var import_focus = require_main12();
      var import_interactions = require_main11();
      function useAriaButton(props, ref) {
        let {
          elementType = "button",
          isDisabled,
          onPress,
          onPressStart,
          onPressEnd,
          onPressChange,
          preventFocusOnPress,
          allowFocusWhenDisabled,
          onClick: deprecatedOnClick,
          href,
          target,
          rel,
          type = "button",
          allowTextSelectionOnPress
        } = props;
        let additionalProps;
        if (elementType === "button") {
          additionalProps = {
            type,
            disabled: isDisabled
          };
        } else {
          additionalProps = {
            role: "button",
            tabIndex: isDisabled ? void 0 : 0,
            href: elementType === "a" && isDisabled ? void 0 : href,
            target: elementType === "a" ? target : void 0,
            type: elementType === "input" ? type : void 0,
            disabled: elementType === "input" ? isDisabled : void 0,
            "aria-disabled": !isDisabled || elementType === "input" ? void 0 : isDisabled,
            rel: elementType === "a" ? rel : void 0
          };
        }
        let { pressProps, isPressed } = (0, import_interactions.usePress)({
          onPressStart,
          onPressEnd,
          onPressChange,
          onPress,
          isDisabled,
          preventFocusOnPress,
          allowTextSelectionOnPress,
          ref
        });
        let { focusableProps } = (0, import_focus.useFocusable)(props, ref);
        if (allowFocusWhenDisabled) {
          focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
        }
        let buttonProps = (0, import_utils.mergeProps)(
          focusableProps,
          pressProps,
          (0, import_utils.filterDOMProps)(props, { labelable: true })
        );
        return {
          isPressed,
          buttonProps: (0, import_utils.mergeProps)(additionalProps, buttonProps, {
            "aria-haspopup": props["aria-haspopup"],
            "aria-expanded": props["aria-expanded"],
            "aria-controls": props["aria-controls"],
            "aria-pressed": props["aria-pressed"],
            onClick: (e) => {
              if (deprecatedOnClick) {
                deprecatedOnClick(e);
              }
            }
          })
        };
      }
    }
  });

  // node_modules/@nextui-org/button/dist/index.js
  var require_dist22 = __commonJS({
    "node_modules/@nextui-org/button/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Button: () => button_default,
        ButtonGroup: () => button_group_default,
        ButtonGroupProvider: () => ButtonGroupProvider,
        useButton: () => useButton,
        useButtonGroup: () => useButtonGroup,
        useButtonGroupContext: () => useButtonGroupContext
      });
      module.exports = __toCommonJS2(src_exports);
      var import_spinner = require_dist19();
      var import_ripple2 = require_dist20();
      var import_system = require_dist4();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      var import_focus = require_main12();
      var import_utils = require_main7();
      var import_react_utils2 = require_dist10();
      var import_theme = require_dist5();
      var import_react22 = require_react();
      var import_use_aria_button = require_dist21();
      var import_interactions = require_main11();
      var import_ripple = require_dist20();
      var import_react_utils = require_dist10();
      var [ButtonGroupProvider, useButtonGroupContext] = (0, import_react_utils.createContext)({
        name: "ButtonGroupContext",
        strict: false
      });
      function useButton(props) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const groupContext = useButtonGroupContext();
        const isInGroup = !!groupContext;
        const _a2 = props, {
          ref,
          as,
          children,
          startContent: startContentProp,
          endContent: endContentProp,
          autoFocus,
          className,
          spinner,
          fullWidth = (_a = groupContext == null ? void 0 : groupContext.fullWidth) != null ? _a : false,
          size = (_b = groupContext == null ? void 0 : groupContext.size) != null ? _b : "md",
          color = (_c = groupContext == null ? void 0 : groupContext.color) != null ? _c : "default",
          variant = (_d = groupContext == null ? void 0 : groupContext.variant) != null ? _d : "solid",
          disableAnimation = (_e = groupContext == null ? void 0 : groupContext.disableAnimation) != null ? _e : false,
          radius = groupContext == null ? void 0 : groupContext.radius,
          disableRipple = (_f = groupContext == null ? void 0 : groupContext.disableRipple) != null ? _f : false,
          isDisabled: isDisabledProp = (_g = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _g : false,
          isIconOnly = (_h = groupContext == null ? void 0 : groupContext.isIconOnly) != null ? _h : false,
          isLoading = false,
          spinnerPlacement = "start",
          onPress,
          onClick
        } = _a2, otherProps = __objRest(_a2, [
          "ref",
          "as",
          "children",
          "startContent",
          "endContent",
          "autoFocus",
          "className",
          "spinner",
          "fullWidth",
          "size",
          "color",
          "variant",
          "disableAnimation",
          "radius",
          "disableRipple",
          "isDisabled",
          "isIconOnly",
          "isLoading",
          "spinnerPlacement",
          "onPress",
          "onClick"
        ]);
        const Component = as || "button";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const { isFocusVisible, isFocused, focusProps } = (0, import_focus.useFocusRing)({
          autoFocus
        });
        const isDisabled = isDisabledProp || isLoading;
        const styles = (0, import_react22.useMemo)(
          () => (0, import_theme.button)({
            size,
            color,
            variant,
            radius,
            fullWidth,
            isDisabled,
            isInGroup,
            disableAnimation,
            isIconOnly,
            className
          }),
          [
            size,
            color,
            variant,
            radius,
            fullWidth,
            isDisabled,
            isInGroup,
            isIconOnly,
            disableAnimation,
            className
          ]
        );
        const { onClick: onRippleClickHandler, onClear: onClearRipple, ripples } = (0, import_ripple.useRipple)();
        const handleClick = (0, import_react3.useCallback)(
          (e) => {
            if (disableRipple || isDisabled || disableAnimation)
              return;
            domRef.current && onRippleClickHandler(e);
          },
          [disableRipple, isDisabled, disableAnimation, domRef, onRippleClickHandler]
        );
        const { buttonProps: ariaButtonProps, isPressed } = (0, import_use_aria_button.useAriaButton)(
          __spreadValues({
            elementType: as,
            isDisabled,
            onPress,
            onClick: (0, import_utils.chain)(onClick, handleClick)
          }, otherProps),
          domRef
        );
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({ isDisabled });
        const getButtonProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues({
            "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
            "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
            "data-pressed": (0, import_shared_utils.dataAttr)(isPressed),
            "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
            "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
            "data-loading": (0, import_shared_utils.dataAttr)(isLoading)
          }, (0, import_utils.mergeProps)(
            ariaButtonProps,
            focusProps,
            hoverProps,
            (0, import_react_utils2.filterDOMProps)(otherProps, {
              enabled: shouldFilterDOMProps
            }),
            (0, import_react_utils2.filterDOMProps)(props2)
          )),
          [
            isLoading,
            isDisabled,
            isFocused,
            isPressed,
            shouldFilterDOMProps,
            isFocusVisible,
            isHovered,
            ariaButtonProps,
            focusProps,
            hoverProps,
            otherProps
          ]
        );
        const getIconClone = (icon) => (0, import_react22.isValidElement)(icon) ? (0, import_react22.cloneElement)(icon, {
          "aria-hidden": true,
          focusable: false,
          tabIndex: -1
        }) : null;
        const startContent = getIconClone(startContentProp);
        const endContent = getIconClone(endContentProp);
        const spinnerSize = (0, import_react22.useMemo)(() => {
          const buttonSpinnerSizeMap = {
            sm: "sm",
            md: "sm",
            lg: "md"
          };
          return buttonSpinnerSizeMap[size];
        }, [size]);
        const getRippleProps = (0, import_react3.useCallback)(
          () => ({ ripples, onClear: onClearRipple }),
          [ripples, onClearRipple]
        );
        return {
          Component,
          children,
          domRef,
          spinner,
          styles,
          startContent,
          endContent,
          isLoading,
          spinnerPlacement,
          spinnerSize,
          disableRipple,
          getButtonProps,
          getRippleProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Button = (0, import_system.forwardRef)((props, ref) => {
        const {
          Component,
          domRef,
          children,
          styles,
          spinnerSize,
          spinner = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_spinner.Spinner, { color: "current", size: spinnerSize }),
          spinnerPlacement,
          startContent,
          endContent,
          isLoading,
          disableRipple,
          getButtonProps,
          getRippleProps
        } = useButton(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({ ref: domRef, className: styles }, getButtonProps()), { children: [
          startContent,
          isLoading && spinnerPlacement === "start" && spinner,
          children,
          isLoading && spinnerPlacement === "end" && spinner,
          endContent,
          !disableRipple && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ripple2.Ripple, __spreadValues({}, getRippleProps()))
        ] }));
      });
      Button.displayName = "NextUI.Button";
      var button_default = Button;
      var import_system3 = require_dist4();
      var import_theme2 = require_dist5();
      var import_system2 = require_dist4();
      var import_react_utils3 = require_dist10();
      var import_react32 = require_react();
      function useButtonGroup(originalProps) {
        const [props, variantProps] = (0, import_system2.mapPropsVariants)(originalProps, import_theme2.buttonGroup.variantKeys);
        const _a = props, {
          ref,
          as,
          children,
          color = "default",
          size = "md",
          variant = "solid",
          radius,
          isDisabled = false,
          disableAnimation = false,
          disableRipple = false,
          isIconOnly = false,
          className
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "children",
          "color",
          "size",
          "variant",
          "radius",
          "isDisabled",
          "disableAnimation",
          "disableRipple",
          "isIconOnly",
          "className"
        ]);
        const Component = as || "div";
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const classNames = (0, import_react32.useMemo)(
          () => (0, import_theme2.buttonGroup)(__spreadProps(__spreadValues({}, variantProps), {
            className
          })),
          [...Object.values(variantProps), className]
        );
        const context = (0, import_react32.useMemo)(
          () => ({
            size,
            color,
            variant,
            radius,
            isIconOnly,
            isDisabled,
            disableAnimation,
            disableRipple,
            fullWidth: !!(originalProps == null ? void 0 : originalProps.fullWidth)
          }),
          [
            size,
            color,
            variant,
            radius,
            isDisabled,
            isIconOnly,
            disableAnimation,
            disableRipple,
            originalProps == null ? void 0 : originalProps.fullWidth
          ]
        );
        const getButtonGroupProps = (0, import_react32.useCallback)(
          () => __spreadValues({
            role: "group"
          }, otherProps),
          [otherProps]
        );
        return {
          Component,
          children,
          domRef,
          context,
          classNames,
          getButtonGroupProps
        };
      }
      var import_jsx_runtime2 = require_jsx_runtime();
      var ButtonGroup = (0, import_system3.forwardRef)((props, ref) => {
        const { Component, domRef, context, children, classNames, getButtonGroupProps } = useButtonGroup(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ButtonGroupProvider, { value: context, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Component, __spreadProps(__spreadValues({ ref: domRef, className: classNames }, getButtonGroupProps()), { children })) });
      });
      ButtonGroup.displayName = "NextUI.ButtonGroup";
      var button_group_default = ButtonGroup;
    }
  });

  // node_modules/@nextui-org/card/dist/index.js
  var require_dist23 = __commonJS({
    "node_modules/@nextui-org/card/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Card: () => card_default,
        CardBody: () => card_body_default,
        CardFooter: () => card_footer_default,
        CardHeader: () => card_header_default,
        CardProvider: () => CardProvider,
        useCard: () => useCard,
        useCardContext: () => useCardContext
      });
      module.exports = __toCommonJS2(src_exports);
      var import_theme = require_dist5();
      var import_react3 = require_react();
      var import_utils = require_main7();
      var import_focus = require_main12();
      var import_interactions = require_main11();
      var import_use_aria_button = require_dist21();
      var import_system = require_dist4();
      var import_shared_utils = require_dist9();
      var import_react_utils = require_dist10();
      var import_react_utils2 = require_dist10();
      var import_ripple = require_dist20();
      function useCard(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.card.variantKeys);
        const _a = props, {
          ref,
          as,
          children,
          disableRipple = false,
          onClick,
          onPress,
          autoFocus,
          className,
          classNames,
          allowTextSelectionOnPress = true
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "children",
          "disableRipple",
          "onClick",
          "onPress",
          "autoFocus",
          "className",
          "classNames",
          "allowTextSelectionOnPress"
        ]);
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const Component = as || (originalProps.isPressable ? "button" : "div");
        const shouldFilterDOMProps = typeof Component === "string";
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const { onClick: onRippleClickHandler, onClear: onClearRipple, ripples } = (0, import_ripple.useRipple)();
        const handleClick = (e) => {
          if (!originalProps.disableAnimation && !disableRipple && domRef.current) {
            onRippleClickHandler(e);
          }
        };
        const { buttonProps, isPressed } = (0, import_use_aria_button.useAriaButton)(
          __spreadValues({
            onPress,
            elementType: as,
            isDisabled: !originalProps.isPressable,
            onClick: (0, import_utils.chain)(onClick, handleClick),
            allowTextSelectionOnPress
          }, otherProps),
          domRef
        );
        const { hoverProps, isHovered } = (0, import_interactions.useHover)(__spreadValues({
          isDisabled: !originalProps.isHoverable
        }, otherProps));
        const { isFocusVisible, isFocused, focusProps } = (0, import_focus.useFocusRing)({
          autoFocus
        });
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.card)(__spreadValues({}, variantProps)),
          [...Object.values(variantProps)]
        );
        const context = (0, import_react3.useMemo)(
          () => ({
            isDisabled: originalProps.isDisabled,
            isFooterBlurred: originalProps.isFooterBlurred,
            disableAnimation: originalProps.disableAnimation,
            fullWidth: originalProps.fullWidth,
            slots,
            classNames
          }),
          [
            slots,
            classNames,
            originalProps.isDisabled,
            originalProps.isFooterBlurred,
            originalProps.disableAnimation,
            originalProps.fullWidth
          ]
        );
        const getCardProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              ref: domRef,
              className: slots.base({ class: baseStyles }),
              tabIndex: originalProps.isPressable ? 0 : -1,
              "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
              "data-pressed": (0, import_shared_utils.dataAttr)(isPressed),
              "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
              "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
              "data-disabled": (0, import_shared_utils.dataAttr)(originalProps.isDisabled)
            }, (0, import_utils.mergeProps)(
              originalProps.isPressable ? __spreadProps(__spreadValues(__spreadValues({}, buttonProps), focusProps), { role: "button" }) : {},
              originalProps.isHoverable ? hoverProps : {},
              (0, import_react_utils.filterDOMProps)(otherProps, {
                enabled: shouldFilterDOMProps
              }),
              (0, import_react_utils.filterDOMProps)(props2)
            ));
          },
          [
            domRef,
            slots,
            baseStyles,
            shouldFilterDOMProps,
            originalProps.isPressable,
            originalProps.isHoverable,
            originalProps.isDisabled,
            isHovered,
            isPressed,
            isFocusVisible,
            buttonProps,
            focusProps,
            hoverProps,
            otherProps
          ]
        );
        const getRippleProps = (0, import_react3.useCallback)(
          () => ({ ripples, onClear: onClearRipple }),
          [ripples, onClearRipple]
        );
        return {
          context,
          domRef,
          Component,
          classNames,
          children,
          isHovered,
          isPressed,
          isPressable: originalProps.isPressable,
          isHoverable: originalProps.isHoverable,
          disableAnimation: originalProps.disableAnimation,
          disableRipple,
          handleClick,
          isFocusVisible,
          getCardProps,
          getRippleProps
        };
      }
      var import_react_utils3 = require_dist10();
      var [CardProvider, useCardContext] = (0, import_react_utils3.createContext)({
        name: "CardContext",
        strict: true,
        errorMessage: "useCardContext: `context` is undefined. Seems you forgot to wrap component within <Card />"
      });
      var import_system2 = require_dist4();
      var import_ripple2 = require_dist20();
      var import_jsx_runtime = require_jsx_runtime();
      var Card = (0, import_system2.forwardRef)((props, ref) => {
        const {
          children,
          context,
          Component,
          isPressable,
          disableAnimation,
          disableRipple,
          getCardProps,
          getRippleProps
        } = useCard(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({}, getCardProps()), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CardProvider, { value: context, children }),
          isPressable && !disableAnimation && !disableRipple && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ripple2.Ripple, __spreadValues({}, getRippleProps()))
        ] }));
      });
      Card.displayName = "NextUI.Card";
      var card_default = Card;
      var import_system3 = require_dist4();
      var import_react_utils4 = require_dist10();
      var import_shared_utils2 = require_dist9();
      var import_jsx_runtime2 = require_jsx_runtime();
      var CardHeader = (0, import_system3.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, { as, className, children } = _a2, otherProps = __objRest(_a2, ["as", "className", "children"]);
        const Component = as || "div";
        const domRef = (0, import_react_utils4.useDOMRef)(ref);
        const { slots, classNames } = useCardContext();
        const headerStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.header, className);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Component, __spreadProps(__spreadValues({ ref: domRef, className: (_a = slots.header) == null ? void 0 : _a.call(slots, { class: headerStyles }) }, otherProps), { children }));
      });
      CardHeader.displayName = "NextUI.CardHeader";
      var card_header_default = CardHeader;
      var import_system4 = require_dist4();
      var import_react_utils5 = require_dist10();
      var import_shared_utils3 = require_dist9();
      var import_jsx_runtime3 = require_jsx_runtime();
      var CardBody = (0, import_system4.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, { as, className, children } = _a2, otherProps = __objRest(_a2, ["as", "className", "children"]);
        const Component = as || "div";
        const domRef = (0, import_react_utils5.useDOMRef)(ref);
        const { slots, classNames } = useCardContext();
        const bodyStyles = (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.body, className);
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Component, __spreadProps(__spreadValues({ ref: domRef, className: (_a = slots.body) == null ? void 0 : _a.call(slots, { class: bodyStyles }) }, otherProps), { children }));
      });
      CardBody.displayName = "NextUI.CardBody";
      var card_body_default = CardBody;
      var import_system5 = require_dist4();
      var import_react_utils6 = require_dist10();
      var import_shared_utils4 = require_dist9();
      var import_jsx_runtime4 = require_jsx_runtime();
      var CardFooter = (0, import_system5.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, { as, className, children } = _a2, otherProps = __objRest(_a2, ["as", "className", "children"]);
        const Component = as || "div";
        const domRef = (0, import_react_utils6.useDOMRef)(ref);
        const { slots, classNames } = useCardContext();
        const footerStyles = (0, import_shared_utils4.clsx)(classNames == null ? void 0 : classNames.footer, className);
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Component, __spreadProps(__spreadValues({ ref: domRef, className: (_a = slots.footer) == null ? void 0 : _a.call(slots, { class: footerStyles }) }, otherProps), { children }));
      });
      CardFooter.displayName = "NextUI.CardFooter";
      var card_footer_default = CardFooter;
    }
  });

  // node_modules/@nextui-org/chip/dist/index.js
  var require_dist24 = __commonJS({
    "node_modules/@nextui-org/chip/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Chip: () => chip_default,
        useChip: () => useChip
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system = require_dist4();
      var import_utils = require_main7();
      var import_interactions = require_main11();
      var import_focus = require_main12();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      function useChip(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.chip.variantKeys);
        const _a = props, {
          ref,
          as,
          children,
          avatar,
          startContent,
          endContent,
          onClose,
          classNames,
          className
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "children",
          "avatar",
          "startContent",
          "endContent",
          "onClose",
          "classNames",
          "className"
        ]);
        const Component = as || "div";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const isCloseable = !!onClose;
        const isDotVariant = originalProps.variant === "dot";
        const { focusProps: closeFocusProps, isFocusVisible: isCloseButtonFocusVisible } = (0, import_focus.useFocusRing)();
        const isOneChar = (0, import_react3.useMemo)(
          () => typeof children === "string" && (children == null ? void 0 : children.length) === 1,
          [children]
        );
        const hasStartContent = (0, import_react3.useMemo)(() => !!avatar || !!startContent, [avatar, startContent]);
        const hasEndContent = (0, import_react3.useMemo)(() => !!endContent || isCloseable, [endContent, isCloseable]);
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.chip)(__spreadProps(__spreadValues({}, variantProps), {
            hasStartContent,
            hasEndContent,
            isOneChar,
            isCloseable,
            isCloseButtonFocusVisible
          })),
          [
            ...Object.values(variantProps),
            isCloseButtonFocusVisible,
            hasStartContent,
            hasEndContent,
            isOneChar,
            isCloseable
          ]
        );
        const { pressProps: closePressProps } = (0, import_interactions.usePress)({
          isDisabled: !!(originalProps == null ? void 0 : originalProps.isDisabled),
          onPress: onClose
        });
        const getChipProps = () => {
          return __spreadValues({
            ref: domRef,
            className: slots.base({ class: baseStyles })
          }, otherProps);
        };
        const getCloseButtonProps = () => {
          return __spreadValues({
            role: "button",
            tabIndex: 0,
            className: slots.closeButton({ class: classNames == null ? void 0 : classNames.closeButton })
          }, (0, import_utils.mergeProps)(closePressProps, closeFocusProps));
        };
        const getAvatarClone = (avatar2) => {
          if (!(0, import_react3.isValidElement)(avatar2))
            return null;
          return (0, import_react3.cloneElement)(avatar2, {
            className: slots.avatar({ class: classNames == null ? void 0 : classNames.avatar })
          });
        };
        const getContentClone = (content) => (0, import_react3.isValidElement)(content) ? (0, import_react3.cloneElement)(content, {
          className: (0, import_shared_utils.clsx)("max-h-[80%]", content.props.className)
        }) : null;
        return {
          Component,
          children,
          slots,
          classNames,
          isDot: isDotVariant,
          isCloseable,
          startContent: getAvatarClone(avatar) || getContentClone(startContent),
          endContent: getContentClone(endContent),
          getCloseButtonProps,
          getChipProps
        };
      }
      var import_shared_icons = require_dist12();
      var import_system2 = require_dist4();
      var import_react22 = require_react();
      var import_jsx_runtime = require_jsx_runtime();
      var Chip = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          children,
          slots,
          classNames,
          isDot,
          isCloseable,
          startContent,
          endContent,
          getCloseButtonProps,
          getChipProps
        } = useChip(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        const start = (0, import_react22.useMemo)(() => {
          if (isDot && !startContent) {
            return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.dot({ class: classNames == null ? void 0 : classNames.dot }) });
          }
          return startContent;
        }, [slots, startContent, isDot]);
        const end = (0, import_react22.useMemo)(() => {
          if (isCloseable) {
            return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getCloseButtonProps()), { children: endContent || /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_shared_icons.CloseFilledIcon, {}) }));
          }
          return endContent;
        }, [endContent, isCloseable, getCloseButtonProps]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({}, getChipProps()), { children: [
          start,
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.content({ class: classNames == null ? void 0 : classNames.content }), children }),
          end
        ] }));
      });
      Chip.displayName = "NextUI.Chip";
      var chip_default = Chip;
    }
  });

  // node_modules/@react-stately/toggle/dist/main.js
  var require_main20 = __commonJS({
    "node_modules/@react-stately/toggle/dist/main.js"(exports, module) {
      var $2JeFo$reactstatelyutils = require_main6();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useToggleState", () => $d84f98b140466b44$export$8042c6c013fd5226);
      function $d84f98b140466b44$export$8042c6c013fd5226(props = {}) {
        let { isReadOnly } = props;
        let [isSelected, setSelected] = (0, $2JeFo$reactstatelyutils.useControlledState)(props.isSelected, props.defaultSelected || false, props.onChange);
        function updateSelected(value) {
          if (!isReadOnly)
            setSelected(value);
        }
        function toggleState() {
          if (!isReadOnly)
            setSelected(!isSelected);
        }
        return {
          isSelected,
          setSelected: updateSelected,
          toggle: toggleState
        };
      }
    }
  });

  // node_modules/@react-aria/toggle/dist/main.js
  var require_main21 = __commonJS({
    "node_modules/@react-aria/toggle/dist/main.js"(exports, module) {
      var $7WOm2$reactariautils = require_main7();
      var $7WOm2$reactariafocus = require_main12();
      var $7WOm2$reactariainteractions = require_main11();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useToggle", () => $ee1b638d33c90dcc$export$cbe85ee05b554577);
      function $ee1b638d33c90dcc$export$cbe85ee05b554577(props, state, ref) {
        let { isDisabled = false, isRequired = false, isReadOnly = false, value, name, children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, validationState = "valid", isInvalid } = props;
        let onChange = (e) => {
          e.stopPropagation();
          state.setSelected(e.target.checked);
        };
        let hasChildren = children != null;
        let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
        if (!hasChildren && !hasAriaLabel)
          console.warn("If you do not provide children, you must specify an aria-label for accessibility");
        let { pressProps, isPressed } = (0, $7WOm2$reactariainteractions.usePress)({
          isDisabled
        });
        let { focusableProps } = (0, $7WOm2$reactariafocus.useFocusable)(props, ref);
        let interactions = (0, $7WOm2$reactariautils.mergeProps)(pressProps, focusableProps);
        let domProps = (0, $7WOm2$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        (0, $7WOm2$reactariautils.useFormReset)(ref, state.isSelected, state.setSelected);
        return {
          inputProps: (0, $7WOm2$reactariautils.mergeProps)(domProps, __spreadValues(__spreadProps(__spreadValues({
            "aria-invalid": isInvalid || validationState === "invalid" || void 0,
            "aria-errormessage": props["aria-errormessage"],
            "aria-controls": props["aria-controls"],
            "aria-readonly": isReadOnly || void 0,
            "aria-required": isRequired || void 0,
            onChange,
            disabled: isDisabled
          }, value == null ? {} : {
            value
          }), {
            name,
            type: "checkbox"
          }), interactions)),
          isSelected: state.isSelected,
          isPressed,
          isDisabled,
          isReadOnly,
          isInvalid: isInvalid || validationState === "invalid"
        };
      }
    }
  });

  // node_modules/@react-aria/label/dist/main.js
  var require_main22 = __commonJS({
    "node_modules/@react-aria/label/dist/main.js"(exports, module) {
      var $g2CPN$reactariautils = require_main7();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useField", () => $50e2f39368b9c636$export$294aa081a6c6f55d);
      $parcel$export(module.exports, "useLabel", () => $ce7359c25a7dec1c$export$8467354a121f1b9f);
      function $ce7359c25a7dec1c$export$8467354a121f1b9f(props) {
        let { id, label, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, labelElementType = "label" } = props;
        id = (0, $g2CPN$reactariautils.useId)(id);
        let labelId = (0, $g2CPN$reactariautils.useId)();
        let labelProps = {};
        if (label) {
          ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;
          labelProps = {
            id: labelId,
            htmlFor: labelElementType === "label" ? id : void 0
          };
        } else if (!ariaLabelledby && !ariaLabel)
          console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility");
        let fieldProps = (0, $g2CPN$reactariautils.useLabels)({
          id,
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledby
        });
        return {
          labelProps,
          fieldProps
        };
      }
      function $50e2f39368b9c636$export$294aa081a6c6f55d(props) {
        let { description, errorMessage, isInvalid, validationState } = props;
        let { labelProps, fieldProps } = (0, $ce7359c25a7dec1c$export$8467354a121f1b9f)(props);
        let descriptionId = (0, $g2CPN$reactariautils.useSlotId)([
          Boolean(description),
          Boolean(errorMessage),
          isInvalid,
          validationState
        ]);
        let errorMessageId = (0, $g2CPN$reactariautils.useSlotId)([
          Boolean(description),
          Boolean(errorMessage),
          isInvalid,
          validationState
        ]);
        fieldProps = (0, $g2CPN$reactariautils.mergeProps)(fieldProps, {
          "aria-describedby": [
            descriptionId,
            // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
            errorMessageId,
            props["aria-describedby"]
          ].filter(Boolean).join(" ") || void 0
        });
        return {
          labelProps,
          fieldProps,
          descriptionProps: {
            id: descriptionId
          },
          errorMessageProps: {
            id: errorMessageId
          }
        };
      }
    }
  });

  // node_modules/@react-aria/checkbox/dist/main.js
  var require_main23 = __commonJS({
    "node_modules/@react-aria/checkbox/dist/main.js"(exports, module) {
      var $k0DcK$react = require_react();
      var $k0DcK$reactariatoggle = require_main21();
      var $k0DcK$reactariautils = require_main7();
      var $k0DcK$reactarialabel = require_main22();
      var $k0DcK$reactstatelytoggle = require_main20();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useCheckbox", () => $468c774d7db917b7$export$e375f10ce42261c5);
      $parcel$export(module.exports, "useCheckboxGroup", () => $253685172d17db7d$export$49ff6f28c54f1cbe);
      $parcel$export(module.exports, "useCheckboxGroupItem", () => $07e03121d6ac83c8$export$353b32fc6898d37d);
      function $468c774d7db917b7$export$e375f10ce42261c5(props, state, inputRef) {
        let { inputProps, isSelected, isPressed, isDisabled, isReadOnly, isInvalid } = (0, $k0DcK$reactariatoggle.useToggle)(props, state, inputRef);
        let { isIndeterminate } = props;
        (0, $k0DcK$react.useEffect)(() => {
          if (inputRef.current)
            inputRef.current.indeterminate = isIndeterminate;
        });
        return {
          inputProps: __spreadProps(__spreadValues({}, inputProps), {
            checked: isSelected
          }),
          isSelected,
          isPressed,
          isDisabled,
          isReadOnly,
          isInvalid
        };
      }
      var $64fc3370e682155f$export$31440636951aa68c = /* @__PURE__ */ new WeakMap();
      var $64fc3370e682155f$export$a3077e9c93f7360f = /* @__PURE__ */ new WeakMap();
      var $64fc3370e682155f$export$d5679492e2864181 = /* @__PURE__ */ new WeakMap();
      function $253685172d17db7d$export$49ff6f28c54f1cbe(props, state) {
        let { isDisabled, name } = props;
        let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $k0DcK$reactarialabel.useField)(__spreadProps(__spreadValues({}, props), {
          // Checkbox group is not an HTML input element so it
          // shouldn't be labeled by a <label> element.
          labelElementType: "span"
        }));
        (0, $64fc3370e682155f$export$a3077e9c93f7360f).set(state, descriptionProps.id);
        (0, $64fc3370e682155f$export$d5679492e2864181).set(state, errorMessageProps.id);
        let domProps = (0, $k0DcK$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        (0, $64fc3370e682155f$export$31440636951aa68c).set(state, name);
        return {
          groupProps: (0, $k0DcK$reactariautils.mergeProps)(domProps, __spreadValues({
            role: "group",
            "aria-disabled": isDisabled || void 0
          }, fieldProps)),
          labelProps,
          descriptionProps,
          errorMessageProps
        };
      }
      function $07e03121d6ac83c8$export$353b32fc6898d37d(props, state, inputRef) {
        const toggleState = (0, $k0DcK$reactstatelytoggle.useToggleState)({
          isReadOnly: props.isReadOnly || state.isReadOnly,
          isSelected: state.isSelected(props.value),
          onChange(isSelected) {
            if (isSelected)
              state.addValue(props.value);
            else
              state.removeValue(props.value);
            if (props.onChange)
              props.onChange(isSelected);
          }
        });
        let res = (0, $468c774d7db917b7$export$e375f10ce42261c5)(__spreadProps(__spreadValues({}, props), {
          isReadOnly: props.isReadOnly || state.isReadOnly,
          isDisabled: props.isDisabled || state.isDisabled,
          name: props.name || (0, $64fc3370e682155f$export$31440636951aa68c).get(state)
        }), toggleState, inputRef);
        return __spreadProps(__spreadValues({}, res), {
          inputProps: __spreadProps(__spreadValues({}, res.inputProps), {
            "aria-describedby": [
              props["aria-describedby"],
              state.isInvalid ? (0, $64fc3370e682155f$export$d5679492e2864181).get(state) : null,
              (0, $64fc3370e682155f$export$a3077e9c93f7360f).get(state)
            ].filter(Boolean).join(" ") || void 0
          })
        });
      }
    }
  });

  // node_modules/@react-stately/checkbox/dist/main.js
  var require_main24 = __commonJS({
    "node_modules/@react-stately/checkbox/dist/main.js"(exports, module) {
      var $jVLCf$reactstatelyutils = require_main6();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useCheckboxGroupState", () => $943f4c622056df75$export$daff6da51032a415);
      function $943f4c622056df75$export$daff6da51032a415(props = {}) {
        let [selectedValues, setValue] = (0, $jVLCf$reactstatelyutils.useControlledState)(props.value, props.defaultValue || [], props.onChange);
        const state = {
          value: selectedValues,
          setValue(value) {
            if (props.isReadOnly || props.isDisabled)
              return;
            setValue(value);
          },
          isDisabled: props.isDisabled || false,
          isReadOnly: props.isReadOnly || false,
          isSelected(value) {
            return selectedValues.includes(value);
          },
          addValue(value) {
            if (props.isReadOnly || props.isDisabled)
              return;
            if (!selectedValues.includes(value))
              setValue(selectedValues.concat(value));
          },
          removeValue(value) {
            if (props.isReadOnly || props.isDisabled)
              return;
            if (selectedValues.includes(value))
              setValue(selectedValues.filter((existingValue) => existingValue !== value));
          },
          toggleValue(value) {
            if (props.isReadOnly || props.isDisabled)
              return;
            if (selectedValues.includes(value))
              setValue(selectedValues.filter((existingValue) => existingValue !== value));
            else
              setValue(selectedValues.concat(value));
          },
          validationState: props.validationState,
          isInvalid: props.isInvalid || props.validationState === "invalid"
        };
        return state;
      }
    }
  });

  // node_modules/@nextui-org/checkbox/dist/index.js
  var require_dist25 = __commonJS({
    "node_modules/@nextui-org/checkbox/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Checkbox: () => checkbox_default,
        CheckboxGroup: () => checkbox_group_default,
        CheckboxGroupProvider: () => CheckboxGroupProvider,
        CheckboxIcon: () => CheckboxIcon,
        useCheckbox: () => useCheckbox,
        useCheckboxGroup: () => useCheckboxGroup,
        useCheckboxGroupContext: () => useCheckboxGroupContext
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system = require_dist4();
      var import_visually_hidden = require_main13();
      var import_react3 = require_react();
      var import_react4 = require_react();
      var import_react22 = require_react();
      var import_toggle = require_main20();
      var import_theme = require_dist5();
      var import_interactions = require_main11();
      var import_focus = require_main12();
      var import_utils = require_main7();
      var import_react_utils2 = require_dist10();
      var import_shared_utils = require_dist9();
      var import_checkbox = require_main23();
      var import_react_utils = require_dist10();
      var [CheckboxGroupProvider, useCheckboxGroupContext] = (0, import_react_utils.createContext)({
        name: "CheckboxGroupContext",
        strict: false
      });
      function useCheckbox(props = {}) {
        var _a, _b, _c, _d, _e, _f;
        const groupContext = useCheckboxGroupContext();
        const isInGroup = !!groupContext;
        const _a2 = props, {
          as,
          ref,
          value = "",
          children,
          icon,
          name,
          isRequired = false,
          isReadOnly: isReadOnlyProp = false,
          autoFocus = false,
          isSelected: isSelectedProp,
          validationState,
          size = (_a = groupContext == null ? void 0 : groupContext.size) != null ? _a : "md",
          color = (_b = groupContext == null ? void 0 : groupContext.color) != null ? _b : "primary",
          radius = groupContext == null ? void 0 : groupContext.radius,
          lineThrough = (_c = groupContext == null ? void 0 : groupContext.lineThrough) != null ? _c : false,
          isDisabled: isDisabledProp = (_d = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _d : false,
          disableAnimation = (_e = groupContext == null ? void 0 : groupContext.disableAnimation) != null ? _e : false,
          isInvalid = validationState ? validationState === "invalid" : (_f = groupContext == null ? void 0 : groupContext.isInvalid) != null ? _f : false,
          isIndeterminate = false,
          defaultSelected,
          classNames,
          onChange,
          className,
          onValueChange
        } = _a2, otherProps = __objRest(_a2, [
          "as",
          "ref",
          "value",
          "children",
          "icon",
          "name",
          "isRequired",
          "isReadOnly",
          "autoFocus",
          "isSelected",
          "validationState",
          "size",
          "color",
          "radius",
          "lineThrough",
          "isDisabled",
          "disableAnimation",
          "isInvalid",
          "isIndeterminate",
          "defaultSelected",
          "classNames",
          "onChange",
          "className",
          "onValueChange"
        ]);
        if (groupContext && import_shared_utils.__DEV__) {
          if (isSelectedProp) {
            (0, import_shared_utils.warn)(
              "The Checkbox.Group is being used, `isSelected` will be ignored. Use the `value` of the Checkbox.Group instead.",
              "Checkbox"
            );
          }
          if (defaultSelected) {
            (0, import_shared_utils.warn)(
              "The Checkbox.Group is being used, `defaultSelected` will be ignored. Use the `defaultValue` of the Checkbox.Group instead.",
              "Checkbox"
            );
          }
        }
        const Component = as || "label";
        const inputRef = (0, import_react22.useRef)(null);
        const domRef = (0, import_react_utils2.useFocusableRef)(ref, inputRef);
        const labelId = (0, import_react4.useId)();
        const ariaCheckboxProps = (0, import_react22.useMemo)(() => {
          return {
            name,
            value,
            children,
            autoFocus,
            defaultSelected,
            isIndeterminate,
            isRequired,
            isInvalid,
            isSelected: isSelectedProp,
            isDisabled: isDisabledProp,
            isReadOnly: isReadOnlyProp,
            "aria-label": (0, import_shared_utils.safeAriaLabel)(otherProps["aria-label"], children),
            "aria-labelledby": otherProps["aria-labelledby"] || labelId,
            onChange: onValueChange
          };
        }, [
          value,
          name,
          labelId,
          children,
          autoFocus,
          isInvalid,
          isIndeterminate,
          isDisabledProp,
          isReadOnlyProp,
          isSelectedProp,
          defaultSelected,
          otherProps["aria-label"],
          otherProps["aria-labelledby"],
          onValueChange
        ]);
        const {
          inputProps,
          isSelected,
          isDisabled,
          isReadOnly,
          isPressed: isPressedKeyboard
        } = isInGroup ? (0, import_checkbox.useCheckboxGroupItem)(
          __spreadProps(__spreadValues({}, ariaCheckboxProps), {
            isInvalid
          }),
          groupContext.groupState,
          inputRef
        ) : (0, import_checkbox.useCheckbox)(ariaCheckboxProps, (0, import_toggle.useToggleState)(ariaCheckboxProps), inputRef);
        const isInteractionDisabled = isDisabled || isReadOnly;
        const [isPressed, setPressed] = (0, import_react4.useState)(false);
        const { pressProps } = (0, import_interactions.usePress)({
          isDisabled: isInteractionDisabled,
          onPressStart(e) {
            if (e.pointerType !== "keyboard") {
              setPressed(true);
            }
          },
          onPressEnd(e) {
            if (e.pointerType !== "keyboard") {
              setPressed(false);
            }
          }
        });
        const pressed = isInteractionDisabled ? false : isPressed || isPressedKeyboard;
        if (isRequired) {
          inputProps.required = true;
        }
        const { hoverProps, isHovered } = (0, import_interactions.useHover)({
          isDisabled: inputProps.disabled
        });
        const { focusProps, isFocused, isFocusVisible } = (0, import_focus.useFocusRing)({
          autoFocus: inputProps.autoFocus
        });
        const slots = (0, import_react22.useMemo)(
          () => (0, import_theme.checkbox)({
            color,
            size,
            radius,
            isInvalid,
            lineThrough,
            isDisabled,
            disableAnimation
          }),
          [color, size, radius, isInvalid, lineThrough, isDisabled, disableAnimation]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getBaseProps = (0, import_react4.useCallback)(() => {
          return __spreadValues({
            ref: domRef,
            className: slots.base({ class: baseStyles }),
            "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
            "data-selected": (0, import_shared_utils.dataAttr)(isSelected || isIndeterminate),
            "data-invalid": (0, import_shared_utils.dataAttr)(isInvalid),
            "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
            "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
            "data-pressed": (0, import_shared_utils.dataAttr)(pressed),
            "data-readonly": (0, import_shared_utils.dataAttr)(inputProps.readOnly),
            "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
            "data-indeterminate": (0, import_shared_utils.dataAttr)(isIndeterminate)
          }, (0, import_utils.mergeProps)(hoverProps, pressProps, otherProps));
        }, [
          slots,
          baseStyles,
          isDisabled,
          isSelected,
          isIndeterminate,
          isInvalid,
          isHovered,
          isFocused,
          pressed,
          inputProps.readOnly,
          isFocusVisible,
          hoverProps,
          pressProps,
          otherProps
        ]);
        const getWrapperProps = (0, import_react4.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              "aria-hidden": true,
              className: (0, import_shared_utils.clsx)(slots.wrapper({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className) }))
            });
          },
          [slots, classNames == null ? void 0 : classNames.wrapper]
        );
        const getInputProps = (0, import_react4.useCallback)(() => {
          return __spreadProps(__spreadValues({
            ref: inputRef
          }, (0, import_utils.mergeProps)(inputProps, focusProps)), {
            onChange: (0, import_utils.chain)(inputProps.onChange, onChange)
          });
        }, [inputProps, focusProps, onChange]);
        const getLabelProps = (0, import_react4.useCallback)(
          () => ({
            id: labelId,
            className: slots.label({ class: classNames == null ? void 0 : classNames.label })
          }),
          [slots, classNames == null ? void 0 : classNames.label, isDisabled, isSelected, isInvalid]
        );
        const getIconProps = (0, import_react4.useCallback)(
          () => ({
            isSelected,
            isIndeterminate: !!isIndeterminate,
            disableAnimation: !!disableAnimation,
            className: slots.icon({ class: classNames == null ? void 0 : classNames.icon })
          }),
          [slots, classNames == null ? void 0 : classNames.icon, isSelected, isIndeterminate, disableAnimation]
        );
        return {
          Component,
          icon,
          children,
          isSelected,
          isDisabled,
          isInvalid,
          isFocused,
          isHovered,
          isFocusVisible,
          getBaseProps,
          getWrapperProps,
          getInputProps,
          getLabelProps,
          getIconProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      function CheckIcon(props) {
        const _a = props, { isSelected, disableAnimation } = _a, otherProps = __objRest(_a, ["isSelected", "disableAnimation"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", __spreadProps(__spreadValues({ "aria-hidden": "true", role: "presentation", viewBox: "0 0 17 18" }, otherProps), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "polyline",
          {
            fill: "none",
            points: "1 9 7 14 15 4",
            stroke: "currentColor",
            strokeDasharray: 22,
            strokeDashoffset: isSelected ? 44 : 66,
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 2,
            style: !disableAnimation && isSelected ? {
              transition: "stroke-dashoffset 250ms linear 0.2s"
            } : {}
          }
        ) }));
      }
      function IndeterminateIcon(props) {
        const _a = props, { isSelected, disableAnimation } = _a, otherProps = __objRest(_a, ["isSelected", "disableAnimation"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", __spreadProps(__spreadValues({ stroke: "currentColor", strokeWidth: 3, viewBox: "0 0 24 24" }, otherProps), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("line", { x1: "21", x2: "3", y1: "12", y2: "12" }) }));
      }
      function CheckboxIcon(props) {
        const _a = props, { isIndeterminate } = _a, otherProps = __objRest(_a, ["isIndeterminate"]);
        const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon;
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(BaseIcon, __spreadValues({}, otherProps));
      }
      var import_jsx_runtime2 = require_jsx_runtime();
      var Checkbox = (0, import_system.forwardRef)((props, ref) => {
        const {
          Component,
          children,
          icon = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(CheckboxIcon, {}),
          getBaseProps,
          getWrapperProps,
          getInputProps,
          getIconProps,
          getLabelProps
        } = useCheckbox(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        const clonedIcon = typeof icon === "function" ? icon(getIconProps()) : (0, import_react3.cloneElement)(icon, getIconProps());
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_visually_hidden.VisuallyHidden, { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("input", __spreadValues({}, getInputProps())) }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getWrapperProps()), { children: clonedIcon })),
          children && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children }))
        ] }));
      });
      Checkbox.displayName = "NextUI.Checkbox";
      var checkbox_default = Checkbox;
      var import_system2 = require_dist4();
      var import_react42 = require_react();
      var import_utils2 = require_main7();
      var import_theme2 = require_dist5();
      var import_checkbox2 = require_main23();
      var import_checkbox3 = require_main24();
      var import_react_utils3 = require_dist10();
      var import_shared_utils2 = require_dist9();
      function useCheckboxGroup(props) {
        const _a = props, {
          as,
          ref,
          classNames,
          children,
          label,
          radius,
          value,
          name,
          defaultValue,
          size = "md",
          color = "primary",
          orientation = "vertical",
          lineThrough = false,
          isDisabled = false,
          disableAnimation = false,
          validationState,
          isInvalid = validationState === "invalid",
          isReadOnly,
          isRequired,
          onValueChange,
          description,
          errorMessage,
          className
        } = _a, otherProps = __objRest(_a, [
          "as",
          "ref",
          "classNames",
          "children",
          "label",
          "radius",
          "value",
          "name",
          "defaultValue",
          "size",
          "color",
          "orientation",
          "lineThrough",
          "isDisabled",
          "disableAnimation",
          "validationState",
          "isInvalid",
          "isReadOnly",
          "isRequired",
          "onValueChange",
          "description",
          "errorMessage",
          "className"
        ]);
        const Component = as || "div";
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const checkboxGroupProps = (0, import_react42.useMemo)(
          () => __spreadValues({
            value,
            name,
            "aria-label": (0, import_shared_utils2.safeAriaLabel)(otherProps["aria-label"], label),
            defaultValue,
            isRequired,
            isInvalid,
            isReadOnly,
            orientation,
            onChange: onValueChange
          }, otherProps),
          [
            value,
            name,
            label,
            defaultValue,
            isRequired,
            isReadOnly,
            isInvalid,
            orientation,
            onValueChange,
            otherProps["aria-label"],
            otherProps
          ]
        );
        const groupState = (0, import_checkbox3.useCheckboxGroupState)(checkboxGroupProps);
        const { labelProps, groupProps, descriptionProps, errorMessageProps } = (0, import_checkbox2.useCheckboxGroup)(
          checkboxGroupProps,
          groupState
        );
        const context = (0, import_react42.useMemo)(
          () => ({
            size,
            color,
            radius,
            lineThrough,
            isInvalid,
            isDisabled,
            disableAnimation,
            groupState
          }),
          [
            size,
            color,
            radius,
            lineThrough,
            isDisabled,
            disableAnimation,
            isInvalid,
            groupState == null ? void 0 : groupState.value,
            groupState == null ? void 0 : groupState.isDisabled,
            groupState == null ? void 0 : groupState.isReadOnly,
            groupState == null ? void 0 : groupState.isInvalid,
            groupState == null ? void 0 : groupState.isSelected
          ]
        );
        const slots = (0, import_react42.useMemo)(
          () => (0, import_theme2.checkboxGroup)({ isRequired, isInvalid, disableAnimation }),
          [isRequired, isInvalid, disableAnimation]
        );
        const baseStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getGroupProps = (0, import_react42.useCallback)(() => {
          return __spreadValues({
            ref: domRef,
            className: slots.base({ class: baseStyles })
          }, (0, import_utils2.mergeProps)(groupProps, otherProps));
        }, [slots, domRef, baseStyles, groupProps, otherProps]);
        const getLabelProps = (0, import_react42.useCallback)(() => {
          return __spreadValues({
            className: slots.label({ class: classNames == null ? void 0 : classNames.label })
          }, labelProps);
        }, [slots, labelProps, classNames == null ? void 0 : classNames.label]);
        const getWrapperProps = (0, import_react42.useCallback)(() => {
          return {
            className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }),
            role: "presentation",
            "data-orientation": orientation
          };
        }, [slots, orientation, classNames == null ? void 0 : classNames.wrapper]);
        const getDescriptionProps = (0, import_react42.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({}, props2), descriptionProps), {
              className: slots.description({ class: (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.description, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, descriptionProps, classNames == null ? void 0 : classNames.description]
        );
        const getErrorMessageProps = (0, import_react42.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({}, props2), errorMessageProps), {
              className: slots.errorMessage({ class: (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.errorMessage, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, errorMessageProps, classNames == null ? void 0 : classNames.errorMessage]
        );
        return {
          Component,
          children,
          label,
          context,
          description,
          errorMessage,
          getGroupProps,
          getLabelProps,
          getWrapperProps,
          getDescriptionProps,
          getErrorMessageProps
        };
      }
      var import_jsx_runtime3 = require_jsx_runtime();
      var CheckboxGroup = (0, import_system2.forwardRef)((props, ref) => {
        const {
          children,
          context,
          label,
          description,
          errorMessage,
          getGroupProps,
          getLabelProps,
          getWrapperProps,
          getDescriptionProps,
          getErrorMessageProps
        } = useCheckboxGroup(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", __spreadProps(__spreadValues({}, getGroupProps()), { children: [
          label && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children: label })),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", __spreadProps(__spreadValues({}, getWrapperProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CheckboxGroupProvider, { value: context, children }) })),
          errorMessage ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", __spreadProps(__spreadValues({}, getErrorMessageProps()), { children: errorMessage })) : description ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", __spreadProps(__spreadValues({}, getDescriptionProps()), { children: description })) : null
        ] }));
      });
      CheckboxGroup.displayName = "NextUI.CheckboxGroup";
      var checkbox_group_default = CheckboxGroup;
    }
  });

  // node_modules/@nextui-org/code/dist/index.js
  var require_dist26 = __commonJS({
    "node_modules/@nextui-org/code/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Code: () => code_default,
        useCode: () => useCode
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system_rsc2 = require_dist3();
      var import_theme = require_dist5();
      var import_system_rsc = require_dist3();
      var import_react3 = require_react();
      function useCode(originalProps) {
        const [props, variantProps] = (0, import_system_rsc.mapPropsVariants)(originalProps, import_theme.code.variantKeys);
        const _a = props, { as, children, className } = _a, otherProps = __objRest(_a, ["as", "children", "className"]);
        const Component = as || "code";
        const classNames = (0, import_react3.useMemo)(
          () => (0, import_theme.code)(__spreadProps(__spreadValues({}, variantProps), {
            className
          })),
          [...Object.values(variantProps), className]
        );
        const getCodeProps = () => {
          return __spreadValues({
            className: classNames
          }, otherProps);
        };
        return { Component, children, getCodeProps };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Code = (0, import_system_rsc2.forwardRef)((props, ref) => {
        const { Component, children, getCodeProps } = useCode(__spreadValues({}, props));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadProps(__spreadValues({ ref }, getCodeProps()), { children }));
      });
      Code.displayName = "NextUI.Code";
      var code_default = Code;
    }
  });

  // node_modules/@nextui-org/use-aria-link/dist/index.js
  var require_dist27 = __commonJS({
    "node_modules/@nextui-org/use-aria-link/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useAriaLink: () => useAriaLink
      });
      module.exports = __toCommonJS2(src_exports);
      var import_utils = require_main7();
      var import_focus = require_main12();
      var import_interactions = require_main11();
      function useAriaLink(props, ref) {
        let _a = props, {
          elementType = "a",
          onPress,
          onPressStart,
          onPressEnd,
          onClick: deprecatedOnClick,
          isDisabled
        } = _a, otherProps = __objRest(_a, [
          "elementType",
          "onPress",
          "onPressStart",
          "onPressEnd",
          "onClick",
          "isDisabled"
        ]);
        let linkProps = {};
        if (elementType !== "a") {
          linkProps = {
            role: "link",
            tabIndex: !isDisabled ? 0 : void 0
          };
        }
        let { focusableProps } = (0, import_focus.useFocusable)(props, ref);
        let { pressProps, isPressed } = (0, import_interactions.usePress)({ onPress, onPressStart, onPressEnd, isDisabled, ref });
        let domProps = (0, import_utils.filterDOMProps)(otherProps, { labelable: true });
        let interactionHandlers = (0, import_utils.mergeProps)(focusableProps, pressProps);
        return {
          isPressed,
          linkProps: (0, import_utils.mergeProps)(domProps, __spreadProps(__spreadValues(__spreadValues({}, interactionHandlers), linkProps), {
            "aria-disabled": isDisabled || void 0,
            "aria-current": props["aria-current"],
            onClick: (e) => {
              var _a2;
              (_a2 = pressProps.onClick) == null ? void 0 : _a2.call(pressProps, e);
              if (deprecatedOnClick) {
                deprecatedOnClick(e);
              }
            }
          }))
        };
      }
    }
  });

  // node_modules/@nextui-org/link/dist/index.js
  var require_dist28 = __commonJS({
    "node_modules/@nextui-org/link/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Link: () => link_default,
        LinkIcon: () => LinkIcon2,
        useLink: () => useLink
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system2 = require_dist4();
      var import_shared_icons = require_dist12();
      var import_theme2 = require_dist5();
      var import_theme = require_dist5();
      var import_use_aria_link = require_dist27();
      var import_system = require_dist4();
      var import_react_utils = require_dist10();
      var import_focus = require_main12();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      var import_utils = require_main7();
      function useLink(originalProps) {
        var _a, _b;
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.link.variantKeys);
        const _a2 = props, {
          ref,
          as,
          children,
          anchorIcon,
          isExternal = false,
          showAnchorIcon = false,
          autoFocus = false,
          className,
          onPress,
          onPressStart,
          onPressEnd,
          onClick
        } = _a2, otherProps = __objRest(_a2, [
          "ref",
          "as",
          "children",
          "anchorIcon",
          "isExternal",
          "showAnchorIcon",
          "autoFocus",
          "className",
          "onPress",
          "onPressStart",
          "onPressEnd",
          "onClick"
        ]);
        const Component = as || "a";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const { linkProps } = (0, import_use_aria_link.useAriaLink)(
          __spreadProps(__spreadValues({}, otherProps), {
            onPress,
            onPressStart,
            onPressEnd,
            onClick,
            isDisabled: originalProps.isDisabled,
            elementType: `${as}`
          }),
          domRef
        );
        const { isFocused, isFocusVisible, focusProps } = (0, import_focus.useFocusRing)({
          autoFocus
        });
        if (isExternal) {
          otherProps.rel = (_a = otherProps.rel) != null ? _a : "noopener noreferrer";
          otherProps.target = (_b = otherProps.target) != null ? _b : "_blank";
        }
        const classNames = (0, import_react3.useMemo)(
          () => (0, import_theme.link)(__spreadProps(__spreadValues({}, variantProps), {
            className
          })),
          [...Object.values(variantProps), className]
        );
        const getLinkProps = (0, import_react3.useCallback)(() => {
          return __spreadValues({
            ref: domRef,
            className: classNames,
            "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
            "data-disabled": (0, import_shared_utils.dataAttr)(originalProps.isDisabled),
            "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible)
          }, (0, import_utils.mergeProps)(focusProps, linkProps, otherProps));
        }, [classNames, isFocused, isFocusVisible, focusProps, linkProps, otherProps]);
        return { Component, children, anchorIcon, showAnchorIcon, getLinkProps };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Link = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          children,
          showAnchorIcon,
          anchorIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_shared_icons.LinkIcon, { className: import_theme2.linkAnchorClasses }),
          getLinkProps
        } = useLink(__spreadValues({
          ref
        }, props));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadProps(__spreadValues({}, getLinkProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
          children,
          showAnchorIcon && anchorIcon
        ] }) }));
      });
      Link.displayName = "NextUI.Link";
      var link_default = Link;
      var import_jsx_runtime2 = require_jsx_runtime();
      var LinkIcon2 = () => /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
        "svg",
        {
          "aria-hidden": "true",
          className: "flex mx-1 text-current self-center",
          fill: "none",
          height: "1em",
          shapeRendering: "geometricPrecision",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "1.5",
          viewBox: "0 0 24 24",
          width: "1em",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6" }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "M15 3h6v6" }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { d: "M10 14L21 3" })
          ]
        }
      );
    }
  });

  // node_modules/@nextui-org/use-pagination/dist/index.js
  var require_dist29 = __commonJS({
    "node_modules/@nextui-org/use-pagination/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        PaginationItemType: () => PaginationItemType2,
        usePagination: () => usePagination
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var import_shared_utils = require_dist9();
      var PaginationItemType2 = /* @__PURE__ */ ((PaginationItemType22) => {
        PaginationItemType22["DOTS"] = "dots";
        PaginationItemType22["PREV"] = "prev";
        PaginationItemType22["NEXT"] = "next";
        return PaginationItemType22;
      })(PaginationItemType2 || {});
      function usePagination(props) {
        const {
          page,
          total,
          siblings = 1,
          boundaries = 1,
          initialPage = 1,
          showControls = false,
          onChange
        } = props;
        const [activePage, setActivePage] = (0, import_react3.useState)(page || initialPage);
        const onChangeActivePage = (newPage) => {
          setActivePage(newPage);
          onChange && onChange(newPage);
        };
        (0, import_react3.useEffect)(() => {
          if (page && page !== activePage) {
            setActivePage(page);
          }
        }, [page]);
        const setPage = (0, import_react3.useCallback)(
          (pageNumber) => {
            if (pageNumber <= 0) {
              onChangeActivePage(1);
            } else if (pageNumber > total) {
              onChangeActivePage(total);
            } else {
              onChangeActivePage(pageNumber);
            }
          },
          [total, activePage]
        );
        const next = () => setPage(activePage + 1);
        const previous = () => setPage(activePage - 1);
        const first = () => setPage(1);
        const last = () => setPage(total);
        const formatRange = (0, import_react3.useCallback)(
          (range2) => {
            if (showControls) {
              return [
                "prev",
                ...range2,
                "next"
                /* NEXT */
              ];
            }
            return range2;
          },
          [showControls]
        );
        const paginationRange = (0, import_react3.useMemo)(() => {
          const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;
          if (totalPageNumbers >= total) {
            return formatRange((0, import_shared_utils.range)(1, total));
          }
          const leftSiblingIndex = Math.max(activePage - siblings, boundaries);
          const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);
          const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;
          const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);
          if (!shouldShowLeftDots && shouldShowRightDots) {
            const leftItemCount = siblings * 2 + boundaries + 2;
            return formatRange([
              ...(0, import_shared_utils.range)(1, leftItemCount),
              "dots",
              ...(0, import_shared_utils.range)(total - (boundaries - 1), total)
            ]);
          }
          if (shouldShowLeftDots && !shouldShowRightDots) {
            const rightItemCount = boundaries + 1 + 2 * siblings;
            return formatRange([
              ...(0, import_shared_utils.range)(1, boundaries),
              "dots",
              ...(0, import_shared_utils.range)(total - rightItemCount, total)
            ]);
          }
          return formatRange([
            ...(0, import_shared_utils.range)(1, boundaries),
            "dots",
            ...(0, import_shared_utils.range)(leftSiblingIndex, rightSiblingIndex),
            "dots",
            ...(0, import_shared_utils.range)(total - boundaries + 1, total)
          ]);
        }, [total, activePage, siblings, boundaries, formatRange]);
        return {
          range: paginationRange,
          activePage,
          setPage,
          next,
          previous,
          first,
          last
        };
      }
    }
  });

  // node_modules/compute-scroll-into-view/dist/index.cjs
  var require_dist30 = __commonJS({
    "node_modules/compute-scroll-into-view/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var t = (t2) => "object" == typeof t2 && null != t2 && 1 === t2.nodeType;
      var e = (t2, e2) => (!e2 || "hidden" !== t2) && ("visible" !== t2 && "clip" !== t2);
      var o = (t2, o2) => {
        if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
          const n2 = getComputedStyle(t2, null);
          return e(n2.overflowY, o2) || e(n2.overflowX, o2) || ((t3) => {
            const e2 = ((t4) => {
              if (!t4.ownerDocument || !t4.ownerDocument.defaultView)
                return null;
              try {
                return t4.ownerDocument.defaultView.frameElement;
              } catch (t5) {
                return null;
              }
            })(t3);
            return !!e2 && (e2.clientHeight < t3.scrollHeight || e2.clientWidth < t3.scrollWidth);
          })(t2);
        }
        return false;
      };
      var n = (t2, e2, o2, n2, l2, r, i, s) => r < t2 && i > e2 || r > t2 && i < e2 ? 0 : r <= t2 && s <= o2 || i >= e2 && s >= o2 ? r - t2 - n2 : i > e2 && s < o2 || r < t2 && s > o2 ? i - e2 + l2 : 0;
      var l = (t2) => {
        const e2 = t2.parentElement;
        return null == e2 ? t2.getRootNode().host || null : e2;
      };
      exports.compute = (e2, r) => {
        var i, s, d, c;
        if ("undefined" == typeof document)
          return [];
        const { scrollMode: h, block: u, inline: f, boundary: a, skipOverflowHiddenElements: g } = r, p = "function" == typeof a ? a : (t2) => t2 !== a;
        if (!t(e2))
          throw new TypeError("Invalid target");
        const m = document.scrollingElement || document.documentElement, w = [];
        let W = e2;
        for (; t(W) && p(W); ) {
          if (W = l(W), W === m) {
            w.push(W);
            break;
          }
          null != W && W === document.body && o(W) && !o(document.documentElement) || null != W && o(W, g) && w.push(W);
        }
        const b = null != (s = null == (i = window.visualViewport) ? void 0 : i.width) ? s : innerWidth, H = null != (c = null == (d = window.visualViewport) ? void 0 : d.height) ? c : innerHeight, { scrollX: y, scrollY: M } = window, { height: v, width: E, top: x, right: C, bottom: I, left: R } = e2.getBoundingClientRect(), { top: T, right: B, bottom: F, left: V } = ((t2) => {
          const e3 = window.getComputedStyle(t2);
          return { top: parseFloat(e3.scrollMarginTop) || 0, right: parseFloat(e3.scrollMarginRight) || 0, bottom: parseFloat(e3.scrollMarginBottom) || 0, left: parseFloat(e3.scrollMarginLeft) || 0 };
        })(e2);
        let k = "start" === u || "nearest" === u ? x - T : "end" === u ? I + F : x + v / 2 - T + F, D = "center" === f ? R + E / 2 - V + B : "end" === f ? C + B : R - V;
        const L = [];
        for (let t2 = 0; t2 < w.length; t2++) {
          const e3 = w[t2], { height: o2, width: l2, top: r2, right: i2, bottom: s2, left: d2 } = e3.getBoundingClientRect();
          if ("if-needed" === h && x >= 0 && R >= 0 && I <= H && C <= b && x >= r2 && I <= s2 && R >= d2 && C <= i2)
            return L;
          const c2 = getComputedStyle(e3), a2 = parseInt(c2.borderLeftWidth, 10), g2 = parseInt(c2.borderTopWidth, 10), p2 = parseInt(c2.borderRightWidth, 10), W2 = parseInt(c2.borderBottomWidth, 10);
          let T2 = 0, B2 = 0;
          const F2 = "offsetWidth" in e3 ? e3.offsetWidth - e3.clientWidth - a2 - p2 : 0, V2 = "offsetHeight" in e3 ? e3.offsetHeight - e3.clientHeight - g2 - W2 : 0, S = "offsetWidth" in e3 ? 0 === e3.offsetWidth ? 0 : l2 / e3.offsetWidth : 0, j = "offsetHeight" in e3 ? 0 === e3.offsetHeight ? 0 : o2 / e3.offsetHeight : 0;
          if (m === e3)
            T2 = "start" === u ? k : "end" === u ? k - H : "nearest" === u ? n(M, M + H, H, g2, W2, M + k, M + k + v, v) : k - H / 2, B2 = "start" === f ? D : "center" === f ? D - b / 2 : "end" === f ? D - b : n(y, y + b, b, a2, p2, y + D, y + D + E, E), T2 = Math.max(0, T2 + M), B2 = Math.max(0, B2 + y);
          else {
            T2 = "start" === u ? k - r2 - g2 : "end" === u ? k - s2 + W2 + V2 : "nearest" === u ? n(r2, s2, o2, g2, W2 + V2, k, k + v, v) : k - (r2 + o2 / 2) + V2 / 2, B2 = "start" === f ? D - d2 - a2 : "center" === f ? D - (d2 + l2 / 2) + F2 / 2 : "end" === f ? D - i2 + p2 + F2 : n(d2, i2, l2, a2, p2 + F2, D, D + E, E);
            const { scrollLeft: t3, scrollTop: c3 } = e3;
            T2 = 0 === j ? 0 : Math.max(0, Math.min(c3 + T2 / j, e3.scrollHeight - o2 / j + V2)), B2 = 0 === S ? 0 : Math.max(0, Math.min(t3 + B2 / S, e3.scrollWidth - l2 / S + F2)), k += c3 - T2, D += t3 - B2;
          }
          L.push({ el: e3, top: T2, left: B2 });
        }
        return L;
      };
    }
  });

  // node_modules/scroll-into-view-if-needed/dist/index.cjs
  var require_dist31 = __commonJS({
    "node_modules/scroll-into-view-if-needed/dist/index.cjs"(exports, module) {
      "use strict";
      var e = require_dist30();
      var o = (e2) => false === e2 ? { block: "end", inline: "nearest" } : ((e3) => e3 === Object(e3) && 0 !== Object.keys(e3).length)(e2) ? e2 : { block: "start", inline: "nearest" };
      module.exports = function(t, n) {
        if (!t.isConnected || !((e2) => {
          let o2 = e2;
          for (; o2 && o2.parentNode; ) {
            if (o2.parentNode === document)
              return true;
            o2 = o2.parentNode instanceof ShadowRoot ? o2.parentNode.host : o2.parentNode;
          }
          return false;
        })(t))
          return;
        if (((e2) => "object" == typeof e2 && "function" == typeof e2.behavior)(n))
          return n.behavior(e.compute(t, n));
        const r = "boolean" == typeof n || null == n ? void 0 : n.behavior;
        for (const { el: i, top: c, left: l } of e.compute(t, o(n)))
          i.scroll({ top: c, left: l, behavior: r });
      };
    }
  });

  // node_modules/@nextui-org/pagination/dist/index.js
  var require_dist32 = __commonJS({
    "node_modules/@nextui-org/pagination/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Pagination: () => pagination_default,
        PaginationCursor: () => pagination_cursor_default,
        PaginationItem: () => pagination_item_default,
        PaginationItemType: () => import_use_pagination5.PaginationItemType,
        usePagination: () => usePagination,
        usePaginationItem: () => usePaginationItem
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var import_system4 = require_dist4();
      var import_use_pagination3 = require_dist29();
      var import_shared_icons = require_dist12();
      var import_shared_utils3 = require_dist9();
      var import_use_pagination = require_dist29();
      var import_react4 = require_react();
      var import_system = require_dist4();
      var import_use_pagination2 = require_dist29();
      var import_scroll_into_view_if_needed = __toESM2(require_dist31());
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_shared_utils = require_dist9();
      var CURSOR_TRANSITION_TIMEOUT = 300;
      function usePagination(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.pagination.variantKeys);
        const _a = props, {
          as,
          ref,
          classNames,
          dotsJump = 5,
          loop = false,
          showControls = false,
          total = 1,
          initialPage = 1,
          page,
          siblings,
          boundaries,
          onChange,
          className,
          renderItem,
          getItemAriaLabel: getItemAriaLabelProp
        } = _a, otherProps = __objRest(_a, [
          "as",
          "ref",
          "classNames",
          "dotsJump",
          "loop",
          "showControls",
          "total",
          "initialPage",
          "page",
          "siblings",
          "boundaries",
          "onChange",
          "className",
          "renderItem",
          "getItemAriaLabel"
        ]);
        const Component = as || "nav";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const cursorRef = (0, import_react4.useRef)(null);
        const itemsRef = (0, import_react4.useRef)();
        const cursorTimer = (0, import_react4.useRef)();
        function getItemsRefMap() {
          if (!itemsRef.current) {
            itemsRef.current = /* @__PURE__ */ new Map();
          }
          return itemsRef.current;
        }
        function getItemRef(node, value) {
          const map = getItemsRefMap();
          if (node) {
            map.set(value, node);
          } else {
            map.delete(value);
          }
        }
        function scrollTo(value) {
          const map = getItemsRefMap();
          const node = map.get(value);
          cursorTimer.current && clearTimeout(cursorTimer.current);
          if (node) {
            (0, import_scroll_into_view_if_needed.default)(node, {
              scrollMode: "always",
              behavior: "smooth",
              block: "start",
              inline: "start",
              boundary: domRef.current
            });
            const { offsetLeft } = node;
            if (cursorRef.current) {
              cursorRef.current.setAttribute("data-moving", "true");
              cursorRef.current.style.transform = `translateX(${offsetLeft}px) scale(1.1)`;
            }
            cursorTimer.current = setTimeout(() => {
              if (cursorRef.current) {
                cursorRef.current.setAttribute("data-moving", "false");
                cursorRef.current.style.transform = `translateX(${offsetLeft}px) scale(1)`;
              }
              cursorTimer.current && clearTimeout(cursorTimer.current);
            }, CURSOR_TRANSITION_TIMEOUT);
          }
        }
        const { range, activePage, setPage, previous, next, first, last } = (0, import_use_pagination2.usePagination)({
          page,
          total,
          initialPage,
          siblings,
          boundaries,
          showControls,
          onChange
        });
        (0, import_react4.useEffect)(() => {
          if (activePage && !originalProps.disableAnimation) {
            scrollTo(activePage);
          }
        }, [
          activePage,
          originalProps.disableAnimation,
          originalProps.isCompact,
          originalProps.disableCursorAnimation
        ]);
        const slots = (0, import_react4.useMemo)(
          () => (0, import_theme.pagination)(__spreadProps(__spreadValues({}, variantProps), {
            disableCursorAnimation: originalProps.disableCursorAnimation || originalProps.disableAnimation
          })),
          [...Object.values(variantProps)]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const onNext = () => {
          if (loop && activePage === total) {
            return first();
          }
          return next();
        };
        const onPrevious = () => {
          if (loop && activePage === 1) {
            return last();
          }
          return previous();
        };
        const getBaseProps = (props2 = {}) => {
          return __spreadValues(__spreadProps(__spreadValues({}, props2), {
            ref: domRef,
            role: "navigation",
            "aria-label": props2["aria-label"] || "pagination navigation",
            "data-slot": "base",
            "data-controls": (0, import_shared_utils.dataAttr)(showControls),
            "data-loop": (0, import_shared_utils.dataAttr)(loop),
            "data-dots-jump": dotsJump,
            "data-total": total,
            "data-active-page": activePage,
            className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2 == null ? void 0 : props2.className) })
          }), otherProps);
        };
        const getWrapperProps = (props2 = {}) => {
          return __spreadProps(__spreadValues({}, props2), {
            "data-slot": "wrapper",
            className: slots.wrapper({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className) })
          });
        };
        const getItemAriaLabel = (page2) => {
          if (!page2)
            return;
          if (getItemAriaLabelProp) {
            return getItemAriaLabelProp(page2);
          }
          switch (page2) {
            case import_use_pagination.PaginationItemType.DOTS:
              return "dots element";
            case import_use_pagination.PaginationItemType.PREV:
              return "previous page button";
            case import_use_pagination.PaginationItemType.NEXT:
              return "next page button";
            case "first":
              return "first page button";
            case "last":
              return "last page button";
            default:
              return `pagination item ${page2}`;
          }
        };
        const getItemProps = (props2 = {}) => {
          return __spreadProps(__spreadValues({}, props2), {
            ref: (node) => getItemRef(node, props2.value),
            "data-slot": "item",
            isActive: props2.value === activePage,
            className: slots.item({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.item, props2 == null ? void 0 : props2.className) }),
            onPress: () => {
              if (props2.value !== activePage) {
                setPage(props2.value);
              }
            }
          });
        };
        const getCursorProps = (props2 = {}) => {
          return __spreadProps(__spreadValues({}, props2), {
            ref: cursorRef,
            activePage,
            "data-slot": "cursor",
            className: slots.cursor({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.cursor, props2 == null ? void 0 : props2.className) })
          });
        };
        return {
          Component,
          showControls,
          dotsJump,
          slots,
          classNames,
          loop,
          total,
          range,
          activePage,
          getItemRef,
          disableCursorAnimation: originalProps.disableCursorAnimation,
          disableAnimation: originalProps.disableAnimation,
          setPage,
          onPrevious,
          onNext,
          renderItem,
          getBaseProps,
          getWrapperProps,
          getItemProps,
          getCursorProps,
          getItemAriaLabel
        };
      }
      var import_system2 = require_dist4();
      var import_react22 = require_react();
      var import_shared_utils2 = require_dist9();
      var import_utils = require_main7();
      var import_react_utils2 = require_dist10();
      var import_interactions = require_main11();
      var import_focus = require_main12();
      function usePaginationItem(props) {
        const _a = props, {
          as,
          ref,
          value,
          children,
          isActive,
          isDisabled,
          onPress,
          onClick,
          getAriaLabel,
          className
        } = _a, otherProps = __objRest(_a, [
          "as",
          "ref",
          "value",
          "children",
          "isActive",
          "isDisabled",
          "onPress",
          "onClick",
          "getAriaLabel",
          "className"
        ]);
        const Component = as || "li";
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const ariaLabel = (0, import_react22.useMemo)(
          () => isActive ? `${getAriaLabel == null ? void 0 : getAriaLabel(value)} active` : getAriaLabel == null ? void 0 : getAriaLabel(value),
          [value, isActive]
        );
        const { isPressed, pressProps } = (0, import_interactions.usePress)({
          isDisabled,
          onPress
        });
        const { focusProps, isFocused, isFocusVisible } = (0, import_focus.useFocusRing)({});
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({ isDisabled });
        const getItemProps = (props2 = {}) => {
          return __spreadProps(__spreadValues({
            ref: domRef,
            role: "button",
            tabIndex: isDisabled ? -1 : 0,
            "aria-label": ariaLabel,
            "aria-current": (0, import_shared_utils2.dataAttr)(isActive),
            "aria-disabled": (0, import_shared_utils2.dataAttr)(isDisabled),
            "data-disabled": (0, import_shared_utils2.dataAttr)(isDisabled),
            "data-active": (0, import_shared_utils2.dataAttr)(isActive),
            "data-focus": (0, import_shared_utils2.dataAttr)(isFocused),
            "data-hover": (0, import_shared_utils2.dataAttr)(isHovered),
            "data-pressed": (0, import_shared_utils2.dataAttr)(isPressed),
            "data-focus-visible": (0, import_shared_utils2.dataAttr)(isFocusVisible)
          }, (0, import_utils.mergeProps)(props2, pressProps, focusProps, hoverProps, otherProps)), {
            className: (0, import_shared_utils2.clsx)(className, props2.className),
            onClick: (0, import_utils.chain)(pressProps.onClick, onClick)
          });
        };
        return {
          Component,
          children,
          ariaLabel,
          isFocused,
          isFocusVisible,
          getItemProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var PaginationItem = (0, import_system2.forwardRef)((props, ref) => {
        const { Component, children, getItemProps } = usePaginationItem(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadProps(__spreadValues({}, getItemProps()), { children }));
      });
      PaginationItem.displayName = "NextUI.PaginationItem";
      var pagination_item_default = PaginationItem;
      var import_system3 = require_dist4();
      var import_react_utils3 = require_dist10();
      var import_jsx_runtime2 = require_jsx_runtime();
      var PaginationCursor = (0, import_system3.forwardRef)((props, ref) => {
        const _a = props, { as, activePage } = _a, otherProps = __objRest(_a, ["as", "activePage"]);
        const Component = as || "span";
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Component, __spreadProps(__spreadValues({ ref: domRef, "aria-hidden": true }, otherProps), { children: activePage }));
      });
      PaginationCursor.displayName = "NextUI.PaginationCursor";
      var pagination_cursor_default = PaginationCursor;
      var import_jsx_runtime3 = require_jsx_runtime();
      var import_react42 = require_react();
      var Pagination = (0, import_system4.forwardRef)((props, ref) => {
        const {
          Component,
          dotsJump,
          slots,
          classNames,
          total,
          range,
          loop,
          activePage,
          disableCursorAnimation,
          disableAnimation,
          renderItem: renderItemProp,
          onNext,
          onPrevious,
          setPage,
          getItemAriaLabel,
          getItemRef,
          getBaseProps,
          getWrapperProps,
          getItemProps,
          getCursorProps
        } = usePagination(__spreadProps(__spreadValues({}, props), { ref }));
        const renderItem = (0, import_react3.useCallback)(
          (value, index3) => {
            const isBefore = index3 < range.indexOf(activePage);
            if (renderItemProp && typeof renderItemProp === "function") {
              return renderItemProp({
                value,
                index: index3,
                activePage,
                isActive: value === activePage,
                isPrevious: value === activePage - 1,
                isNext: value === activePage + 1,
                isFirst: value === 1,
                isLast: value === total,
                onNext,
                onPrevious,
                setPage,
                ref: typeof value === "number" ? (node) => getItemRef(node, value) : void 0,
                className: slots.item({ class: classNames == null ? void 0 : classNames.item })
              });
            }
            if (value === import_use_pagination3.PaginationItemType.PREV) {
              return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                pagination_item_default,
                {
                  className: slots.prev({
                    class: classNames == null ? void 0 : classNames.prev
                  }),
                  "data-slot": "prev",
                  getAriaLabel: getItemAriaLabel,
                  isDisabled: !loop && activePage === 1,
                  value,
                  onPress: onPrevious,
                  children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_shared_icons.ChevronIcon, {})
                },
                import_use_pagination3.PaginationItemType.PREV
              );
            }
            if (value === import_use_pagination3.PaginationItemType.NEXT) {
              return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                pagination_item_default,
                {
                  className: slots.next({
                    class: (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.next)
                  }),
                  "data-slot": "next",
                  getAriaLabel: getItemAriaLabel,
                  isDisabled: !loop && activePage === total,
                  value,
                  onPress: onNext,
                  children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                    import_shared_icons.ChevronIcon,
                    {
                      className: slots.chevronNext({
                        class: classNames == null ? void 0 : classNames.chevronNext
                      })
                    }
                  )
                },
                import_use_pagination3.PaginationItemType.NEXT
              );
            }
            if (value === import_use_pagination3.PaginationItemType.DOTS) {
              return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
                pagination_item_default,
                {
                  className: slots.item({
                    class: (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.item, "group")
                  }),
                  "data-slot": "item",
                  getAriaLabel: getItemAriaLabel,
                  value,
                  onPress: () => isBefore ? setPage(activePage - dotsJump >= 1 ? activePage - dotsJump : 1) : setPage(activePage + dotsJump <= total ? activePage + dotsJump : total),
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_shared_icons.EllipsisIcon, { className: slots == null ? void 0 : slots.ellipsis({ class: classNames == null ? void 0 : classNames.ellipsis }) }),
                    /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                      import_shared_icons.ForwardIcon,
                      {
                        className: slots == null ? void 0 : slots.forwardIcon({ class: classNames == null ? void 0 : classNames.forwardIcon }),
                        "data-before": (0, import_shared_utils3.dataAttr)(isBefore)
                      }
                    )
                  ]
                },
                import_use_pagination3.PaginationItemType.DOTS + isBefore
              );
            }
            return /* @__PURE__ */ (0, import_react42.createElement)(pagination_item_default, __spreadProps(__spreadValues({}, getItemProps({ value })), { key: value, getAriaLabel: getItemAriaLabel }), value);
          },
          [activePage, dotsJump, getItemProps, loop, range, renderItemProp, slots, classNames, total]
        );
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("ul", __spreadProps(__spreadValues({}, getWrapperProps()), { children: [
          !disableCursorAnimation && !disableAnimation && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(pagination_cursor_default, __spreadValues({}, getCursorProps())),
          range.map(renderItem)
        ] })) }));
      });
      Pagination.displayName = "NextUI.Pagination";
      var pagination_default = Pagination;
      var import_use_pagination5 = require_dist29();
    }
  });

  // node_modules/@react-aria/radio/dist/main.js
  var require_main25 = __commonJS({
    "node_modules/@react-aria/radio/dist/main.js"(exports, module) {
      var $fMEGB$reactariautils = require_main7();
      var $fMEGB$reactariafocus = require_main12();
      var $fMEGB$reactariainteractions = require_main11();
      var $fMEGB$reactarialabel = require_main22();
      var $fMEGB$reactariai18n = require_main10();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useRadio", () => $e184702b1b7f1863$export$37b0961d2f4751e2);
      $parcel$export(module.exports, "useRadioGroup", () => $dfcade00a56a6317$export$62b9571f283ff5c2);
      var $eeb149278aae5c67$export$3b7b268d09480394 = /* @__PURE__ */ new WeakMap();
      var $eeb149278aae5c67$export$8e8b214e06dd397d = /* @__PURE__ */ new WeakMap();
      var $eeb149278aae5c67$export$61c8d3f0151e21b2 = /* @__PURE__ */ new WeakMap();
      function $e184702b1b7f1863$export$37b0961d2f4751e2(props, state, ref) {
        let { value, children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby } = props;
        const isDisabled = props.isDisabled || state.isDisabled;
        let hasChildren = children != null;
        let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
        if (!hasChildren && !hasAriaLabel)
          console.warn("If you do not provide children, you must specify an aria-label for accessibility");
        let checked = state.selectedValue === value;
        let onChange = (e) => {
          e.stopPropagation();
          state.setSelectedValue(value);
        };
        let { pressProps, isPressed } = (0, $fMEGB$reactariainteractions.usePress)({
          isDisabled
        });
        let { focusableProps } = (0, $fMEGB$reactariafocus.useFocusable)((0, $fMEGB$reactariautils.mergeProps)(props, {
          onFocus: () => state.setLastFocusedValue(value)
        }), ref);
        let interactions = (0, $fMEGB$reactariautils.mergeProps)(pressProps, focusableProps);
        let domProps = (0, $fMEGB$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        let tabIndex = -1;
        if (state.selectedValue != null) {
          if (state.selectedValue === value)
            tabIndex = 0;
        } else if (state.lastFocusedValue === value || state.lastFocusedValue == null)
          tabIndex = 0;
        if (isDisabled)
          tabIndex = void 0;
        (0, $fMEGB$reactariautils.useFormReset)(ref, state.selectedValue, state.setSelectedValue);
        return {
          inputProps: (0, $fMEGB$reactariautils.mergeProps)(domProps, __spreadProps(__spreadValues({}, interactions), {
            type: "radio",
            name: (0, $eeb149278aae5c67$export$3b7b268d09480394).get(state),
            tabIndex,
            disabled: isDisabled,
            checked,
            value,
            onChange,
            "aria-describedby": [
              props["aria-describedby"],
              state.isInvalid ? (0, $eeb149278aae5c67$export$61c8d3f0151e21b2).get(state) : null,
              (0, $eeb149278aae5c67$export$8e8b214e06dd397d).get(state)
            ].filter(Boolean).join(" ") || void 0
          })),
          isDisabled,
          isSelected: checked,
          isPressed
        };
      }
      function $dfcade00a56a6317$export$62b9571f283ff5c2(props, state) {
        let { name, isReadOnly, isRequired, isDisabled, orientation = "vertical" } = props;
        let { direction } = (0, $fMEGB$reactariai18n.useLocale)();
        let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $fMEGB$reactarialabel.useField)(__spreadProps(__spreadValues({}, props), {
          // Radio group is not an HTML input element so it
          // shouldn't be labeled by a <label> element.
          labelElementType: "span"
        }));
        (0, $eeb149278aae5c67$export$8e8b214e06dd397d).set(state, descriptionProps.id);
        (0, $eeb149278aae5c67$export$61c8d3f0151e21b2).set(state, errorMessageProps.id);
        let domProps = (0, $fMEGB$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        let { focusWithinProps } = (0, $fMEGB$reactariainteractions.useFocusWithin)({
          onBlurWithin() {
            if (!state.selectedValue)
              state.setLastFocusedValue(null);
          }
        });
        let onKeyDown = (e) => {
          let nextDir;
          switch (e.key) {
            case "ArrowRight":
              if (direction === "rtl" && orientation !== "vertical")
                nextDir = "prev";
              else
                nextDir = "next";
              break;
            case "ArrowLeft":
              if (direction === "rtl" && orientation !== "vertical")
                nextDir = "next";
              else
                nextDir = "prev";
              break;
            case "ArrowDown":
              nextDir = "next";
              break;
            case "ArrowUp":
              nextDir = "prev";
              break;
            default:
              return;
          }
          e.preventDefault();
          let walker = (0, $fMEGB$reactariafocus.getFocusableTreeWalker)(e.currentTarget, {
            from: e.target
          });
          let nextElem;
          if (nextDir === "next") {
            nextElem = walker.nextNode();
            if (!nextElem) {
              walker.currentNode = e.currentTarget;
              nextElem = walker.firstChild();
            }
          } else {
            nextElem = walker.previousNode();
            if (!nextElem) {
              walker.currentNode = e.currentTarget;
              nextElem = walker.lastChild();
            }
          }
          if (nextElem) {
            nextElem.focus();
            state.setSelectedValue(nextElem.value);
          }
        };
        let groupName = (0, $fMEGB$reactariautils.useId)(name);
        (0, $eeb149278aae5c67$export$3b7b268d09480394).set(state, groupName);
        return {
          radioGroupProps: (0, $fMEGB$reactariautils.mergeProps)(domProps, __spreadValues(__spreadValues({
            // https://www.w3.org/TR/wai-aria-1.2/#radiogroup
            role: "radiogroup",
            onKeyDown,
            "aria-invalid": state.isInvalid || void 0,
            "aria-errormessage": props["aria-errormessage"],
            "aria-readonly": isReadOnly || void 0,
            "aria-required": isRequired || void 0,
            "aria-disabled": isDisabled || void 0,
            "aria-orientation": orientation
          }, fieldProps), focusWithinProps)),
          labelProps,
          descriptionProps,
          errorMessageProps
        };
      }
    }
  });

  // node_modules/@react-stately/radio/dist/main.js
  var require_main26 = __commonJS({
    "node_modules/@react-stately/radio/dist/main.js"(exports, module) {
      var $6fRYN$reactstatelyutils = require_main6();
      var $6fRYN$react = require_react();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useRadioGroupState", () => $307db30b5687e2e8$export$bca9d026f8e704eb);
      var $307db30b5687e2e8$var$instance = Math.round(Math.random() * 1e10);
      var $307db30b5687e2e8$var$i = 0;
      function $307db30b5687e2e8$export$bca9d026f8e704eb(props) {
        let name = (0, $6fRYN$react.useMemo)(() => props.name || `radio-group-${$307db30b5687e2e8$var$instance}-${++$307db30b5687e2e8$var$i}`, [
          props.name
        ]);
        let [selectedValue, setSelected] = (0, $6fRYN$reactstatelyutils.useControlledState)(props.value, props.defaultValue, props.onChange);
        let [lastFocusedValue, setLastFocusedValue] = (0, $6fRYN$react.useState)(null);
        let setSelectedValue = (value) => {
          if (!props.isReadOnly && !props.isDisabled)
            setSelected(value);
        };
        return {
          name,
          selectedValue,
          setSelectedValue,
          lastFocusedValue,
          setLastFocusedValue,
          isDisabled: props.isDisabled || false,
          isReadOnly: props.isReadOnly || false,
          isRequired: props.isRequired || false,
          validationState: props.validationState || null,
          isInvalid: props.isInvalid || props.validationState === "invalid"
        };
      }
    }
  });

  // node_modules/@nextui-org/radio/dist/index.js
  var require_dist33 = __commonJS({
    "node_modules/@nextui-org/radio/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Radio: () => radio_default,
        RadioGroup: () => radio_group_default,
        RadioGroupProvider: () => RadioGroupProvider,
        useRadio: () => useRadio,
        useRadioGroup: () => useRadioGroup,
        useRadioGroupContext: () => useRadioGroupContext
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system = require_dist4();
      var import_visually_hidden = require_main13();
      var import_react3 = require_react();
      var import_react22 = require_react();
      var import_focus = require_main12();
      var import_interactions = require_main11();
      var import_theme = require_dist5();
      var import_radio = require_main25();
      var import_shared_utils = require_dist9();
      var import_react_utils2 = require_dist10();
      var import_utils = require_main7();
      var import_react_utils = require_dist10();
      var [RadioGroupProvider, useRadioGroupContext] = (0, import_react_utils.createContext)({
        name: "RadioGroupContext",
        strict: false
      });
      function useRadio(props) {
        var _a, _b, _c, _d;
        const groupContext = useRadioGroupContext();
        const _a2 = props, {
          as,
          ref,
          classNames,
          id,
          value,
          children,
          description,
          size = (_a = groupContext == null ? void 0 : groupContext.size) != null ? _a : "md",
          color = (_b = groupContext == null ? void 0 : groupContext.color) != null ? _b : "primary",
          isDisabled: isDisabledProp = (_c = groupContext == null ? void 0 : groupContext.isDisabled) != null ? _c : false,
          disableAnimation = (_d = groupContext == null ? void 0 : groupContext.disableAnimation) != null ? _d : false,
          onChange = groupContext == null ? void 0 : groupContext.onChange,
          autoFocus = false,
          className
        } = _a2, otherProps = __objRest(_a2, [
          "as",
          "ref",
          "classNames",
          "id",
          "value",
          "children",
          "description",
          "size",
          "color",
          "isDisabled",
          "disableAnimation",
          "onChange",
          "autoFocus",
          "className"
        ]);
        if (groupContext && import_shared_utils.__DEV__) {
          if ("checked" in otherProps) {
            (0, import_shared_utils.warn)('Remove props "checked" if in the Radio.Group.', "Radio");
          }
          if (value === void 0) {
            (0, import_shared_utils.warn)('Props "value" must be defined if in the Radio.Group.', "Radio");
          }
        }
        const Component = as || "label";
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const inputRef = (0, import_react22.useRef)(null);
        const labelId = (0, import_react3.useId)();
        const isRequired = (0, import_react22.useMemo)(() => {
          var _a22;
          return (_a22 = groupContext.isRequired) != null ? _a22 : false;
        }, [groupContext.isRequired]);
        const isInvalid = groupContext.isInvalid;
        const ariaRadioProps = (0, import_react22.useMemo)(() => {
          const ariaLabel = otherProps["aria-label"] || typeof children === "string" ? children : void 0;
          const ariaDescribedBy = otherProps["aria-describedby"] || typeof description === "string" ? description : void 0;
          return {
            id,
            isRequired,
            isDisabled: isDisabledProp,
            "aria-label": ariaLabel,
            "aria-labelledby": otherProps["aria-labelledby"] || labelId,
            "aria-describedby": ariaDescribedBy
          };
        }, [labelId, id, isDisabledProp, isRequired]);
        const {
          inputProps,
          isDisabled,
          isSelected,
          isPressed: isPressedKeyboard
        } = (0, import_radio.useRadio)(
          __spreadValues(__spreadValues({
            value,
            children
          }, groupContext), ariaRadioProps),
          groupContext.groupState,
          inputRef
        );
        const { focusProps, isFocused, isFocusVisible } = (0, import_focus.useFocusRing)({
          autoFocus
        });
        const interactionDisabled = isDisabled || inputProps.readOnly;
        const [isPressed, setPressed] = (0, import_react3.useState)(false);
        const { pressProps } = (0, import_interactions.usePress)({
          isDisabled: interactionDisabled,
          onPressStart(e) {
            if (e.pointerType !== "keyboard") {
              setPressed(true);
            }
          },
          onPressEnd(e) {
            if (e.pointerType !== "keyboard") {
              setPressed(false);
            }
          }
        });
        const { hoverProps, isHovered } = (0, import_interactions.useHover)({
          isDisabled: interactionDisabled
        });
        const pressed = interactionDisabled ? false : isPressed || isPressedKeyboard;
        const slots = (0, import_react22.useMemo)(
          () => (0, import_theme.radio)({
            color,
            size,
            isInvalid,
            isDisabled,
            disableAnimation
          }),
          [color, size, isDisabled, isInvalid, disableAnimation]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getBaseProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadValues(__spreadProps(__spreadValues({}, props2), {
              ref: domRef,
              className: slots.base({ class: baseStyles }),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
              "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
              "data-selected": (0, import_shared_utils.dataAttr)(isSelected),
              "data-invalid": (0, import_shared_utils.dataAttr)(isInvalid),
              "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
              "data-pressed": (0, import_shared_utils.dataAttr)(pressed),
              "data-hover-unselected": (0, import_shared_utils.dataAttr)(isHovered && !isSelected),
              "data-readonly": (0, import_shared_utils.dataAttr)(inputProps.readOnly),
              "aria-required": (0, import_shared_utils.dataAttr)(isRequired)
            }), (0, import_utils.mergeProps)(hoverProps, pressProps, otherProps));
          },
          [
            slots,
            baseStyles,
            domRef,
            isDisabled,
            isFocused,
            isFocusVisible,
            isSelected,
            isInvalid,
            isHovered,
            pressed,
            inputProps.readOnly,
            isRequired,
            otherProps
          ]
        );
        const getWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              "aria-hidden": true,
              className: (0, import_shared_utils.clsx)(slots.wrapper({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.wrapper, props2.className) }))
            });
          },
          [slots, classNames == null ? void 0 : classNames.wrapper]
        );
        const getInputProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadProps(__spreadValues({}, props2), {
              ref: inputRef,
              required: isRequired
            }), (0, import_utils.mergeProps)(inputProps, focusProps)), {
              onChange: (0, import_utils.chain)(inputProps.onChange, onChange)
            });
          },
          [inputProps, focusProps, isRequired, onChange]
        );
        const getLabelProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadProps(__spreadValues({}, props2), {
            id: labelId,
            className: slots.label({ class: classNames == null ? void 0 : classNames.label })
          }),
          [slots, classNames == null ? void 0 : classNames.label, isDisabled, isSelected, isInvalid]
        );
        const getLabelWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadProps(__spreadValues({}, props2), {
            className: slots.labelWrapper({ class: classNames == null ? void 0 : classNames.labelWrapper })
          }),
          [slots, classNames == null ? void 0 : classNames.labelWrapper]
        );
        const getControlProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadProps(__spreadValues({}, props2), {
            className: slots.control({ class: classNames == null ? void 0 : classNames.control })
          }),
          [slots, classNames == null ? void 0 : classNames.control]
        );
        return {
          Component,
          children,
          slots,
          classNames,
          description,
          isSelected,
          isDisabled,
          isInvalid,
          isFocusVisible,
          getBaseProps,
          getWrapperProps,
          getInputProps,
          getLabelProps,
          getLabelWrapperProps,
          getControlProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Radio = (0, import_system.forwardRef)((props, ref) => {
        const {
          Component,
          children,
          slots,
          classNames,
          description,
          getBaseProps,
          getWrapperProps,
          getInputProps,
          getLabelProps,
          getLabelWrapperProps,
          getControlProps
        } = useRadio(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_visually_hidden.VisuallyHidden, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", __spreadValues({}, getInputProps())) }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getWrapperProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadValues({}, getControlProps())) })),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, getLabelWrapperProps()), { children: [
            children && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children })),
            description && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.description({ class: classNames == null ? void 0 : classNames.description }), children: description })
          ] }))
        ] }));
      });
      Radio.displayName = "NextUI.Radio";
      var radio_default = Radio;
      var import_system2 = require_dist4();
      var import_theme2 = require_dist5();
      var import_react32 = require_react();
      var import_radio2 = require_main26();
      var import_radio3 = require_main25();
      var import_react_utils3 = require_dist10();
      var import_shared_utils2 = require_dist9();
      var import_utils2 = require_main7();
      function useRadioGroup(props) {
        const _a = props, {
          as,
          ref,
          classNames,
          children,
          label,
          value,
          name,
          size = "md",
          color = "primary",
          isDisabled = false,
          disableAnimation = false,
          orientation = "vertical",
          isRequired = false,
          validationState,
          isInvalid = validationState === "invalid",
          isReadOnly,
          errorMessage,
          description,
          className,
          onChange,
          onValueChange
        } = _a, otherProps = __objRest(_a, [
          "as",
          "ref",
          "classNames",
          "children",
          "label",
          "value",
          "name",
          "size",
          "color",
          "isDisabled",
          "disableAnimation",
          "orientation",
          "isRequired",
          "validationState",
          "isInvalid",
          "isReadOnly",
          "errorMessage",
          "description",
          "className",
          "onChange",
          "onValueChange"
        ]);
        const Component = as || "div";
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const otherPropsWithOrientation = (0, import_react32.useMemo)(() => {
          return __spreadProps(__spreadValues({}, otherProps), {
            value,
            name,
            "aria-label": (0, import_shared_utils2.safeAriaLabel)(otherProps["aria-label"], label),
            isRequired,
            isReadOnly,
            isInvalid,
            orientation,
            onChange: onValueChange
          });
        }, [
          otherProps,
          value,
          name,
          label,
          isRequired,
          isReadOnly,
          isInvalid,
          orientation,
          onValueChange
        ]);
        const groupState = (0, import_radio2.useRadioGroupState)(otherPropsWithOrientation);
        const {
          labelProps,
          radioGroupProps: groupProps,
          errorMessageProps,
          descriptionProps
        } = (0, import_radio3.useRadioGroup)(otherPropsWithOrientation, groupState);
        const context = (0, import_react32.useMemo)(
          () => ({
            size,
            color,
            groupState,
            isRequired,
            isInvalid,
            isDisabled,
            disableAnimation,
            onChange
          }),
          [
            size,
            color,
            isRequired,
            isDisabled,
            isInvalid,
            onChange,
            disableAnimation,
            groupState.name,
            groupState == null ? void 0 : groupState.isDisabled,
            groupState == null ? void 0 : groupState.isReadOnly,
            groupState == null ? void 0 : groupState.isRequired,
            groupState == null ? void 0 : groupState.selectedValue,
            groupState == null ? void 0 : groupState.lastFocusedValue
          ]
        );
        const slots = (0, import_react32.useMemo)(
          () => (0, import_theme2.radioGroup)({ isRequired, isInvalid, disableAnimation }),
          [isInvalid, isRequired, disableAnimation]
        );
        const baseStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getGroupProps = (0, import_react32.useCallback)(() => {
          return __spreadValues({
            ref: domRef,
            className: slots.base({ class: baseStyles })
          }, (0, import_utils2.mergeProps)(groupProps, otherProps));
        }, [domRef, slots, baseStyles, groupProps, otherProps]);
        const getLabelProps = (0, import_react32.useCallback)(() => {
          return __spreadValues({
            className: slots.label({ class: classNames == null ? void 0 : classNames.label })
          }, labelProps);
        }, [slots, classNames == null ? void 0 : classNames.label, labelProps, classNames == null ? void 0 : classNames.label]);
        const getWrapperProps = (0, import_react32.useCallback)(() => {
          return {
            className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }),
            role: "presentation",
            "data-orientation": orientation
          };
        }, [slots, classNames == null ? void 0 : classNames.wrapper, orientation, slots.wrapper]);
        const getDescriptionProps = (0, import_react32.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({}, props2), descriptionProps), {
              className: slots.description({ class: (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.description, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, classNames == null ? void 0 : classNames.description, descriptionProps, slots.description]
        );
        const getErrorMessageProps = (0, import_react32.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({}, props2), errorMessageProps), {
              className: slots.errorMessage({ class: (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.errorMessage, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, classNames == null ? void 0 : classNames.errorMessage, errorMessageProps]
        );
        return {
          Component,
          children,
          label,
          context,
          errorMessage,
          description,
          getGroupProps,
          getLabelProps,
          getWrapperProps,
          getDescriptionProps,
          getErrorMessageProps
        };
      }
      var import_jsx_runtime2 = require_jsx_runtime();
      var RadioGroup = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          children,
          label,
          context,
          description,
          errorMessage,
          getGroupProps,
          getLabelProps,
          getWrapperProps,
          getDescriptionProps,
          getErrorMessageProps
        } = useRadioGroup(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, getGroupProps()), { children: [
          label && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children: label })),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getWrapperProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(RadioGroupProvider, { value: context, children }) })),
          errorMessage ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getErrorMessageProps()), { children: errorMessage })) : description ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getDescriptionProps()), { children: description })) : null
        ] }));
      });
      RadioGroup.displayName = "NextUI.RadioGroup";
      var radio_group_default = RadioGroup;
    }
  });

  // node_modules/@nextui-org/use-clipboard/dist/index.js
  var require_dist34 = __commonJS({
    "node_modules/@nextui-org/use-clipboard/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useClipboard: () => useClipboard
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      function useClipboard({ timeout = 2e3 } = {}) {
        const [error, setError] = (0, import_react3.useState)(null);
        const [copied, setCopied] = (0, import_react3.useState)(false);
        const [copyTimeout, setCopyTimeout] = (0, import_react3.useState)(null);
        const onClearTimeout = () => {
          if (copyTimeout) {
            clearTimeout(copyTimeout);
          }
        };
        const handleCopyResult = (value) => {
          onClearTimeout();
          setCopyTimeout(setTimeout(() => setCopied(false), timeout));
          setCopied(value);
        };
        const copy = (valueToCopy) => {
          if ("clipboard" in navigator) {
            navigator.clipboard.writeText(valueToCopy).then(() => handleCopyResult(true)).catch((err) => setError(err));
          } else {
            setError(new Error("useClipboard: navigator.clipboard is not supported"));
          }
        };
        const reset = () => {
          setCopied(false);
          setError(null);
          onClearTimeout();
        };
        return { copy, reset, error, copied };
      }
    }
  });

  // node_modules/@react-stately/overlays/dist/main.js
  var require_main27 = __commonJS({
    "node_modules/@react-stately/overlays/dist/main.js"(exports, module) {
      var $1rDpM$react = require_react();
      var $1rDpM$reactstatelyutils = require_main6();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useOverlayTriggerState", () => $5076d97fb6884665$export$61c6a8c84e605fb6);
      function $5076d97fb6884665$export$61c6a8c84e605fb6(props) {
        let [isOpen, setOpen] = (0, $1rDpM$reactstatelyutils.useControlledState)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
        const open = (0, $1rDpM$react.useCallback)(() => {
          setOpen(true);
        }, [
          setOpen
        ]);
        const close = (0, $1rDpM$react.useCallback)(() => {
          setOpen(false);
        }, [
          setOpen
        ]);
        const toggle = (0, $1rDpM$react.useCallback)(() => {
          setOpen(!isOpen);
        }, [
          setOpen,
          isOpen
        ]);
        return {
          isOpen,
          setOpen,
          open,
          close,
          toggle
        };
      }
    }
  });

  // node_modules/@react-stately/tooltip/dist/main.js
  var require_main28 = __commonJS({
    "node_modules/@react-stately/tooltip/dist/main.js"(exports, module) {
      var $8aPAr$react = require_react();
      var $8aPAr$reactstatelyoverlays = require_main27();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useTooltipTriggerState", () => $3391baedd777a697$export$4d40659c25ecb50b);
      var $3391baedd777a697$var$TOOLTIP_DELAY = 1500;
      var $3391baedd777a697$var$TOOLTIP_COOLDOWN = 500;
      var $3391baedd777a697$var$tooltips = {};
      var $3391baedd777a697$var$tooltipId = 0;
      var $3391baedd777a697$var$globalWarmedUp = false;
      var $3391baedd777a697$var$globalWarmUpTimeout = null;
      var $3391baedd777a697$var$globalCooldownTimeout = null;
      function $3391baedd777a697$export$4d40659c25ecb50b(props = {}) {
        let { delay = $3391baedd777a697$var$TOOLTIP_DELAY, closeDelay = $3391baedd777a697$var$TOOLTIP_COOLDOWN } = props;
        let { isOpen, open, close } = (0, $8aPAr$reactstatelyoverlays.useOverlayTriggerState)(props);
        let id = (0, $8aPAr$react.useMemo)(() => `${++$3391baedd777a697$var$tooltipId}`, []);
        let closeTimeout = (0, $8aPAr$react.useRef)();
        let ensureTooltipEntry = () => {
          $3391baedd777a697$var$tooltips[id] = hideTooltip;
        };
        let closeOpenTooltips = () => {
          for (let hideTooltipId in $3391baedd777a697$var$tooltips)
            if (hideTooltipId !== id) {
              $3391baedd777a697$var$tooltips[hideTooltipId](true);
              delete $3391baedd777a697$var$tooltips[hideTooltipId];
            }
        };
        let showTooltip = () => {
          clearTimeout(closeTimeout.current);
          closeTimeout.current = null;
          closeOpenTooltips();
          ensureTooltipEntry();
          $3391baedd777a697$var$globalWarmedUp = true;
          open();
          if ($3391baedd777a697$var$globalWarmUpTimeout) {
            clearTimeout($3391baedd777a697$var$globalWarmUpTimeout);
            $3391baedd777a697$var$globalWarmUpTimeout = null;
          }
          if ($3391baedd777a697$var$globalCooldownTimeout) {
            clearTimeout($3391baedd777a697$var$globalCooldownTimeout);
            $3391baedd777a697$var$globalCooldownTimeout = null;
          }
        };
        let hideTooltip = (immediate) => {
          if (immediate || closeDelay <= 0) {
            clearTimeout(closeTimeout.current);
            closeTimeout.current = null;
            close();
          } else if (!closeTimeout.current)
            closeTimeout.current = setTimeout(() => {
              closeTimeout.current = null;
              close();
            }, closeDelay);
          if ($3391baedd777a697$var$globalWarmUpTimeout) {
            clearTimeout($3391baedd777a697$var$globalWarmUpTimeout);
            $3391baedd777a697$var$globalWarmUpTimeout = null;
          }
          if ($3391baedd777a697$var$globalWarmedUp) {
            if ($3391baedd777a697$var$globalCooldownTimeout)
              clearTimeout($3391baedd777a697$var$globalCooldownTimeout);
            $3391baedd777a697$var$globalCooldownTimeout = setTimeout(() => {
              delete $3391baedd777a697$var$tooltips[id];
              $3391baedd777a697$var$globalCooldownTimeout = null;
              $3391baedd777a697$var$globalWarmedUp = false;
            }, Math.max($3391baedd777a697$var$TOOLTIP_COOLDOWN, closeDelay));
          }
        };
        let warmupTooltip = () => {
          closeOpenTooltips();
          ensureTooltipEntry();
          if (!isOpen && !$3391baedd777a697$var$globalWarmUpTimeout && !$3391baedd777a697$var$globalWarmedUp)
            $3391baedd777a697$var$globalWarmUpTimeout = setTimeout(() => {
              $3391baedd777a697$var$globalWarmUpTimeout = null;
              $3391baedd777a697$var$globalWarmedUp = true;
              showTooltip();
            }, delay);
          else if (!isOpen)
            showTooltip();
        };
        (0, $8aPAr$react.useEffect)(() => {
          return () => {
            clearTimeout(closeTimeout.current);
            let tooltip = $3391baedd777a697$var$tooltips[id];
            if (tooltip)
              delete $3391baedd777a697$var$tooltips[id];
          };
        }, [
          id
        ]);
        return {
          isOpen,
          open: (immediate) => {
            if (!immediate && delay > 0 && !closeTimeout.current)
              warmupTooltip();
            else
              showTooltip();
          },
          close: hideTooltip
        };
      }
    }
  });

  // node_modules/@react-aria/tooltip/dist/main.js
  var require_main29 = __commonJS({
    "node_modules/@react-aria/tooltip/dist/main.js"(exports, module) {
      var $aGFp5$reactariautils = require_main7();
      var $aGFp5$reactariainteractions = require_main11();
      var $aGFp5$react = require_react();
      var $aGFp5$reactariafocus = require_main12();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useTooltip", () => $199fa2aaa84f20b7$export$1c4b08e0eca38426);
      $parcel$export(module.exports, "useTooltipTrigger", () => $f017bbc46d58d42a$export$a6da6c504e4bba8b);
      function $199fa2aaa84f20b7$export$1c4b08e0eca38426(props, state) {
        let domProps = (0, $aGFp5$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        let { hoverProps } = (0, $aGFp5$reactariainteractions.useHover)({
          onHoverStart: () => {
            return state === null || state === void 0 ? void 0 : state.open(true);
          },
          onHoverEnd: () => {
            return state === null || state === void 0 ? void 0 : state.close();
          }
        });
        return {
          tooltipProps: (0, $aGFp5$reactariautils.mergeProps)(domProps, hoverProps, {
            role: "tooltip"
          })
        };
      }
      function $f017bbc46d58d42a$export$a6da6c504e4bba8b(props, state, ref) {
        let { isDisabled, trigger } = props;
        let tooltipId = (0, $aGFp5$reactariautils.useId)();
        let isHovered = (0, $aGFp5$react.useRef)(false);
        let isFocused = (0, $aGFp5$react.useRef)(false);
        let handleShow = () => {
          if (isHovered.current || isFocused.current)
            state.open(isFocused.current);
        };
        let handleHide = (immediate) => {
          if (!isHovered.current && !isFocused.current)
            state.close(immediate);
        };
        (0, $aGFp5$react.useEffect)(() => {
          let onKeyDown = (e) => {
            if (ref && ref.current) {
              if (e.key === "Escape") {
                e.stopPropagation();
                state.close(true);
              }
            }
          };
          if (state.isOpen) {
            document.addEventListener("keydown", onKeyDown, true);
            return () => {
              document.removeEventListener("keydown", onKeyDown, true);
            };
          }
        }, [
          ref,
          state
        ]);
        let onHoverStart = () => {
          if (trigger === "focus")
            return;
          if ((0, $aGFp5$reactariainteractions.getInteractionModality)() === "pointer")
            isHovered.current = true;
          else
            isHovered.current = false;
          handleShow();
        };
        let onHoverEnd = () => {
          if (trigger === "focus")
            return;
          isFocused.current = false;
          isHovered.current = false;
          handleHide();
        };
        let onPressStart = () => {
          isFocused.current = false;
          isHovered.current = false;
          handleHide(true);
        };
        let onFocus = () => {
          let isVisible = (0, $aGFp5$reactariainteractions.isFocusVisible)();
          if (isVisible) {
            isFocused.current = true;
            handleShow();
          }
        };
        let onBlur = () => {
          isFocused.current = false;
          isHovered.current = false;
          handleHide(true);
        };
        let { hoverProps } = (0, $aGFp5$reactariainteractions.useHover)({
          isDisabled,
          onHoverStart,
          onHoverEnd
        });
        let { pressProps } = (0, $aGFp5$reactariainteractions.usePress)({
          onPressStart
        });
        let { focusableProps } = (0, $aGFp5$reactariafocus.useFocusable)({
          isDisabled,
          onFocus,
          onBlur
        }, ref);
        return {
          triggerProps: __spreadValues({
            "aria-describedby": state.isOpen ? tooltipId : void 0
          }, (0, $aGFp5$reactariautils.mergeProps)(focusableProps, hoverProps, pressProps)),
          tooltipProps: {
            id: tooltipId
          }
        };
      }
    }
  });

  // node_modules/@nextui-org/tooltip/dist/index.js
  var require_dist35 = __commonJS({
    "node_modules/@nextui-org/tooltip/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Tooltip: () => tooltip_default,
        useTooltip: () => useTooltip
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var import_system2 = require_dist4();
      var import_overlays2 = require_main14();
      var import_framer_motion = require_cjs2();
      var import_framer_transitions = require_dist13();
      var import_shared_utils2 = require_dist9();
      var import_react4 = require_react();
      var import_aria_utils2 = require_dist6();
      var import_react5 = require_react();
      var import_tooltip = require_main28();
      var import_utils = require_main7();
      var import_tooltip2 = require_main29();
      var import_overlays = require_main14();
      var import_system = require_dist4();
      var import_theme = require_dist5();
      var import_shared_utils = require_dist9();
      var import_react_utils = require_dist10();
      var import_react_utils2 = require_dist10();
      var import_react22 = require_react();
      var import_aria_utils = require_dist6();
      function useTooltip(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.popover.variantKeys);
        const _a = props, {
          ref,
          as,
          isOpen: isOpenProp,
          content,
          children,
          defaultOpen,
          onOpenChange,
          isDisabled,
          trigger: triggerAction,
          shouldFlip = true,
          containerPadding = 12,
          placement: placementProp = "top",
          delay = 0,
          closeDelay = 500,
          showArrow = false,
          offset = 7,
          crossOffset = 0,
          isDismissable,
          shouldCloseOnBlur = true,
          portalContainer,
          isKeyboardDismissDisabled = false,
          shouldCloseOnInteractOutside,
          className,
          onClose,
          motionProps,
          classNames
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "isOpen",
          "content",
          "children",
          "defaultOpen",
          "onOpenChange",
          "isDisabled",
          "trigger",
          "shouldFlip",
          "containerPadding",
          "placement",
          "delay",
          "closeDelay",
          "showArrow",
          "offset",
          "crossOffset",
          "isDismissable",
          "shouldCloseOnBlur",
          "portalContainer",
          "isKeyboardDismissDisabled",
          "shouldCloseOnInteractOutside",
          "className",
          "onClose",
          "motionProps",
          "classNames"
        ]);
        const Component = as || "div";
        const state = (0, import_tooltip.useTooltipTriggerState)({
          delay,
          closeDelay,
          isDisabled,
          defaultOpen,
          isOpen: isOpenProp,
          onOpenChange: (isOpen2) => {
            onOpenChange == null ? void 0 : onOpenChange(isOpen2);
            if (!isOpen2) {
              onClose == null ? void 0 : onClose();
            }
          }
        });
        const triggerRef = (0, import_react22.useRef)(null);
        const overlayRef = (0, import_react22.useRef)(null);
        const tooltipId = (0, import_react5.useId)();
        const isOpen = state.isOpen && !isDisabled;
        (0, import_react5.useImperativeHandle)(
          ref,
          () => (0, import_react_utils2.createDOMRef)(overlayRef)
        );
        const { triggerProps, tooltipProps: triggerTooltipProps } = (0, import_tooltip2.useTooltipTrigger)(
          {
            isDisabled,
            trigger: triggerAction
          },
          state,
          triggerRef
        );
        const { tooltipProps } = (0, import_tooltip2.useTooltip)(
          __spreadValues({
            isOpen
          }, (0, import_utils.mergeProps)(props, triggerTooltipProps)),
          state
        );
        const {
          overlayProps: positionProps,
          arrowProps,
          placement
        } = (0, import_overlays.useOverlayPosition)({
          isOpen,
          targetRef: triggerRef,
          placement: (0, import_aria_utils.toReactAriaPlacement)(placementProp),
          overlayRef,
          offset: showArrow ? offset + 3 : offset,
          crossOffset,
          shouldFlip,
          containerPadding
        });
        const { overlayProps } = (0, import_overlays.useOverlay)(
          {
            isOpen,
            onClose: state.close,
            isDismissable,
            shouldCloseOnBlur,
            isKeyboardDismissDisabled,
            shouldCloseOnInteractOutside
          },
          overlayRef
        );
        const slots = (0, import_react22.useMemo)(
          () => {
            var _a2, _b, _c;
            return (0, import_theme.popover)(__spreadProps(__spreadValues({}, variantProps), {
              radius: (_a2 = originalProps == null ? void 0 : originalProps.radius) != null ? _a2 : "md",
              size: (_b = originalProps == null ? void 0 : originalProps.size) != null ? _b : "md",
              shadow: (_c = originalProps == null ? void 0 : originalProps.shadow) != null ? _c : "sm"
            }));
          },
          [
            ...Object.values(variantProps),
            originalProps == null ? void 0 : originalProps.radius,
            originalProps == null ? void 0 : originalProps.size,
            originalProps == null ? void 0 : originalProps.shadow
          ]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getTriggerProps = (0, import_react22.useCallback)(
          (props2 = {}, _ref = null) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(triggerProps, props2)), {
            ref: (0, import_react_utils.mergeRefs)(_ref, triggerRef),
            "aria-describedby": isOpen ? tooltipId : void 0
          }),
          [triggerProps, isOpen, tooltipId, state]
        );
        const getTooltipProps = (0, import_react22.useCallback)(
          () => __spreadProps(__spreadValues({
            ref: overlayRef,
            "data-open": (0, import_shared_utils.dataAttr)(isOpen),
            "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
            "data-placement": (0, import_aria_utils.getArrowPlacement)(placement, placementProp),
            className: slots.base({ class: baseStyles })
          }, (0, import_utils.mergeProps)(tooltipProps, overlayProps, otherProps)), {
            style: (0, import_utils.mergeProps)(positionProps.style, otherProps.style, props.style),
            id: tooltipId
          }),
          [
            baseStyles,
            overlayProps,
            otherProps,
            overlayRef,
            positionProps,
            slots,
            tooltipId,
            tooltipProps
          ]
        );
        const getArrowProps = (0, import_react22.useCallback)(
          () => __spreadValues({
            className: slots.arrow({ class: classNames == null ? void 0 : classNames.arrow }),
            "data-placement": (0, import_aria_utils.getArrowPlacement)(placement, placementProp)
          }, arrowProps),
          [arrowProps, placement, placementProp, slots, classNames]
        );
        return {
          Component,
          content,
          children,
          isOpen,
          triggerRef,
          showArrow,
          portalContainer,
          placement: placementProp,
          disableAnimation: originalProps == null ? void 0 : originalProps.disableAnimation,
          isDisabled,
          motionProps,
          getTriggerProps,
          getTooltipProps,
          getArrowProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Tooltip = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          children,
          content,
          isOpen,
          portalContainer,
          placement,
          disableAnimation,
          motionProps,
          showArrow,
          getTriggerProps,
          getTooltipProps,
          getArrowProps
        } = useTooltip(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        let trigger;
        const _a = getTooltipProps(), { className } = _a, otherTooltipProps = __objRest(_a, ["className"]);
        try {
          const child = import_react4.Children.only(children);
          trigger = (0, import_react4.cloneElement)(child, getTriggerProps(child.props, child.ref));
        } catch (error) {
          trigger = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {});
          (0, import_shared_utils2.warn)("Tooltip must have only one child node. Please, check your code.");
        }
        const arrowContent = (0, import_react3.useMemo)(() => {
          if (!showArrow)
            return null;
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadValues({}, getArrowProps()));
        }, [showArrow, getArrowProps]);
        const animatedContent = (0, import_react3.useMemo)(() => {
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", __spreadProps(__spreadValues({}, otherTooltipProps), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
            import_framer_motion.motion.div,
            __spreadProps(__spreadValues({
              animate: "enter",
              exit: "exit",
              initial: "exit",
              style: __spreadValues({}, (0, import_aria_utils2.getTransformOrigins)(placement)),
              variants: import_framer_transitions.TRANSITION_VARIANTS.scaleSpring
            }, motionProps), {
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, { className, children: content }),
                arrowContent
              ]
            })
          ) }));
        }, [otherTooltipProps, className, placement, motionProps, Component, content, arrowContent]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
          trigger,
          disableAnimation && isOpen ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_overlays2.OverlayContainer, { portalContainer, children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, otherTooltipProps), { children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, { className, children: content }),
            arrowContent
          ] })) }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, { children: isOpen ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_overlays2.OverlayContainer, { portalContainer, children: animatedContent }) : null })
        ] });
      });
      Tooltip.displayName = "NextUI.Tooltip";
      var tooltip_default = Tooltip;
    }
  });

  // node_modules/@nextui-org/snippet/dist/index.js
  var require_dist36 = __commonJS({
    "node_modules/@nextui-org/snippet/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Snippet: () => snippet_default,
        useSnippet: () => useSnippet
      });
      module.exports = __toCommonJS2(src_exports);
      var import_theme = require_dist5();
      var import_system = require_dist4();
      var import_react_utils = require_dist10();
      var import_shared_utils = require_dist9();
      var import_use_clipboard = require_dist34();
      var import_focus = require_main12();
      var import_react3 = require_react();
      function useSnippet(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.snippet.variantKeys);
        const _a = props, {
          ref,
          as,
          children,
          symbol = "$",
          classNames,
          timeout,
          copyIcon,
          checkIcon,
          codeString,
          disableCopy = false,
          disableTooltip = false,
          hideCopyButton = false,
          autoFocus = false,
          hideSymbol = false,
          onCopy: onCopyProp,
          tooltipProps: userTooltipProps = {},
          copyButtonProps: userButtonProps = {},
          className
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "children",
          "symbol",
          "classNames",
          "timeout",
          "copyIcon",
          "checkIcon",
          "codeString",
          "disableCopy",
          "disableTooltip",
          "hideCopyButton",
          "autoFocus",
          "hideSymbol",
          "onCopy",
          "tooltipProps",
          "copyButtonProps",
          "className"
        ]);
        const Component = as || "div";
        const shouldFilterDOMProps = typeof Component === "string";
        const tooltipProps = __spreadValues({
          offset: 15,
          delay: 1e3,
          content: "Copy to clipboard",
          color: originalProps == null ? void 0 : originalProps.color,
          isDisabled: props.disableCopy
        }, userTooltipProps);
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const preRef = (0, import_react3.useRef)(null);
        const { copy, copied } = (0, import_use_clipboard.useClipboard)({ timeout });
        const isMultiLine = children && Array.isArray(children);
        const { isFocusVisible, isFocused, focusProps } = (0, import_focus.useFocusRing)({
          autoFocus
        });
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.snippet)(__spreadValues({}, variantProps)),
          [...Object.values(variantProps)]
        );
        const symbolBefore = (0, import_react3.useMemo)(() => {
          if (!symbol || typeof symbol !== "string")
            return symbol;
          const str = symbol.trim();
          return str ? `${str} ` : "";
        }, [symbol]);
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getSnippetProps = (0, import_react3.useCallback)(
          () => __spreadValues({
            className: slots.base({
              class: baseStyles
            })
          }, (0, import_react_utils.filterDOMProps)(otherProps, {
            enabled: shouldFilterDOMProps
          })),
          [slots, baseStyles, isMultiLine, otherProps]
        );
        const onCopy = (0, import_react3.useCallback)(() => {
          var _a2;
          if (disableCopy) {
            return;
          }
          let stringValue = "";
          if (typeof children === "string") {
            stringValue = children;
          } else if (Array.isArray(children)) {
            children.forEach((child) => {
              var _a22, _b;
              const childString = typeof child === "string" ? child : (_b = (_a22 = child == null ? void 0 : child.props) == null ? void 0 : _a22.children) == null ? void 0 : _b.toString();
              if (childString) {
                stringValue += childString + "\n";
              }
            });
          }
          const valueToCopy = codeString || stringValue || ((_a2 = preRef.current) == null ? void 0 : _a2.textContent) || "";
          copy(valueToCopy);
          onCopyProp == null ? void 0 : onCopyProp(valueToCopy);
        }, [copy, codeString, disableCopy, onCopyProp, children]);
        const copyButtonProps = __spreadValues({
          "aria-label": typeof tooltipProps.content === "string" ? tooltipProps.content : "Copy to clipboard",
          size: "sm",
          variant: "light",
          isDisabled: disableCopy,
          onPress: onCopy,
          isIconOnly: true
        }, userButtonProps);
        const getCopyButtonProps = (0, import_react3.useCallback)(
          () => __spreadProps(__spreadValues({}, copyButtonProps), {
            "data-copied": (0, import_shared_utils.dataAttr)(copied),
            className: slots.copyButton({
              class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.copyButton)
            })
          }),
          [
            slots,
            isFocusVisible,
            isFocused,
            disableCopy,
            classNames == null ? void 0 : classNames.copyButton,
            copyButtonProps,
            focusProps
          ]
        );
        return {
          Component,
          as,
          domRef,
          preRef,
          children,
          slots,
          classNames,
          copied,
          onCopy,
          copyIcon,
          checkIcon,
          symbolBefore,
          isMultiLine,
          isFocusVisible,
          hideCopyButton,
          disableCopy,
          disableTooltip,
          hideSymbol,
          tooltipProps,
          getSnippetProps,
          getCopyButtonProps
        };
      }
      var import_react22 = require_react();
      var import_system2 = require_dist4();
      var import_tooltip = require_dist35();
      var import_shared_icons = require_dist12();
      var import_button = require_dist22();
      var import_jsx_runtime = require_jsx_runtime();
      var Snippet = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          domRef,
          preRef,
          children,
          slots,
          classNames,
          copied,
          copyIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_shared_icons.CopyLinearIcon, {}),
          checkIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_shared_icons.CheckLinearIcon, {}),
          symbolBefore,
          disableCopy,
          disableTooltip,
          hideSymbol,
          hideCopyButton,
          tooltipProps,
          isMultiLine,
          onCopy,
          getSnippetProps,
          getCopyButtonProps
        } = useSnippet(__spreadProps(__spreadValues({}, props), { ref }));
        const TooltipContent = (0, import_react22.useCallback)(
          ({ children: children2 }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_tooltip.Tooltip, __spreadProps(__spreadValues({}, tooltipProps), { isDisabled: copied || tooltipProps.isDisabled, children: children2 })),
          [...Object.values(tooltipProps)]
        );
        const contents = (0, import_react22.useMemo)(() => {
          if (hideCopyButton) {
            return null;
          }
          const clonedCheckIcon = checkIcon && (0, import_react22.cloneElement)(checkIcon, { className: slots.checkIcon() });
          const clonedCopyIcon = copyIcon && (0, import_react22.cloneElement)(copyIcon, { className: slots.copyIcon() });
          const copyButton = /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_button.Button, __spreadProps(__spreadValues({}, getCopyButtonProps()), { children: [
            clonedCheckIcon,
            clonedCopyIcon
          ] }));
          if (disableTooltip) {
            return copyButton;
          }
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TooltipContent, { children: copyButton });
        }, [
          slots,
          classNames == null ? void 0 : classNames.copyButton,
          copied,
          checkIcon,
          copyIcon,
          onCopy,
          TooltipContent,
          disableCopy,
          disableTooltip,
          hideCopyButton
        ]);
        const preContent = (0, import_react22.useMemo)(() => {
          if (isMultiLine && children && Array.isArray(children)) {
            return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: slots.content({ class: classNames == null ? void 0 : classNames.content }), children: children.map((t, index3) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("pre", { className: slots.pre({ class: classNames == null ? void 0 : classNames.pre }), children: [
              !hideSymbol && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.symbol({ class: classNames == null ? void 0 : classNames.symbol }), children: symbolBefore }),
              t
            ] }, `${index3}-${t}`)) });
          }
          return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("pre", { ref: preRef, className: slots.pre({ class: classNames == null ? void 0 : classNames.pre }), children: [
            !hideSymbol && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.symbol({ class: classNames == null ? void 0 : classNames.symbol }), children: symbolBefore }),
            children
          ] });
        }, [children, hideSymbol, isMultiLine, symbolBefore, classNames == null ? void 0 : classNames.pre, slots]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({ ref: domRef }, getSnippetProps()), { children: [
          preContent,
          contents
        ] }));
      });
      Snippet.displayName = "NextUI.Snippet";
      var snippet_default = Snippet;
    }
  });

  // node_modules/@react-aria/switch/dist/main.js
  var require_main30 = __commonJS({
    "node_modules/@react-aria/switch/dist/main.js"(exports, module) {
      var $3VG2V$reactariatoggle = require_main21();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useSwitch", () => $e64bc6eb3aa7bd8d$export$d853f7095ae95f88);
      function $e64bc6eb3aa7bd8d$export$d853f7095ae95f88(props, state, ref) {
        let { inputProps, isSelected, isPressed, isDisabled, isReadOnly } = (0, $3VG2V$reactariatoggle.useToggle)(props, state, ref);
        return {
          inputProps: __spreadProps(__spreadValues({}, inputProps), {
            role: "switch",
            checked: isSelected
          }),
          isSelected,
          isPressed,
          isDisabled,
          isReadOnly
        };
      }
    }
  });

  // node_modules/@nextui-org/switch/dist/index.js
  var require_dist37 = __commonJS({
    "node_modules/@nextui-org/switch/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Switch: () => switch_default,
        useSwitch: () => useSwitch
      });
      module.exports = __toCommonJS2(src_exports);
      var import_visually_hidden = require_main13();
      var import_react3 = require_react();
      var import_system2 = require_dist4();
      var import_react4 = require_react();
      var import_system = require_dist4();
      var import_interactions = require_main11();
      var import_theme = require_dist5();
      var import_utils = require_main7();
      var import_shared_utils = require_dist9();
      var import_react_utils = require_dist10();
      var import_switch = require_main30();
      var import_react22 = require_react();
      var import_toggle = require_main20();
      var import_focus = require_main12();
      function useSwitch(originalProps = {}) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.toggle.variantKeys);
        const _a = props, {
          ref,
          as,
          name,
          value = "",
          isReadOnly: isReadOnlyProp = false,
          autoFocus = false,
          startContent,
          endContent,
          defaultSelected,
          isSelected: isSelectedProp,
          children,
          thumbIcon,
          className,
          classNames,
          onChange,
          onValueChange
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "name",
          "value",
          "isReadOnly",
          "autoFocus",
          "startContent",
          "endContent",
          "defaultSelected",
          "isSelected",
          "children",
          "thumbIcon",
          "className",
          "classNames",
          "onChange",
          "onValueChange"
        ]);
        const Component = as || "label";
        const inputRef = (0, import_react4.useRef)(null);
        const domRef = (0, import_react_utils.useFocusableRef)(ref, inputRef);
        const labelId = (0, import_react4.useId)();
        const ariaSwitchProps = (0, import_react22.useMemo)(() => {
          const ariaLabel = otherProps["aria-label"] || typeof children === "string" ? children : void 0;
          return {
            name,
            value,
            children,
            autoFocus,
            defaultSelected,
            isSelected: isSelectedProp,
            isDisabled: !!originalProps.isDisabled,
            isReadOnly: isReadOnlyProp,
            "aria-label": ariaLabel,
            "aria-labelledby": otherProps["aria-labelledby"] || labelId,
            onChange: onValueChange
          };
        }, [
          value,
          name,
          labelId,
          children,
          autoFocus,
          isReadOnlyProp,
          isSelectedProp,
          defaultSelected,
          originalProps.isDisabled,
          otherProps["aria-label"],
          otherProps["aria-labelledby"],
          onValueChange
        ]);
        const state = (0, import_toggle.useToggleState)(ariaSwitchProps);
        const {
          inputProps,
          isPressed: isPressedKeyboard,
          isReadOnly
        } = (0, import_switch.useSwitch)(ariaSwitchProps, state, inputRef);
        const { focusProps, isFocused, isFocusVisible } = (0, import_focus.useFocusRing)({ autoFocus: inputProps.autoFocus });
        const { hoverProps, isHovered } = (0, import_interactions.useHover)({
          isDisabled: inputProps.disabled
        });
        const isInteractionDisabled = ariaSwitchProps.isDisabled || isReadOnly;
        const [isPressed, setPressed] = (0, import_react4.useState)(false);
        const { pressProps } = (0, import_interactions.usePress)({
          isDisabled: isInteractionDisabled,
          onPressStart(e) {
            if (e.pointerType !== "keyboard") {
              setPressed(true);
            }
          },
          onPressEnd(e) {
            if (e.pointerType !== "keyboard") {
              setPressed(false);
            }
          }
        });
        const pressed = isInteractionDisabled ? false : isPressed || isPressedKeyboard;
        const isSelected = inputProps.checked;
        const isDisabled = inputProps.disabled;
        const slots = (0, import_react22.useMemo)(
          () => (0, import_theme.toggle)(__spreadValues({}, variantProps)),
          [...Object.values(variantProps)]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getBaseProps = (props2) => {
          return __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(hoverProps, pressProps, otherProps, props2)), {
            ref: domRef,
            className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2 == null ? void 0 : props2.className) }),
            "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
            "data-selected": (0, import_shared_utils.dataAttr)(isSelected),
            "data-readonly": (0, import_shared_utils.dataAttr)(isReadOnly),
            "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
            "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
            "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
            "data-pressed": (0, import_shared_utils.dataAttr)(pressed)
          });
        };
        const getWrapperProps = (0, import_react4.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              "aria-hidden": true,
              className: (0, import_shared_utils.clsx)(slots.wrapper({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className) }))
            });
          },
          [slots, classNames == null ? void 0 : classNames.wrapper]
        );
        const getInputProps = (props2 = {}) => {
          return __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(inputProps, focusProps, props2)), {
            ref: inputRef,
            id: inputProps.id,
            onChange: (0, import_utils.chain)(onChange, inputProps.onChange)
          });
        };
        const getThumbProps = (0, import_react4.useCallback)(
          (props2 = {}) => __spreadProps(__spreadValues({}, props2), {
            className: slots.thumb({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.thumb, props2 == null ? void 0 : props2.className) })
          }),
          [slots, classNames == null ? void 0 : classNames.thumb]
        );
        const getLabelProps = (0, import_react4.useCallback)(
          (props2 = {}) => __spreadProps(__spreadValues({}, props2), {
            id: labelId,
            className: slots.label({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.label, props2 == null ? void 0 : props2.className) })
          }),
          [slots, classNames == null ? void 0 : classNames.label, isDisabled, isSelected]
        );
        const getThumbIconProps = (0, import_react4.useCallback)(
          (props2 = {
            includeStateProps: false
          }) => (0, import_utils.mergeProps)(
            {
              width: "1em",
              height: "1em",
              className: slots.thumbIcon({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.thumbIcon) })
            },
            props2.includeStateProps ? {
              isSelected
            } : {}
          ),
          [slots, classNames == null ? void 0 : classNames.thumbIcon, isSelected]
        );
        const getStartContentProps = (0, import_react4.useCallback)(
          (props2 = {}) => __spreadProps(__spreadValues({
            width: "1em",
            height: "1em"
          }, props2), {
            className: slots.startContent({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.startContent, props2 == null ? void 0 : props2.className) })
          }),
          [slots, classNames == null ? void 0 : classNames.startContent, isSelected]
        );
        const getEndContentProps = (0, import_react4.useCallback)(
          (props2 = {}) => __spreadProps(__spreadValues({
            width: "1em",
            height: "1em"
          }, props2), {
            className: slots.endContent({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.endContent, props2 == null ? void 0 : props2.className) })
          }),
          [slots, classNames == null ? void 0 : classNames.endContent, isSelected]
        );
        return {
          Component,
          slots,
          classNames,
          domRef,
          children,
          thumbIcon,
          startContent,
          endContent,
          isHovered,
          isSelected,
          isPressed: pressed,
          isFocused,
          isFocusVisible,
          isDisabled,
          getBaseProps,
          getWrapperProps,
          getInputProps,
          getLabelProps,
          getThumbProps,
          getThumbIconProps,
          getStartContentProps,
          getEndContentProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Switch = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          children,
          startContent,
          endContent,
          thumbIcon,
          getBaseProps,
          getInputProps,
          getWrapperProps,
          getThumbProps,
          getThumbIconProps,
          getLabelProps,
          getStartContentProps,
          getEndContentProps
        } = useSwitch(__spreadProps(__spreadValues({}, props), { ref }));
        const clonedThumbIcon = typeof thumbIcon === "function" ? thumbIcon(getThumbIconProps({ includeStateProps: true })) : thumbIcon && (0, import_react3.cloneElement)(thumbIcon, getThumbIconProps());
        const clonedStartContent = startContent && (0, import_react3.cloneElement)(startContent, getStartContentProps());
        const clonedEndContent = endContent && (0, import_react3.cloneElement)(endContent, getEndContentProps());
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_visually_hidden.VisuallyHidden, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", __spreadValues({}, getInputProps())) }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("span", __spreadProps(__spreadValues({}, getWrapperProps()), { children: [
            startContent && clonedStartContent,
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getThumbProps()), { children: thumbIcon && clonedThumbIcon })),
            endContent && clonedEndContent
          ] })),
          children && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children }))
        ] }));
      });
      Switch.displayName = "NextUI.Switch";
      var switch_default = Switch;
    }
  });

  // node_modules/@nextui-org/user/dist/index.js
  var require_dist38 = __commonJS({
    "node_modules/@nextui-org/user/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        User: () => user_default,
        useUser: () => useUser
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var import_focus = require_main12();
      var import_theme = require_dist5();
      var import_shared_utils = require_dist9();
      var import_react_utils = require_dist10();
      var import_react_utils2 = require_dist10();
      var import_utils = require_main7();
      function useUser(props) {
        const _a = props, {
          as,
          ref,
          name,
          description,
          className,
          classNames,
          isFocusable = false,
          avatarProps: userAvatarProps = {}
        } = _a, otherProps = __objRest(_a, [
          "as",
          "ref",
          "name",
          "description",
          "className",
          "classNames",
          "isFocusable",
          "avatarProps"
        ]);
        const avatarProps = __spreadValues({
          isFocusable: false,
          name: typeof name === "string" ? name : void 0
        }, userAvatarProps);
        const Component = as || "div";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const { isFocusVisible, isFocused, focusProps } = (0, import_focus.useFocusRing)({});
        const canBeFocused = (0, import_react3.useMemo)(() => {
          return isFocusable || as === "button";
        }, [isFocusable, as]);
        const slots = (0, import_react3.useMemo)(() => (0, import_theme.user)(), []);
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getUserProps = (0, import_react3.useCallback)(
          () => __spreadValues({
            ref: domRef,
            tabIndex: canBeFocused ? 0 : -1,
            "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
            "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
            className: slots.base({
              class: baseStyles
            })
          }, (0, import_utils.mergeProps)(
            (0, import_react_utils.filterDOMProps)(otherProps, {
              enabled: shouldFilterDOMProps
            }),
            canBeFocused ? focusProps : {}
          )),
          [canBeFocused, slots, baseStyles, focusProps, otherProps]
        );
        return {
          Component,
          className,
          slots,
          name,
          description,
          classNames,
          baseStyles,
          avatarProps,
          getUserProps
        };
      }
      var import_system = require_dist4();
      var import_avatar = require_dist17();
      var import_jsx_runtime = require_jsx_runtime();
      var User = (0, import_system.forwardRef)((props, ref) => {
        const { Component, name, slots, classNames, description, avatarProps, getUserProps } = useUser(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({}, getUserProps()), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_avatar.Avatar, __spreadValues({}, avatarProps)),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }), children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.name({ class: classNames == null ? void 0 : classNames.name }), children: name }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.description({ class: classNames == null ? void 0 : classNames.description }), children: description })
          ] })
        ] }));
      });
      User.displayName = "NextUI.User";
      var user_default = User;
    }
  });

  // node_modules/@nextui-org/use-is-mounted/dist/index.js
  var require_dist39 = __commonJS({
    "node_modules/@nextui-org/use-is-mounted/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useIsMounted: () => useIsMounted
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      function useIsMounted(props = {}) {
        const { rerender = false, delay = 0 } = props;
        const isMountedRef = (0, import_react3.useRef)(false);
        const [isMounted, setIsMounted] = (0, import_react3.useState)(false);
        (0, import_react3.useEffect)(() => {
          isMountedRef.current = true;
          let timer = null;
          if (rerender) {
            if (delay > 0) {
              timer = setTimeout(() => {
                setIsMounted(true);
              }, delay);
            } else {
              setIsMounted(true);
            }
          }
          return () => {
            isMountedRef.current = false;
            if (rerender) {
              setIsMounted(false);
            }
            if (timer) {
              clearTimeout(timer);
            }
          };
        }, [rerender]);
        return [(0, import_react3.useCallback)(() => isMountedRef.current, []), isMounted];
      }
    }
  });

  // node_modules/@react-aria/progress/dist/index.js
  var require_dist40 = __commonJS({
    "node_modules/@react-aria/progress/dist/index.js"(exports, module) {
      var $jaqU8$reactariautils = require_main7();
      var $jaqU8$reactarialabel = require_main22();
      var $jaqU8$reactariai18n = require_main10();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useProgressBar", () => $c6bb999a3b4eb4f3$export$ed5abd763a836edc);
      function $c6bb999a3b4eb4f3$export$ed5abd763a836edc(props) {
        let { value = 0, minValue = 0, maxValue = 100, valueLabel, isIndeterminate, formatOptions = {
          style: "percent"
        } } = props;
        let domProps = (0, $jaqU8$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        let { labelProps, fieldProps } = (0, $jaqU8$reactarialabel.useLabel)(__spreadProps(__spreadValues({}, props), {
          // Progress bar is not an HTML input element so it
          // shouldn't be labeled by a <label> element.
          labelElementType: "span"
        }));
        value = (0, $jaqU8$reactariautils.clamp)(value, minValue, maxValue);
        let percentage = (value - minValue) / (maxValue - minValue);
        let formatter = (0, $jaqU8$reactariai18n.useNumberFormatter)(formatOptions);
        if (!isIndeterminate && !valueLabel) {
          let valueToFormat = formatOptions.style === "percent" ? percentage : value;
          valueLabel = formatter.format(valueToFormat);
        }
        return {
          progressBarProps: (0, $jaqU8$reactariautils.mergeProps)(domProps, __spreadProps(__spreadValues({}, fieldProps), {
            "aria-valuenow": isIndeterminate ? void 0 : value,
            "aria-valuemin": minValue,
            "aria-valuemax": maxValue,
            "aria-valuetext": isIndeterminate ? void 0 : valueLabel,
            role: "progressbar"
          })),
          labelProps
        };
      }
    }
  });

  // node_modules/@nextui-org/progress/dist/index.js
  var require_dist41 = __commonJS({
    "node_modules/@nextui-org/progress/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        CircularProgress: () => circular_progress_default,
        Progress: () => progress_default,
        useProgress: () => useProgress
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system2 = require_dist4();
      var import_system = require_dist4();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_shared_utils = require_dist9();
      var import_utils = require_main7();
      var import_react3 = require_react();
      var import_use_is_mounted = require_dist39();
      var import_progress = require_dist40();
      function useProgress(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.progress.variantKeys);
        const _a = props, {
          ref,
          as,
          id,
          className,
          classNames,
          label,
          valueLabel,
          value = 0,
          minValue = 0,
          maxValue = 100,
          showValueLabel = false,
          formatOptions = {
            style: "percent"
          }
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "id",
          "className",
          "classNames",
          "label",
          "valueLabel",
          "value",
          "minValue",
          "maxValue",
          "showValueLabel",
          "formatOptions"
        ]);
        const Component = as || "div";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const [, isMounted] = (0, import_use_is_mounted.useIsMounted)({
          rerender: true,
          delay: 100
        });
        const isIndeterminate = originalProps.isIndeterminate;
        const { progressBarProps, labelProps } = (0, import_progress.useProgressBar)({
          id,
          label,
          value,
          minValue,
          maxValue,
          valueLabel,
          formatOptions,
          isIndeterminate,
          "aria-labelledby": originalProps["aria-labelledby"],
          "aria-label": originalProps["aria-label"]
        });
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.progress)(__spreadValues({}, variantProps)),
          [...Object.values(variantProps)]
        );
        const selfMounted = originalProps.disableAnimation ? true : isMounted;
        const percentage = (0, import_react3.useMemo)(
          () => isIndeterminate || !selfMounted ? void 0 : (0, import_shared_utils.clampPercentage)((value - minValue) / (maxValue - minValue) * 100),
          [selfMounted, isIndeterminate, value, minValue, maxValue]
        );
        const getProgressBarProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues({
            ref: domRef,
            "data-indeterminate": (0, import_shared_utils.dataAttr)(isIndeterminate),
            "data-disabled": (0, import_shared_utils.dataAttr)(originalProps.isDisabled),
            className: slots.base({ class: baseStyles })
          }, (0, import_utils.mergeProps)(progressBarProps, otherProps, props2)),
          [
            domRef,
            slots,
            isIndeterminate,
            originalProps.isDisabled,
            baseStyles,
            progressBarProps,
            otherProps
          ]
        );
        const getLabelProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues({
            className: slots.label({ class: classNames == null ? void 0 : classNames.label })
          }, (0, import_utils.mergeProps)(labelProps, props2)),
          [slots, classNames, labelProps]
        );
        return {
          Component,
          domRef,
          slots,
          classNames,
          label,
          percentage,
          showValueLabel,
          getProgressBarProps,
          getLabelProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Progress = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          slots,
          classNames,
          label,
          percentage,
          showValueLabel,
          getProgressBarProps,
          getLabelProps
        } = useProgress(__spreadProps(__spreadValues({}, props), { ref }));
        const progressBarProps = getProgressBarProps();
        const shouldShowLabelWrapper = label || showValueLabel;
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({}, progressBarProps), { children: [
          shouldShowLabelWrapper ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: slots.labelWrapper({ class: classNames == null ? void 0 : classNames.labelWrapper }), children: [
            label && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children: label })),
            showValueLabel && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.value({ class: classNames == null ? void 0 : classNames.value }), children: progressBarProps["aria-valuetext"] })
          ] }) : null,
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: slots.track({ class: classNames == null ? void 0 : classNames.track }), children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "div",
            {
              className: slots.indicator({ class: classNames == null ? void 0 : classNames.indicator }),
              style: {
                transform: `translateX(-${100 - (percentage || 0)}%)`
              }
            }
          ) })
        ] }));
      });
      Progress.displayName = "NextUI.Progress";
      var progress_default = Progress;
      var import_system4 = require_dist4();
      var import_system3 = require_dist4();
      var import_theme2 = require_dist5();
      var import_react_utils2 = require_dist10();
      var import_shared_utils2 = require_dist9();
      var import_utils2 = require_main7();
      var import_react22 = require_react();
      var import_use_is_mounted2 = require_dist39();
      var import_progress2 = require_dist40();
      function useCircularProgress(originalProps) {
        var _a;
        const [props, variantProps] = (0, import_system3.mapPropsVariants)(originalProps, import_theme2.circularProgress.variantKeys);
        const _a2 = props, {
          ref,
          as,
          id,
          className,
          classNames,
          label,
          valueLabel,
          value = void 0,
          minValue = 0,
          maxValue = 100,
          strokeWidth: strokeWidthProp,
          showValueLabel = false,
          formatOptions = {
            style: "percent"
          }
        } = _a2, otherProps = __objRest(_a2, [
          "ref",
          "as",
          "id",
          "className",
          "classNames",
          "label",
          "valueLabel",
          "value",
          "minValue",
          "maxValue",
          "strokeWidth",
          "showValueLabel",
          "formatOptions"
        ]);
        const Component = as || "div";
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const baseStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.base, className);
        const [, isMounted] = (0, import_use_is_mounted2.useIsMounted)({
          rerender: true,
          delay: 100
        });
        const isIndeterminate = ((_a = originalProps.isIndeterminate) != null ? _a : true) && value === void 0;
        const { progressBarProps, labelProps } = (0, import_progress2.useProgressBar)({
          id,
          label,
          value,
          minValue,
          maxValue,
          valueLabel,
          formatOptions,
          isIndeterminate,
          "aria-labelledby": originalProps["aria-labelledby"],
          "aria-label": originalProps["aria-label"]
        });
        const slots = (0, import_react22.useMemo)(
          () => (0, import_theme2.circularProgress)(__spreadProps(__spreadValues({}, variantProps), {
            isIndeterminate
          })),
          [isIndeterminate, ...Object.values(variantProps)]
        );
        const selfMounted = originalProps.disableAnimation ? true : isMounted;
        const center = 16;
        const strokeWidth = strokeWidthProp || originalProps.size === "sm" ? 2 : 3;
        const radius = 16 - strokeWidth;
        const circumference = 2 * radius * Math.PI;
        const percentage = (0, import_react22.useMemo)(() => {
          if (!selfMounted) {
            return 0;
          }
          if (isIndeterminate) {
            return 0.25;
          }
          return value ? (0, import_shared_utils2.clampPercentage)((value - minValue) / (maxValue - minValue), 1) : 0;
        }, [selfMounted, value, minValue, maxValue, isIndeterminate]);
        const offset = circumference - percentage * circumference;
        const getProgressBarProps = (0, import_react22.useCallback)(
          (props2 = {}) => __spreadValues({
            ref: domRef,
            "data-indeterminate": (0, import_shared_utils2.dataAttr)(isIndeterminate),
            "data-disabled": (0, import_shared_utils2.dataAttr)(originalProps.isDisabled),
            className: slots.base({ class: baseStyles })
          }, (0, import_utils2.mergeProps)(progressBarProps, otherProps, props2)),
          [
            domRef,
            slots,
            isIndeterminate,
            originalProps.isDisabled,
            baseStyles,
            progressBarProps,
            otherProps
          ]
        );
        const getLabelProps = (0, import_react22.useCallback)(
          (props2 = {}) => __spreadValues({
            className: slots.label({ class: classNames == null ? void 0 : classNames.label })
          }, (0, import_utils2.mergeProps)(labelProps, props2)),
          [slots, classNames, labelProps]
        );
        const getSvgProps = (0, import_react22.useCallback)(
          (props2 = {}) => __spreadValues({
            viewBox: "0 0 32 32",
            fill: "none",
            strokeWidth,
            className: slots.svg({ class: classNames == null ? void 0 : classNames.svg })
          }, props2),
          [strokeWidth, slots, classNames]
        );
        const getIndicatorProps = (0, import_react22.useCallback)(
          (props2 = {}) => __spreadValues({
            cx: center,
            cy: center,
            r: radius,
            role: "presentation",
            strokeDasharray: `${circumference} ${circumference}`,
            strokeDashoffset: offset,
            transform: "rotate(-90 16 16)",
            strokeLinecap: "round",
            className: slots.indicator({ class: classNames == null ? void 0 : classNames.indicator })
          }, props2),
          [slots, classNames, offset, circumference, radius]
        );
        const getTrackProps = (0, import_react22.useCallback)(
          (props2 = {}) => __spreadValues({
            cx: center,
            cy: center,
            r: radius,
            role: "presentation",
            strokeDasharray: `${circumference} ${circumference}`,
            strokeDashoffset: 0,
            transform: "rotate(-90 16 16)",
            strokeLinecap: "round",
            className: slots.track({ class: classNames == null ? void 0 : classNames.track })
          }, props2),
          [slots, classNames, circumference, radius]
        );
        return {
          Component,
          domRef,
          slots,
          classNames,
          label,
          showValueLabel,
          getProgressBarProps,
          getLabelProps,
          getSvgProps,
          getIndicatorProps,
          getTrackProps
        };
      }
      var import_jsx_runtime2 = require_jsx_runtime();
      var CircularProgress = (0, import_system4.forwardRef)((props, ref) => {
        const {
          Component,
          slots,
          classNames,
          label,
          showValueLabel,
          getProgressBarProps,
          getLabelProps,
          getSvgProps,
          getIndicatorProps,
          getTrackProps
        } = useCircularProgress(__spreadValues({ ref }, props));
        const progressBarProps = getProgressBarProps();
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, progressBarProps), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: slots.svgWrapper({ class: classNames == null ? void 0 : classNames.svgWrapper }), children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("svg", __spreadProps(__spreadValues({}, getSvgProps()), { children: [
              /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("circle", __spreadValues({}, getTrackProps())),
              /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("circle", __spreadValues({}, getIndicatorProps()))
            ] })),
            showValueLabel && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { className: slots.value({ class: classNames == null ? void 0 : classNames.value }), children: progressBarProps["aria-valuetext"] })
          ] }),
          label && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children: label }))
        ] }));
      });
      CircularProgress.displayName = "NextUI.CircularProgress";
      var circular_progress_default = CircularProgress;
    }
  });

  // node_modules/@react-aria/textfield/dist/main.js
  var require_main31 = __commonJS({
    "node_modules/@react-aria/textfield/dist/main.js"(exports, module) {
      var $iITAC$reactariautils = require_main7();
      var $iITAC$reactarialabel = require_main22();
      var $iITAC$reactariafocus = require_main12();
      var $iITAC$react = require_react();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useTextField", () => $9076f978e02df845$export$712718f7aec83d5);
      $parcel$export(module.exports, "useFormattedTextField", () => $56b68c3dab9bf16c$export$4f384c9210e583c3);
      function $9076f978e02df845$export$712718f7aec83d5(props, ref) {
        let { inputElementType = "input", isDisabled = false, isRequired = false, isReadOnly = false, validationState, isInvalid = false, type = "text", value, defaultValue, onChange = () => {
        } } = props;
        let { focusableProps } = (0, $iITAC$reactariafocus.useFocusable)(props, ref);
        let { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, $iITAC$reactarialabel.useField)(props);
        let domProps = (0, $iITAC$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        const inputOnlyProps = {
          type,
          pattern: props.pattern
        };
        var _ref;
        (0, $iITAC$reactariautils.useFormReset)(ref, (_ref = value !== null && value !== void 0 ? value : defaultValue) !== null && _ref !== void 0 ? _ref : "", onChange);
        return {
          labelProps,
          inputProps: (0, $iITAC$reactariautils.mergeProps)(domProps, inputElementType === "input" && inputOnlyProps, __spreadValues(__spreadValues({
            disabled: isDisabled,
            readOnly: isReadOnly,
            "aria-required": isRequired || void 0,
            "aria-invalid": isInvalid || validationState === "invalid" || void 0,
            "aria-errormessage": props["aria-errormessage"],
            "aria-activedescendant": props["aria-activedescendant"],
            "aria-autocomplete": props["aria-autocomplete"],
            "aria-haspopup": props["aria-haspopup"],
            value: props.value,
            defaultValue: props.value ? void 0 : props.defaultValue,
            onChange: (e) => onChange(e.target.value),
            autoComplete: props.autoComplete,
            maxLength: props.maxLength,
            minLength: props.minLength,
            name: props.name,
            placeholder: props.placeholder,
            inputMode: props.inputMode,
            // Clipboard events
            onCopy: props.onCopy,
            onCut: props.onCut,
            onPaste: props.onPaste,
            // Composition events
            onCompositionEnd: props.onCompositionEnd,
            onCompositionStart: props.onCompositionStart,
            onCompositionUpdate: props.onCompositionUpdate,
            // Selection events
            onSelect: props.onSelect,
            // Input events
            onBeforeInput: props.onBeforeInput,
            onInput: props.onInput
          }, focusableProps), fieldProps)),
          descriptionProps,
          errorMessageProps
        };
      }
      function $56b68c3dab9bf16c$var$supportsNativeBeforeInputEvent() {
        return typeof window !== "undefined" && window.InputEvent && // @ts-ignore
        typeof InputEvent.prototype.getTargetRanges === "function";
      }
      function $56b68c3dab9bf16c$export$4f384c9210e583c3(props, state, inputRef) {
        let onBeforeInputFallback = (0, $iITAC$reactariautils.useEffectEvent)((e) => {
          let input = inputRef.current;
          let nextValue;
          switch (e.inputType) {
            case "historyUndo":
            case "historyRedo":
              return;
            case "deleteContent":
            case "deleteByCut":
            case "deleteByDrag":
              nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
              break;
            case "deleteContentForward":
              nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
              break;
            case "deleteContentBackward":
              nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
              break;
            case "deleteSoftLineBackward":
            case "deleteHardLineBackward":
              nextValue = input.value.slice(input.selectionStart);
              break;
            default:
              if (e.data != null)
                nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);
              break;
          }
          if (nextValue == null || !state.validate(nextValue))
            e.preventDefault();
        });
        (0, $iITAC$react.useEffect)(() => {
          if (!$56b68c3dab9bf16c$var$supportsNativeBeforeInputEvent())
            return;
          let input = inputRef.current;
          input.addEventListener("beforeinput", onBeforeInputFallback, false);
          return () => {
            input.removeEventListener("beforeinput", onBeforeInputFallback, false);
          };
        }, [
          inputRef,
          onBeforeInputFallback
        ]);
        let onBeforeInput = !$56b68c3dab9bf16c$var$supportsNativeBeforeInputEvent() ? (e) => {
          let nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);
          if (!state.validate(nextValue))
            e.preventDefault();
        } : null;
        let { labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps } = (0, $9076f978e02df845$export$712718f7aec83d5)(props, inputRef);
        let compositionStartState = (0, $iITAC$react.useRef)(null);
        return {
          inputProps: (0, $iITAC$reactariautils.mergeProps)(textFieldProps, {
            onBeforeInput,
            onCompositionStart() {
              let { value, selectionStart, selectionEnd } = inputRef.current;
              compositionStartState.current = {
                value,
                selectionStart,
                selectionEnd
              };
            },
            onCompositionEnd() {
              if (!state.validate(inputRef.current.value)) {
                let { value, selectionStart, selectionEnd } = compositionStartState.current;
                inputRef.current.value = value;
                inputRef.current.setSelectionRange(selectionStart, selectionEnd);
                state.setInputValue(value);
              }
            }
          }),
          labelProps,
          descriptionProps,
          errorMessageProps
        };
      }
    }
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var init_extends = __esm({
    "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    }
  });

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var init_objectWithoutPropertiesLoose = __esm({
    "node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"() {
    }
  });

  // node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
  var import_react, index, use_isomorphic_layout_effect_browser_esm_default;
  var init_use_isomorphic_layout_effect_browser_esm = __esm({
    "node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js"() {
      import_react = __toESM(require_react());
      index = import_react.useLayoutEffect;
      use_isomorphic_layout_effect_browser_esm_default = index;
    }
  });

  // node_modules/use-latest/dist/use-latest.esm.js
  var React, useLatest;
  var init_use_latest_esm = __esm({
    "node_modules/use-latest/dist/use-latest.esm.js"() {
      React = __toESM(require_react());
      init_use_isomorphic_layout_effect_browser_esm();
      useLatest = function useLatest2(value) {
        var ref = React.useRef(value);
        use_isomorphic_layout_effect_browser_esm_default(function() {
          ref.current = value;
        });
        return ref;
      };
    }
  });

  // node_modules/use-composed-ref/dist/use-composed-ref.esm.js
  var import_react2, updateRef, useComposedRef, use_composed_ref_esm_default;
  var init_use_composed_ref_esm = __esm({
    "node_modules/use-composed-ref/dist/use-composed-ref.esm.js"() {
      import_react2 = __toESM(require_react());
      updateRef = function updateRef2(ref, value) {
        if (typeof ref === "function") {
          ref(value);
          return;
        }
        ref.current = value;
      };
      useComposedRef = function useComposedRef2(libRef, userRef) {
        var prevUserRef = (0, import_react2.useRef)();
        return (0, import_react2.useCallback)(function(instance) {
          libRef.current = instance;
          if (prevUserRef.current) {
            updateRef(prevUserRef.current, null);
          }
          prevUserRef.current = userRef;
          if (!userRef) {
            return;
          }
          updateRef(userRef, instance);
        }, [userRef]);
      };
      use_composed_ref_esm_default = useComposedRef;
    }
  });

  // node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.esm.js
  var react_textarea_autosize_browser_esm_exports = {};
  __export(react_textarea_autosize_browser_esm_exports, {
    default: () => index2
  });
  function calculateNodeHeight(sizingData, value, minRows, maxRows) {
    if (minRows === void 0) {
      minRows = 1;
    }
    if (maxRows === void 0) {
      maxRows = Infinity;
    }
    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      hiddenTextarea.setAttribute("tabindex", "-1");
      hiddenTextarea.setAttribute("aria-hidden", "true");
      forceHiddenStyles$1(hiddenTextarea);
    }
    if (hiddenTextarea.parentNode === null) {
      document.body.appendChild(hiddenTextarea);
    }
    var paddingSize = sizingData.paddingSize, borderSize = sizingData.borderSize, sizingStyle = sizingData.sizingStyle;
    var boxSizing = sizingStyle.boxSizing;
    Object.keys(sizingStyle).forEach(function(_key) {
      var key = _key;
      hiddenTextarea.style[key] = sizingStyle[key];
    });
    forceHiddenStyles$1(hiddenTextarea);
    hiddenTextarea.value = value;
    var height = getHeight(hiddenTextarea, sizingData);
    hiddenTextarea.value = value;
    height = getHeight(hiddenTextarea, sizingData);
    hiddenTextarea.value = "x";
    var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
    var minHeight = rowHeight * minRows;
    if (boxSizing === "border-box") {
      minHeight = minHeight + paddingSize + borderSize;
    }
    height = Math.max(minHeight, height);
    var maxHeight = rowHeight * maxRows;
    if (boxSizing === "border-box") {
      maxHeight = maxHeight + paddingSize + borderSize;
    }
    height = Math.min(maxHeight, height);
    return [height, rowHeight];
  }
  function useListener(target, type, listener) {
    var latestListener = useLatest(listener);
    React2.useLayoutEffect(function() {
      var handler = function handler2(ev) {
        return latestListener.current(ev);
      };
      if (!target) {
        return;
      }
      target.addEventListener(type, handler);
      return function() {
        return target.removeEventListener(type, handler);
      };
    }, []);
  }
  var React2, HIDDEN_TEXTAREA_STYLE, forceHiddenStyles, forceHiddenStyles$1, hiddenTextarea, getHeight, noop, pick, SIZING_STYLE, isIE, getSizingData, getSizingData$1, useWindowResizeListener, useFontsLoadedListener, _excluded, TextareaAutosize, index2;
  var init_react_textarea_autosize_browser_esm = __esm({
    "node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.esm.js"() {
      init_extends();
      init_objectWithoutPropertiesLoose();
      React2 = __toESM(require_react());
      init_use_latest_esm();
      init_use_composed_ref_esm();
      HIDDEN_TEXTAREA_STYLE = {
        "min-height": "0",
        "max-height": "none",
        height: "0",
        visibility: "hidden",
        overflow: "hidden",
        position: "absolute",
        "z-index": "-1000",
        top: "0",
        right: "0"
      };
      forceHiddenStyles = function forceHiddenStyles2(node) {
        Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function(key) {
          node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], "important");
        });
      };
      forceHiddenStyles$1 = forceHiddenStyles;
      hiddenTextarea = null;
      getHeight = function getHeight2(node, sizingData) {
        var height = node.scrollHeight;
        if (sizingData.sizingStyle.boxSizing === "border-box") {
          return height + sizingData.borderSize;
        }
        return height - sizingData.paddingSize;
      };
      noop = function noop2() {
      };
      pick = function pick2(props, obj) {
        return props.reduce(function(acc, prop) {
          acc[prop] = obj[prop];
          return acc;
        }, {});
      };
      SIZING_STYLE = [
        "borderBottomWidth",
        "borderLeftWidth",
        "borderRightWidth",
        "borderTopWidth",
        "boxSizing",
        "fontFamily",
        "fontSize",
        "fontStyle",
        "fontWeight",
        "letterSpacing",
        "lineHeight",
        "paddingBottom",
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        // non-standard
        "tabSize",
        "textIndent",
        // non-standard
        "textRendering",
        "textTransform",
        "width",
        "wordBreak"
      ];
      isIE = !!document.documentElement.currentStyle;
      getSizingData = function getSizingData2(node) {
        var style = window.getComputedStyle(node);
        if (style === null) {
          return null;
        }
        var sizingStyle = pick(SIZING_STYLE, style);
        var boxSizing = sizingStyle.boxSizing;
        if (boxSizing === "") {
          return null;
        }
        if (isIE && boxSizing === "border-box") {
          sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + "px";
        }
        var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
        var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
        return {
          sizingStyle,
          paddingSize,
          borderSize
        };
      };
      getSizingData$1 = getSizingData;
      useWindowResizeListener = function useWindowResizeListener2(listener) {
        useListener(window, "resize", listener);
      };
      useFontsLoadedListener = function useFontsLoadedListener2(listener) {
        useListener(document.fonts, "loadingdone", listener);
      };
      _excluded = ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"];
      TextareaAutosize = function TextareaAutosize2(_ref, userRef) {
        var cacheMeasurements = _ref.cacheMeasurements, maxRows = _ref.maxRows, minRows = _ref.minRows, _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? noop : _ref$onChange, _ref$onHeightChange = _ref.onHeightChange, onHeightChange = _ref$onHeightChange === void 0 ? noop : _ref$onHeightChange, props = _objectWithoutPropertiesLoose(_ref, _excluded);
        var isControlled = props.value !== void 0;
        var libRef = React2.useRef(null);
        var ref = use_composed_ref_esm_default(libRef, userRef);
        var heightRef = React2.useRef(0);
        var measurementsCacheRef = React2.useRef();
        var resizeTextarea = function resizeTextarea2() {
          var node = libRef.current;
          var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData$1(node);
          if (!nodeSizingData) {
            return;
          }
          measurementsCacheRef.current = nodeSizingData;
          var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || "x", minRows, maxRows), height = _calculateNodeHeight[0], rowHeight = _calculateNodeHeight[1];
          if (heightRef.current !== height) {
            heightRef.current = height;
            node.style.setProperty("height", height + "px", "important");
            onHeightChange(height, {
              rowHeight
            });
          }
        };
        var handleChange = function handleChange2(event) {
          if (!isControlled) {
            resizeTextarea();
          }
          onChange(event);
        };
        {
          React2.useLayoutEffect(resizeTextarea);
          useWindowResizeListener(resizeTextarea);
          useFontsLoadedListener(resizeTextarea);
          return /* @__PURE__ */ React2.createElement("textarea", _extends({}, props, {
            onChange: handleChange,
            ref
          }));
        }
      };
      index2 = /* @__PURE__ */ React2.forwardRef(TextareaAutosize);
    }
  });

  // node_modules/@nextui-org/input/dist/index.js
  var require_dist42 = __commonJS({
    "node_modules/@nextui-org/input/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Input: () => input_default,
        Textarea: () => textarea_default,
        useInput: () => useInput
      });
      module.exports = __toCommonJS2(src_exports);
      var import_shared_icons = require_dist12();
      var import_react22 = require_react();
      var import_system2 = require_dist4();
      var import_system = require_dist4();
      var import_focus = require_main12();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_interactions = require_main11();
      var import_shared_utils = require_dist9();
      var import_utils = require_main6();
      var import_react3 = require_react();
      var import_utils2 = require_main7();
      var import_textfield = require_main31();
      function useInput(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.input.variantKeys);
        const _a = props, {
          ref,
          as,
          label,
          description,
          errorMessage,
          className,
          classNames,
          autoFocus,
          startContent,
          endContent,
          onClear,
          onChange,
          validationState,
          onValueChange = () => {
          }
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "label",
          "description",
          "errorMessage",
          "className",
          "classNames",
          "autoFocus",
          "startContent",
          "endContent",
          "onClear",
          "onChange",
          "validationState",
          "onValueChange"
        ]);
        const handleValueChange = (0, import_react3.useCallback)(
          (value) => {
            onValueChange(value != null ? value : "");
          },
          [onValueChange]
        );
        const [inputValue, setInputValue] = (0, import_utils.useControlledState)(
          props.value,
          props.defaultValue,
          handleValueChange
        );
        const [isFocusWithin, setFocusWithin] = (0, import_react3.useState)(false);
        const Component = as || "div";
        const isFilled = !!inputValue;
        const isFilledWithin = isFilled || isFocusWithin;
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className, isFilled ? "is-filled" : "");
        const isMultiline = originalProps.isMultiline;
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const handleClear = (0, import_react3.useCallback)(() => {
          setInputValue("");
          if (domRef.current) {
            domRef.current.value = "";
            domRef.current.focus();
          }
          onClear == null ? void 0 : onClear();
        }, [domRef, setInputValue, onClear]);
        const { labelProps, inputProps, descriptionProps, errorMessageProps } = (0, import_textfield.useTextField)(
          __spreadProps(__spreadValues({}, originalProps), {
            "aria-label": (0, import_shared_utils.safeAriaLabel)(
              originalProps == null ? void 0 : originalProps["aria-label"],
              originalProps == null ? void 0 : originalProps.label,
              originalProps == null ? void 0 : originalProps.placeholder
            ),
            inputElementType: isMultiline ? "textarea" : "input",
            onChange: setInputValue
          }),
          domRef
        );
        const { isFocusVisible, isFocused, focusProps } = (0, import_focus.useFocusRing)({
          autoFocus,
          isTextInput: true
        });
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({ isDisabled: !!(originalProps == null ? void 0 : originalProps.isDisabled) });
        const { focusProps: clearFocusProps, isFocusVisible: isClearButtonFocusVisible } = (0, import_focus.useFocusRing)();
        const { focusWithinProps } = (0, import_interactions.useFocusWithin)({
          onFocusWithinChange: setFocusWithin
        });
        const { pressProps: clearPressProps } = (0, import_interactions.usePress)({
          isDisabled: !!(originalProps == null ? void 0 : originalProps.isDisabled),
          onPress: handleClear
        });
        const isInvalid = validationState === "invalid" || originalProps.isInvalid;
        const labelPlacement = (0, import_react3.useMemo)(() => {
          var _a2;
          if ((!originalProps.labelPlacement || originalProps.labelPlacement === "inside") && !label) {
            return "outside";
          }
          return (_a2 = originalProps.labelPlacement) != null ? _a2 : "inside";
        }, [originalProps.labelPlacement, label]);
        const isLabelPlaceholder = !props.placeholder && labelPlacement !== "outside-left" && !isMultiline;
        const isClearable = !!onClear || originalProps.isClearable;
        const hasElements = !!label || !!description || !!errorMessage;
        const hasPlaceholder = !!props.placeholder;
        const hasHelper = !!description || !!errorMessage;
        const shouldLabelBeOutside = labelPlacement === "outside" || labelPlacement === "outside-left";
        const shouldLabelBeInside = labelPlacement === "inside";
        const hasStartContent = !!startContent;
        const isLabelOutside = shouldLabelBeOutside ? labelPlacement === "outside-left" || hasPlaceholder || labelPlacement === "outside" && hasStartContent : false;
        const isLabelOutsideAsPlaceholder = labelPlacement === "outside" && !hasPlaceholder && !hasStartContent;
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.input)(__spreadProps(__spreadValues({}, variantProps), {
            isInvalid,
            isClearable,
            labelPlacement,
            isLabelPlaceholder: isLabelPlaceholder && !hasStartContent
          })),
          [
            ...Object.values(variantProps),
            isInvalid,
            labelPlacement,
            isClearable,
            isLabelPlaceholder,
            hasStartContent
          ]
        );
        const getBaseProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadValues(__spreadValues({
              className: slots.base({ class: baseStyles }),
              "data-filled": (0, import_shared_utils.dataAttr)(isFilled),
              "data-filled-within": (0, import_shared_utils.dataAttr)(isFilledWithin),
              "data-focus-within": (0, import_shared_utils.dataAttr)(isFocusWithin),
              "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
              "data-readonly": (0, import_shared_utils.dataAttr)(originalProps.isReadOnly),
              "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
              "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
              "data-required": (0, import_shared_utils.dataAttr)(originalProps.isRequired),
              "data-invalid": (0, import_shared_utils.dataAttr)(isInvalid),
              "data-disabled": (0, import_shared_utils.dataAttr)(originalProps.isDisabled),
              "data-has-elements": (0, import_shared_utils.dataAttr)(hasElements),
              "data-has-helper": (0, import_shared_utils.dataAttr)(hasHelper)
            }, focusWithinProps), props2);
          },
          [
            slots,
            baseStyles,
            isFilled,
            isFocused,
            isHovered,
            isInvalid,
            hasHelper,
            hasElements,
            isFocusWithin,
            isFocusVisible,
            isFilledWithin,
            focusWithinProps,
            originalProps.isReadOnly,
            originalProps.isRequired,
            originalProps.isDisabled
          ]
        );
        const getLabelProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadValues(__spreadValues({
              className: slots.label({ class: classNames == null ? void 0 : classNames.label })
            }, labelProps), props2);
          },
          [slots, labelProps, classNames == null ? void 0 : classNames.label]
        );
        const getInputProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({
              ref: domRef,
              "data-filled": (0, import_shared_utils.dataAttr)(isFilled),
              "data-filled-within": (0, import_shared_utils.dataAttr)(isFilledWithin),
              className: slots.input({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.input, !!inputValue ? "is-filled" : "") })
            }, (0, import_utils2.mergeProps)(
              focusProps,
              inputProps,
              (0, import_react_utils.filterDOMProps)(otherProps, {
                enabled: true,
                labelable: true,
                omitEventNames: new Set(Object.keys(inputProps))
              }),
              props2
            )), {
              required: originalProps.isRequired,
              "aria-readonly": (0, import_shared_utils.dataAttr)(originalProps.isReadOnly),
              "aria-required": (0, import_shared_utils.dataAttr)(originalProps.isRequired),
              onChange: (0, import_utils2.chain)(inputProps.onChange, onChange)
            });
          },
          [
            slots,
            inputValue,
            focusProps,
            inputProps,
            otherProps,
            isFilled,
            isFilledWithin,
            classNames == null ? void 0 : classNames.input,
            originalProps.isReadOnly,
            originalProps.isRequired,
            onChange
          ]
        );
        const getInputWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({
              "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
              "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
              "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
              className: slots.inputWrapper({
                class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.inputWrapper, !!inputValue ? "is-filled" : "")
              }),
              onClick: (e) => {
                var _a2;
                if (e.target === e.currentTarget) {
                  (_a2 = domRef.current) == null ? void 0 : _a2.focus();
                }
              }
            }, (0, import_utils2.mergeProps)(props2, hoverProps)), {
              style: __spreadValues({
                cursor: "text"
              }, props2.style)
            });
          },
          [slots, isHovered, isFocusVisible, isFocused, inputValue, classNames == null ? void 0 : classNames.inputWrapper]
        );
        const getInnerWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              className: slots.innerWrapper({
                class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.innerWrapper, props2 == null ? void 0 : props2.className)
              })
            });
          },
          [slots, classNames == null ? void 0 : classNames.innerWrapper]
        );
        const getMainWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              className: slots.mainWrapper({
                class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.mainWrapper, props2 == null ? void 0 : props2.className)
              })
            });
          },
          [slots, classNames == null ? void 0 : classNames.mainWrapper]
        );
        const getHelperWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              className: slots.helperWrapper({
                class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.helperWrapper, props2 == null ? void 0 : props2.className)
              })
            });
          },
          [slots, classNames == null ? void 0 : classNames.helperWrapper]
        );
        const getDescriptionProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({}, props2), descriptionProps), {
              className: slots.description({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.description, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, classNames == null ? void 0 : classNames.description]
        );
        const getErrorMessageProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({}, props2), errorMessageProps), {
              className: slots.errorMessage({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.errorMessage, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, errorMessageProps, classNames == null ? void 0 : classNames.errorMessage]
        );
        const getClearButtonProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadValues(__spreadProps(__spreadValues({}, props2), {
              role: "button",
              tabIndex: 0,
              "data-focus-visible": (0, import_shared_utils.dataAttr)(isClearButtonFocusVisible),
              className: slots.clearButton({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.clearButton, props2 == null ? void 0 : props2.className) })
            }), (0, import_utils2.mergeProps)(clearPressProps, clearFocusProps));
          },
          [slots, isClearButtonFocusVisible, clearPressProps, clearFocusProps, classNames == null ? void 0 : classNames.clearButton]
        );
        return {
          Component,
          classNames,
          domRef,
          label,
          description,
          startContent,
          endContent,
          labelPlacement,
          isClearable,
          isInvalid,
          hasHelper,
          hasStartContent,
          isLabelOutside,
          isLabelOutsideAsPlaceholder,
          shouldLabelBeOutside,
          shouldLabelBeInside,
          hasPlaceholder,
          errorMessage,
          getBaseProps,
          getLabelProps,
          getInputProps,
          getMainWrapperProps,
          getInputWrapperProps,
          getInnerWrapperProps,
          getHelperWrapperProps,
          getDescriptionProps,
          getErrorMessageProps,
          getClearButtonProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Input = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          label,
          description,
          isClearable,
          startContent,
          endContent,
          labelPlacement,
          hasPlaceholder,
          hasHelper,
          isLabelOutside,
          isLabelOutsideAsPlaceholder,
          shouldLabelBeOutside,
          errorMessage,
          getBaseProps,
          getLabelProps,
          getInputProps,
          getInnerWrapperProps,
          getInputWrapperProps,
          getMainWrapperProps,
          getHelperWrapperProps,
          getDescriptionProps,
          getErrorMessageProps,
          getClearButtonProps
        } = useInput(__spreadProps(__spreadValues({}, props), { ref }));
        const labelContent = label ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("label", __spreadProps(__spreadValues({}, getLabelProps()), { children: label })) : null;
        const end = (0, import_react22.useMemo)(() => {
          if (isClearable) {
            return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", __spreadProps(__spreadValues({}, getClearButtonProps()), { children: endContent || /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_shared_icons.CloseFilledIcon, {}) }));
          }
          return endContent;
        }, [isClearable, getClearButtonProps]);
        const helperWrapper = (0, import_react22.useMemo)(() => {
          if (!hasHelper)
            return null;
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", __spreadProps(__spreadValues({}, getHelperWrapperProps()), { children: errorMessage ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", __spreadProps(__spreadValues({}, getErrorMessageProps()), { children: errorMessage })) : description ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", __spreadProps(__spreadValues({}, getDescriptionProps()), { children: description })) : null }));
        }, [
          hasHelper,
          errorMessage,
          description,
          getHelperWrapperProps,
          getErrorMessageProps,
          getDescriptionProps
        ]);
        const innerWrapper = (0, import_react22.useMemo)(() => {
          if (startContent || end) {
            return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, getInnerWrapperProps()), { children: [
              startContent,
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", __spreadValues({}, getInputProps())),
              end
            ] }));
          }
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", __spreadValues({}, getInputProps()));
        }, [startContent, end, getInputProps, getInnerWrapperProps]);
        const mainWrapper = (0, import_react22.useMemo)(() => {
          if (shouldLabelBeOutside) {
            return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, getMainWrapperProps()), { children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, getInputWrapperProps()), { children: [
                isLabelOutsideAsPlaceholder ? labelContent : null,
                innerWrapper
              ] })),
              helperWrapper
            ] }));
          }
          return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, getInputWrapperProps()), { children: [
              labelContent,
              innerWrapper
            ] })),
            helperWrapper
          ] });
        }, [
          labelPlacement,
          helperWrapper,
          shouldLabelBeOutside,
          isLabelOutsideAsPlaceholder,
          hasPlaceholder,
          labelContent,
          innerWrapper,
          errorMessage,
          description,
          getMainWrapperProps,
          getInputWrapperProps,
          getErrorMessageProps,
          getDescriptionProps
        ]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: [
          isLabelOutside ? labelContent : null,
          mainWrapper
        ] }));
      });
      Input.displayName = "NextUI.Input";
      var input_default = Input;
      var import_system3 = require_dist4();
      var import_utils3 = require_main7();
      var import_react_textarea_autosize = __toESM2((init_react_textarea_autosize_browser_esm(), __toCommonJS(react_textarea_autosize_browser_esm_exports)));
      var import_jsx_runtime2 = require_jsx_runtime();
      var Textarea = (0, import_system3.forwardRef)(
        (_a, ref) => {
          var _b = _a, { style, minRows = 3, maxRows = 8, cacheMeasurements = false, onHeightChange } = _b, otherProps = __objRest(_b, ["style", "minRows", "maxRows", "cacheMeasurements", "onHeightChange"]);
          const {
            Component,
            label,
            description,
            shouldLabelBeOutside,
            shouldLabelBeInside,
            errorMessage,
            getBaseProps,
            getLabelProps,
            getInputProps,
            getInputWrapperProps,
            getHelperWrapperProps,
            getDescriptionProps,
            getErrorMessageProps
          } = useInput(__spreadProps(__spreadValues({}, otherProps), { ref, isMultiline: true }));
          const labelContent = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("label", __spreadProps(__spreadValues({}, getLabelProps()), { children: label }));
          const inputProps = getInputProps();
          return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: [
            shouldLabelBeOutside ? labelContent : null,
            /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", __spreadProps(__spreadValues({}, getInputWrapperProps()), { children: [
              shouldLabelBeInside ? labelContent : null,
              /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
                import_react_textarea_autosize.default,
                __spreadProps(__spreadValues({}, inputProps), {
                  cacheMeasurements,
                  maxRows,
                  minRows,
                  style: (0, import_utils3.mergeProps)(inputProps.style, style != null ? style : {}),
                  onHeightChange
                })
              )
            ] })),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getHelperWrapperProps()), { children: errorMessage ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getErrorMessageProps()), { children: errorMessage })) : description ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getDescriptionProps()), { children: description })) : null }))
          ] }));
        }
      );
      Textarea.displayName = "NextUI.Textarea";
      var textarea_default = Textarea;
    }
  });

  // node_modules/@react-aria/dialog/dist/main.js
  var require_main32 = __commonJS({
    "node_modules/@react-aria/dialog/dist/main.js"(exports, module) {
      var $6vrKB$reactariautils = require_main7();
      var $6vrKB$reactariafocus = require_main12();
      var $6vrKB$react = require_react();
      var $6vrKB$reactariaoverlays = require_main14();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useDialog", () => $e7b76b4fae4e4c55$export$d55e7ee900f34e93);
      function $e7b76b4fae4e4c55$export$d55e7ee900f34e93(props, ref) {
        let { role = "dialog" } = props;
        let titleId = (0, $6vrKB$reactariautils.useSlotId)();
        titleId = props["aria-label"] ? void 0 : titleId;
        let isRefocusing = (0, $6vrKB$react.useRef)(false);
        (0, $6vrKB$react.useEffect)(() => {
          if (ref.current && !ref.current.contains(document.activeElement)) {
            (0, $6vrKB$reactariafocus.focusSafely)(ref.current);
            let timeout = setTimeout(() => {
              if (document.activeElement === ref.current) {
                isRefocusing.current = true;
                ref.current.blur();
                (0, $6vrKB$reactariafocus.focusSafely)(ref.current);
                isRefocusing.current = false;
              }
            }, 500);
            return () => {
              clearTimeout(timeout);
            };
          }
        }, [
          ref
        ]);
        (0, $6vrKB$reactariaoverlays.useOverlayFocusContain)();
        return {
          dialogProps: __spreadProps(__spreadValues({}, (0, $6vrKB$reactariautils.filterDOMProps)(props, {
            labelable: true
          })), {
            role,
            tabIndex: -1,
            "aria-labelledby": props["aria-labelledby"] || titleId,
            // Prevent blur events from reaching useOverlay, which may cause
            // popovers to close. Since focus is contained within the dialog,
            // we don't want this to occur due to the above useEffect.
            onBlur: (e) => {
              if (isRefocusing.current)
                e.stopPropagation();
            }
          }),
          titleProps: {
            id: titleId
          }
        };
      }
    }
  });

  // node_modules/react-remove-scroll-bar/dist/es5/constants.js
  var require_constants = __commonJS({
    "node_modules/react-remove-scroll-bar/dist/es5/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.removedBarSizeVariable = exports.noScrollbarsClassName = exports.fullWidthClassName = exports.zeroRightClassName = void 0;
      exports.zeroRightClassName = "right-scroll-bar-position";
      exports.fullWidthClassName = "width-before-scroll-bar";
      exports.noScrollbarsClassName = "with-scroll-bars-hidden";
      exports.removedBarSizeVariable = "--removed-body-scroll-bar-size";
    }
  });

  // node_modules/use-callback-ref/dist/es5/assignRef.js
  var require_assignRef = __commonJS({
    "node_modules/use-callback-ref/dist/es5/assignRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assignRef = void 0;
      function assignRef(ref, value) {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
        return ref;
      }
      exports.assignRef = assignRef;
    }
  });

  // node_modules/use-callback-ref/dist/es5/useRef.js
  var require_useRef = __commonJS({
    "node_modules/use-callback-ref/dist/es5/useRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useCallbackRef = void 0;
      var react_1 = require_react();
      function useCallbackRef(initialValue, callback) {
        var ref = (0, react_1.useState)(function() {
          return {
            // value
            value: initialValue,
            // last callback
            callback,
            // "memoized" public interface
            facade: {
              get current() {
                return ref.value;
              },
              set current(value) {
                var last = ref.value;
                if (last !== value) {
                  ref.value = value;
                  ref.callback(value, last);
                }
              }
            }
          };
        })[0];
        ref.callback = callback;
        return ref.facade;
      }
      exports.useCallbackRef = useCallbackRef;
    }
  });

  // node_modules/use-callback-ref/dist/es5/createRef.js
  var require_createRef = __commonJS({
    "node_modules/use-callback-ref/dist/es5/createRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createCallbackRef = void 0;
      function createCallbackRef(callback) {
        var current = null;
        return {
          get current() {
            return current;
          },
          set current(value) {
            var last = current;
            if (last !== value) {
              current = value;
              callback(value, last);
            }
          }
        };
      }
      exports.createCallbackRef = createCallbackRef;
    }
  });

  // node_modules/use-callback-ref/dist/es5/mergeRef.js
  var require_mergeRef = __commonJS({
    "node_modules/use-callback-ref/dist/es5/mergeRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mergeRefs = void 0;
      var assignRef_1 = require_assignRef();
      var createRef_1 = require_createRef();
      function mergeRefs(refs) {
        return (0, createRef_1.createCallbackRef)(function(newValue) {
          return refs.forEach(function(ref) {
            return (0, assignRef_1.assignRef)(ref, newValue);
          });
        });
      }
      exports.mergeRefs = mergeRefs;
    }
  });

  // node_modules/use-callback-ref/dist/es5/useMergeRef.js
  var require_useMergeRef = __commonJS({
    "node_modules/use-callback-ref/dist/es5/useMergeRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useMergeRefs = void 0;
      var assignRef_1 = require_assignRef();
      var useRef_1 = require_useRef();
      function useMergeRefs(refs, defaultValue) {
        return (0, useRef_1.useCallbackRef)(defaultValue || null, function(newValue) {
          return refs.forEach(function(ref) {
            return (0, assignRef_1.assignRef)(ref, newValue);
          });
        });
      }
      exports.useMergeRefs = useMergeRefs;
    }
  });

  // node_modules/use-callback-ref/dist/es5/useTransformRef.js
  var require_useTransformRef = __commonJS({
    "node_modules/use-callback-ref/dist/es5/useTransformRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useTransformRef = void 0;
      var assignRef_1 = require_assignRef();
      var useRef_1 = require_useRef();
      function useTransformRef(ref, transformer) {
        return (0, useRef_1.useCallbackRef)(null, function(value) {
          return (0, assignRef_1.assignRef)(ref, transformer(value));
        });
      }
      exports.useTransformRef = useTransformRef;
    }
  });

  // node_modules/use-callback-ref/dist/es5/transformRef.js
  var require_transformRef = __commonJS({
    "node_modules/use-callback-ref/dist/es5/transformRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.transformRef = void 0;
      var assignRef_1 = require_assignRef();
      var createRef_1 = require_createRef();
      function transformRef(ref, transformer) {
        return (0, createRef_1.createCallbackRef)(function(value) {
          return (0, assignRef_1.assignRef)(ref, transformer(value));
        });
      }
      exports.transformRef = transformRef;
    }
  });

  // node_modules/use-callback-ref/dist/es5/refToCallback.js
  var require_refToCallback = __commonJS({
    "node_modules/use-callback-ref/dist/es5/refToCallback.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useRefToCallback = exports.refToCallback = void 0;
      function refToCallback(ref) {
        return function(newValue) {
          if (typeof ref === "function") {
            ref(newValue);
          } else if (ref) {
            ref.current = newValue;
          }
        };
      }
      exports.refToCallback = refToCallback;
      var nullCallback = function() {
        return null;
      };
      var weakMem = /* @__PURE__ */ new WeakMap();
      var weakMemoize = function(ref) {
        var usedRef = ref || nullCallback;
        var storedRef = weakMem.get(usedRef);
        if (storedRef) {
          return storedRef;
        }
        var cb = refToCallback(usedRef);
        weakMem.set(usedRef, cb);
        return cb;
      };
      function useRefToCallback(ref) {
        return weakMemoize(ref);
      }
      exports.useRefToCallback = useRefToCallback;
    }
  });

  // node_modules/use-callback-ref/dist/es5/index.js
  var require_es5 = __commonJS({
    "node_modules/use-callback-ref/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useRefToCallback = exports.refToCallback = exports.transformRef = exports.useTransformRef = exports.useMergeRefs = exports.mergeRefs = exports.createCallbackRef = exports.useCallbackRef = exports.assignRef = void 0;
      var assignRef_1 = require_assignRef();
      Object.defineProperty(exports, "assignRef", { enumerable: true, get: function() {
        return assignRef_1.assignRef;
      } });
      var useRef_1 = require_useRef();
      Object.defineProperty(exports, "useCallbackRef", { enumerable: true, get: function() {
        return useRef_1.useCallbackRef;
      } });
      var createRef_1 = require_createRef();
      Object.defineProperty(exports, "createCallbackRef", { enumerable: true, get: function() {
        return createRef_1.createCallbackRef;
      } });
      var mergeRef_1 = require_mergeRef();
      Object.defineProperty(exports, "mergeRefs", { enumerable: true, get: function() {
        return mergeRef_1.mergeRefs;
      } });
      var useMergeRef_1 = require_useMergeRef();
      Object.defineProperty(exports, "useMergeRefs", { enumerable: true, get: function() {
        return useMergeRef_1.useMergeRefs;
      } });
      var useTransformRef_1 = require_useTransformRef();
      Object.defineProperty(exports, "useTransformRef", { enumerable: true, get: function() {
        return useTransformRef_1.useTransformRef;
      } });
      var transformRef_1 = require_transformRef();
      Object.defineProperty(exports, "transformRef", { enumerable: true, get: function() {
        return transformRef_1.transformRef;
      } });
      var refToCallback_1 = require_refToCallback();
      Object.defineProperty(exports, "refToCallback", { enumerable: true, get: function() {
        return refToCallback_1.refToCallback;
      } });
      Object.defineProperty(exports, "useRefToCallback", { enumerable: true, get: function() {
        return refToCallback_1.useRefToCallback;
      } });
    }
  });

  // node_modules/detect-node-es/es5/browser.js
  var require_browser = __commonJS({
    "node_modules/detect-node-es/es5/browser.js"(exports, module) {
      module.exports.isNode = false;
    }
  });

  // node_modules/use-sidecar/dist/es5/env.js
  var require_env = __commonJS({
    "node_modules/use-sidecar/dist/es5/env.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.env = void 0;
      var detect_node_es_1 = require_browser();
      exports.env = {
        isNode: detect_node_es_1.isNode,
        forceCache: false
      };
    }
  });

  // node_modules/use-sidecar/dist/es5/hook.js
  var require_hook = __commonJS({
    "node_modules/use-sidecar/dist/es5/hook.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.useSidecar = void 0;
      var react_1 = require_react();
      var env_1 = require_env();
      var cache = /* @__PURE__ */ new WeakMap();
      var NO_OPTIONS = {};
      function useSidecar(importer, effect) {
        var options = effect && effect.options || NO_OPTIONS;
        if (env_1.env.isNode && !options.ssr) {
          return [null, null];
        }
        return useRealSidecar(importer, effect);
      }
      exports.useSidecar = useSidecar;
      function useRealSidecar(importer, effect) {
        var options = effect && effect.options || NO_OPTIONS;
        var couldUseCache = env_1.env.forceCache || env_1.env.isNode && !!options.ssr || !options.async;
        var _a = (0, react_1.useState)(couldUseCache ? function() {
          return cache.get(importer);
        } : void 0), Car = _a[0], setCar = _a[1];
        var _b = (0, react_1.useState)(null), error = _b[0], setError = _b[1];
        (0, react_1.useEffect)(function() {
          if (!Car) {
            importer().then(function(car) {
              var resolved = effect ? effect.read() : car.default || car;
              if (!resolved) {
                console.error("Sidecar error: with importer", importer);
                var error_1;
                if (effect) {
                  console.error("Sidecar error: with medium", effect);
                  error_1 = new Error("Sidecar medium was not found");
                } else {
                  error_1 = new Error("Sidecar was not found in exports");
                }
                setError(function() {
                  return error_1;
                });
                throw error_1;
              }
              cache.set(importer, resolved);
              setCar(function() {
                return resolved;
              });
            }, function(e) {
              return setError(function() {
                return e;
              });
            });
          }
        }, []);
        return [Car, error];
      }
    }
  });

  // node_modules/use-sidecar/dist/es5/hoc.js
  var require_hoc = __commonJS({
    "node_modules/use-sidecar/dist/es5/hoc.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sidecar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React3 = tslib_1.__importStar(require_react());
      var hook_1 = require_hook();
      function sidecar(importer, errorComponent) {
        var ErrorCase = function() {
          return errorComponent;
        };
        return function Sidecar(props) {
          var _a = (0, hook_1.useSidecar)(importer, props.sideCar), Car = _a[0], error = _a[1];
          if (error && errorComponent) {
            return ErrorCase;
          }
          return Car ? React3.createElement(Car, tslib_1.__assign({}, props)) : null;
        };
      }
      exports.sidecar = sidecar;
    }
  });

  // node_modules/use-sidecar/dist/es5/config.js
  var require_config = __commonJS({
    "node_modules/use-sidecar/dist/es5/config.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.setConfig = exports.config = void 0;
      exports.config = {
        onError: function(e) {
          return console.error(e);
        }
      };
      var setConfig = function(conf) {
        Object.assign(exports.config, conf);
      };
      exports.setConfig = setConfig;
    }
  });

  // node_modules/use-sidecar/dist/es5/medium.js
  var require_medium = __commonJS({
    "node_modules/use-sidecar/dist/es5/medium.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createSidecarMedium = exports.createMedium = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      function ItoI(a) {
        return a;
      }
      function innerCreateMedium(defaults, middleware) {
        if (middleware === void 0) {
          middleware = ItoI;
        }
        var buffer = [];
        var assigned = false;
        var medium = {
          read: function() {
            if (assigned) {
              throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
            }
            if (buffer.length) {
              return buffer[buffer.length - 1];
            }
            return defaults;
          },
          useMedium: function(data) {
            var item = middleware(data, assigned);
            buffer.push(item);
            return function() {
              buffer = buffer.filter(function(x) {
                return x !== item;
              });
            };
          },
          assignSyncMedium: function(cb) {
            assigned = true;
            while (buffer.length) {
              var cbs = buffer;
              buffer = [];
              cbs.forEach(cb);
            }
            buffer = {
              push: function(x) {
                return cb(x);
              },
              filter: function() {
                return buffer;
              }
            };
          },
          assignMedium: function(cb) {
            assigned = true;
            var pendingQueue = [];
            if (buffer.length) {
              var cbs = buffer;
              buffer = [];
              cbs.forEach(cb);
              pendingQueue = buffer;
            }
            var executeQueue = function() {
              var cbs2 = pendingQueue;
              pendingQueue = [];
              cbs2.forEach(cb);
            };
            var cycle = function() {
              return Promise.resolve().then(executeQueue);
            };
            cycle();
            buffer = {
              push: function(x) {
                pendingQueue.push(x);
                cycle();
              },
              filter: function(filter) {
                pendingQueue = pendingQueue.filter(filter);
                return buffer;
              }
            };
          }
        };
        return medium;
      }
      function createMedium(defaults, middleware) {
        if (middleware === void 0) {
          middleware = ItoI;
        }
        return innerCreateMedium(defaults, middleware);
      }
      exports.createMedium = createMedium;
      function createSidecarMedium(options) {
        if (options === void 0) {
          options = {};
        }
        var medium = innerCreateMedium(null);
        medium.options = tslib_1.__assign({ async: true, ssr: false }, options);
        return medium;
      }
      exports.createSidecarMedium = createSidecarMedium;
    }
  });

  // node_modules/use-sidecar/dist/es5/renderProp.js
  var require_renderProp = __commonJS({
    "node_modules/use-sidecar/dist/es5/renderProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.renderCar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React3 = tslib_1.__importStar(require_react());
      var react_1 = require_react();
      function renderCar(WrappedComponent, defaults) {
        function State(_a) {
          var stateRef = _a.stateRef, props = _a.props;
          var renderTarget = (0, react_1.useCallback)(function SideTarget() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            (0, react_1.useLayoutEffect)(function() {
              stateRef.current(args);
            });
            return null;
          }, []);
          return React3.createElement(WrappedComponent, tslib_1.__assign({}, props, { children: renderTarget }));
        }
        var Children = React3.memo(function(_a) {
          var stateRef = _a.stateRef, defaultState = _a.defaultState, children = _a.children;
          var _b = (0, react_1.useState)(defaultState.current), state = _b[0], setState = _b[1];
          (0, react_1.useEffect)(function() {
            stateRef.current = setState;
          }, []);
          return children.apply(void 0, state);
        }, function() {
          return true;
        });
        return function Combiner(props) {
          var defaultState = React3.useRef(defaults(props));
          var ref = React3.useRef(function(state) {
            return defaultState.current = state;
          });
          return React3.createElement(
            React3.Fragment,
            null,
            React3.createElement(State, { stateRef: ref, props }),
            React3.createElement(Children, { stateRef: ref, defaultState, children: props.children })
          );
        };
      }
      exports.renderCar = renderCar;
    }
  });

  // node_modules/use-sidecar/dist/es5/exports.js
  var require_exports = __commonJS({
    "node_modules/use-sidecar/dist/es5/exports.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.exportSidecar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React3 = tslib_1.__importStar(require_react());
      var SideCar = function(_a) {
        var sideCar = _a.sideCar, rest = tslib_1.__rest(_a, ["sideCar"]);
        if (!sideCar) {
          throw new Error("Sidecar: please provide `sideCar` property to import the right car");
        }
        var Target = sideCar.read();
        if (!Target) {
          throw new Error("Sidecar medium not found");
        }
        return React3.createElement(Target, tslib_1.__assign({}, rest));
      };
      SideCar.isSideCarExport = true;
      function exportSidecar(medium, exported) {
        medium.useMedium(exported);
        return SideCar;
      }
      exports.exportSidecar = exportSidecar;
    }
  });

  // node_modules/use-sidecar/dist/es5/index.js
  var require_es52 = __commonJS({
    "node_modules/use-sidecar/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.exportSidecar = exports.renderCar = exports.createSidecarMedium = exports.createMedium = exports.setConfig = exports.useSidecar = exports.sidecar = void 0;
      var hoc_1 = require_hoc();
      Object.defineProperty(exports, "sidecar", { enumerable: true, get: function() {
        return hoc_1.sidecar;
      } });
      var hook_1 = require_hook();
      Object.defineProperty(exports, "useSidecar", { enumerable: true, get: function() {
        return hook_1.useSidecar;
      } });
      var config_1 = require_config();
      Object.defineProperty(exports, "setConfig", { enumerable: true, get: function() {
        return config_1.setConfig;
      } });
      var medium_1 = require_medium();
      Object.defineProperty(exports, "createMedium", { enumerable: true, get: function() {
        return medium_1.createMedium;
      } });
      Object.defineProperty(exports, "createSidecarMedium", { enumerable: true, get: function() {
        return medium_1.createSidecarMedium;
      } });
      var renderProp_1 = require_renderProp();
      Object.defineProperty(exports, "renderCar", { enumerable: true, get: function() {
        return renderProp_1.renderCar;
      } });
      var exports_1 = require_exports();
      Object.defineProperty(exports, "exportSidecar", { enumerable: true, get: function() {
        return exports_1.exportSidecar;
      } });
    }
  });

  // node_modules/react-remove-scroll/dist/es5/medium.js
  var require_medium2 = __commonJS({
    "node_modules/react-remove-scroll/dist/es5/medium.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.effectCar = void 0;
      var use_sidecar_1 = require_es52();
      exports.effectCar = (0, use_sidecar_1.createSidecarMedium)();
    }
  });

  // node_modules/react-remove-scroll/dist/es5/UI.js
  var require_UI = __commonJS({
    "node_modules/react-remove-scroll/dist/es5/UI.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RemoveScroll = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React3 = tslib_1.__importStar(require_react());
      var constants_1 = require_constants();
      var use_callback_ref_1 = require_es5();
      var medium_1 = require_medium2();
      var nothing = function() {
        return;
      };
      var RemoveScroll = React3.forwardRef(function(props, parentRef) {
        var ref = React3.useRef(null);
        var _a = React3.useState({
          onScrollCapture: nothing,
          onWheelCapture: nothing,
          onTouchMoveCapture: nothing
        }), callbacks = _a[0], setCallbacks = _a[1];
        var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? "div" : _b, gapMode = props.gapMode, rest = tslib_1.__rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
        var SideCar = sideCar;
        var containerRef = (0, use_callback_ref_1.useMergeRefs)([ref, parentRef]);
        var containerProps = tslib_1.__assign(tslib_1.__assign({}, rest), callbacks);
        return React3.createElement(
          React3.Fragment,
          null,
          enabled && React3.createElement(SideCar, { sideCar: medium_1.effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
          forwardProps ? React3.cloneElement(React3.Children.only(children), tslib_1.__assign(tslib_1.__assign({}, containerProps), { ref: containerRef })) : React3.createElement(Container, tslib_1.__assign({}, containerProps, { className, ref: containerRef }), children)
        );
      });
      exports.RemoveScroll = RemoveScroll;
      RemoveScroll.defaultProps = {
        enabled: true,
        removeScrollBar: true,
        inert: false
      };
      RemoveScroll.classNames = {
        fullWidth: constants_1.fullWidthClassName,
        zeroRight: constants_1.zeroRightClassName
      };
    }
  });

  // node_modules/get-nonce/dist/es5/index.js
  var require_es53 = __commonJS({
    "node_modules/get-nonce/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var currentNonce;
      exports.setNonce = function(nonce) {
        currentNonce = nonce;
      };
      exports.getNonce = function() {
        if (currentNonce) {
          return currentNonce;
        }
        if (typeof __webpack_nonce__ !== "undefined") {
          return __webpack_nonce__;
        }
        return void 0;
      };
    }
  });

  // node_modules/react-style-singleton/dist/es5/singleton.js
  var require_singleton = __commonJS({
    "node_modules/react-style-singleton/dist/es5/singleton.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.stylesheetSingleton = void 0;
      var get_nonce_1 = require_es53();
      function makeStyleTag() {
        if (!document)
          return null;
        var tag = document.createElement("style");
        tag.type = "text/css";
        var nonce = (0, get_nonce_1.getNonce)();
        if (nonce) {
          tag.setAttribute("nonce", nonce);
        }
        return tag;
      }
      function injectStyles(tag, css) {
        if (tag.styleSheet) {
          tag.styleSheet.cssText = css;
        } else {
          tag.appendChild(document.createTextNode(css));
        }
      }
      function insertStyleTag(tag) {
        var head = document.head || document.getElementsByTagName("head")[0];
        head.appendChild(tag);
      }
      var stylesheetSingleton = function() {
        var counter = 0;
        var stylesheet = null;
        return {
          add: function(style) {
            if (counter == 0) {
              if (stylesheet = makeStyleTag()) {
                injectStyles(stylesheet, style);
                insertStyleTag(stylesheet);
              }
            }
            counter++;
          },
          remove: function() {
            counter--;
            if (!counter && stylesheet) {
              stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
              stylesheet = null;
            }
          }
        };
      };
      exports.stylesheetSingleton = stylesheetSingleton;
    }
  });

  // node_modules/react-style-singleton/dist/es5/hook.js
  var require_hook2 = __commonJS({
    "node_modules/react-style-singleton/dist/es5/hook.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.styleHookSingleton = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React3 = tslib_1.__importStar(require_react());
      var singleton_1 = require_singleton();
      var styleHookSingleton = function() {
        var sheet = (0, singleton_1.stylesheetSingleton)();
        return function(styles, isDynamic) {
          React3.useEffect(function() {
            sheet.add(styles);
            return function() {
              sheet.remove();
            };
          }, [styles && isDynamic]);
        };
      };
      exports.styleHookSingleton = styleHookSingleton;
    }
  });

  // node_modules/react-style-singleton/dist/es5/component.js
  var require_component = __commonJS({
    "node_modules/react-style-singleton/dist/es5/component.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.styleSingleton = void 0;
      var hook_1 = require_hook2();
      var styleSingleton = function() {
        var useStyle = (0, hook_1.styleHookSingleton)();
        var Sheet = function(_a) {
          var styles = _a.styles, dynamic = _a.dynamic;
          useStyle(styles, dynamic);
          return null;
        };
        return Sheet;
      };
      exports.styleSingleton = styleSingleton;
    }
  });

  // node_modules/react-style-singleton/dist/es5/index.js
  var require_es54 = __commonJS({
    "node_modules/react-style-singleton/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.styleHookSingleton = exports.stylesheetSingleton = exports.styleSingleton = void 0;
      var component_1 = require_component();
      Object.defineProperty(exports, "styleSingleton", { enumerable: true, get: function() {
        return component_1.styleSingleton;
      } });
      var singleton_1 = require_singleton();
      Object.defineProperty(exports, "stylesheetSingleton", { enumerable: true, get: function() {
        return singleton_1.stylesheetSingleton;
      } });
      var hook_1 = require_hook2();
      Object.defineProperty(exports, "styleHookSingleton", { enumerable: true, get: function() {
        return hook_1.styleHookSingleton;
      } });
    }
  });

  // node_modules/react-remove-scroll-bar/dist/es5/utils.js
  var require_utils = __commonJS({
    "node_modules/react-remove-scroll-bar/dist/es5/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getGapWidth = exports.zeroGap = void 0;
      exports.zeroGap = {
        left: 0,
        top: 0,
        right: 0,
        gap: 0
      };
      var parse = function(x) {
        return parseInt(x || "", 10) || 0;
      };
      var getOffset = function(gapMode) {
        var cs = window.getComputedStyle(document.body);
        var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
        var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
        var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
        return [parse(left), parse(top), parse(right)];
      };
      var getGapWidth = function(gapMode) {
        if (gapMode === void 0) {
          gapMode = "margin";
        }
        if (typeof window === "undefined") {
          return exports.zeroGap;
        }
        var offsets = getOffset(gapMode);
        var documentWidth = document.documentElement.clientWidth;
        var windowWidth = window.innerWidth;
        return {
          left: offsets[0],
          top: offsets[1],
          right: offsets[2],
          gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
        };
      };
      exports.getGapWidth = getGapWidth;
    }
  });

  // node_modules/react-remove-scroll-bar/dist/es5/component.js
  var require_component2 = __commonJS({
    "node_modules/react-remove-scroll-bar/dist/es5/component.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RemoveScrollBar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React3 = tslib_1.__importStar(require_react());
      var react_style_singleton_1 = require_es54();
      var constants_1 = require_constants();
      var utils_1 = require_utils();
      var Style = (0, react_style_singleton_1.styleSingleton)();
      var getStyles = function(_a, allowRelative, gapMode, important) {
        var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
        if (gapMode === void 0) {
          gapMode = "margin";
        }
        return "\n  .".concat(constants_1.noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
          allowRelative && "position: relative ".concat(important, ";"),
          gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
          gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
        ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(constants_1.zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(constants_1.fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(constants_1.zeroRightClassName, " .").concat(constants_1.zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(constants_1.fullWidthClassName, " .").concat(constants_1.fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body {\n    ").concat(constants_1.removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
      };
      var RemoveScrollBar = function(props) {
        var noRelative = props.noRelative, noImportant = props.noImportant, _a = props.gapMode, gapMode = _a === void 0 ? "margin" : _a;
        var gap = React3.useMemo(function() {
          return (0, utils_1.getGapWidth)(gapMode);
        }, [gapMode]);
        return React3.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
      };
      exports.RemoveScrollBar = RemoveScrollBar;
    }
  });

  // node_modules/react-remove-scroll-bar/dist/es5/index.js
  var require_es55 = __commonJS({
    "node_modules/react-remove-scroll-bar/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getGapWidth = exports.removedBarSizeVariable = exports.noScrollbarsClassName = exports.fullWidthClassName = exports.zeroRightClassName = exports.RemoveScrollBar = void 0;
      var component_1 = require_component2();
      Object.defineProperty(exports, "RemoveScrollBar", { enumerable: true, get: function() {
        return component_1.RemoveScrollBar;
      } });
      var constants_1 = require_constants();
      Object.defineProperty(exports, "zeroRightClassName", { enumerable: true, get: function() {
        return constants_1.zeroRightClassName;
      } });
      Object.defineProperty(exports, "fullWidthClassName", { enumerable: true, get: function() {
        return constants_1.fullWidthClassName;
      } });
      Object.defineProperty(exports, "noScrollbarsClassName", { enumerable: true, get: function() {
        return constants_1.noScrollbarsClassName;
      } });
      Object.defineProperty(exports, "removedBarSizeVariable", { enumerable: true, get: function() {
        return constants_1.removedBarSizeVariable;
      } });
      var utils_1 = require_utils();
      Object.defineProperty(exports, "getGapWidth", { enumerable: true, get: function() {
        return utils_1.getGapWidth;
      } });
    }
  });

  // node_modules/react-remove-scroll/dist/es5/aggresiveCapture.js
  var require_aggresiveCapture = __commonJS({
    "node_modules/react-remove-scroll/dist/es5/aggresiveCapture.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.nonPassive = void 0;
      var passiveSupported = false;
      if (typeof window !== "undefined") {
        try {
          options = Object.defineProperty({}, "passive", {
            get: function() {
              passiveSupported = true;
              return true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (err) {
          passiveSupported = false;
        }
      }
      var options;
      exports.nonPassive = passiveSupported ? { passive: false } : false;
    }
  });

  // node_modules/react-remove-scroll/dist/es5/handleScroll.js
  var require_handleScroll = __commonJS({
    "node_modules/react-remove-scroll/dist/es5/handleScroll.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.handleScroll = exports.locationCouldBeScrolled = void 0;
      var alwaysContainsScroll = function(node) {
        return node.tagName === "TEXTAREA";
      };
      var elementCanBeScrolled = function(node, overflow) {
        var styles = window.getComputedStyle(node);
        return (
          // not-not-scrollable
          styles[overflow] !== "hidden" && // contains scroll inside self
          !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
        );
      };
      var elementCouldBeVScrolled = function(node) {
        return elementCanBeScrolled(node, "overflowY");
      };
      var elementCouldBeHScrolled = function(node) {
        return elementCanBeScrolled(node, "overflowX");
      };
      var locationCouldBeScrolled = function(axis, node) {
        var ownerDocument = node.ownerDocument;
        var current = node;
        do {
          if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
            current = current.host;
          }
          var isScrollable = elementCouldBeScrolled(axis, current);
          if (isScrollable) {
            var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
            if (s > d) {
              return true;
            }
          }
          current = current.parentNode;
        } while (current && current !== ownerDocument.body);
        return false;
      };
      exports.locationCouldBeScrolled = locationCouldBeScrolled;
      var getVScrollVariables = function(_a) {
        var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
        return [
          scrollTop,
          scrollHeight,
          clientHeight
        ];
      };
      var getHScrollVariables = function(_a) {
        var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
        return [
          scrollLeft,
          scrollWidth,
          clientWidth
        ];
      };
      var elementCouldBeScrolled = function(axis, node) {
        return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
      };
      var getScrollVariables = function(axis, node) {
        return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
      };
      var getDirectionFactor = function(axis, direction) {
        return axis === "h" && direction === "rtl" ? -1 : 1;
      };
      var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
        var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
        var delta = directionFactor * sourceDelta;
        var target = event.target;
        var targetInLock = endTarget.contains(target);
        var shouldCancelScroll = false;
        var isDeltaPositive = delta > 0;
        var availableScroll = 0;
        var availableScrollTop = 0;
        do {
          var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
          var elementScroll = scroll_1 - capacity - directionFactor * position;
          if (position || elementScroll) {
            if (elementCouldBeScrolled(axis, target)) {
              availableScroll += elementScroll;
              availableScrollTop += position;
            }
          }
          target = target.parentNode;
        } while (
          // portaled content
          !targetInLock && target !== document.body || // self content
          targetInLock && (endTarget.contains(target) || endTarget === target)
        );
        if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
          shouldCancelScroll = true;
        } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
          shouldCancelScroll = true;
        }
        return shouldCancelScroll;
      };
      exports.handleScroll = handleScroll;
    }
  });

  // node_modules/react-remove-scroll/dist/es5/SideEffect.js
  var require_SideEffect = __commonJS({
    "node_modules/react-remove-scroll/dist/es5/SideEffect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RemoveScrollSideCar = exports.getDeltaXY = exports.getTouchXY = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React3 = tslib_1.__importStar(require_react());
      var react_remove_scroll_bar_1 = require_es55();
      var react_style_singleton_1 = require_es54();
      var aggresiveCapture_1 = require_aggresiveCapture();
      var handleScroll_1 = require_handleScroll();
      var getTouchXY = function(event) {
        return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
      };
      exports.getTouchXY = getTouchXY;
      var getDeltaXY = function(event) {
        return [event.deltaX, event.deltaY];
      };
      exports.getDeltaXY = getDeltaXY;
      var extractRef = function(ref) {
        return ref && "current" in ref ? ref.current : ref;
      };
      var deltaCompare = function(x, y) {
        return x[0] === y[0] && x[1] === y[1];
      };
      var generateStyle = function(id) {
        return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
      };
      var idCounter = 0;
      var lockStack = [];
      function RemoveScrollSideCar(props) {
        var shouldPreventQueue = React3.useRef([]);
        var touchStartRef = React3.useRef([0, 0]);
        var activeAxis = React3.useRef();
        var id = React3.useState(idCounter++)[0];
        var Style = React3.useState(react_style_singleton_1.styleSingleton)[0];
        var lastProps = React3.useRef(props);
        React3.useEffect(function() {
          lastProps.current = props;
        }, [props]);
        React3.useEffect(function() {
          if (props.inert) {
            document.body.classList.add("block-interactivity-".concat(id));
            var allow_1 = tslib_1.__spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
            allow_1.forEach(function(el) {
              return el.classList.add("allow-interactivity-".concat(id));
            });
            return function() {
              document.body.classList.remove("block-interactivity-".concat(id));
              allow_1.forEach(function(el) {
                return el.classList.remove("allow-interactivity-".concat(id));
              });
            };
          }
          return;
        }, [props.inert, props.lockRef.current, props.shards]);
        var shouldCancelEvent = React3.useCallback(function(event, parent) {
          if ("touches" in event && event.touches.length === 2) {
            return !lastProps.current.allowPinchZoom;
          }
          var touch = (0, exports.getTouchXY)(event);
          var touchStart = touchStartRef.current;
          var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
          var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
          var currentAxis;
          var target = event.target;
          var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
          if ("touches" in event && moveDirection === "h" && target.type === "range") {
            return false;
          }
          var canBeScrolledInMainDirection = (0, handleScroll_1.locationCouldBeScrolled)(moveDirection, target);
          if (!canBeScrolledInMainDirection) {
            return true;
          }
          if (canBeScrolledInMainDirection) {
            currentAxis = moveDirection;
          } else {
            currentAxis = moveDirection === "v" ? "h" : "v";
            canBeScrolledInMainDirection = (0, handleScroll_1.locationCouldBeScrolled)(moveDirection, target);
          }
          if (!canBeScrolledInMainDirection) {
            return false;
          }
          if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
            activeAxis.current = currentAxis;
          }
          if (!currentAxis) {
            return true;
          }
          var cancelingAxis = activeAxis.current || currentAxis;
          return (0, handleScroll_1.handleScroll)(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
        }, []);
        var shouldPrevent = React3.useCallback(function(_event) {
          var event = _event;
          if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) {
            return;
          }
          var delta = "deltaY" in event ? (0, exports.getDeltaXY)(event) : (0, exports.getTouchXY)(event);
          var sourceEvent = shouldPreventQueue.current.filter(function(e) {
            return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta);
          })[0];
          if (sourceEvent && sourceEvent.should) {
            if (event.cancelable) {
              event.preventDefault();
            }
            return;
          }
          if (!sourceEvent) {
            var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
              return node.contains(event.target);
            });
            var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
            if (shouldStop) {
              if (event.cancelable) {
                event.preventDefault();
              }
            }
          }
        }, []);
        var shouldCancel = React3.useCallback(function(name, delta, target, should) {
          var event = { name, delta, target, should };
          shouldPreventQueue.current.push(event);
          setTimeout(function() {
            shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
              return e !== event;
            });
          }, 1);
        }, []);
        var scrollTouchStart = React3.useCallback(function(event) {
          touchStartRef.current = (0, exports.getTouchXY)(event);
          activeAxis.current = void 0;
        }, []);
        var scrollWheel = React3.useCallback(function(event) {
          shouldCancel(event.type, (0, exports.getDeltaXY)(event), event.target, shouldCancelEvent(event, props.lockRef.current));
        }, []);
        var scrollTouchMove = React3.useCallback(function(event) {
          shouldCancel(event.type, (0, exports.getTouchXY)(event), event.target, shouldCancelEvent(event, props.lockRef.current));
        }, []);
        React3.useEffect(function() {
          lockStack.push(Style);
          props.setCallbacks({
            onScrollCapture: scrollWheel,
            onWheelCapture: scrollWheel,
            onTouchMoveCapture: scrollTouchMove
          });
          document.addEventListener("wheel", shouldPrevent, aggresiveCapture_1.nonPassive);
          document.addEventListener("touchmove", shouldPrevent, aggresiveCapture_1.nonPassive);
          document.addEventListener("touchstart", scrollTouchStart, aggresiveCapture_1.nonPassive);
          return function() {
            lockStack = lockStack.filter(function(inst) {
              return inst !== Style;
            });
            document.removeEventListener("wheel", shouldPrevent, aggresiveCapture_1.nonPassive);
            document.removeEventListener("touchmove", shouldPrevent, aggresiveCapture_1.nonPassive);
            document.removeEventListener("touchstart", scrollTouchStart, aggresiveCapture_1.nonPassive);
          };
        }, []);
        var removeScrollBar = props.removeScrollBar, inert = props.inert;
        return React3.createElement(
          React3.Fragment,
          null,
          inert ? React3.createElement(Style, { styles: generateStyle(id) }) : null,
          removeScrollBar ? React3.createElement(react_remove_scroll_bar_1.RemoveScrollBar, { gapMode: props.gapMode }) : null
        );
      }
      exports.RemoveScrollSideCar = RemoveScrollSideCar;
    }
  });

  // node_modules/react-remove-scroll/dist/es5/sidecar.js
  var require_sidecar = __commonJS({
    "node_modules/react-remove-scroll/dist/es5/sidecar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var use_sidecar_1 = require_es52();
      var SideEffect_1 = require_SideEffect();
      var medium_1 = require_medium2();
      exports.default = (0, use_sidecar_1.exportSidecar)(medium_1.effectCar, SideEffect_1.RemoveScrollSideCar);
    }
  });

  // node_modules/react-remove-scroll/dist/es5/Combination.js
  var require_Combination = __commonJS({
    "node_modules/react-remove-scroll/dist/es5/Combination.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var React3 = tslib_1.__importStar(require_react());
      var UI_1 = require_UI();
      var sidecar_1 = tslib_1.__importDefault(require_sidecar());
      var ReactRemoveScroll = React3.forwardRef(function(props, ref) {
        return React3.createElement(UI_1.RemoveScroll, tslib_1.__assign({}, props, { ref, sideCar: sidecar_1.default }));
      });
      ReactRemoveScroll.classNames = UI_1.RemoveScroll.classNames;
      exports.default = ReactRemoveScroll;
    }
  });

  // node_modules/react-remove-scroll/dist/es5/index.js
  var require_es56 = __commonJS({
    "node_modules/react-remove-scroll/dist/es5/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RemoveScroll = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var Combination_1 = tslib_1.__importDefault(require_Combination());
      exports.RemoveScroll = Combination_1.default;
    }
  });

  // node_modules/@nextui-org/popover/dist/index.js
  var require_dist43 = __commonJS({
    "node_modules/@nextui-org/popover/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        FreeSoloPopover: () => free_solo_popover_default,
        Popover: () => popover_default,
        PopoverContent: () => popover_content_default,
        PopoverProvider: () => PopoverProvider,
        PopoverTrigger: () => popover_trigger_default,
        usePopover: () => usePopover,
        usePopoverContext: () => usePopoverContext
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react4 = require_react();
      var import_system2 = require_dist4();
      var import_overlays4 = require_main14();
      var import_framer_motion = require_cjs2();
      var import_react22 = require_react();
      var import_react_utils = require_dist10();
      var import_overlays2 = require_main27();
      var import_focus = require_main12();
      var import_overlays3 = require_main14();
      var import_system = require_dist4();
      var import_aria_utils2 = require_dist6();
      var import_theme = require_dist5();
      var import_utils2 = require_main7();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      var import_react5 = require_react();
      var import_overlays = require_main14();
      var import_aria_utils = require_dist6();
      var import_utils = require_main7();
      function useReactAriaPopover(props, state) {
        const _a = props, {
          triggerRef,
          popoverRef,
          showArrow,
          offset = 7,
          crossOffset = 0,
          scrollRef,
          shouldFlip,
          boundaryElement,
          shouldCloseOnBlur = true,
          placement: placementProp = "top",
          containerPadding,
          shouldCloseOnInteractOutside,
          isNonModal: isNonModalProp,
          isKeyboardDismissDisabled
        } = _a, otherProps = __objRest(_a, [
          "triggerRef",
          "popoverRef",
          "showArrow",
          "offset",
          "crossOffset",
          "scrollRef",
          "shouldFlip",
          "boundaryElement",
          "shouldCloseOnBlur",
          "placement",
          "containerPadding",
          "shouldCloseOnInteractOutside",
          "isNonModal",
          "isKeyboardDismissDisabled"
        ]);
        const isNonModal = isNonModalProp || true;
        const { overlayProps, underlayProps } = (0, import_overlays.useOverlay)(
          {
            isOpen: state.isOpen,
            onClose: state.close,
            shouldCloseOnBlur,
            isDismissable: true,
            isKeyboardDismissDisabled,
            shouldCloseOnInteractOutside: shouldCloseOnInteractOutside ? shouldCloseOnInteractOutside : (element) => {
              let trigger = triggerRef == null ? void 0 : triggerRef.current;
              return !trigger || !trigger.contains(element);
            }
          },
          popoverRef
        );
        const {
          overlayProps: positionProps,
          arrowProps,
          placement
        } = (0, import_overlays.useOverlayPosition)(__spreadProps(__spreadValues({}, otherProps), {
          shouldFlip,
          crossOffset,
          targetRef: triggerRef,
          overlayRef: popoverRef,
          isOpen: state.isOpen,
          scrollRef,
          boundaryElement,
          containerPadding,
          placement: (0, import_aria_utils.toReactAriaPlacement)(placementProp),
          offset: showArrow ? offset + 3 : offset,
          onClose: () => {
          }
        }));
        (0, import_react5.useEffect)(() => {
          if (state.isOpen && !isNonModal && popoverRef.current) {
            return (0, import_aria_utils.ariaHideOutside)([popoverRef.current]);
          }
        }, [isNonModal, state.isOpen, popoverRef]);
        return {
          popoverProps: (0, import_utils.mergeProps)(overlayProps, positionProps),
          arrowProps,
          underlayProps,
          placement
        };
      }
      function usePopover(originalProps) {
        var _a, _b;
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.popover.variantKeys);
        const _a2 = props, {
          as,
          children,
          ref,
          state: stateProp,
          triggerRef: triggerRefProp,
          scrollRef,
          isOpen,
          defaultOpen,
          onOpenChange,
          isNonModal = true,
          shouldFlip = true,
          containerPadding = 12,
          shouldBlockScroll = false,
          shouldCloseOnBlur,
          portalContainer,
          placement: placementProp = "top",
          triggerType = "dialog",
          showArrow = false,
          offset = 7,
          crossOffset = 0,
          boundaryElement,
          isKeyboardDismissDisabled,
          shouldCloseOnInteractOutside,
          motionProps,
          className,
          classNames,
          onClose
        } = _a2, otherProps = __objRest(_a2, [
          "as",
          "children",
          "ref",
          "state",
          "triggerRef",
          "scrollRef",
          "isOpen",
          "defaultOpen",
          "onOpenChange",
          "isNonModal",
          "shouldFlip",
          "containerPadding",
          "shouldBlockScroll",
          "shouldCloseOnBlur",
          "portalContainer",
          "placement",
          "triggerType",
          "showArrow",
          "offset",
          "crossOffset",
          "boundaryElement",
          "isKeyboardDismissDisabled",
          "shouldCloseOnInteractOutside",
          "motionProps",
          "className",
          "classNames",
          "onClose"
        ]);
        const Component = as || "div";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const domTriggerRef = (0, import_react3.useRef)(null);
        const triggerRef = triggerRefProp || domTriggerRef;
        const disableAnimation = (_a = originalProps.disableAnimation) != null ? _a : false;
        const innerState = (0, import_overlays2.useOverlayTriggerState)({
          isOpen,
          defaultOpen,
          onOpenChange: (isOpen2) => {
            onOpenChange == null ? void 0 : onOpenChange(isOpen2);
            if (!isOpen2) {
              onClose == null ? void 0 : onClose();
            }
          }
        });
        const state = stateProp || innerState;
        const {
          popoverProps,
          underlayProps,
          arrowProps,
          placement: ariaPlacement
        } = useReactAriaPopover(
          {
            triggerRef,
            isNonModal,
            popoverRef: domRef,
            placement: placementProp,
            offset,
            scrollRef,
            shouldCloseOnBlur,
            boundaryElement,
            crossOffset,
            shouldFlip,
            containerPadding,
            isKeyboardDismissDisabled,
            shouldCloseOnInteractOutside
          },
          state
        );
        const { triggerProps } = (0, import_overlays3.useOverlayTrigger)({ type: triggerType }, state, triggerRef);
        const { isFocusVisible, isFocused, focusProps } = (0, import_focus.useFocusRing)();
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.popover)(__spreadValues({}, variantProps)),
          [...Object.values(variantProps)]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getPopoverProps = (props2 = {}) => __spreadProps(__spreadValues({
          ref: domRef
        }, (0, import_utils2.mergeProps)(popoverProps, otherProps, props2)), {
          style: (0, import_utils2.mergeProps)(popoverProps.style, otherProps.style, props2.style)
        });
        const getDialogProps = (props2 = {}) => __spreadProps(__spreadValues({
          "data-open": (0, import_shared_utils.dataAttr)(state.isOpen),
          "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
          "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
          "data-placement": (0, import_aria_utils2.getArrowPlacement)(ariaPlacement, placementProp)
        }, (0, import_utils2.mergeProps)(focusProps, props2)), {
          className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2.className) }),
          style: {
            outline: "none"
          }
        });
        const placement = (0, import_react3.useMemo)(
          () => (0, import_aria_utils2.getShouldUseAxisPlacement)(ariaPlacement, placementProp) ? ariaPlacement : placementProp,
          [ariaPlacement, placementProp]
        );
        const getTriggerProps = (0, import_react3.useCallback)(
          (props2 = {}, _ref = null) => {
            return __spreadProps(__spreadValues({
              "aria-haspopup": "dialog"
            }, (0, import_utils2.mergeProps)(triggerProps, props2)), {
              className: slots.trigger({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.trigger, props2.className) }),
              ref: (0, import_utils2.mergeRefs)(_ref, triggerRef)
            });
          },
          [isOpen, state, triggerProps, triggerRef]
        );
        const getBackdropProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues(__spreadValues({
            className: slots.backdrop({ class: classNames == null ? void 0 : classNames.backdrop }),
            onClick: () => state.close()
          }, underlayProps), props2),
          [slots, classNames, underlayProps]
        );
        const getArrowProps = (0, import_react3.useCallback)(
          () => __spreadValues({
            className: slots.arrow({ class: classNames == null ? void 0 : classNames.arrow }),
            "data-placement": (0, import_aria_utils2.getArrowPlacement)(ariaPlacement, placementProp)
          }, arrowProps),
          [arrowProps, ariaPlacement, placementProp, slots, classNames]
        );
        (0, import_react22.useEffect)(() => {
          if (state.isOpen && (domRef == null ? void 0 : domRef.current)) {
            return (0, import_overlays3.ariaHideOutside)([domRef == null ? void 0 : domRef.current]);
          }
        }, [state.isOpen, domRef]);
        return {
          state,
          Component,
          children,
          classNames,
          showArrow,
          triggerRef,
          placement,
          isNonModal,
          popoverRef: domRef,
          portalContainer,
          isOpen: state.isOpen,
          onClose: state.close,
          disableAnimation,
          shouldBlockScroll,
          backdrop: (_b = originalProps.backdrop) != null ? _b : "transparent",
          motionProps,
          getBackdropProps,
          getPopoverProps,
          getTriggerProps,
          getArrowProps,
          getDialogProps
        };
      }
      var import_react_utils2 = require_dist10();
      var [PopoverProvider, usePopoverContext] = (0, import_react_utils2.createContext)({
        name: "PopoverContext",
        errorMessage: "usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`"
      });
      var import_jsx_runtime = require_jsx_runtime();
      var Popover = (0, import_system2.forwardRef)((props, ref) => {
        const _a = props, { children } = _a, otherProps = __objRest(_a, ["children"]);
        const context = usePopover(__spreadProps(__spreadValues({}, otherProps), { ref }));
        const [trigger, content] = import_react4.Children.toArray(children);
        const overlay = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_overlays4.Overlay, { portalContainer: context.portalContainer, children: content });
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(PopoverProvider, { value: context, children: [
          trigger,
          context.disableAnimation && context.isOpen ? overlay : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, { children: context.isOpen ? overlay : null })
        ] });
      });
      Popover.displayName = "NextUI.Popover";
      var popover_default = Popover;
      var import_react52 = require_react();
      var import_system3 = require_dist4();
      var import_react_utils3 = require_dist10();
      var import_use_aria_button = require_dist21();
      var import_button = require_dist22();
      var import_utils3 = require_main7();
      var import_jsx_runtime2 = require_jsx_runtime();
      var PopoverTrigger = (0, import_system3.forwardRef)((props, _) => {
        const { triggerRef, getTriggerProps } = usePopoverContext();
        const _a = props, { children } = _a, otherProps = __objRest(_a, ["children"]);
        const child = (0, import_react52.useMemo)(() => {
          if (typeof children === "string")
            return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("p", { children });
          return import_react52.Children.only(children);
        }, [children]);
        const _b = (0, import_react52.useMemo)(() => {
          return getTriggerProps((0, import_utils3.mergeProps)(child.props, otherProps), child.ref);
        }, [getTriggerProps, child.props, otherProps, child.ref]), { onPress } = _b, rest = __objRest(_b, ["onPress"]);
        const [, triggerChildren] = (0, import_react_utils3.pickChildren)(children, import_button.Button);
        const { buttonProps } = (0, import_use_aria_button.useAriaButton)({ onPress }, triggerRef);
        const hasNextUIButton = (0, import_react52.useMemo)(() => {
          return (triggerChildren == null ? void 0 : triggerChildren[0]) !== void 0;
        }, [triggerChildren]);
        return (0, import_react52.cloneElement)(child, (0, import_utils3.mergeProps)(rest, hasNextUIButton ? { onPress } : buttonProps));
      });
      PopoverTrigger.displayName = "NextUI.PopoverTrigger";
      var popover_trigger_default = PopoverTrigger;
      var import_react6 = require_react();
      var import_system4 = require_dist4();
      var import_overlays5 = require_main14();
      var import_framer_transitions = require_dist13();
      var import_framer_motion2 = require_cjs2();
      var import_dialog = require_main32();
      var import_utils4 = require_main7();
      var import_react_remove_scroll = require_es56();
      var import_aria_utils3 = require_dist6();
      var import_jsx_runtime3 = require_jsx_runtime();
      var PopoverContent = (0, import_system4.forwardRef)((props, _) => {
        const _a = props, { as, children } = _a, otherProps = __objRest(_a, ["as", "children"]);
        const {
          Component: OverlayComponent,
          isOpen,
          placement,
          showArrow,
          motionProps,
          backdrop,
          disableAnimation,
          shouldBlockScroll,
          getPopoverProps,
          getArrowProps,
          getDialogProps,
          getBackdropProps,
          isNonModal,
          onClose
        } = usePopoverContext();
        const Component = as || OverlayComponent || "div";
        const dialogRef = (0, import_react6.useRef)(null);
        const { dialogProps, titleProps } = (0, import_dialog.useDialog)({}, dialogRef);
        delete dialogProps.role;
        const arrowContent = (0, import_react6.useMemo)(() => {
          if (!showArrow)
            return null;
          return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", __spreadValues({}, getArrowProps()));
        }, [showArrow, getArrowProps]);
        const content = /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
          !isNonModal && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_overlays5.DismissButton, { onDismiss: onClose }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Component, __spreadProps(__spreadValues({}, getDialogProps((0, import_utils4.mergeProps)(dialogProps, otherProps))), { ref: dialogRef, children: typeof children === "function" ? children(titleProps) : children })),
          arrowContent,
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_overlays5.DismissButton, { onDismiss: onClose })
        ] });
        const backdropContent = (0, import_react6.useMemo)(() => {
          if (backdrop === "transparent") {
            return null;
          }
          if (disableAnimation) {
            return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", __spreadValues({}, getBackdropProps()));
          }
          return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_framer_motion2.motion.div,
            __spreadValues({
              animate: "enter",
              exit: "exit",
              initial: "exit",
              variants: import_framer_transitions.TRANSITION_VARIANTS.fade
            }, getBackdropProps())
          );
        }, [backdrop, disableAnimation, getBackdropProps]);
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", __spreadProps(__spreadValues({}, getPopoverProps()), { children: [
          backdropContent,
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_react_remove_scroll.RemoveScroll, { forwardProps: true, enabled: shouldBlockScroll && isOpen, removeScrollBar: false, children: disableAnimation ? content : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            import_framer_motion2.motion.div,
            __spreadProps(__spreadValues({
              animate: "enter",
              exit: "exit",
              initial: "initial",
              style: __spreadValues({}, (0, import_aria_utils3.getTransformOrigins)(placement === "center" ? "top" : placement)),
              variants: import_framer_transitions.TRANSITION_VARIANTS.scaleSpringOpacity
            }, motionProps), {
              children: content
            })
          ) })
        ] }));
      });
      PopoverContent.displayName = "NextUI.PopoverContent";
      var popover_content_default = PopoverContent;
      var React22 = __toESM2(require_react());
      var import_overlays6 = require_main14();
      var import_system5 = require_dist4();
      var import_framer_motion3 = require_cjs2();
      var import_utils5 = require_main7();
      var import_aria_utils4 = require_dist6();
      var import_framer_transitions2 = require_dist13();
      var import_jsx_runtime4 = require_jsx_runtime();
      var FreeSoloPopoverWrapper = (_a) => {
        var _b = _a, {
          children,
          motionProps,
          placement,
          disableAnimation,
          style = {}
        } = _b, otherProps = __objRest(_b, [
          "children",
          "motionProps",
          "placement",
          "disableAnimation",
          "style"
        ]);
        return disableAnimation ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", __spreadProps(__spreadValues({}, otherProps), { children })) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          import_framer_motion3.motion.div,
          __spreadProps(__spreadValues({
            animate: "enter",
            exit: "exit",
            initial: "initial",
            style: __spreadValues(__spreadValues({}, style), (0, import_aria_utils4.getTransformOrigins)(placement === "center" ? "top" : placement)),
            variants: import_framer_transitions2.TRANSITION_VARIANTS.scaleSpringOpacity
          }, (0, import_utils5.mergeProps)(otherProps, motionProps)), {
            children
          })
        );
      };
      var FreeSoloPopover = (0, import_system5.forwardRef)((props, ref) => {
        const {
          Component,
          state,
          children,
          placement,
          backdrop,
          showArrow,
          portalContainer,
          disableAnimation,
          motionProps,
          isNonModal,
          getPopoverProps,
          getBackdropProps,
          getDialogProps,
          getArrowProps
        } = usePopover(__spreadProps(__spreadValues({}, props), {
          shouldCloseOnInteractOutside: void 0,
          ref
        }));
        const arrowContent = React22.useMemo(() => {
          if (!showArrow)
            return null;
          return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", __spreadValues({}, getArrowProps()));
        }, [showArrow, getArrowProps]);
        const backdropContent = React22.useMemo(() => {
          if (backdrop === "transparent") {
            return null;
          }
          if (disableAnimation) {
            return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", __spreadValues({}, getBackdropProps()));
          }
          return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            import_framer_motion3.motion.div,
            __spreadValues({
              animate: "enter",
              exit: "exit",
              initial: "exit",
              variants: import_framer_transitions2.TRANSITION_VARIANTS.fade
            }, getBackdropProps())
          );
        }, [backdrop, disableAnimation, getBackdropProps]);
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_overlays6.Overlay, { portalContainer, children: [
          !isNonModal && backdropContent,
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Component, __spreadProps(__spreadValues({}, getPopoverProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
            FreeSoloPopoverWrapper,
            __spreadProps(__spreadValues({
              disableAnimation,
              motionProps,
              placement,
              tabIndex: -1
            }, getDialogProps()), {
              children: [
                !isNonModal && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_overlays6.DismissButton, { onDismiss: state.close }),
                children,
                arrowContent,
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_overlays6.DismissButton, { onDismiss: state.close })
              ]
            })
          ) }))
        ] });
      });
      FreeSoloPopover.displayName = "NextUI.FreeSoloPopover";
      var free_solo_popover_default = FreeSoloPopover;
    }
  });

  // node_modules/@react-aria/menu/dist/main.js
  var require_main33 = __commonJS({
    "node_modules/@react-aria/menu/dist/main.js"(exports, module) {
      var $fHYTQ$reactariautils = require_main7();
      var $fHYTQ$reactariai18n = require_main10();
      var $fHYTQ$reactariainteractions = require_main11();
      var $fHYTQ$reactariaoverlays = require_main14();
      var $fHYTQ$reactariaselection = require_main18();
      var $fHYTQ$reactariafocus = require_main12();
      var $fHYTQ$reactstatelycollections = require_main15();
      var $fHYTQ$react = require_react();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "useMenuTrigger", () => $7211ab9328763fb9$export$dc9c12ed27dd1b49);
      $parcel$export(module.exports, "useMenu", () => $a3815f0132802737$export$38eaa17faae8f579);
      $parcel$export(module.exports, "useMenuItem", () => $38191ed02615ec07$export$9d32628fc2aea7da);
      $parcel$export(module.exports, "useMenuSection", () => $63008655e23408c5$export$73f7a44322579622);
      var $d1742ec2644a0949$exports = {};
      var $429891642bf97c51$exports = {};
      $429891642bf97c51$exports = {
        "longPressMessage": `\u0627\u0636\u063A\u0637 \u0645\u0637\u0648\u0644\u0627\u064B \u0623\u0648 \u0627\u0636\u063A\u0637 \u0639\u0644\u0649 Alt + \u0627\u0644\u0633\u0647\u0645 \u0644\u0623\u0633\u0641\u0644 \u0644\u0641\u062A\u062D \u0627\u0644\u0642\u0627\u0626\u0645\u0629`
      };
      var $40d90b799072e111$exports = {};
      $40d90b799072e111$exports = {
        "longPressMessage": `\u041D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 \u043F\u0440\u043E\u0434\u044A\u043B\u0436\u0438\u0442\u0435\u043B\u043D\u043E \u0438\u043B\u0438 \u043D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 Alt+ \u0441\u0442\u0440\u0435\u043B\u043A\u0430 \u043D\u0430\u0434\u043E\u043B\u0443, \u0437\u0430 \u0434\u0430 \u043E\u0442\u0432\u043E\u0440\u0438\u0442\u0435 \u043C\u0435\u043D\u044E\u0442\u043E`
      };
      var $587b89d60e4f3e24$exports = {};
      $587b89d60e4f3e24$exports = {
        "longPressMessage": `Dlouh\xFDm stiskem nebo stisknut\xEDm kl\xE1ves Alt + \u0161ipka dol\u016F otev\u0159ete nab\xEDdku`
      };
      var $79eb8045886465e9$exports = {};
      $79eb8045886465e9$exports = {
        "longPressMessage": `Langt tryk eller tryk p\xE5 Alt + pil ned for at \xE5bne menuen`
      };
      var $9c6faa2088d34bf1$exports = {};
      $9c6faa2088d34bf1$exports = {
        "longPressMessage": `Dr\xFCcken Sie lange oder dr\xFCcken Sie Alt + Nach-unten, um das Men\xFC zu \xF6ffnen`
      };
      var $ee6e1292c61a8135$exports = {};
      $ee6e1292c61a8135$exports = {
        "longPressMessage": `\u03A0\u03B9\u03AD\u03C3\u03C4\u03B5 \u03C0\u03B1\u03C1\u03B1\u03C4\u03B5\u03C4\u03B1\u03BC\u03AD\u03BD\u03B1 \u03AE \u03C0\u03B1\u03C4\u03AE\u03C3\u03C4\u03B5 Alt + \u03BA\u03AC\u03C4\u03C9 \u03B2\u03AD\u03BB\u03BF\u03C2 \u03B3\u03B9\u03B1 \u03BD\u03B1 \u03B1\u03BD\u03BF\u03AF\u03BE\u03B5\u03C4\u03B5 \u03C4\u03BF \u03BC\u03B5\u03BD\u03BF\u03CD`
      };
      var $f479187898d153cc$exports = {};
      $f479187898d153cc$exports = {
        "longPressMessage": `Long press or press Alt + ArrowDown to open menu`
      };
      var $1e6a91f77efbb11f$exports = {};
      $1e6a91f77efbb11f$exports = {
        "longPressMessage": `Mantenga pulsado o pulse Alt + flecha abajo para abrir el men\xFA`
      };
      var $f2fb75e964082636$exports = {};
      $f2fb75e964082636$exports = {
        "longPressMessage": `Men\xFC\xFC avamiseks vajutage pikalt v\xF5i vajutage klahve Alt + allanool`
      };
      var $75cc65c4b616fac1$exports = {};
      $75cc65c4b616fac1$exports = {
        "longPressMessage": `Avaa valikko painamalla pohjassa tai n\xE4pp\xE4inyhdistelm\xE4ll\xE4 Alt + Alanuoli`
      };
      var $82a179939aabd1ee$exports = {};
      $82a179939aabd1ee$exports = {
        "longPressMessage": `Appuyez de mani\xE8re prolong\xE9e ou appuyez sur Alt\xA0+\xA0Fl\xE8che vers le bas pour ouvrir le menu.`
      };
      var $40aa37345f1f8748$exports = {};
      $40aa37345f1f8748$exports = {
        "longPressMessage": `\u05DC\u05D7\u05E5 \u05DC\u05D7\u05D9\u05E6\u05D4 \u05D0\u05E8\u05D5\u05DB\u05D4 \u05D0\u05D5 \u05D4\u05E7\u05E9 Alt + ArrowDown \u05DB\u05D3\u05D9 \u05DC\u05E4\u05EA\u05D5\u05D7 \u05D0\u05EA \u05D4\u05EA\u05E4\u05E8\u05D9\u05D8`
      };
      var $c00088e5c377e2c5$exports = {};
      $c00088e5c377e2c5$exports = {
        "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika`
      };
      var $51f736a409b7d295$exports = {};
      $51f736a409b7d295$exports = {
        "longPressMessage": `Nyomja meg hosszan, vagy nyomja meg az Alt + lefele ny\xEDl gombot a men\xFC megnyit\xE1s\xE1hoz`
      };
      var $65bb74747bd8f2fb$exports = {};
      $65bb74747bd8f2fb$exports = {
        "longPressMessage": `Premere a lungo o premere Alt + Freccia gi\xF9 per aprire il menu`
      };
      var $1bc11da108727c27$exports = {};
      $1bc11da108727c27$exports = {
        "longPressMessage": `\u9577\u62BC\u3057\u307E\u305F\u306F Alt+\u4E0B\u77E2\u5370\u30AD\u30FC\u3067\u30E1\u30CB\u30E5\u30FC\u3092\u958B\u304F`
      };
      var $118d77e4be898c17$exports = {};
      $118d77e4be898c17$exports = {
        "longPressMessage": `\uAE38\uAC8C \uB204\uB974\uAC70\uB098 Alt + \uC544\uB798\uCABD \uD654\uC0B4\uD45C\uB97C \uB20C\uB7EC \uBA54\uB274 \uC5F4\uAE30`
      };
      var $4db9ebadbf792309$exports = {};
      $4db9ebadbf792309$exports = {
        "longPressMessage": `Nor\u0117dami atidaryti meniu, nuspaud\u0119 palaikykite arba paspauskite \u201EAlt + ArrowDown\u201C.`
      };
      var $51288b53bc93ac3d$exports = {};
      $51288b53bc93ac3d$exports = {
        "longPressMessage": `Lai atv\u0113rtu izv\u0113lni, turiet nospiestu vai nospiediet tausti\u0146u kombin\u0101ciju Alt + lejupv\u0113rst\u0101 bulti\u0146a`
      };
      var $1a4b31206cd66e98$exports = {};
      $1a4b31206cd66e98$exports = {
        "longPressMessage": `Langt trykk eller trykk Alt + PilNed for \xE5 \xE5pne menyen`
      };
      var $21e944c6af0b8453$exports = {};
      $21e944c6af0b8453$exports = {
        "longPressMessage": `Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen`
      };
      var $20509ccafe6fe6aa$exports = {};
      $20509ccafe6fe6aa$exports = {
        "longPressMessage": `Naci\u015Bnij i przytrzymaj lub naci\u015Bnij klawisze Alt + Strza\u0142ka w d\xF3\u0142, aby otworzy\u0107 menu`
      };
      var $8006eac1d5d4665b$exports = {};
      $8006eac1d5d4665b$exports = {
        "longPressMessage": `Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu`
      };
      var $4875d1b529941a0a$exports = {};
      $4875d1b529941a0a$exports = {
        "longPressMessage": `Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu`
      };
      var $37939d04a40a865b$exports = {};
      $37939d04a40a865b$exports = {
        "longPressMessage": `Ap\u0103sa\u021Bi lung sau ap\u0103sa\u021Bi pe Alt + s\u0103geat\u0103 \xEEn jos pentru a deschide meniul`
      };
      var $fd1c8a4521d30c69$exports = {};
      $fd1c8a4521d30c69$exports = {
        "longPressMessage": `\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0438\u043B\u0438 \u043D\u0430\u0436\u043C\u0438\u0442\u0435 Alt + \u0421\u0442\u0440\u0435\u043B\u043A\u0430 \u0432\u043D\u0438\u0437, \u0447\u0442\u043E\u0431\u044B \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u043C\u0435\u043D\u044E`
      };
      var $2940d0a4ba6cbd64$exports = {};
      $2940d0a4ba6cbd64$exports = {
        "longPressMessage": `Ponuku otvor\xEDte dlh\xFDm stla\u010Den\xEDm alebo stla\u010Den\xEDm kl\xE1vesu Alt + kl\xE1vesu so \u0161\xEDpkou nadol`
      };
      var $cb481a56d5c8fa56$exports = {};
      $cb481a56d5c8fa56$exports = {
        "longPressMessage": `Za odprtje menija pritisnite in dr\u017Eite gumb ali pritisnite Alt+pu\u0161\u010Dica navzdol`
      };
      var $ecbdeaa2c85d1b32$exports = {};
      $ecbdeaa2c85d1b32$exports = {
        "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni`
      };
      var $aeca4735c8d1bab6$exports = {};
      $aeca4735c8d1bab6$exports = {
        "longPressMessage": `H\xE5ll nedtryckt eller tryck p\xE5 Alt + pil ned\xE5t f\xF6r att \xF6ppna menyn`
      };
      var $68243426be5c9f01$exports = {};
      $68243426be5c9f01$exports = {
        "longPressMessage": `Men\xFCy\xFC a\xE7mak i\xE7in uzun bas\u0131n veya Alt + A\u015Fa\u011F\u0131 Ok tu\u015Funa bas\u0131n`
      };
      var $bde63de8df74e87d$exports = {};
      $bde63de8df74e87d$exports = {
        "longPressMessage": `\u0414\u043E\u0432\u0433\u043E \u0430\u0431\u043E \u0437\u0432\u0438\u0447\u0430\u0439\u043D\u043E \u043D\u0430\u0442\u0438\u0441\u043D\u0456\u0442\u044C \u043A\u043E\u043C\u0431\u0456\u043D\u0430\u0446\u0456\u044E \u043A\u043B\u0430\u0432\u0456\u0448 Alt \u0456 \u0441\u0442\u0440\u0456\u043B\u043A\u0430 \u0432\u043D\u0438\u0437, \u0449\u043E\u0431 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438 \u043C\u0435\u043D\u044E`
      };
      var $2d16ab23cbf254d4$exports = {};
      $2d16ab23cbf254d4$exports = {
        "longPressMessage": `\u957F\u6309\u6216\u6309 Alt + \u5411\u4E0B\u65B9\u5411\u952E\u4EE5\u6253\u5F00\u83DC\u5355`
      };
      var $bd9ff3a1da9d944a$exports = {};
      $bd9ff3a1da9d944a$exports = {
        "longPressMessage": `\u9577\u6309\u6216\u6309 Alt+\u5411\u4E0B\u9375\u4EE5\u958B\u555F\u529F\u80FD\u8868`
      };
      $d1742ec2644a0949$exports = {
        "ar-AE": $429891642bf97c51$exports,
        "bg-BG": $40d90b799072e111$exports,
        "cs-CZ": $587b89d60e4f3e24$exports,
        "da-DK": $79eb8045886465e9$exports,
        "de-DE": $9c6faa2088d34bf1$exports,
        "el-GR": $ee6e1292c61a8135$exports,
        "en-US": $f479187898d153cc$exports,
        "es-ES": $1e6a91f77efbb11f$exports,
        "et-EE": $f2fb75e964082636$exports,
        "fi-FI": $75cc65c4b616fac1$exports,
        "fr-FR": $82a179939aabd1ee$exports,
        "he-IL": $40aa37345f1f8748$exports,
        "hr-HR": $c00088e5c377e2c5$exports,
        "hu-HU": $51f736a409b7d295$exports,
        "it-IT": $65bb74747bd8f2fb$exports,
        "ja-JP": $1bc11da108727c27$exports,
        "ko-KR": $118d77e4be898c17$exports,
        "lt-LT": $4db9ebadbf792309$exports,
        "lv-LV": $51288b53bc93ac3d$exports,
        "nb-NO": $1a4b31206cd66e98$exports,
        "nl-NL": $21e944c6af0b8453$exports,
        "pl-PL": $20509ccafe6fe6aa$exports,
        "pt-BR": $8006eac1d5d4665b$exports,
        "pt-PT": $4875d1b529941a0a$exports,
        "ro-RO": $37939d04a40a865b$exports,
        "ru-RU": $fd1c8a4521d30c69$exports,
        "sk-SK": $2940d0a4ba6cbd64$exports,
        "sl-SI": $cb481a56d5c8fa56$exports,
        "sr-SP": $ecbdeaa2c85d1b32$exports,
        "sv-SE": $aeca4735c8d1bab6$exports,
        "tr-TR": $68243426be5c9f01$exports,
        "uk-UA": $bde63de8df74e87d$exports,
        "zh-CN": $2d16ab23cbf254d4$exports,
        "zh-TW": $bd9ff3a1da9d944a$exports
      };
      function $7211ab9328763fb9$export$dc9c12ed27dd1b49(props, state, ref) {
        let { type = "menu", isDisabled, trigger = "press" } = props;
        let menuTriggerId = (0, $fHYTQ$reactariautils.useId)();
        let { triggerProps, overlayProps } = (0, $fHYTQ$reactariaoverlays.useOverlayTrigger)({
          type
        }, state, ref);
        let onKeyDown = (e) => {
          if (isDisabled)
            return;
          if (trigger === "longPress" && !e.altKey)
            return;
          if (ref && ref.current)
            switch (e.key) {
              case "Enter":
              case " ":
                if (trigger === "longPress")
                  return;
              case "ArrowDown":
                if (!("continuePropagation" in e))
                  e.stopPropagation();
                e.preventDefault();
                state.toggle("first");
                break;
              case "ArrowUp":
                if (!("continuePropagation" in e))
                  e.stopPropagation();
                e.preventDefault();
                state.toggle("last");
                break;
              default:
                if ("continuePropagation" in e)
                  e.continuePropagation();
            }
        };
        let stringFormatter = (0, $fHYTQ$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($d1742ec2644a0949$exports)));
        let { longPressProps } = (0, $fHYTQ$reactariainteractions.useLongPress)({
          isDisabled: isDisabled || trigger !== "longPress",
          accessibilityDescription: stringFormatter.format("longPressMessage"),
          onLongPressStart() {
            state.close();
          },
          onLongPress() {
            state.open("first");
          }
        });
        let pressProps = {
          onPressStart(e) {
            if (e.pointerType !== "touch" && e.pointerType !== "keyboard" && !isDisabled)
              state.toggle(e.pointerType === "virtual" ? "first" : null);
          },
          onPress(e) {
            if (e.pointerType === "touch" && !isDisabled)
              state.toggle();
          }
        };
        delete triggerProps.onPress;
        return {
          menuTriggerProps: __spreadProps(__spreadValues(__spreadValues({}, triggerProps), trigger === "press" ? pressProps : longPressProps), {
            id: menuTriggerId,
            onKeyDown
          }),
          menuProps: __spreadProps(__spreadValues({}, overlayProps), {
            "aria-labelledby": menuTriggerId,
            autoFocus: state.focusStrategy || true,
            onClose: state.close
          })
        };
      }
      var $a3815f0132802737$export$6f49b4016bfc8d56 = /* @__PURE__ */ new WeakMap();
      function $a3815f0132802737$export$38eaa17faae8f579(props, state, ref) {
        let _a = props, { shouldFocusWrap = true } = _a, otherProps = __objRest(_a, ["shouldFocusWrap"]);
        if (!props["aria-label"] && !props["aria-labelledby"])
          console.warn("An aria-label or aria-labelledby prop is required for accessibility.");
        let domProps = (0, $fHYTQ$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        let { listProps } = (0, $fHYTQ$reactariaselection.useSelectableList)(__spreadProps(__spreadValues({}, otherProps), {
          ref,
          selectionManager: state.selectionManager,
          collection: state.collection,
          disabledKeys: state.disabledKeys,
          shouldFocusWrap,
          linkBehavior: "override"
        }));
        $a3815f0132802737$export$6f49b4016bfc8d56.set(state, {
          onClose: props.onClose,
          onAction: props.onAction
        });
        return {
          menuProps: (0, $fHYTQ$reactariautils.mergeProps)(domProps, __spreadProps(__spreadValues({
            role: "menu",
            // this forces AT to move their cursors into any open sub dialogs, the sub dialogs contain hidden close buttons in order to come back to this level of the menu
            "aria-hidden": state.expandedKeys.size > 0 ? true : void 0
          }, listProps), {
            onKeyDown: (e) => {
              if (e.key !== "Escape")
                listProps.onKeyDown(e);
            }
          }))
        };
      }
      function $38191ed02615ec07$export$9d32628fc2aea7da(props, state, ref) {
        var _item_props;
        let { key, closeOnSelect, isVirtualized, "aria-haspopup": hasPopup } = props;
        let { direction } = (0, $fHYTQ$reactariai18n.useLocale)();
        let isTrigger = !!hasPopup;
        let isOpen = state.expandedKeys.has(key);
        var _props_isDisabled;
        let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.disabledKeys.has(key);
        var _props_isSelected;
        let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);
        let openTimeout = (0, $fHYTQ$react.useRef)();
        let cancelOpenTimeout = (0, $fHYTQ$react.useCallback)(() => {
          if (openTimeout.current) {
            clearTimeout(openTimeout.current);
            openTimeout.current = void 0;
          }
        }, [
          openTimeout
        ]);
        let onSubmenuOpen = (0, $fHYTQ$reactariautils.useEffectEvent)(() => {
          cancelOpenTimeout();
          state.setExpandedKeys(/* @__PURE__ */ new Set([
            key
          ]));
        });
        (0, $fHYTQ$reactariautils.useLayoutEffect)(() => {
          return () => cancelOpenTimeout();
        }, [
          cancelOpenTimeout
        ]);
        let data = (0, $a3815f0132802737$export$6f49b4016bfc8d56).get(state);
        let onClose = props.onClose || data.onClose;
        let onActionMenuDialogTrigger = (0, $fHYTQ$react.useCallback)(() => {
          onSubmenuOpen();
        }, []);
        let onAction = isTrigger ? onActionMenuDialogTrigger : props.onAction || data.onAction;
        let router = (0, $fHYTQ$reactariautils.useRouter)();
        let performAction = (e) => {
          if (onAction)
            onAction(key);
          if (e.target instanceof HTMLAnchorElement)
            router.open(e.target, e);
        };
        let role = "menuitem";
        if (state.selectionManager.selectionMode === "single")
          role = "menuitemradio";
        else if (state.selectionManager.selectionMode === "multiple")
          role = "menuitemcheckbox";
        let labelId = (0, $fHYTQ$reactariautils.useSlotId)();
        let descriptionId = (0, $fHYTQ$reactariautils.useSlotId)();
        let keyboardId = (0, $fHYTQ$reactariautils.useSlotId)();
        let ariaProps = {
          "aria-disabled": isDisabled || void 0,
          role,
          "aria-label": props["aria-label"],
          "aria-labelledby": labelId,
          "aria-describedby": [
            descriptionId,
            keyboardId
          ].filter(Boolean).join(" ") || void 0
        };
        if (state.selectionManager.selectionMode !== "none")
          ariaProps["aria-checked"] = isSelected;
        let item = state.collection.getItem(key);
        if (isVirtualized) {
          ariaProps["aria-posinset"] = item === null || item === void 0 ? void 0 : item.index;
          ariaProps["aria-setsize"] = (0, $fHYTQ$reactstatelycollections.getItemCount)(state.collection);
        }
        if (hasPopup != null) {
          ariaProps["aria-haspopup"] = hasPopup;
          ariaProps["aria-expanded"] = isOpen ? "true" : "false";
        }
        let onPressStart = (e) => {
          if (e.pointerType === "keyboard")
            performAction(e);
        };
        let onPressUp = (e) => {
          if (e.pointerType !== "keyboard") {
            performAction(e);
            if (!isTrigger && onClose && (closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : state.selectionManager.selectionMode !== "multiple" || state.selectionManager.isLink(key)))
              onClose();
          }
        };
        let { itemProps, isFocused } = (0, $fHYTQ$reactariaselection.useSelectableItem)({
          selectionManager: state.selectionManager,
          key,
          ref,
          shouldSelectOnPressUp: true,
          allowsDifferentPressOrigin: true,
          // Disable all handling of links in useSelectable item
          // because we handle it ourselves. The behavior of menus
          // is slightly different from other collections because
          // actions are performed on key down rather than key up.
          linkBehavior: "none"
        });
        let { pressProps, isPressed } = (0, $fHYTQ$reactariainteractions.usePress)({
          onPressStart,
          onPressUp,
          isDisabled: isDisabled || isTrigger && state.expandedKeys.has(key)
        });
        let { hoverProps } = (0, $fHYTQ$reactariainteractions.useHover)({
          isDisabled,
          onHoverStart() {
            if (!(0, $fHYTQ$reactariainteractions.isFocusVisible)() && !(isTrigger && state.expandedKeys.has(key))) {
              state.selectionManager.setFocused(true);
              state.selectionManager.setFocusedKey(key);
              let isFocused2 = key === state.selectionManager.focusedKey;
              if (isFocused2 && state.selectionManager.isFocused && document.activeElement !== ref.current)
                (0, $fHYTQ$reactariafocus.focusSafely)(ref.current);
            }
          },
          onHoverChange: (isHovered) => {
            if (isHovered && isTrigger && !state.expandedKeys.has(key)) {
              if (!openTimeout.current)
                openTimeout.current = setTimeout(() => {
                  onSubmenuOpen();
                }, 200);
            } else if (!isHovered)
              cancelOpenTimeout();
          }
        });
        let { keyboardProps } = (0, $fHYTQ$reactariainteractions.useKeyboard)({
          onKeyDown: (e) => {
            if (e.repeat) {
              e.continuePropagation();
              return;
            }
            switch (e.key) {
              case " ":
                if (!isDisabled && state.selectionManager.selectionMode === "none" && !isTrigger && closeOnSelect !== false && onClose)
                  onClose();
                break;
              case "Enter":
                if (!isDisabled && closeOnSelect !== false && !isTrigger && onClose)
                  onClose();
                break;
              case "ArrowRight":
                if (isTrigger && direction === "ltr")
                  onSubmenuOpen();
                else
                  e.continuePropagation();
                break;
              case "ArrowLeft":
                if (isTrigger && direction === "rtl")
                  onSubmenuOpen();
                else
                  e.continuePropagation();
                break;
              default:
                e.continuePropagation();
                break;
            }
          }
        });
        let domProps = (0, $fHYTQ$reactariautils.filterDOMProps)(item.props, {
          isLink: !!(item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.href)
        });
        delete domProps.id;
        return {
          menuItemProps: __spreadValues(__spreadValues({}, ariaProps), (0, $fHYTQ$reactariautils.mergeProps)(domProps, itemProps, pressProps, hoverProps, keyboardProps)),
          labelProps: {
            id: labelId
          },
          descriptionProps: {
            id: descriptionId
          },
          keyboardShortcutProps: {
            id: keyboardId
          },
          isFocused,
          isSelected,
          isPressed,
          isDisabled
        };
      }
      function $63008655e23408c5$export$73f7a44322579622(props) {
        let { heading, "aria-label": ariaLabel } = props;
        let headingId = (0, $fHYTQ$reactariautils.useId)();
        return {
          itemProps: {
            role: "presentation"
          },
          headingProps: heading ? {
            // Techincally, menus cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, using role="presentation",
            // and only use it as a label for the nested group.
            id: headingId,
            role: "presentation"
          } : {},
          groupProps: {
            role: "group",
            "aria-label": ariaLabel,
            "aria-labelledby": heading ? headingId : void 0
          }
        };
      }
    }
  });

  // node_modules/@nextui-org/use-is-mobile/dist/index.js
  var require_dist44 = __commonJS({
    "node_modules/@nextui-org/use-is-mobile/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useIsMobile: () => useIsMobile
      });
      module.exports = __toCommonJS2(src_exports);
      var import_ssr = require_main3();
      var MOBILE_SCREEN_WIDTH = 700;
      function useIsMobile() {
        let isSSR = (0, import_ssr.useIsSSR)();
        if (isSSR || typeof window === "undefined") {
          return false;
        }
        return window.screen.width <= MOBILE_SCREEN_WIDTH;
      }
    }
  });

  // node_modules/@nextui-org/menu/dist/index.js
  var require_dist45 = __commonJS({
    "node_modules/@nextui-org/menu/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Menu: () => menu_default,
        MenuItem: () => menu_item_base_default,
        MenuSection: () => menu_section_base_default,
        useMenu: () => useMenu
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system4 = require_dist4();
      var import_menu = require_main33();
      var import_theme = require_dist5();
      var import_tree = require_main17();
      var import_react_utils = require_dist10();
      var import_react3 = require_react();
      function useMenu(props) {
        const _a = props, {
          as,
          ref,
          variant,
          color,
          disableAnimation,
          onAction,
          closeOnSelect,
          itemClasses,
          className,
          state: propState,
          menuProps: userMenuProps,
          onClose
        } = _a, otherProps = __objRest(_a, [
          "as",
          "ref",
          "variant",
          "color",
          "disableAnimation",
          "onAction",
          "closeOnSelect",
          "itemClasses",
          "className",
          "state",
          "menuProps",
          "onClose"
        ]);
        const Component = as || "ul";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const innerState = (0, import_tree.useTreeState)(otherProps);
        const state = propState || innerState;
        const { menuProps } = (0, import_menu.useMenu)(otherProps, state, domRef);
        const styles = (0, import_react3.useMemo)(() => (0, import_theme.menu)({ className }), [className]);
        const getMenuProps = (props2 = {}) => {
          return __spreadValues(__spreadValues(__spreadValues({
            ref: domRef,
            className: styles
          }, userMenuProps), menuProps), props2);
        };
        return {
          Component,
          state,
          variant,
          color,
          disableAnimation,
          onAction,
          onClose,
          closeOnSelect,
          className,
          itemClasses,
          getMenuProps
        };
      }
      var import_theme3 = require_dist5();
      var import_menu3 = require_main33();
      var import_react4 = require_react();
      var import_system3 = require_dist4();
      var import_utils2 = require_main7();
      var import_shared_utils2 = require_dist9();
      var import_divider = require_dist8();
      var import_react32 = require_react();
      var import_system2 = require_dist4();
      var import_react22 = require_react();
      var import_theme2 = require_dist5();
      var import_system = require_dist4();
      var import_focus = require_main12();
      var import_react_utils2 = require_dist10();
      var import_shared_utils = require_dist9();
      var import_menu2 = require_main33();
      var import_utils = require_main7();
      var import_interactions = require_main11();
      var import_use_is_mobile = require_dist44();
      function useMenuItem(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme2.menuItem.variantKeys);
        const _a = props, {
          as,
          item,
          state,
          shortcut,
          description,
          startContent,
          endContent,
          isVirtualized,
          selectedIcon,
          className,
          classNames,
          onAction,
          autoFocus,
          onPress,
          onClick,
          isReadOnly = false,
          closeOnSelect,
          onClose
        } = _a, otherProps = __objRest(_a, [
          "as",
          "item",
          "state",
          "shortcut",
          "description",
          "startContent",
          "endContent",
          "isVirtualized",
          "selectedIcon",
          "className",
          "classNames",
          "onAction",
          "autoFocus",
          "onPress",
          "onClick",
          "isReadOnly",
          "closeOnSelect",
          "onClose"
        ]);
        const disableAnimation = originalProps.disableAnimation;
        const domRef = (0, import_react22.useRef)(null);
        const Component = as || "li";
        const shouldFilterDOMProps = typeof Component === "string";
        const { rendered, key } = item;
        const isDisabled = state.disabledKeys.has(key) || originalProps.isDisabled;
        const isSelectable = state.selectionManager.selectionMode !== "none";
        const isMobile = (0, import_use_is_mobile.useIsMobile)();
        const { pressProps, isPressed } = (0, import_interactions.usePress)({
          ref: domRef,
          isDisabled,
          onPress
        });
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({
          isDisabled
        });
        const { isFocusVisible, focusProps } = (0, import_focus.useFocusRing)({
          autoFocus
        });
        const {
          isFocused,
          isSelected,
          menuItemProps,
          labelProps,
          descriptionProps,
          keyboardShortcutProps
        } = (0, import_menu2.useMenuItem)(
          {
            key,
            onClose,
            isDisabled,
            "aria-label": props["aria-label"],
            closeOnSelect,
            isVirtualized,
            onAction
          },
          state,
          domRef
        );
        let itemProps = menuItemProps;
        const slots = (0, import_react22.useMemo)(
          () => (0, import_theme2.menuItem)(__spreadProps(__spreadValues({}, variantProps), {
            isDisabled,
            disableAnimation
          })),
          [...Object.values(variantProps), isDisabled, disableAnimation]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        if (isReadOnly) {
          itemProps = (0, import_shared_utils.removeEvents)(itemProps);
        }
        const getItemProps = (props2 = {}) => __spreadProps(__spreadValues({
          ref: domRef
        }, (0, import_utils.mergeProps)(
          itemProps,
          isReadOnly ? {} : (0, import_utils.mergeProps)(focusProps, pressProps),
          hoverProps,
          (0, import_react_utils2.filterDOMProps)(otherProps, {
            enabled: shouldFilterDOMProps
          }),
          props2
        )), {
          "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
          "data-selectable": (0, import_shared_utils.dataAttr)(isSelectable),
          "data-hover": (0, import_shared_utils.dataAttr)(isMobile ? isHovered || isPressed : isHovered),
          "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
          "data-selected": (0, import_shared_utils.dataAttr)(isSelected),
          "data-pressed": (0, import_shared_utils.dataAttr)(isPressed),
          "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
          className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2.className) }),
          onClick: (0, import_utils.chain)(pressProps.onClick, onClick)
        });
        const getLabelProps = (props2 = {}) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(labelProps, props2)), {
          className: slots.title({ class: classNames == null ? void 0 : classNames.title })
        });
        const getDescriptionProps = (props2 = {}) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(descriptionProps, props2)), {
          className: slots.description({ class: classNames == null ? void 0 : classNames.description })
        });
        const getKeyboardShortcutProps = (props2 = {}) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(keyboardShortcutProps, props2)), {
          className: slots.shortcut({ class: classNames == null ? void 0 : classNames.shortcut })
        });
        const getSelectedIconProps = (0, import_react22.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              "aria-hidden": (0, import_shared_utils.dataAttr)(true),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              className: slots.selectedIcon({ class: classNames == null ? void 0 : classNames.selectedIcon })
            }, props2);
          },
          [isDisabled, slots, classNames]
        );
        return {
          Component,
          domRef,
          slots,
          classNames,
          isSelectable,
          isSelected,
          isDisabled,
          rendered,
          shortcut,
          description,
          startContent,
          endContent,
          selectedIcon,
          disableAnimation,
          getItemProps,
          getLabelProps,
          getDescriptionProps,
          getKeyboardShortcutProps,
          getSelectedIconProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      function MenuSelectedIcon(props) {
        const _a = props, { isSelected, disableAnimation } = _a, otherProps = __objRest(_a, ["isSelected", "disableAnimation"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "aria-hidden": "true",
            "data-selected": isSelected,
            role: "presentation",
            viewBox: "0 0 17 18"
          }, otherProps), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "polyline",
              {
                fill: "none",
                points: "1 9 7 14 15 4",
                stroke: "currentColor",
                strokeDasharray: 22,
                strokeDashoffset: isSelected ? 44 : 66,
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5,
                style: !disableAnimation ? {
                  transition: "stroke-dashoffset 200ms ease"
                } : {}
              }
            )
          })
        );
      }
      var import_jsx_runtime2 = require_jsx_runtime();
      var MenuItem = (0, import_system2.forwardRef)((props, _) => {
        const {
          Component,
          slots,
          classNames,
          rendered,
          shortcut,
          description,
          isSelectable,
          isSelected,
          isDisabled,
          selectedIcon,
          startContent,
          endContent,
          disableAnimation,
          getItemProps,
          getLabelProps,
          getDescriptionProps,
          getKeyboardShortcutProps,
          getSelectedIconProps
        } = useMenuItem(props);
        const selectedContent = (0, import_react32.useMemo)(() => {
          const defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(MenuSelectedIcon, { disableAnimation, isSelected });
          if (typeof selectedIcon === "function") {
            return selectedIcon({ icon: defaultIcon, isSelected, isDisabled });
          }
          if (selectedIcon)
            return selectedIcon;
          return defaultIcon;
        }, [selectedIcon, isSelected, isDisabled, disableAnimation]);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, getItemProps()), { children: [
          startContent,
          description ? /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }), children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children: rendered })),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getDescriptionProps()), { children: description }))
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children: rendered })),
          shortcut && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("kbd", __spreadProps(__spreadValues({}, getKeyboardShortcutProps()), { children: shortcut })),
          isSelectable && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getSelectedIconProps()), { children: selectedContent })),
          endContent
        ] }));
      });
      MenuItem.displayName = "NextUI.MenuItem";
      var menu_item_default = MenuItem;
      var import_jsx_runtime3 = require_jsx_runtime();
      var MenuSection = (0, import_system3.forwardRef)(
        (_a, _) => {
          var _b = _a, {
            item,
            state,
            as,
            variant,
            color,
            disableAnimation,
            onAction,
            closeOnSelect,
            className,
            classNames,
            showDivider = false,
            dividerProps = {},
            itemClasses,
            title
          } = _b, otherProps = __objRest(_b, [
            "item",
            "state",
            "as",
            "variant",
            "color",
            "disableAnimation",
            "onAction",
            "closeOnSelect",
            "className",
            "classNames",
            "showDivider",
            "dividerProps",
            "itemClasses",
            "title"
          ]);
          const Component = as || "li";
          const slots = (0, import_react4.useMemo)(() => (0, import_theme3.menuSection)(), []);
          const baseStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.base, className);
          const dividerStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.divider, dividerProps == null ? void 0 : dividerProps.className);
          const { itemProps, headingProps, groupProps } = (0, import_menu3.useMenuSection)({
            heading: item.rendered,
            "aria-label": item["aria-label"]
          });
          return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
            Component,
            __spreadProps(__spreadValues({
              "data-slot": "base"
            }, (0, import_utils2.mergeProps)(itemProps, otherProps)), {
              className: slots.base({ class: baseStyles }),
              children: [
                item.rendered && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                  "span",
                  __spreadProps(__spreadValues({}, headingProps), {
                    className: slots.heading({ class: classNames == null ? void 0 : classNames.heading }),
                    "data-slot": "heading",
                    children: item.rendered
                  })
                ),
                /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
                  "ul",
                  __spreadProps(__spreadValues({}, groupProps), {
                    className: slots.group({ class: classNames == null ? void 0 : classNames.group }),
                    "data-has-title": !!item.rendered,
                    "data-slot": "group",
                    children: [
                      [...item.childNodes].map((node) => {
                        const { key: nodeKey, props: nodeProps } = node;
                        let menuItem2 = /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                          menu_item_default,
                          __spreadValues({
                            classNames: itemClasses,
                            closeOnSelect,
                            color,
                            disableAnimation,
                            item: node,
                            state,
                            variant,
                            onAction
                          }, nodeProps),
                          nodeKey
                        );
                        if (node.wrapper) {
                          menuItem2 = node.wrapper(menuItem2);
                        }
                        return menuItem2;
                      }),
                      showDivider && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                        import_divider.Divider,
                        __spreadValues({
                          as: "li",
                          className: slots.divider({
                            class: dividerStyles
                          })
                        }, dividerProps)
                      )
                    ]
                  })
                )
              ]
            })
          );
        }
      );
      MenuSection.displayName = "NextUI.MenuSection";
      var menu_section_default = MenuSection;
      var import_jsx_runtime4 = require_jsx_runtime();
      var Menu = (0, import_system4.forwardRef)((props, ref) => {
        const {
          Component,
          state,
          getMenuProps,
          closeOnSelect,
          color,
          disableAnimation,
          variant,
          onClose,
          onAction,
          itemClasses
        } = useMenu(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Component, __spreadProps(__spreadValues({}, getMenuProps()), { children: [...state.collection].map((item) => {
          const itemProps = __spreadValues({
            closeOnSelect,
            color,
            disableAnimation,
            item,
            state,
            variant,
            onClose,
            onAction
          }, item.props);
          if (item.type === "section") {
            return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(menu_section_default, __spreadProps(__spreadValues({}, itemProps), { itemClasses }), item.key);
          }
          let menuItem2 = /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(menu_item_default, __spreadProps(__spreadValues({}, itemProps), { classNames: itemClasses }), item.key);
          if (item.wrapper) {
            menuItem2 = item.wrapper(menuItem2);
          }
          return menuItem2;
        }) }));
      });
      Menu.displayName = "NextUI.Menu";
      var menu_default = Menu;
      var import_aria_utils = require_dist6();
      var MenuItemBase = import_aria_utils.BaseItem;
      var menu_item_base_default = MenuItemBase;
      var import_aria_utils2 = require_dist6();
      var MenuSectionBase = import_aria_utils2.BaseSection;
      var menu_section_base_default = MenuSectionBase;
    }
  });

  // node_modules/@react-stately/menu/dist/main.js
  var require_main34 = __commonJS({
    "node_modules/@react-stately/menu/dist/main.js"(exports, module) {
      var $cAWze$reactstatelyoverlays = require_main27();
      var $cAWze$react = require_react();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useMenuTriggerState", () => $f39cdb649cd48930$export$79fefeb1c2091ac3);
      function $f39cdb649cd48930$export$79fefeb1c2091ac3(props) {
        let overlayTriggerState = (0, $cAWze$reactstatelyoverlays.useOverlayTriggerState)(props);
        let [focusStrategy, setFocusStrategy] = (0, $cAWze$react.useState)(null);
        return __spreadProps(__spreadValues({
          focusStrategy
        }, overlayTriggerState), {
          open(focusStrategy2 = null) {
            setFocusStrategy(focusStrategy2);
            overlayTriggerState.open();
          },
          toggle(focusStrategy2 = null) {
            setFocusStrategy(focusStrategy2);
            overlayTriggerState.toggle();
          }
        });
      }
    }
  });

  // node_modules/@nextui-org/dropdown/dist/index.js
  var require_dist46 = __commonJS({
    "node_modules/@nextui-org/dropdown/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Dropdown: () => dropdown_default,
        DropdownItem: () => import_menu4.MenuItem,
        DropdownMenu: () => dropdown_menu_default,
        DropdownSection: () => import_menu4.MenuSection,
        DropdownTrigger: () => dropdown_trigger_default,
        useDropdown: () => useDropdown
      });
      module.exports = __toCommonJS2(src_exports);
      var import_menu4 = require_dist45();
      var import_react22 = __toESM2(require_react());
      var import_popover = require_dist43();
      var import_react_utils = require_dist10();
      var [DropdownProvider, useDropdownContext] = (0, import_react_utils.createContext)({
        name: "DropdownContext",
        errorMessage: "useDropdownContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Dropdown />`"
      });
      var import_menu = require_main34();
      var import_menu2 = require_main33();
      var import_theme = require_dist5();
      var import_shared_utils = require_dist9();
      var import_react_utils2 = require_dist10();
      var import_react3 = require_react();
      var import_utils = require_main7();
      function useDropdown(props) {
        const _a = props, {
          as,
          triggerRef: triggerRefProp,
          isOpen,
          defaultOpen,
          onOpenChange,
          type = "menu",
          trigger = "press",
          placement = "bottom",
          isDisabled = false,
          closeOnSelect = true,
          shouldBlockScroll = true,
          classNames: classNamesProp,
          disableAnimation = false,
          onClose,
          className
        } = _a, otherProps = __objRest(_a, [
          "as",
          "triggerRef",
          "isOpen",
          "defaultOpen",
          "onOpenChange",
          "type",
          "trigger",
          "placement",
          "isDisabled",
          "closeOnSelect",
          "shouldBlockScroll",
          "classNames",
          "disableAnimation",
          "onClose",
          "className"
        ]);
        const Component = as || "div";
        const triggerRef = (0, import_react3.useRef)(null);
        const menuTriggerRef = triggerRefProp || triggerRef;
        const menuRef = (0, import_react3.useRef)(null);
        const popoverRef = (0, import_react3.useRef)(null);
        const state = (0, import_menu.useMenuTriggerState)({
          trigger,
          isOpen,
          defaultOpen,
          onOpenChange: (isOpen2) => {
            onOpenChange == null ? void 0 : onOpenChange(isOpen2);
            if (!isOpen2) {
              onClose == null ? void 0 : onClose();
            }
          }
        });
        const { menuTriggerProps, menuProps } = (0, import_menu2.useMenuTrigger)(
          { type, trigger, isDisabled },
          state,
          menuTriggerRef
        );
        const classNames = (0, import_react3.useMemo)(
          () => (0, import_theme.dropdown)({
            className
          }),
          [className]
        );
        const onMenuAction = (menuCloseOnSelect) => {
          if (menuCloseOnSelect !== void 0 && !menuCloseOnSelect) {
            return;
          }
          if (closeOnSelect) {
            state.close();
          }
        };
        const getPopoverProps = (props2 = {}) => __spreadProps(__spreadValues({
          state,
          placement,
          ref: popoverRef,
          disableAnimation,
          shouldBlockScroll,
          scrollRef: menuRef,
          triggerRef: menuTriggerRef
        }, (0, import_utils.mergeProps)(otherProps, props2)), {
          classNames: __spreadProps(__spreadValues(__spreadValues({}, classNamesProp), props2.classNames), {
            base: (0, import_shared_utils.clsx)(classNames, classNamesProp == null ? void 0 : classNamesProp.base, props2.className),
            arrow: (0, import_shared_utils.clsx)(classNamesProp == null ? void 0 : classNamesProp.arrow)
          })
        });
        const getMenuTriggerProps = (props2 = {}, _ref = null) => {
          const _a2 = menuTriggerProps, { onKeyDown, onPress, onPressStart } = _a2, otherMenuTriggerProps = __objRest(_a2, ["onKeyDown", "onPress", "onPressStart"]);
          return __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(otherMenuTriggerProps, props2)), {
            ref: (0, import_react_utils2.mergeRefs)(_ref, triggerRef)
          });
        };
        const getMenuProps = (props2, _ref = null) => {
          return __spreadValues({
            ref: (0, import_react_utils2.mergeRefs)(_ref, menuRef),
            menuProps
          }, (0, import_utils.mergeProps)(props2, { onAction: () => onMenuAction(props2 == null ? void 0 : props2.closeOnSelect) }));
        };
        return {
          Component,
          menuRef,
          menuProps,
          classNames,
          closeOnSelect,
          onClose: state.close,
          autoFocus: state.focusStrategy || true,
          disableAnimation,
          getPopoverProps,
          getMenuProps,
          getMenuTriggerProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Dropdown = (props) => {
        const _a = props, { children } = _a, otherProps = __objRest(_a, ["children"]);
        const context = useDropdown(otherProps);
        const [menuTrigger, menu] = import_react22.default.Children.toArray(children);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DropdownProvider, { value: context, children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_popover.Popover, __spreadProps(__spreadValues({}, context.getPopoverProps()), { children: [
          menuTrigger,
          menu
        ] })) });
      };
      Dropdown.displayName = "NextUI.Dropdown";
      var dropdown_default = Dropdown;
      var import_system = require_dist4();
      var import_popover2 = require_dist43();
      var import_jsx_runtime2 = require_jsx_runtime();
      var DropdownTrigger = (0, import_system.forwardRef)((props, _) => {
        const { getMenuTriggerProps } = useDropdownContext();
        const _a = props, { children } = _a, otherProps = __objRest(_a, ["children"]);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_popover2.PopoverTrigger, __spreadProps(__spreadValues({}, getMenuTriggerProps(otherProps)), { children }));
      });
      DropdownTrigger.displayName = "NextUI.DropdownTrigger";
      var dropdown_trigger_default = DropdownTrigger;
      var import_popover3 = require_dist43();
      var import_focus = require_main12();
      var import_system2 = require_dist4();
      var import_menu3 = require_dist45();
      var import_jsx_runtime3 = require_jsx_runtime();
      var DropdownMenu = (0, import_system2.forwardRef)((props, ref) => {
        const { getMenuProps } = useDropdownContext();
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_popover3.PopoverContent, { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_focus.FocusScope, { contain: true, restoreFocus: true, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_menu3.Menu, __spreadValues({}, getMenuProps(props, ref))) }) });
      });
      DropdownMenu.displayName = "NextUI.DropdownMenu";
      var dropdown_menu_default = DropdownMenu;
    }
  });

  // node_modules/@nextui-org/image/dist/index.js
  var require_dist47 = __commonJS({
    "node_modules/@nextui-org/image/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Image: () => image_default,
        useImage: () => useImage
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var import_system2 = require_dist4();
      var import_react4 = require_react();
      var import_system = require_dist4();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_shared_utils = require_dist9();
      var import_use_image = require_dist16();
      var import_react22 = require_react();
      function useImage(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.image.variantKeys);
        const _a = props, {
          ref,
          as,
          src,
          className,
          classNames,
          loading,
          isBlurred,
          fallbackSrc,
          isLoading: isLoadingProp,
          disableSkeleton = !!fallbackSrc,
          removeWrapper = false,
          onError,
          onLoad,
          srcSet,
          sizes,
          crossOrigin
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "src",
          "className",
          "classNames",
          "loading",
          "isBlurred",
          "fallbackSrc",
          "isLoading",
          "disableSkeleton",
          "removeWrapper",
          "onError",
          "onLoad",
          "srcSet",
          "sizes",
          "crossOrigin"
        ]);
        const imageStatus = (0, import_use_image.useImage)({
          src,
          loading,
          onError,
          onLoad,
          ignoreFallback: false,
          srcSet,
          sizes,
          crossOrigin
        });
        const isImgLoaded = imageStatus === "loaded" && !isLoadingProp;
        const isLoading = imageStatus === "loading" || isLoadingProp;
        const isZoomed = originalProps.isZoomed;
        const Component = as || "img";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const { w } = (0, import_react22.useMemo)(() => {
          return {
            w: props.width ? typeof props.width === "number" ? `${props.width}px` : props.width : "fit-content"
          };
        }, [props == null ? void 0 : props.width]);
        const showFallback = (!src || !isImgLoaded) && !!fallbackSrc;
        const showSkeleton = isLoading && !disableSkeleton;
        const slots = (0, import_react22.useMemo)(
          () => (0, import_theme.image)(__spreadProps(__spreadValues({}, variantProps), {
            showSkeleton
          })),
          [...Object.values(variantProps), showSkeleton]
        );
        const baseStyles = (0, import_shared_utils.clsx)(className, classNames == null ? void 0 : classNames.img);
        const getImgProps = (props2 = {}) => {
          const imgStyles = (0, import_shared_utils.clsx)(baseStyles, props2 == null ? void 0 : props2.className);
          return __spreadValues({
            src,
            ref: domRef,
            "data-loaded": (0, import_shared_utils.dataAttr)(isImgLoaded),
            className: slots.img({ class: imgStyles }),
            loading,
            srcSet,
            sizes,
            crossOrigin
          }, otherProps);
        };
        const getWrapperProps = (0, import_react4.useCallback)(() => {
          const fallbackStyle = showFallback ? {
            backgroundImage: `url(${fallbackSrc})`
          } : {};
          return {
            className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }),
            style: __spreadProps(__spreadValues({}, fallbackStyle), {
              maxWidth: w
            })
          };
        }, [slots, showFallback, fallbackSrc, classNames == null ? void 0 : classNames.wrapper]);
        const getBlurredImgProps = (0, import_react4.useCallback)(() => {
          return {
            src,
            "aria-hidden": (0, import_shared_utils.dataAttr)(true),
            className: slots.blurredImg({ class: classNames == null ? void 0 : classNames.blurredImg })
          };
        }, [slots, src, classNames == null ? void 0 : classNames.blurredImg]);
        return {
          Component,
          domRef,
          slots,
          classNames,
          isBlurred,
          disableSkeleton,
          fallbackSrc,
          removeWrapper,
          isZoomed,
          isLoading,
          getImgProps,
          getWrapperProps,
          getBlurredImgProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Image2 = (0, import_system2.forwardRef)((props, ref) => {
        const {
          Component,
          domRef,
          slots,
          classNames,
          isBlurred,
          isZoomed,
          fallbackSrc,
          removeWrapper,
          disableSkeleton,
          getImgProps,
          getWrapperProps,
          getBlurredImgProps
        } = useImage(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        const img = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadValues({ ref: domRef }, getImgProps()));
        if (removeWrapper) {
          return img;
        }
        const zoomed = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: slots.zoomedWrapper({ class: classNames == null ? void 0 : classNames.zoomedWrapper }), children: img });
        if (isBlurred) {
          return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, getWrapperProps()), { children: [
            isZoomed ? zoomed : img,
            (0, import_react3.cloneElement)(img, getBlurredImgProps())
          ] }));
        }
        if (isZoomed || !disableSkeleton || fallbackSrc) {
          return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, getWrapperProps()), { children: [
            " ",
            isZoomed ? zoomed : img
          ] }));
        }
        return img;
      });
      Image2.displayName = "NextUI.Image";
      var image_default = Image2;
    }
  });

  // node_modules/@nextui-org/use-aria-modal-overlay/dist/index.js
  var require_dist48 = __commonJS({
    "node_modules/@nextui-org/use-aria-modal-overlay/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useAriaModalOverlay: () => useAriaModalOverlay
      });
      module.exports = __toCommonJS2(src_exports);
      var import_overlays = require_main14();
      var import_utils = require_main7();
      var import_react3 = require_react();
      function useAriaModalOverlay(props = {}, state, ref) {
        let { overlayProps, underlayProps } = (0, import_overlays.useOverlay)(
          __spreadProps(__spreadValues({}, props), {
            isOpen: state.isOpen,
            onClose: state.close
          }),
          ref
        );
        (0, import_overlays.useOverlayFocusContain)();
        (0, import_react3.useEffect)(() => {
          if (state.isOpen && ref.current) {
            return (0, import_overlays.ariaHideOutside)([ref.current]);
          }
        }, [state.isOpen, ref]);
        return {
          modalProps: (0, import_utils.mergeProps)(overlayProps),
          underlayProps
        };
      }
    }
  });

  // node_modules/@nextui-org/use-callback-ref/dist/index.js
  var require_dist49 = __commonJS({
    "node_modules/@nextui-org/use-callback-ref/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useCallbackRef: () => useCallbackRef
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var import_use_safe_layout_effect = require_dist15();
      function useCallbackRef(fn, deps = []) {
        const ref = (0, import_react3.useRef)(fn);
        (0, import_use_safe_layout_effect.useSafeLayoutEffect)(() => {
          ref.current = fn;
        });
        return (0, import_react3.useCallback)((...args) => {
          var _a;
          return (_a = ref.current) == null ? void 0 : _a.call(ref, ...args);
        }, deps);
      }
    }
  });

  // node_modules/@nextui-org/use-disclosure/dist/index.js
  var require_dist50 = __commonJS({
    "node_modules/@nextui-org/use-disclosure/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useDisclosure: () => useDisclosure2
      });
      module.exports = __toCommonJS2(src_exports);
      var import_utils = require_main7();
      var import_utils2 = require_main6();
      var import_use_callback_ref = require_dist49();
      var import_react3 = require_react();
      function useDisclosure2(props = {}) {
        const {
          id: idProp,
          defaultOpen,
          isOpen: isOpenProp,
          onClose: onCloseProp,
          onOpen: onOpenProp,
          onChange = () => {
          }
        } = props;
        const onOpenPropCallbackRef = (0, import_use_callback_ref.useCallbackRef)(onOpenProp);
        const onClosePropCallbackRef = (0, import_use_callback_ref.useCallbackRef)(onCloseProp);
        const [isOpen, setIsOpen] = (0, import_utils2.useControlledState)(isOpenProp, defaultOpen || false, onChange);
        const reactId = (0, import_react3.useId)();
        const id = idProp || reactId;
        const isControlled = isOpenProp !== void 0;
        const onClose = (0, import_react3.useCallback)(() => {
          if (!isControlled) {
            setIsOpen(false);
          }
          onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();
        }, [isControlled, onClosePropCallbackRef]);
        const onOpen = (0, import_react3.useCallback)(() => {
          if (!isControlled) {
            setIsOpen(true);
          }
          onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();
        }, [isControlled, onOpenPropCallbackRef]);
        const onOpenChange = (0, import_react3.useCallback)(() => {
          const action = isOpen ? onClose : onOpen;
          action();
        }, [isOpen, onOpen, onClose]);
        return {
          isOpen: !!isOpen,
          onOpen,
          onClose,
          onOpenChange,
          isControlled,
          getButtonProps: (props2 = {}) => __spreadProps(__spreadValues({}, props2), {
            "aria-expanded": isOpen,
            "aria-controls": id,
            onClick: (0, import_utils.chain)(props2.onClick, onOpenChange)
          }),
          getDisclosureProps: (props2 = {}) => __spreadProps(__spreadValues({}, props2), {
            hidden: !isOpen,
            id
          })
        };
      }
    }
  });

  // node_modules/@nextui-org/modal/dist/index.js
  var require_dist51 = __commonJS({
    "node_modules/@nextui-org/modal/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Modal: () => modal_default,
        ModalBody: () => modal_body_default,
        ModalContent: () => modal_content_default,
        ModalFooter: () => modal_footer_default,
        ModalHeader: () => modal_header_default,
        ModalProvider: () => ModalProvider,
        useDisclosure: () => import_use_disclosure.useDisclosure,
        useModal: () => useModal,
        useModalContext: () => useModalContext
      });
      module.exports = __toCommonJS2(src_exports);
      var import_framer_motion = require_cjs2();
      var import_overlays2 = require_main14();
      var import_system2 = require_dist4();
      var import_use_aria_modal_overlay = require_dist48();
      var import_react3 = require_react();
      var import_theme = require_dist5();
      var import_system = require_dist4();
      var import_use_aria_button = require_dist21();
      var import_focus = require_main12();
      var import_shared_utils = require_dist9();
      var import_react_utils = require_dist10();
      var import_overlays = require_main27();
      var import_utils = require_main7();
      function useModal(originalProps) {
        var _a;
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.modal.variantKeys);
        const _a2 = props, {
          ref,
          as,
          className,
          classNames,
          disableAnimation = false,
          isOpen,
          defaultOpen,
          onOpenChange,
          motionProps,
          closeButton,
          isDismissable = true,
          hideCloseButton = false,
          shouldBlockScroll = true,
          portalContainer,
          isKeyboardDismissDisabled = false,
          onClose
        } = _a2, otherProps = __objRest(_a2, [
          "ref",
          "as",
          "className",
          "classNames",
          "disableAnimation",
          "isOpen",
          "defaultOpen",
          "onOpenChange",
          "motionProps",
          "closeButton",
          "isDismissable",
          "hideCloseButton",
          "shouldBlockScroll",
          "portalContainer",
          "isKeyboardDismissDisabled",
          "onClose"
        ]);
        const Component = as || "section";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const closeButtonRef = (0, import_react3.useRef)(null);
        const [headerMounted, setHeaderMounted] = (0, import_react3.useState)(false);
        const [bodyMounted, setBodyMounted] = (0, import_react3.useState)(false);
        const dialogId = (0, import_react3.useId)();
        const headerId = (0, import_react3.useId)();
        const bodyId = (0, import_react3.useId)();
        const state = (0, import_overlays.useOverlayTriggerState)({
          isOpen,
          defaultOpen,
          onOpenChange: (isOpen2) => {
            onOpenChange == null ? void 0 : onOpenChange(isOpen2);
            if (!isOpen2) {
              onClose == null ? void 0 : onClose();
            }
          }
        });
        const { modalProps, underlayProps } = (0, import_use_aria_modal_overlay.useAriaModalOverlay)(
          {
            isDismissable,
            isKeyboardDismissDisabled
          },
          state,
          domRef
        );
        const { buttonProps: closeButtonProps } = (0, import_use_aria_button.useAriaButton)({ onPress: state.close }, closeButtonRef);
        const { isFocusVisible: isCloseButtonFocusVisible, focusProps: closeButtonFocusProps } = (0, import_focus.useFocusRing)();
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.modal)(__spreadValues({}, variantProps)),
          [...Object.values(variantProps)]
        );
        const getDialogProps = (props2 = {}, ref2 = null) => __spreadProps(__spreadValues({
          ref: (0, import_utils.mergeRefs)(ref2, domRef)
        }, (0, import_utils.mergeProps)(modalProps, otherProps, props2)), {
          className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2.className) }),
          id: dialogId,
          "data-open": (0, import_shared_utils.dataAttr)(state.isOpen),
          "data-dismissable": (0, import_shared_utils.dataAttr)(isDismissable),
          "aria-modal": (0, import_shared_utils.dataAttr)(true),
          "aria-labelledby": headerMounted ? headerId : void 0,
          "aria-describedby": bodyMounted ? bodyId : void 0
        });
        const getBackdropProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues(__spreadValues({
            className: slots.backdrop({ class: classNames == null ? void 0 : classNames.backdrop }),
            onClick: () => state.close()
          }, underlayProps), props2),
          [slots, classNames, underlayProps]
        );
        const getCloseButtonProps = () => {
          return __spreadValues({
            role: "button",
            tabIndex: 0,
            "aria-label": "Close",
            "data-focus-visible": (0, import_shared_utils.dataAttr)(isCloseButtonFocusVisible),
            className: slots.closeButton({ class: classNames == null ? void 0 : classNames.closeButton })
          }, (0, import_utils.mergeProps)(closeButtonProps, closeButtonFocusProps));
        };
        return {
          Component,
          slots,
          domRef,
          headerId,
          bodyId,
          motionProps,
          classNames,
          isDismissable,
          closeButton,
          hideCloseButton,
          portalContainer,
          shouldBlockScroll,
          backdrop: (_a = originalProps.backdrop) != null ? _a : "opaque",
          isOpen: state.isOpen,
          onClose: state.close,
          disableAnimation,
          setBodyMounted,
          setHeaderMounted,
          getDialogProps,
          getBackdropProps,
          getCloseButtonProps
        };
      }
      var import_react_utils2 = require_dist10();
      var [ModalProvider, useModalContext] = (0, import_react_utils2.createContext)({
        name: "ModalContext",
        errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Modal />`"
      });
      var import_jsx_runtime = require_jsx_runtime();
      var Modal = (0, import_system2.forwardRef)((props, ref) => {
        const _a = props, { children } = _a, otherProps = __objRest(_a, ["children"]);
        const context = useModal(__spreadProps(__spreadValues({}, otherProps), { ref }));
        const overlay = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_overlays2.Overlay, { portalContainer: context.portalContainer, children });
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ModalProvider, { value: context, children: context.disableAnimation && context.isOpen ? overlay : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, { children: context.isOpen ? overlay : null }) });
      });
      Modal.displayName = "NextUI.Modal";
      var modal_default = Modal;
      var import_react22 = require_react();
      var import_system3 = require_dist4();
      var import_overlays3 = require_main14();
      var import_framer_transitions2 = require_dist13();
      var import_shared_icons = require_dist12();
      var import_react_remove_scroll = require_es56();
      var import_framer_motion2 = require_cjs2();
      var import_dialog = require_main32();
      var import_utils2 = require_main7();
      var import_framer_transitions = require_dist13();
      var scaleInOut = {
        enter: {
          scale: "var(--scale-enter)",
          y: "var(--slide-enter))",
          opacity: 1,
          transition: {
            scale: {
              duration: 0.4,
              ease: import_framer_transitions.TRANSITION_EASINGS.ease
            },
            opacity: {
              duration: 0.4,
              ease: import_framer_transitions.TRANSITION_EASINGS.ease
            },
            y: {
              type: "spring",
              bounce: 0,
              duration: 0.6
            }
          }
        },
        exit: {
          scale: "var(--scale-exit)",
          y: "var(--slide-exit)",
          opacity: 0,
          transition: {
            duration: 0.3,
            ease: import_framer_transitions.TRANSITION_EASINGS.ease
          }
        }
      };
      var import_jsx_runtime2 = require_jsx_runtime();
      var ModalContent = (0, import_system3.forwardRef)((props, _) => {
        const _a = props, { as, children, role = "dialog" } = _a, otherProps = __objRest(_a, ["as", "children", "role"]);
        const {
          Component: DialogComponent,
          domRef,
          slots,
          isOpen,
          classNames,
          motionProps,
          backdrop,
          closeButton,
          hideCloseButton,
          disableAnimation,
          shouldBlockScroll,
          getDialogProps,
          getBackdropProps,
          getCloseButtonProps,
          onClose
        } = useModalContext();
        const Component = as || DialogComponent || "div";
        const { dialogProps } = (0, import_dialog.useDialog)(
          {
            role
          },
          domRef
        );
        const closeButtonContent = (0, import_react22.isValidElement)(closeButton) ? (0, import_react22.cloneElement)(closeButton, getCloseButtonProps()) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("button", __spreadProps(__spreadValues({}, getCloseButtonProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_shared_icons.CloseIcon, {}) }));
        const content = /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, getDialogProps((0, import_utils2.mergeProps)(dialogProps, otherProps))), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_overlays3.DismissButton, { onDismiss: onClose }),
          !hideCloseButton && closeButtonContent,
          typeof children === "function" ? children(onClose) : children,
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_overlays3.DismissButton, { onDismiss: onClose })
        ] }));
        const backdropContent = (0, import_react22.useMemo)(() => {
          if (backdrop === "transparent") {
            return null;
          }
          if (disableAnimation) {
            return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadValues({}, getBackdropProps()));
          }
          return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_framer_motion2.motion.div,
            __spreadValues({
              animate: "enter",
              exit: "exit",
              initial: "exit",
              variants: import_framer_transitions2.TRANSITION_VARIANTS.fade
            }, getBackdropProps())
          );
        }, [backdrop, disableAnimation, getBackdropProps]);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { tabIndex: -1, children: [
          backdropContent,
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react_remove_scroll.RemoveScroll, { forwardProps: true, enabled: shouldBlockScroll && isOpen, removeScrollBar: false, children: disableAnimation ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }), children: content }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            import_framer_motion2.motion.div,
            __spreadProps(__spreadValues({
              animate: "enter",
              className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }),
              exit: "exit",
              initial: "exit",
              variants: scaleInOut
            }, motionProps), {
              children: content
            })
          ) })
        ] });
      });
      ModalContent.displayName = "NextUI.ModalContent";
      var modal_content_default = ModalContent;
      var import_react32 = require_react();
      var import_system4 = require_dist4();
      var import_react_utils3 = require_dist10();
      var import_shared_utils2 = require_dist9();
      var import_jsx_runtime3 = require_jsx_runtime();
      var ModalHeader = (0, import_system4.forwardRef)((props, ref) => {
        const _a = props, { as, children, className } = _a, otherProps = __objRest(_a, ["as", "children", "className"]);
        const { slots, classNames, headerId, setHeaderMounted } = useModalContext();
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const Component = as || "header";
        (0, import_react32.useEffect)(() => {
          setHeaderMounted(true);
          return () => setHeaderMounted(false);
        }, [setHeaderMounted]);
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            className: slots.header({ class: (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.header, className) }),
            id: headerId
          }, otherProps), {
            children
          })
        );
      });
      ModalHeader.displayName = "NextUI.ModalHeader";
      var modal_header_default = ModalHeader;
      var import_react4 = require_react();
      var import_system5 = require_dist4();
      var import_react_utils4 = require_dist10();
      var import_shared_utils3 = require_dist9();
      var import_jsx_runtime4 = require_jsx_runtime();
      var ModalBody = (0, import_system5.forwardRef)((props, ref) => {
        const _a = props, { as, children, className } = _a, otherProps = __objRest(_a, ["as", "children", "className"]);
        const { slots, classNames, bodyId, setBodyMounted } = useModalContext();
        const domRef = (0, import_react_utils4.useDOMRef)(ref);
        const Component = as || "div";
        (0, import_react4.useEffect)(() => {
          setBodyMounted(true);
          return () => setBodyMounted(false);
        }, [setBodyMounted]);
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            className: slots.body({ class: (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.body, className) }),
            id: bodyId
          }, otherProps), {
            children
          })
        );
      });
      ModalBody.displayName = "NextUI.ModalBody";
      var modal_body_default = ModalBody;
      var import_system6 = require_dist4();
      var import_react_utils5 = require_dist10();
      var import_shared_utils4 = require_dist9();
      var import_jsx_runtime5 = require_jsx_runtime();
      var ModalFooter = (0, import_system6.forwardRef)((props, ref) => {
        const _a = props, { as, children, className } = _a, otherProps = __objRest(_a, ["as", "children", "className"]);
        const { slots, classNames } = useModalContext();
        const domRef = (0, import_react_utils5.useDOMRef)(ref);
        const Component = as || "footer";
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            className: slots.footer({ class: (0, import_shared_utils4.clsx)(classNames == null ? void 0 : classNames.footer, className) })
          }, otherProps), {
            children
          })
        );
      });
      ModalFooter.displayName = "NextUI.ModalFooter";
      var modal_footer_default = ModalFooter;
      var import_use_disclosure = require_dist50();
    }
  });

  // node_modules/@nextui-org/use-scroll-position/dist/index.js
  var require_dist52 = __commonJS({
    "node_modules/@nextui-org/use-scroll-position/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useScrollPosition: () => useScrollPosition
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var isBrowser = typeof window !== "undefined";
      function getScrollPosition(element) {
        if (!isBrowser)
          return { x: 0, y: 0 };
        if (!element) {
          return { x: window.scrollX, y: window.scrollY };
        }
        return { x: element.scrollLeft, y: element.scrollTop };
      }
      var useScrollPosition = (props) => {
        const { elementRef, delay = 30, callback, isEnabled } = props;
        const position = (0, import_react3.useRef)(
          isEnabled ? getScrollPosition(elementRef == null ? void 0 : elementRef.current) : { x: 0, y: 0 }
        );
        let throttleTimeout = null;
        const handler = () => {
          const currPos = getScrollPosition(elementRef == null ? void 0 : elementRef.current);
          if (typeof callback === "function") {
            callback({ prevPos: position.current, currPos });
          }
          position.current = currPos;
          throttleTimeout = null;
        };
        (0, import_react3.useEffect)(() => {
          if (!isEnabled)
            return;
          const handleScroll = () => {
            if (delay) {
              if (throttleTimeout === null) {
                throttleTimeout = setTimeout(handler, delay);
              }
            } else {
              handler();
            }
          };
          const target = (elementRef == null ? void 0 : elementRef.current) || window;
          target.addEventListener("scroll", handleScroll);
          return () => target.removeEventListener("scroll", handleScroll);
        }, [elementRef == null ? void 0 : elementRef.current, delay, isEnabled]);
        return position.current;
      };
    }
  });

  // node_modules/@nextui-org/use-aria-toggle-button/dist/index.js
  var require_dist53 = __commonJS({
    "node_modules/@nextui-org/use-aria-toggle-button/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useAriaToggleButton: () => useAriaToggleButton
      });
      module.exports = __toCommonJS2(src_exports);
      var import_utils = require_main7();
      var import_utils2 = require_main7();
      var import_use_aria_button = require_dist21();
      function useAriaToggleButton(props, state, ref) {
        const { isSelected } = state;
        const { isPressed, buttonProps } = (0, import_use_aria_button.useAriaButton)(
          __spreadProps(__spreadValues({}, props), {
            onPress: (0, import_utils.chain)(state.toggle, props.onPress)
          }),
          ref
        );
        return {
          isPressed,
          buttonProps: (0, import_utils2.mergeProps)(buttonProps, {
            "aria-pressed": isSelected
          })
        };
      }
    }
  });

  // node_modules/@nextui-org/navbar/dist/index.js
  var require_dist54 = __commonJS({
    "node_modules/@nextui-org/navbar/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Navbar: () => navbar_default,
        NavbarBrand: () => navbar_brand_default,
        NavbarContent: () => navbar_content_default,
        NavbarItem: () => navbar_item_default,
        NavbarMenu: () => navbar_menu_default,
        NavbarMenuItem: () => navbar_menu_item_default,
        NavbarMenuToggle: () => navbar_menu_toggle_default,
        NavbarProvider: () => NavbarProvider,
        useNavbar: () => useNavbar,
        useNavbarContext: () => useNavbarContext
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system = require_dist4();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      var import_utils = require_main7();
      var import_use_scroll_position = require_dist52();
      var import_utils2 = require_main6();
      function useNavbar(originalProps) {
        var _a;
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.navbar.variantKeys);
        const _a2 = props, {
          ref,
          as,
          parentRef,
          height = "4rem",
          shouldHideOnScroll = false,
          disableScrollHandler = false,
          onScrollPositionChange,
          isMenuOpen: isMenuOpenProp,
          isMenuDefaultOpen,
          onMenuOpenChange = () => {
          },
          motionProps,
          className,
          classNames
        } = _a2, otherProps = __objRest(_a2, [
          "ref",
          "as",
          "parentRef",
          "height",
          "shouldHideOnScroll",
          "disableScrollHandler",
          "onScrollPositionChange",
          "isMenuOpen",
          "isMenuDefaultOpen",
          "onMenuOpenChange",
          "motionProps",
          "className",
          "classNames"
        ]);
        const Component = as || "nav";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const prevWidth = (0, import_react3.useRef)(0);
        const navHeight = (0, import_react3.useRef)(0);
        const [isHidden, setIsHidden] = (0, import_react3.useState)(false);
        const handleMenuOpenChange = (0, import_react3.useCallback)(
          (isOpen) => {
            onMenuOpenChange(isOpen || false);
          },
          [onMenuOpenChange]
        );
        const [isMenuOpen, setIsMenuOpen] = (0, import_utils2.useControlledState)(
          isMenuOpenProp,
          isMenuDefaultOpen,
          handleMenuOpenChange
        );
        const updateWidth = () => {
          if (domRef.current) {
            const width = domRef.current.offsetWidth;
            if (width !== prevWidth.current) {
              prevWidth.current = width;
            }
          }
        };
        (0, import_utils.useResizeObserver)({
          ref: domRef,
          onResize: () => {
            var _a22;
            const currentWidth = (_a22 = domRef.current) == null ? void 0 : _a22.offsetWidth;
            if (currentWidth !== prevWidth.current) {
              updateWidth();
              setIsMenuOpen(false);
            }
          }
        });
        (0, import_react3.useEffect)(() => {
          var _a22;
          updateWidth();
          navHeight.current = ((_a22 = domRef.current) == null ? void 0 : _a22.offsetHeight) || 0;
        }, []);
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.navbar)(__spreadProps(__spreadValues({}, variantProps), {
            hideOnScroll: shouldHideOnScroll
          })),
          [...Object.values(variantProps), shouldHideOnScroll]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        (0, import_use_scroll_position.useScrollPosition)({
          elementRef: parentRef,
          isEnabled: shouldHideOnScroll || !disableScrollHandler,
          callback: ({ prevPos, currPos }) => {
            onScrollPositionChange == null ? void 0 : onScrollPositionChange(currPos.y);
            if (shouldHideOnScroll) {
              setIsHidden((prev) => {
                const next = currPos.y > prevPos.y && currPos.y > navHeight.current;
                return next !== prev ? next : prev;
              });
            }
          }
        });
        const getBaseProps = (props2 = {}) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(otherProps, props2)), {
          "data-hidden": (0, import_shared_utils.dataAttr)(isHidden),
          "data-menu-open": (0, import_shared_utils.dataAttr)(isMenuOpen),
          ref: domRef,
          className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2 == null ? void 0 : props2.className) }),
          style: __spreadValues({
            "--navbar-height": height
          }, props2 == null ? void 0 : props2.style)
        });
        const getWrapperProps = (props2 = {}) => __spreadProps(__spreadValues({}, props2), {
          "data-menu-open": (0, import_shared_utils.dataAttr)(isMenuOpen),
          className: slots.wrapper({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className) })
        });
        return {
          Component,
          slots,
          domRef,
          height,
          isHidden,
          disableAnimation: (_a = originalProps.disableAnimation) != null ? _a : false,
          shouldHideOnScroll,
          isMenuOpen,
          classNames,
          setIsMenuOpen,
          motionProps,
          getBaseProps,
          getWrapperProps
        };
      }
      var import_react_utils2 = require_dist10();
      var [NavbarProvider, useNavbarContext] = (0, import_react_utils2.createContext)({
        name: "NavbarContext",
        strict: true,
        errorMessage: "useNavbarContext: `context` is undefined. Seems you forgot to wrap component within <Navbar />"
      });
      var import_system3 = require_dist4();
      var import_react_utils4 = require_dist10();
      var import_framer_motion2 = require_cjs2();
      var import_utils4 = require_main7();
      var import_framer_transitions = require_dist13();
      var hideOnScrollVariants = {
        visible: {
          y: 0,
          transition: {
            ease: import_framer_transitions.TRANSITION_EASINGS.easeOut
          }
        },
        hidden: {
          y: "-100%",
          transition: {
            ease: import_framer_transitions.TRANSITION_EASINGS.easeIn
          }
        }
      };
      var import_system2 = require_dist4();
      var import_react_utils3 = require_dist10();
      var import_shared_utils2 = require_dist9();
      var import_framer_motion = require_cjs2();
      var import_utils3 = require_main7();
      var import_react22 = require_react();
      var import_react_remove_scroll = require_es56();
      var import_overlays = require_main14();
      var menuVariants = {
        enter: {
          height: "calc(100vh - var(--navbar-height) - 1px)",
          transition: {
            duration: 0.3,
            easings: "easeOut"
          }
        },
        exit: {
          height: 0,
          transition: {
            duration: 0.25,
            easings: "easeIn"
          }
        }
      };
      var import_jsx_runtime = require_jsx_runtime();
      var NavbarMenu = (0, import_system2.forwardRef)((props, ref) => {
        var _a, _b;
        const _a2 = props, { className, children, portalContainer, motionProps, style } = _a2, otherProps = __objRest(_a2, ["className", "children", "portalContainer", "motionProps", "style"]);
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const { slots, isMenuOpen, height, disableAnimation, classNames } = useNavbarContext();
        const styles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.menu, className);
        const MenuWrapper = (0, import_react22.useCallback)(
          ({ children: children2 }) => {
            return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react_remove_scroll.RemoveScroll, { forwardProps: true, enabled: isMenuOpen, removeScrollBar: false, children: children2 });
          },
          [isMenuOpen]
        );
        const contents = disableAnimation ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MenuWrapper, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "ul",
          __spreadProps(__spreadValues({
            ref: domRef,
            className: (_a = slots.menu) == null ? void 0 : _a.call(slots, { class: styles }),
            "data-open": (0, import_shared_utils2.dataAttr)(isMenuOpen),
            style: {
              "--navbar-height": height
            }
          }, otherProps), {
            children
          })
        ) }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_framer_motion.AnimatePresence, { mode: "wait", children: isMenuOpen ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MenuWrapper, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_framer_motion.motion.ul,
          __spreadProps(__spreadValues({
            ref: domRef,
            layoutScroll: true,
            animate: "enter",
            className: (_b = slots.menu) == null ? void 0 : _b.call(slots, { class: styles }),
            "data-open": (0, import_shared_utils2.dataAttr)(isMenuOpen),
            exit: "exit",
            initial: "exit",
            style: __spreadValues({
              "--navbar-height": height
            }, style),
            variants: menuVariants
          }, (0, import_utils3.mergeProps)(motionProps, otherProps)), {
            children
          })
        ) }) : null });
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_overlays.Overlay, { portalContainer, children: contents });
      });
      NavbarMenu.displayName = "NextUI.NavbarMenu";
      var navbar_menu_default = NavbarMenu;
      var import_jsx_runtime2 = require_jsx_runtime();
      var Navbar = (0, import_system3.forwardRef)((props, ref) => {
        const _a = props, { children } = _a, otherProps = __objRest(_a, ["children"]);
        const context = useNavbar(__spreadProps(__spreadValues({}, otherProps), { ref }));
        const Component = context.Component;
        const [childrenWithoutMenu, menu] = (0, import_react_utils4.pickChildren)(children, navbar_menu_default);
        const content = /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("header", __spreadProps(__spreadValues({}, context.getWrapperProps()), { children: childrenWithoutMenu })),
          menu
        ] });
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(NavbarProvider, { value: context, children: context.shouldHideOnScroll ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          import_framer_motion2.motion.nav,
          __spreadProps(__spreadValues({
            animate: context.isHidden ? "hidden" : "visible",
            initial: false,
            variants: hideOnScrollVariants
          }, (0, import_utils4.mergeProps)(context.getBaseProps(), context.motionProps)), {
            children: content
          })
        ) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Component, __spreadProps(__spreadValues({}, context.getBaseProps()), { children: content })) });
      });
      Navbar.displayName = "NextUI.Navbar";
      var navbar_default = Navbar;
      var import_system4 = require_dist4();
      var import_react_utils5 = require_dist10();
      var import_shared_utils3 = require_dist9();
      var import_jsx_runtime3 = require_jsx_runtime();
      var NavbarBrand = (0, import_system4.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, { as, className, children } = _a2, otherProps = __objRest(_a2, ["as", "className", "children"]);
        const Component = as || "div";
        const domRef = (0, import_react_utils5.useDOMRef)(ref);
        const { slots, classNames } = useNavbarContext();
        const styles = (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.brand, className);
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Component, __spreadProps(__spreadValues({ ref: domRef, className: (_a = slots.brand) == null ? void 0 : _a.call(slots, { class: styles }) }, otherProps), { children }));
      });
      NavbarBrand.displayName = "NextUI.NavbarBrand";
      var navbar_brand_default = NavbarBrand;
      var import_system5 = require_dist4();
      var import_react_utils6 = require_dist10();
      var import_shared_utils4 = require_dist9();
      var import_jsx_runtime4 = require_jsx_runtime();
      var NavbarContent = (0, import_system5.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, { as, className, children, justify = "start" } = _a2, otherProps = __objRest(_a2, ["as", "className", "children", "justify"]);
        const Component = as || "ul";
        const domRef = (0, import_react_utils6.useDOMRef)(ref);
        const { slots, classNames } = useNavbarContext();
        const styles = (0, import_shared_utils4.clsx)(classNames == null ? void 0 : classNames.content, className);
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            className: (_a = slots.content) == null ? void 0 : _a.call(slots, { class: styles }),
            "data-justify": justify
          }, otherProps), {
            children
          })
        );
      });
      NavbarContent.displayName = "NextUI.NavbarContent";
      var navbar_content_default = NavbarContent;
      var import_system6 = require_dist4();
      var import_react_utils7 = require_dist10();
      var import_shared_utils5 = require_dist9();
      var import_jsx_runtime5 = require_jsx_runtime();
      var NavbarItem = (0, import_system6.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, { as, className, children, isActive } = _a2, otherProps = __objRest(_a2, ["as", "className", "children", "isActive"]);
        const Component = as || "li";
        const domRef = (0, import_react_utils7.useDOMRef)(ref);
        const { slots, classNames } = useNavbarContext();
        const styles = (0, import_shared_utils5.clsx)(classNames == null ? void 0 : classNames.item, className);
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            className: (_a = slots.item) == null ? void 0 : _a.call(slots, { class: styles }),
            "data-active": (0, import_shared_utils5.dataAttr)(isActive)
          }, otherProps), {
            children
          })
        );
      });
      NavbarItem.displayName = "NextUI.NavbarItem";
      var navbar_item_default = NavbarItem;
      var import_use_aria_toggle_button = require_dist53();
      var import_system7 = require_dist4();
      var import_react_utils8 = require_dist10();
      var import_shared_utils6 = require_dist9();
      var import_toggle = require_main20();
      var import_focus = require_main12();
      var import_utils5 = require_main7();
      var import_interactions = require_main11();
      var import_react32 = require_react();
      var import_jsx_runtime6 = require_jsx_runtime();
      var NavbarMenuToggle = (0, import_system7.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, {
          as,
          icon,
          className,
          onChange,
          autoFocus,
          srOnlyText: srOnlyTextProp
        } = _a2, otherProps = __objRest(_a2, [
          "as",
          "icon",
          "className",
          "onChange",
          "autoFocus",
          "srOnlyText"
        ]);
        const Component = as || "button";
        const domRef = (0, import_react_utils8.useDOMRef)(ref);
        const { slots, classNames, isMenuOpen, setIsMenuOpen } = useNavbarContext();
        const handleChange = (isOpen) => {
          onChange == null ? void 0 : onChange(isOpen);
          setIsMenuOpen(isOpen);
        };
        const state = (0, import_toggle.useToggleState)(__spreadProps(__spreadValues({}, otherProps), { isSelected: isMenuOpen, onChange: handleChange }));
        const { buttonProps, isPressed } = (0, import_use_aria_toggle_button.useAriaToggleButton)(props, state, domRef);
        const { isFocusVisible, focusProps } = (0, import_focus.useFocusRing)({ autoFocus });
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({});
        const toggleStyles = (0, import_shared_utils6.clsx)(classNames == null ? void 0 : classNames.toggle, className);
        const child = (0, import_react32.useMemo)(() => {
          if (typeof icon === "function") {
            return icon(isMenuOpen != null ? isMenuOpen : false);
          }
          return icon || /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("span", { className: slots.toggleIcon({ class: classNames == null ? void 0 : classNames.toggleIcon }) });
        }, [icon, slots.toggleIcon, classNames == null ? void 0 : classNames.toggleIcon]);
        const srOnlyText = (0, import_react32.useMemo)(() => {
          if (srOnlyTextProp) {
            return srOnlyTextProp;
          }
          return state.isSelected ? "close navigation menu" : "open navigation menu";
        }, [srOnlyTextProp, isMenuOpen]);
        return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            className: (_a = slots.toggle) == null ? void 0 : _a.call(slots, { class: toggleStyles }),
            "data-focus-visible": (0, import_shared_utils6.dataAttr)(isFocusVisible),
            "data-hover": (0, import_shared_utils6.dataAttr)(isHovered),
            "data-open": (0, import_shared_utils6.dataAttr)(isMenuOpen),
            "data-pressed": (0, import_shared_utils6.dataAttr)(isPressed)
          }, (0, import_utils5.mergeProps)(buttonProps, focusProps, hoverProps, otherProps)), {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("span", { className: slots.srOnly(), children: srOnlyText }),
              child
            ]
          })
        );
      });
      NavbarMenuToggle.displayName = "NextUI.NavbarMenuToggle";
      var navbar_menu_toggle_default = NavbarMenuToggle;
      var import_system8 = require_dist4();
      var import_react_utils9 = require_dist10();
      var import_shared_utils7 = require_dist9();
      var import_jsx_runtime7 = require_jsx_runtime();
      var NavbarMenuItem = (0, import_system8.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, { className, children } = _a2, otherProps = __objRest(_a2, ["className", "children"]);
        const domRef = (0, import_react_utils9.useDOMRef)(ref);
        const { slots, isMenuOpen, classNames } = useNavbarContext();
        const styles = (0, import_shared_utils7.clsx)(classNames == null ? void 0 : classNames.menuItem, className);
        return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          "li",
          __spreadProps(__spreadValues({
            ref: domRef,
            className: (_a = slots.menuItem) == null ? void 0 : _a.call(slots, { class: styles }),
            "data-open": (0, import_shared_utils7.dataAttr)(isMenuOpen)
          }, otherProps), {
            children
          })
        );
      });
      NavbarMenuItem.displayName = "NextUI.NavbarMenuItem";
      var navbar_menu_item_default = NavbarMenuItem;
    }
  });

  // node_modules/@react-stately/grid/dist/main.js
  var require_main35 = __commonJS({
    "node_modules/@react-stately/grid/dist/main.js"(exports, module) {
      var $82f7L$reactstatelycollections = require_main15();
      var $82f7L$react = require_react();
      var $82f7L$reactstatelyselection = require_main16();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useGridState", () => $38009b28e45912ea$export$4007ac09ff9c68ed);
      $parcel$export(module.exports, "GridCollection", () => $8bb6a9101b052a66$export$de3fdf6493c353d);
      function $38009b28e45912ea$export$4007ac09ff9c68ed(props) {
        let { collection, focusMode } = props;
        let selectionState = (0, $82f7L$reactstatelyselection.useMultipleSelectionState)(props);
        let disabledKeys = (0, $82f7L$react.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
          props.disabledKeys
        ]);
        let setFocusedKey = selectionState.setFocusedKey;
        selectionState.setFocusedKey = (key, child) => {
          if (focusMode === "cell" && key != null) {
            let item = collection.getItem(key);
            if ((item === null || item === void 0 ? void 0 : item.type) === "item") {
              var _getLastItem, _getFirstItem;
              let children = (0, $82f7L$reactstatelycollections.getChildNodes)(item, collection);
              if (child === "last")
                key = (_getLastItem = (0, $82f7L$reactstatelycollections.getLastItem)(children)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;
              else
                key = (_getFirstItem = (0, $82f7L$reactstatelycollections.getFirstItem)(children)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;
            }
          }
          setFocusedKey(key, child);
        };
        let selectionManager = (0, $82f7L$react.useMemo)(() => new (0, $82f7L$reactstatelyselection.SelectionManager)(collection, selectionState), [
          collection,
          selectionState
        ]);
        const cachedCollection = (0, $82f7L$react.useRef)(null);
        (0, $82f7L$react.useEffect)(() => {
          if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
            const node = cachedCollection.current.getItem(selectionState.focusedKey);
            const parentNode = node.parentKey != null && (node.type === "cell" || node.type === "rowheader" || node.type === "column") ? cachedCollection.current.getItem(node.parentKey) : node;
            const cachedRows = cachedCollection.current.rows;
            const rows = collection.rows;
            const diff = cachedRows.length - rows.length;
            let index3 = Math.min(diff > 1 ? Math.max(parentNode.index - diff + 1, 0) : parentNode.index, rows.length - 1);
            let newRow;
            while (index3 >= 0) {
              if (!selectionManager.isDisabled(rows[index3].key) && rows[index3].type !== "headerrow") {
                newRow = rows[index3];
                break;
              }
              if (index3 < rows.length - 1)
                index3++;
              else {
                if (index3 > parentNode.index)
                  index3 = parentNode.index;
                index3--;
              }
            }
            if (newRow) {
              const childNodes = newRow.hasChildNodes ? [
                ...(0, $82f7L$reactstatelycollections.getChildNodes)(newRow, collection)
              ] : [];
              const keyToFocus = newRow.hasChildNodes && parentNode !== node && node.index < childNodes.length ? childNodes[node.index].key : newRow.key;
              selectionState.setFocusedKey(keyToFocus);
            } else
              selectionState.setFocusedKey(null);
          }
          cachedCollection.current = collection;
        }, [
          collection,
          selectionManager,
          selectionState,
          selectionState.focusedKey
        ]);
        return {
          collection,
          disabledKeys,
          isKeyboardNavigationDisabled: false,
          selectionManager
        };
      }
      var $8bb6a9101b052a66$export$de3fdf6493c353d = class {
        *[Symbol.iterator]() {
          yield* __yieldStar([
            ...this.rows
          ]);
        }
        get size() {
          return [
            ...this.rows
          ].length;
        }
        getKeys() {
          return this.keyMap.keys();
        }
        getKeyBefore(key) {
          let node = this.keyMap.get(key);
          return node ? node.prevKey : null;
        }
        getKeyAfter(key) {
          let node = this.keyMap.get(key);
          return node ? node.nextKey : null;
        }
        getFirstKey() {
          var _;
          return (_ = [
            ...this.rows
          ][0]) === null || _ === void 0 ? void 0 : _.key;
        }
        getLastKey() {
          var _rows_;
          let rows = [
            ...this.rows
          ];
          return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;
        }
        getItem(key) {
          return this.keyMap.get(key);
        }
        at(idx) {
          const keys = [
            ...this.getKeys()
          ];
          return this.getItem(keys[idx]);
        }
        getChildren(key) {
          let node = this.keyMap.get(key);
          return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
        }
        constructor(opts) {
          this.keyMap = /* @__PURE__ */ new Map();
          this.keyMap = /* @__PURE__ */ new Map();
          this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;
          this.rows = [];
          let visit = (node) => {
            let prevNode = this.keyMap.get(node.key);
            if (opts.visitNode)
              node = opts.visitNode(node);
            this.keyMap.set(node.key, node);
            let childKeys = /* @__PURE__ */ new Set();
            let last2;
            for (let child of node.childNodes) {
              if (child.type === "cell" && child.parentKey == null)
                child.parentKey = node.key;
              childKeys.add(child.key);
              if (last2) {
                last2.nextKey = child.key;
                child.prevKey = last2.key;
              } else
                child.prevKey = null;
              visit(child);
              last2 = child;
            }
            if (last2)
              last2.nextKey = null;
            if (prevNode) {
              for (let child of prevNode.childNodes)
                if (!childKeys.has(child.key))
                  remove(child);
            }
          };
          let remove = (node) => {
            this.keyMap.delete(node.key);
            for (let child of node.childNodes)
              if (this.keyMap.get(child.key) === child)
                remove(child);
          };
          let last;
          opts.items.forEach((node, i) => {
            let rowNode = __spreadValues({
              level: 0,
              key: "row-" + i,
              type: "row",
              value: void 0,
              hasChildNodes: true,
              childNodes: [
                ...node.childNodes
              ],
              rendered: void 0,
              textValue: void 0
            }, node);
            if (last) {
              last.nextKey = rowNode.key;
              rowNode.prevKey = last.key;
            } else
              rowNode.prevKey = null;
            this.rows.push(rowNode);
            visit(rowNode);
            last = rowNode;
          });
          if (last)
            last.nextKey = null;
        }
      };
    }
  });

  // node_modules/@react-stately/flags/dist/main.js
  var require_main36 = __commonJS({
    "node_modules/@react-stately/flags/dist/main.js"(exports, module) {
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "enableTableNestedRows", () => $b8649bdbb43830e8$export$d9d8a0f82de49530);
      $parcel$export(module.exports, "tableNestedRows", () => $b8649bdbb43830e8$export$1b00cb14a96194e6);
      var $b8649bdbb43830e8$var$_tableNestedRows = false;
      function $b8649bdbb43830e8$export$d9d8a0f82de49530() {
        $b8649bdbb43830e8$var$_tableNestedRows = true;
      }
      function $b8649bdbb43830e8$export$1b00cb14a96194e6() {
        return $b8649bdbb43830e8$var$_tableNestedRows;
      }
    }
  });

  // node_modules/@react-stately/table/dist/main.js
  var require_main37 = __commonJS({
    "node_modules/@react-stately/table/dist/main.js"(exports, module) {
      var $56JBj$reactstatelycollections = require_main15();
      var $56JBj$react = require_react();
      var $56JBj$reactstatelygrid = require_main35();
      var $56JBj$reactstatelyflags = require_main36();
      var $56JBj$reactstatelyutils = require_main6();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "useTableColumnResizeState", () => $7aa22d80cd4ca621$export$cb895dcf85db1319);
      $parcel$export(module.exports, "useTableState", () => $e3f7784147dde23d$export$907bcc6c48325fd6);
      $parcel$export(module.exports, "TableHeader", () => $f45775f5d6f744fa$export$f850895b287ef28e);
      $parcel$export(module.exports, "TableBody", () => $6ec527db6a3a5692$export$76ccd210b9029917);
      $parcel$export(module.exports, "Column", () => $714483d9f6ca4c55$export$816b5d811295e6bc);
      $parcel$export(module.exports, "Row", () => $9ec6912e32cc0d81$export$b59bdbef9ce70de2);
      $parcel$export(module.exports, "Cell", () => $ad4ab0a21c733e1f$export$f6f0c3fe4ec306ea);
      $parcel$export(module.exports, "Section", () => $56JBj$reactstatelycollections.Section);
      $parcel$export(module.exports, "TableCollection", () => $7f5a58334d8866a5$export$596e1b2e2cf93690);
      $parcel$export(module.exports, "buildHeaderRows", () => $7f5a58334d8866a5$export$7c127db850d4e81e);
      $parcel$export(module.exports, "TableColumnLayout", () => $2240a72410c17d51$export$7ff77a162970b30e);
      $parcel$export(module.exports, "UNSTABLE_useTreeGridState", () => $ed4e0b68b470dcfd$export$34dfa8a1622185a4);
      function $9e5f6a0caf75716e$export$1994a077b98ee0d5(width) {
        return width != null && (!isNaN(width) || String(width).match(/^(\d+)(?=%$)/) !== null);
      }
      function $9e5f6a0caf75716e$export$9078bad4c3934604(width) {
        if (!width)
          return 1;
        let match = width.match(/^(.+)(?=fr$)/);
        if (!match) {
          console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, "defaulting to '1fr'");
          return 1;
        }
        return parseFloat(match[0]);
      }
      function $9e5f6a0caf75716e$export$7bbad27896f7ae9f(width, tableWidth) {
        if (typeof width === "string") {
          let match = width.match(/^(\d+)(?=%$)/);
          if (!match)
            throw new Error("Only percentages or numbers are supported for static column widths");
          return tableWidth * (parseFloat(match[0]) / 100);
        }
        return width;
      }
      function $9e5f6a0caf75716e$export$59185c62a7544aa0(maxWidth, tableWidth) {
        return maxWidth != null ? $9e5f6a0caf75716e$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;
      }
      function $9e5f6a0caf75716e$export$f556054ce4358701(minWidth, tableWidth) {
        return minWidth != null ? $9e5f6a0caf75716e$export$7bbad27896f7ae9f(minWidth, tableWidth) : 0;
      }
      function $9e5f6a0caf75716e$export$55d50dc687385491(availableWidth, columns, changedColumns, getDefaultWidth, getDefaultMinWidth) {
        let hasNonFrozenItems = false;
        let flexItems = columns.map((column, index3) => {
          var _column_width, _ref, _ref1;
          let width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : (_ref1 = (_ref = (_column_width = column.width) !== null && _column_width !== void 0 ? _column_width : column.defaultWidth) !== null && _ref !== void 0 ? _ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(index3)) !== null && _ref1 !== void 0 ? _ref1 : "1fr";
          let frozen = false;
          let baseSize = 0;
          let flex = 0;
          let targetMainSize = null;
          if ($9e5f6a0caf75716e$export$1994a077b98ee0d5(width)) {
            baseSize = $9e5f6a0caf75716e$export$7bbad27896f7ae9f(width, availableWidth);
            frozen = true;
          } else {
            flex = $9e5f6a0caf75716e$export$9078bad4c3934604(width);
            if (flex <= 0)
              frozen = true;
          }
          var _column_minWidth, _ref2;
          let min = $9e5f6a0caf75716e$export$f556054ce4358701((_ref2 = (_column_minWidth = column.minWidth) !== null && _column_minWidth !== void 0 ? _column_minWidth : getDefaultMinWidth === null || getDefaultMinWidth === void 0 ? void 0 : getDefaultMinWidth(index3)) !== null && _ref2 !== void 0 ? _ref2 : 0, availableWidth);
          let max = $9e5f6a0caf75716e$export$59185c62a7544aa0(column.maxWidth, availableWidth);
          let hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));
          if (frozen)
            targetMainSize = hypotheticalMainSize;
          else if (baseSize > hypotheticalMainSize) {
            frozen = true;
            targetMainSize = hypotheticalMainSize;
          }
          if (!frozen)
            hasNonFrozenItems = true;
          return {
            frozen,
            baseSize,
            hypotheticalMainSize,
            min,
            max,
            flex,
            targetMainSize,
            violation: 0
          };
        });
        while (hasNonFrozenItems) {
          let usedWidth = 0;
          let flexFactors = 0;
          flexItems.forEach((item) => {
            if (item.frozen)
              usedWidth += item.targetMainSize;
            else {
              usedWidth += item.baseSize;
              flexFactors += item.flex;
            }
          });
          let remainingFreeSpace = availableWidth - usedWidth;
          if (remainingFreeSpace > 0)
            flexItems.forEach((item) => {
              if (!item.frozen) {
                let ratio = item.flex / flexFactors;
                item.targetMainSize = item.baseSize + ratio * remainingFreeSpace;
              }
            });
          let totalViolation = 0;
          flexItems.forEach((item) => {
            item.violation = 0;
            if (!item.frozen) {
              let { min, max, targetMainSize } = item;
              item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));
              item.violation = item.targetMainSize - targetMainSize;
              totalViolation += item.violation;
            }
          });
          hasNonFrozenItems = false;
          flexItems.forEach((item) => {
            if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation))
              item.frozen = true;
            else if (!item.frozen)
              hasNonFrozenItems = true;
          });
        }
        return $9e5f6a0caf75716e$var$cascadeRounding(flexItems);
      }
      function $9e5f6a0caf75716e$var$cascadeRounding(flexItems) {
        let fpTotal = 0;
        let intTotal = 0;
        let roundedArray = [];
        flexItems.forEach(function(item) {
          let float = item.targetMainSize;
          let integer = Math.round(float + fpTotal) - intTotal;
          fpTotal += float;
          intTotal += integer;
          roundedArray.push(integer);
        });
        return roundedArray;
      }
      var $2240a72410c17d51$export$7ff77a162970b30e = class {
        /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */
        splitColumnsIntoControlledAndUncontrolled(columns) {
          return columns.reduce((acc, col) => {
            if (col.props.width != null)
              acc[0].set(col.key, col);
            else
              acc[1].set(col.key, col);
            return acc;
          }, [
            /* @__PURE__ */ new Map(),
            /* @__PURE__ */ new Map()
          ]);
        }
        /** Takes uncontrolled and controlled widths and joins them into a single Map. */
        recombineColumns(columns, uncontrolledWidths, uncontrolledColumns, controlledColumns) {
          return new Map(columns.map((col) => {
            if (uncontrolledColumns.has(col.key))
              return [
                col.key,
                uncontrolledWidths.get(col.key)
              ];
            else
              return [
                col.key,
                controlledColumns.get(col.key).props.width
              ];
          }));
        }
        /** Used to make an initial Map of the uncontrolled widths based on default widths. */
        getInitialUncontrolledWidths(uncontrolledColumns) {
          var _col_props_defaultWidth, _ref;
          return new Map(Array.from(uncontrolledColumns).map(([key, col]) => {
            var _this, _this_getDefaultWidth;
            return [
              key,
              (_ref = (_col_props_defaultWidth = col.props.defaultWidth) !== null && _col_props_defaultWidth !== void 0 ? _col_props_defaultWidth : (_this_getDefaultWidth = (_this = this).getDefaultWidth) === null || _this_getDefaultWidth === void 0 ? void 0 : _this_getDefaultWidth.call(_this, col)) !== null && _ref !== void 0 ? _ref : "1fr"
            ];
          }));
        }
        getColumnWidth(key) {
          var _this_columnWidths_get;
          return (_this_columnWidths_get = this.columnWidths.get(key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;
        }
        getColumnMinWidth(key) {
          return this.columnMinWidths.get(key);
        }
        getColumnMaxWidth(key) {
          return this.columnMaxWidths.get(key);
        }
        resizeColumnWidth(tableWidth, collection, controlledWidths, uncontrolledWidths, col = null, width) {
          let prevColumnWidths = this.columnWidths;
          let resizeIndex = Infinity;
          let resizingChanged = new Map([
            ...controlledWidths,
            ...uncontrolledWidths
          ]);
          let percentKeys = /* @__PURE__ */ new Map();
          let frKeysToTheRight = /* @__PURE__ */ new Map();
          let minWidths = /* @__PURE__ */ new Map();
          collection.columns.forEach((column, i) => {
            var _column_props_width, _column_props_width_endsWith;
            let frKey;
            let frValue;
            minWidths.set(column.key, this.getDefaultMinWidth(collection.columns[i]));
            if (col !== column.key && !column.props.width && !(0, $9e5f6a0caf75716e$export$1994a077b98ee0d5)(uncontrolledWidths.get(column.key))) {
              frKey = column.key;
              frValue = (0, $9e5f6a0caf75716e$export$9078bad4c3934604)(uncontrolledWidths.get(column.key));
            } else if (col !== column.key && !(0, $9e5f6a0caf75716e$export$1994a077b98ee0d5)(column.props.width) && !uncontrolledWidths.get(column.key)) {
              frKey = column.key;
              frValue = (0, $9e5f6a0caf75716e$export$9078bad4c3934604)(column.props.width);
            } else if (col !== column.key && ((_column_props_width = column.props.width) === null || _column_props_width === void 0 ? void 0 : (_column_props_width_endsWith = _column_props_width.endsWith) === null || _column_props_width_endsWith === void 0 ? void 0 : _column_props_width_endsWith.call(_column_props_width, "%")))
              percentKeys.set(column.key, column.props.width);
            if (resizeIndex < i) {
              if (frKey)
                frKeysToTheRight.set(frKey, frValue);
              return;
            }
            if (column.key === col) {
              resizeIndex = i;
              resizingChanged.set(column.key, Math.floor(width));
              return;
            }
            resizingChanged.set(column.key, prevColumnWidths.get(column.key));
          });
          let columnWidths = (0, $9e5f6a0caf75716e$export$55d50dc687385491)(tableWidth, collection.columns.map((col2) => __spreadProps(__spreadValues({}, col2.props), {
            key: col2.key
          })), resizingChanged, (i) => this.getDefaultWidth(collection.columns[i]), (i) => this.getDefaultMinWidth(collection.columns[i]));
          let newWidths = /* @__PURE__ */ new Map();
          columnWidths.forEach((width2, index3) => {
            let key = collection.columns[index3].key;
            newWidths.set(key, width2);
          });
          Array.from(frKeysToTheRight).forEach(([key]) => {
            newWidths.set(key, `${frKeysToTheRight.get(key)}fr`);
          });
          Array.from(percentKeys).forEach(([key, width2]) => {
            if (key === col)
              return;
            newWidths.set(key, width2);
          });
          return newWidths;
        }
        buildColumnWidths(tableWidth, collection, widths) {
          this.columnWidths = /* @__PURE__ */ new Map();
          this.columnMinWidths = /* @__PURE__ */ new Map();
          this.columnMaxWidths = /* @__PURE__ */ new Map();
          let columnWidths = (0, $9e5f6a0caf75716e$export$55d50dc687385491)(tableWidth, collection.columns.map((col) => __spreadProps(__spreadValues({}, col.props), {
            key: col.key
          })), widths, (i) => this.getDefaultWidth(collection.columns[i]), (i) => this.getDefaultMinWidth(collection.columns[i]));
          columnWidths.forEach((width, index3) => {
            let key = collection.columns[index3].key;
            let column = collection.columns[index3];
            this.columnWidths.set(key, width);
            var _column_props_minWidth;
            this.columnMinWidths.set(key, (0, $9e5f6a0caf75716e$export$f556054ce4358701)((_column_props_minWidth = column.props.minWidth) !== null && _column_props_minWidth !== void 0 ? _column_props_minWidth : this.getDefaultMinWidth(column), tableWidth));
            this.columnMaxWidths.set(key, (0, $9e5f6a0caf75716e$export$59185c62a7544aa0)(column.props.maxWidth, tableWidth));
          });
          return this.columnWidths;
        }
        constructor(options) {
          this.columnWidths = /* @__PURE__ */ new Map();
          this.columnMinWidths = /* @__PURE__ */ new Map();
          this.columnMaxWidths = /* @__PURE__ */ new Map();
          var _options_getDefaultWidth;
          this.getDefaultWidth = (_options_getDefaultWidth = options === null || options === void 0 ? void 0 : options.getDefaultWidth) !== null && _options_getDefaultWidth !== void 0 ? _options_getDefaultWidth : () => "1fr";
          var _options_getDefaultMinWidth;
          this.getDefaultMinWidth = (_options_getDefaultMinWidth = options === null || options === void 0 ? void 0 : options.getDefaultMinWidth) !== null && _options_getDefaultMinWidth !== void 0 ? _options_getDefaultMinWidth : () => 75;
        }
      };
      function $7aa22d80cd4ca621$export$cb895dcf85db1319(props, state) {
        let { getDefaultWidth, getDefaultMinWidth, tableWidth = 0 } = props;
        let [resizingColumn, setResizingColumn] = (0, $56JBj$react.useState)(null);
        let columnLayout = (0, $56JBj$react.useMemo)(() => new (0, $2240a72410c17d51$export$7ff77a162970b30e)({
          getDefaultWidth,
          getDefaultMinWidth
        }), [
          getDefaultWidth,
          getDefaultMinWidth
        ]);
        let [controlledColumns, uncontrolledColumns] = (0, $56JBj$react.useMemo)(() => columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns), [
          state.collection.columns,
          columnLayout
        ]);
        let [uncontrolledWidths, setUncontrolledWidths] = (0, $56JBj$react.useState)(() => columnLayout.getInitialUncontrolledWidths(uncontrolledColumns));
        let colWidths = (0, $56JBj$react.useMemo)(() => columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns), [
          state.collection.columns,
          uncontrolledWidths,
          uncontrolledColumns,
          controlledColumns,
          columnLayout
        ]);
        let startResize = (0, $56JBj$react.useCallback)((key) => {
          setResizingColumn(key);
        }, [
          setResizingColumn
        ]);
        let updateResizedColumns = (0, $56JBj$react.useCallback)((key, width) => {
          let newControlled = new Map(Array.from(controlledColumns).map(([key2, entry]) => [
            key2,
            entry.props.width
          ]));
          let newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);
          let map = new Map(Array.from(uncontrolledColumns).map(([key2]) => [
            key2,
            newSizes.get(key2)
          ]));
          map.set(key, width);
          setUncontrolledWidths(map);
          return newSizes;
        }, [
          controlledColumns,
          uncontrolledColumns,
          setUncontrolledWidths,
          tableWidth,
          columnLayout,
          state.collection,
          uncontrolledWidths
        ]);
        let endResize = (0, $56JBj$react.useCallback)(() => {
          setResizingColumn(null);
        }, [
          setResizingColumn
        ]);
        (0, $56JBj$react.useMemo)(() => columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths), [
          tableWidth,
          state.collection,
          colWidths,
          columnLayout
        ]);
        return (0, $56JBj$react.useMemo)(() => ({
          resizingColumn,
          updateResizedColumns,
          startResize,
          endResize,
          getColumnWidth: (key) => columnLayout.getColumnWidth(key),
          getColumnMinWidth: (key) => columnLayout.getColumnMinWidth(key),
          getColumnMaxWidth: (key) => columnLayout.getColumnMaxWidth(key),
          tableState: state
        }), [
          columnLayout,
          resizingColumn,
          updateResizedColumns,
          startResize,
          endResize,
          state
        ]);
      }
      var $7f5a58334d8866a5$var$ROW_HEADER_COLUMN_KEY = "row-header-column-" + Math.random().toString(36).slice(2);
      var $7f5a58334d8866a5$var$ROW_HEADER_COLUMN_KEY_DRAG = "row-header-column-" + Math.random().toString(36).slice(2);
      while ($7f5a58334d8866a5$var$ROW_HEADER_COLUMN_KEY === $7f5a58334d8866a5$var$ROW_HEADER_COLUMN_KEY_DRAG)
        $7f5a58334d8866a5$var$ROW_HEADER_COLUMN_KEY_DRAG = "row-header-column-" + Math.random().toString(36).slice(2);
      function $7f5a58334d8866a5$export$7c127db850d4e81e(keyMap, columnNodes) {
        if (columnNodes.length === 0)
          return [];
        let columns = [];
        let seen = /* @__PURE__ */ new Map();
        for (let column of columnNodes) {
          let parentKey = column.parentKey;
          let col = [
            column
          ];
          while (parentKey) {
            let parent = keyMap.get(parentKey);
            if (!parent)
              break;
            if (seen.has(parent)) {
              parent.colspan++;
              let { column: column2, index: index3 } = seen.get(parent);
              if (index3 > col.length)
                break;
              for (let i2 = index3; i2 < col.length; i2++)
                column2.splice(i2, 0, null);
              for (let i2 = col.length; i2 < column2.length; i2++)
                if (column2[i2] && seen.has(column2[i2]))
                  seen.get(column2[i2]).index = i2;
            } else {
              parent.colspan = 1;
              col.push(parent);
              seen.set(parent, {
                column: col,
                index: col.length - 1
              });
            }
            parentKey = parent.parentKey;
          }
          columns.push(col);
          column.index = columns.length - 1;
        }
        let maxLength = Math.max(...columns.map((c) => c.length));
        let headerRows = Array(maxLength).fill(0).map(() => []);
        let colIndex = 0;
        for (let column of columns) {
          let i2 = maxLength - 1;
          for (let item of column) {
            if (item) {
              let row = headerRows[i2];
              let rowLength = row.reduce((p, c) => p + c.colspan, 0);
              if (rowLength < colIndex) {
                let placeholder = {
                  type: "placeholder",
                  key: "placeholder-" + item.key,
                  colspan: colIndex - rowLength,
                  index: rowLength,
                  value: null,
                  rendered: null,
                  level: i2,
                  hasChildNodes: false,
                  childNodes: [],
                  textValue: null
                };
                if (row.length > 0) {
                  row[row.length - 1].nextKey = placeholder.key;
                  placeholder.prevKey = row[row.length - 1].key;
                }
                row.push(placeholder);
              }
              if (row.length > 0) {
                row[row.length - 1].nextKey = item.key;
                item.prevKey = row[row.length - 1].key;
              }
              item.level = i2;
              item.colIndex = colIndex;
              row.push(item);
            }
            i2--;
          }
          colIndex++;
        }
        let i = 0;
        for (let row of headerRows) {
          let rowLength = row.reduce((p, c) => p + c.colspan, 0);
          if (rowLength < columnNodes.length) {
            let placeholder = {
              type: "placeholder",
              key: "placeholder-" + row[row.length - 1].key,
              colspan: columnNodes.length - rowLength,
              index: rowLength,
              value: null,
              rendered: null,
              level: i,
              hasChildNodes: false,
              childNodes: [],
              textValue: null,
              prevKey: row[row.length - 1].key
            };
            row.push(placeholder);
          }
          i++;
        }
        return headerRows.map((childNodes, index3) => {
          let row = {
            type: "headerrow",
            key: "headerrow-" + index3,
            index: index3,
            value: null,
            rendered: null,
            level: 0,
            hasChildNodes: true,
            childNodes,
            textValue: null
          };
          return row;
        });
      }
      var $7f5a58334d8866a5$export$596e1b2e2cf93690 = class extends (0, $56JBj$reactstatelygrid.GridCollection) {
        *[Symbol.iterator]() {
          yield* __yieldStar(this.body.childNodes);
        }
        get size() {
          return this._size;
        }
        getKeys() {
          return this.keyMap.keys();
        }
        getKeyBefore(key) {
          let node = this.keyMap.get(key);
          return node ? node.prevKey : null;
        }
        getKeyAfter(key) {
          let node = this.keyMap.get(key);
          return node ? node.nextKey : null;
        }
        getFirstKey() {
          var _getFirstItem;
          return (_getFirstItem = (0, $56JBj$reactstatelycollections.getFirstItem)(this.body.childNodes)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;
        }
        getLastKey() {
          var _getLastItem;
          return (_getLastItem = (0, $56JBj$reactstatelycollections.getLastItem)(this.body.childNodes)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;
        }
        getItem(key) {
          return this.keyMap.get(key);
        }
        at(idx) {
          const keys = [
            ...this.getKeys()
          ];
          return this.getItem(keys[idx]);
        }
        getTextValue(key) {
          let row = this.getItem(key);
          if (!row)
            return "";
          if (row.textValue)
            return row.textValue;
          let rowHeaderColumnKeys = this.rowHeaderColumnKeys;
          if (rowHeaderColumnKeys) {
            let text = [];
            for (let cell of row.childNodes) {
              let column = this.columns[cell.index];
              if (rowHeaderColumnKeys.has(column.key) && cell.textValue)
                text.push(cell.textValue);
              if (text.length === rowHeaderColumnKeys.size)
                break;
            }
            return text.join(" ");
          }
          return "";
        }
        constructor(nodes, prev, opts) {
          let rowHeaderColumnKeys = /* @__PURE__ */ new Set();
          let body;
          let columns = [];
          if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {
            let rowHeaderColumn = {
              type: "column",
              key: $7f5a58334d8866a5$var$ROW_HEADER_COLUMN_KEY,
              value: null,
              textValue: "",
              level: 0,
              index: (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) ? 1 : 0,
              hasChildNodes: false,
              rendered: null,
              childNodes: [],
              props: {
                isSelectionCell: true
              }
            };
            columns.unshift(rowHeaderColumn);
          }
          if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) {
            let rowHeaderColumn = {
              type: "column",
              key: $7f5a58334d8866a5$var$ROW_HEADER_COLUMN_KEY_DRAG,
              value: null,
              textValue: "",
              level: 0,
              index: 0,
              hasChildNodes: false,
              rendered: null,
              childNodes: [],
              props: {
                isDragButtonCell: true
              }
            };
            columns.unshift(rowHeaderColumn);
          }
          let rows = [];
          let columnKeyMap = /* @__PURE__ */ new Map();
          let visit = (node) => {
            switch (node.type) {
              case "body":
                body = node;
                break;
              case "column":
                columnKeyMap.set(node.key, node);
                if (!node.hasChildNodes) {
                  columns.push(node);
                  if (node.props.isRowHeader)
                    rowHeaderColumnKeys.add(node.key);
                }
                break;
              case "item":
                rows.push(node);
                return;
            }
            for (let child of node.childNodes)
              visit(child);
          };
          for (let node of nodes)
            visit(node);
          let headerRows = $7f5a58334d8866a5$export$7c127db850d4e81e(columnKeyMap, columns);
          headerRows.forEach((row, i) => rows.splice(i, 0, row));
          super({
            columnCount: columns.length,
            items: rows,
            visitNode: (node) => {
              node.column = columns[node.index];
              return node;
            }
          });
          this._size = 0;
          this.columns = columns;
          this.rowHeaderColumnKeys = rowHeaderColumnKeys;
          this.body = body;
          this.headerRows = headerRows;
          this._size = [
            ...body.childNodes
          ].length;
          if (this.rowHeaderColumnKeys.size === 0) {
            if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {
              if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons)
                this.rowHeaderColumnKeys.add(this.columns[2].key);
              else
                this.rowHeaderColumnKeys.add(this.columns[1].key);
            } else
              this.rowHeaderColumnKeys.add(this.columns[0].key);
          }
        }
      };
      var $e3f7784147dde23d$var$OPPOSITE_SORT_DIRECTION = {
        ascending: "descending",
        descending: "ascending"
      };
      function $e3f7784147dde23d$export$907bcc6c48325fd6(props) {
        let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = (0, $56JBj$react.useState)(false);
        let { selectionMode = "none", showSelectionCheckboxes, showDragButtons } = props;
        let context = (0, $56JBj$react.useMemo)(() => ({
          showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== "none",
          showDragButtons,
          selectionMode,
          columns: []
        }), [
          props.children,
          showSelectionCheckboxes,
          selectionMode,
          showDragButtons
        ]);
        let collection = (0, $56JBj$reactstatelycollections.useCollection)(props, (0, $56JBj$react.useCallback)((nodes) => new (0, $7f5a58334d8866a5$export$596e1b2e2cf93690)(nodes, null, context), [
          context
        ]), context);
        let { disabledKeys, selectionManager } = (0, $56JBj$reactstatelygrid.useGridState)(__spreadProps(__spreadValues({}, props), {
          collection,
          disabledBehavior: props.disabledBehavior || "selection"
        }));
        return {
          collection,
          disabledKeys,
          selectionManager,
          showSelectionCheckboxes: props.showSelectionCheckboxes || false,
          sortDescriptor: props.sortDescriptor,
          isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,
          setKeyboardNavigationDisabled,
          sort(columnKey, direction) {
            var _props_sortDescriptor;
            props.onSortChange({
              column: columnKey,
              direction: direction !== null && direction !== void 0 ? direction : ((_props_sortDescriptor = props.sortDescriptor) === null || _props_sortDescriptor === void 0 ? void 0 : _props_sortDescriptor.column) === columnKey ? $e3f7784147dde23d$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : "ascending"
            });
          }
        };
      }
      function $f45775f5d6f744fa$var$TableHeader(props) {
        return null;
      }
      $f45775f5d6f744fa$var$TableHeader.getCollectionNode = function* getCollectionNode(props, context) {
        let { children, columns } = props;
        context.columns = [];
        if (typeof children === "function") {
          if (!columns)
            throw new Error("props.children was a function but props.columns is missing");
          for (let column of columns)
            yield {
              type: "column",
              value: column,
              renderer: children
            };
        } else {
          let columns2 = [];
          (0, $parcel$interopDefault($56JBj$react)).Children.forEach(children, (column) => {
            columns2.push({
              type: "column",
              element: column
            });
          });
          yield* __yieldStar(columns2);
        }
      };
      var $f45775f5d6f744fa$export$f850895b287ef28e = $f45775f5d6f744fa$var$TableHeader;
      function $6ec527db6a3a5692$var$TableBody(props) {
        return null;
      }
      $6ec527db6a3a5692$var$TableBody.getCollectionNode = function* getCollectionNode(props) {
        let { children, items } = props;
        yield {
          type: "body",
          hasChildNodes: true,
          props,
          *childNodes() {
            if (typeof children === "function") {
              if (!items)
                throw new Error("props.children was a function but props.items is missing");
              for (let item of items)
                yield {
                  type: "item",
                  value: item,
                  renderer: children
                };
            } else {
              let items2 = [];
              (0, $parcel$interopDefault($56JBj$react)).Children.forEach(children, (item) => {
                items2.push({
                  type: "item",
                  element: item
                });
              });
              yield* __yieldStar(items2);
            }
          }
        };
      };
      var $6ec527db6a3a5692$export$76ccd210b9029917 = $6ec527db6a3a5692$var$TableBody;
      function $714483d9f6ca4c55$var$Column(props) {
        return null;
      }
      $714483d9f6ca4c55$var$Column.getCollectionNode = function* getCollectionNode(props, context) {
        let { title, children, childColumns } = props;
        let rendered = title || children;
        let textValue = props.textValue || (typeof rendered === "string" ? rendered : "") || props["aria-label"];
        let fullNodes = yield {
          type: "column",
          hasChildNodes: !!childColumns || title && (0, $parcel$interopDefault($56JBj$react)).Children.count(children) > 0,
          rendered,
          textValue,
          props,
          *childNodes() {
            if (childColumns)
              for (let child of childColumns)
                yield {
                  type: "column",
                  value: child
                };
            else if (title) {
              let childColumns2 = [];
              (0, $parcel$interopDefault($56JBj$react)).Children.forEach(children, (child) => {
                childColumns2.push({
                  type: "column",
                  element: child
                });
              });
              yield* __yieldStar(childColumns2);
            }
          },
          shouldInvalidate(newContext) {
            updateContext(newContext);
            return false;
          }
        };
        let updateContext = (context2) => {
          for (let node of fullNodes)
            if (!node.hasChildNodes)
              context2.columns.push(node);
        };
        updateContext(context);
      };
      var $714483d9f6ca4c55$export$816b5d811295e6bc = $714483d9f6ca4c55$var$Column;
      function $9ec6912e32cc0d81$var$Row(props) {
        return null;
      }
      $9ec6912e32cc0d81$var$Row.getCollectionNode = function* getCollectionNode(props, context) {
        let { children, textValue, UNSTABLE_childItems } = props;
        yield {
          type: "item",
          props,
          textValue,
          "aria-label": props["aria-label"],
          hasChildNodes: true,
          *childNodes() {
            if (context.showDragButtons)
              yield {
                type: "cell",
                key: "header-drag",
                props: {
                  isDragButtonCell: true
                }
              };
            if (context.showSelectionCheckboxes && context.selectionMode !== "none")
              yield {
                type: "cell",
                key: "header",
                props: {
                  isSelectionCell: true
                }
              };
            if (typeof children === "function") {
              for (let column of context.columns)
                yield {
                  type: "cell",
                  element: children(column.key),
                  key: column.key
                  // this is combined with the row key by CollectionBuilder
                };
              if (UNSTABLE_childItems)
                for (let child of UNSTABLE_childItems)
                  yield {
                    type: "item",
                    value: child
                  };
            } else {
              let cells = [];
              let childRows = [];
              (0, $parcel$interopDefault($56JBj$react)).Children.forEach(children, (node) => {
                if (node.type === $9ec6912e32cc0d81$var$Row) {
                  if (cells.length < context.columns.length)
                    throw new Error("All of a Row's child Cells must be positioned before any child Rows.");
                  childRows.push({
                    type: "item",
                    element: node
                  });
                } else
                  cells.push({
                    type: "cell",
                    element: node
                  });
              });
              if (cells.length !== context.columns.length)
                throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);
              yield* __yieldStar(cells);
              yield* __yieldStar(childRows);
            }
          },
          shouldInvalidate(newContext) {
            return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;
          }
        };
      };
      var $9ec6912e32cc0d81$export$b59bdbef9ce70de2 = $9ec6912e32cc0d81$var$Row;
      function $ad4ab0a21c733e1f$var$Cell(props) {
        return null;
      }
      $ad4ab0a21c733e1f$var$Cell.getCollectionNode = function* getCollectionNode(props) {
        let { children } = props;
        let textValue = props.textValue || (typeof children === "string" ? children : "") || props["aria-label"] || "";
        yield {
          type: "cell",
          props,
          rendered: children,
          textValue,
          "aria-label": props["aria-label"],
          hasChildNodes: false
        };
      };
      var $ad4ab0a21c733e1f$export$f6f0c3fe4ec306ea = $ad4ab0a21c733e1f$var$Cell;
      function $ed4e0b68b470dcfd$export$34dfa8a1622185a4(props) {
        let { selectionMode = "none", showSelectionCheckboxes, showDragButtons, UNSTABLE_expandedKeys: propExpandedKeys, UNSTABLE_defaultExpandedKeys: propDefaultExpandedKeys, UNSTABLE_onExpandedChange, children } = props;
        if (!(0, $56JBj$reactstatelyflags.tableNestedRows)())
          throw new Error("Feature flag for table nested rows must be enabled to use useTreeGridState.");
        let [expandedKeys, setExpandedKeys] = (0, $56JBj$reactstatelyutils.useControlledState)(propExpandedKeys ? $ed4e0b68b470dcfd$var$convertExpanded(propExpandedKeys) : void 0, propDefaultExpandedKeys ? $ed4e0b68b470dcfd$var$convertExpanded(propDefaultExpandedKeys) : /* @__PURE__ */ new Set(), UNSTABLE_onExpandedChange);
        let context = (0, $56JBj$react.useMemo)(() => ({
          showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== "none",
          showDragButtons,
          selectionMode,
          columns: []
        }), [
          children,
          showSelectionCheckboxes,
          selectionMode,
          showDragButtons
        ]);
        let builder = (0, $56JBj$react.useMemo)(() => new (0, $56JBj$reactstatelycollections.CollectionBuilder)(), []);
        let nodes = (0, $56JBj$react.useMemo)(() => builder.build({
          children
        }, context), [
          builder,
          children,
          context
        ]);
        let treeGridCollection = (0, $56JBj$react.useMemo)(() => {
          return $ed4e0b68b470dcfd$var$generateTreeGridCollection(nodes, {
            showSelectionCheckboxes,
            showDragButtons,
            expandedKeys
          });
        }, [
          nodes,
          showSelectionCheckboxes,
          showDragButtons,
          expandedKeys
        ]);
        let onToggle = (key) => {
          setExpandedKeys($ed4e0b68b470dcfd$var$toggleKey(expandedKeys, key, treeGridCollection));
        };
        let collection = (0, $56JBj$react.useMemo)(() => {
          return new (0, $7f5a58334d8866a5$export$596e1b2e2cf93690)(treeGridCollection.tableNodes, null, context);
        }, [
          context,
          treeGridCollection.tableNodes
        ]);
        let tableState = (0, $e3f7784147dde23d$export$907bcc6c48325fd6)(__spreadProps(__spreadValues({}, props), {
          collection
        }));
        return __spreadProps(__spreadValues({}, tableState), {
          keyMap: treeGridCollection.keyMap,
          userColumnCount: treeGridCollection.userColumnCount,
          expandedKeys,
          toggleKey: onToggle
        });
      }
      function $ed4e0b68b470dcfd$var$toggleKey(currentExpandedKeys, key, collection) {
        let updatedExpandedKeys;
        if (currentExpandedKeys === "all") {
          updatedExpandedKeys = new Set(collection.flattenedRows.filter((row) => row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount).map((row) => row.key));
          updatedExpandedKeys.delete(key);
        } else {
          updatedExpandedKeys = new Set(currentExpandedKeys);
          if (updatedExpandedKeys.has(key))
            updatedExpandedKeys.delete(key);
          else
            updatedExpandedKeys.add(key);
        }
        return updatedExpandedKeys;
      }
      function $ed4e0b68b470dcfd$var$convertExpanded(expanded) {
        if (!expanded)
          return /* @__PURE__ */ new Set();
        return expanded === "all" ? "all" : new Set(expanded);
      }
      function $ed4e0b68b470dcfd$var$generateTreeGridCollection(nodes, opts) {
        let { expandedKeys = /* @__PURE__ */ new Set() } = opts;
        let body;
        let flattenedRows = [];
        let columnCount = 0;
        let userColumnCount = 0;
        let originalColumns = [];
        let keyMap = /* @__PURE__ */ new Map();
        if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes)
          columnCount++;
        if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons)
          columnCount++;
        let topLevelRows = [];
        let visit = (node) => {
          switch (node.type) {
            case "body":
              body = node;
              keyMap.set(body.key, body);
              break;
            case "column":
              if (!node.hasChildNodes)
                userColumnCount++;
              break;
            case "item":
              topLevelRows.push(node);
              return;
          }
          for (let child of node.childNodes)
            visit(child);
        };
        for (let node of nodes) {
          if (node.type === "column")
            originalColumns.push(node);
          visit(node);
        }
        columnCount += userColumnCount;
        let globalRowCount = 0;
        let visitNode = (node, i) => {
          if (node.type === "item") {
            let childNodes = [];
            for (let child of node.childNodes)
              if (child.type === "cell") {
                let cellClone = __spreadValues({}, child);
                if (cellClone.index + 1 === columnCount)
                  cellClone.nextKey = null;
                childNodes.push(__spreadValues({}, cellClone));
              }
            let clone = __spreadProps(__spreadValues({}, node), {
              childNodes,
              parentKey: body.key,
              level: 1,
              index: globalRowCount++
            });
            flattenedRows.push(clone);
          }
          let newProps = {};
          if (node.type !== "placeholder" && node.type !== "column")
            newProps["indexOfType"] = i;
          Object.assign(node, newProps);
          keyMap.set(node.key, node);
          let lastNode;
          let rowIndex = 0;
          for (let child of node.childNodes)
            if (!(child.type === "item" && expandedKeys !== "all" && !expandedKeys.has(node.key))) {
              if (child.parentKey == null)
                child.parentKey = node.key;
              if (lastNode) {
                lastNode.nextKey = child.key;
                child.prevKey = lastNode.key;
              } else
                child.prevKey = null;
              if (child.type === "item")
                visitNode(child, rowIndex++);
              else
                visitNode(child, child.index);
              lastNode = child;
            }
          if (lastNode)
            lastNode.nextKey = null;
        };
        let last;
        topLevelRows.forEach((node, i) => {
          visitNode(node, i);
          if (last) {
            last.nextKey = node.key;
            node.prevKey = last.key;
          } else
            node.prevKey = null;
          last = node;
        });
        if (last)
          last.nextKey = null;
        return {
          keyMap,
          userColumnCount,
          flattenedRows,
          tableNodes: [
            ...originalColumns,
            __spreadProps(__spreadValues({}, body), {
              childNodes: flattenedRows
            })
          ]
        };
      }
    }
  });

  // node_modules/@react-stately/virtualizer/dist/main.js
  var require_main38 = __commonJS({
    "node_modules/@react-stately/virtualizer/dist/main.js"(exports, module) {
      var $aEpNF$react = require_react();
      var $aEpNF$reactariautils = require_main7();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "Layout", () => $ac14d65a0ec196dd$export$c84671f46d6a1ca);
      $parcel$export(module.exports, "LayoutInfo", () => $8a899922c0a55745$export$7e0eeb9da702a085);
      $parcel$export(module.exports, "Point", () => $f89f15d7f52bce29$export$baf26146a414f24a);
      $parcel$export(module.exports, "Rect", () => $41b7691783731623$export$c79fc6492f3af13d);
      $parcel$export(module.exports, "Size", () => $064492b79924894c$export$cb6da89c6af1a8ec);
      $parcel$export(module.exports, "ReusableView", () => $197a1781bd47f5b9$export$1a5223887c560441);
      $parcel$export(module.exports, "useVirtualizerState", () => $f02ef43b5e8eee9b$export$1505db82fe357e65);
      var $ac14d65a0ec196dd$export$c84671f46d6a1ca = class {
        /**
        * Returns whether the layout should invalidate in response to
        * visible rectangle changes. By default, it only invalidates
        * when the collection view's size changes. Return true always
        * to make the layout invalidate while scrolling (e.g. sticky headers).
        */
        shouldInvalidate(newRect, oldRect) {
          return newRect.width !== oldRect.width || newRect.height !== oldRect.height;
        }
        /**
        * This method allows the layout to perform any pre-computation
        * it needs to in order to prepare {@link LayoutInfo}s for retrieval.
        * Called by the collection view before {@link getVisibleLayoutInfos}
        * or {@link getLayoutInfo} are called.
        */
        validate(invalidationContext) {
        }
        /**
        * Returns a {@link DragTarget} describing a view at the given point to be dragged.
        * Return `null` to cancel the drag. The default implementation returns the view at the given point.
        * @param point The point at which the drag occurred.
        */
        // getDragTarget(point: Point): DragTarget | null {
        //   let target = this.virtualizer.keyAtPoint(point);
        //   if (!target) {
        //     return null;
        //   }
        //   return {
        //     type: 'item',
        //     key: target
        //   };
        // }
        /**
        * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`
        * to reject the drop. The dropped items will be inserted before the resulting target.
        * @param point The point at which the drop occurred.
        */
        // getDropTarget(point: Point): DropTarget | null {
        //   return null;
        // }
        /**
        * Returns the starting attributes for an animated insertion.
        * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.
        * The default implementation just returns its input.
        *
        * @param layoutInfo The proposed LayoutInfo for this view.
        */
        getInitialLayoutInfo(layoutInfo) {
          return layoutInfo;
        }
        /**
        * Returns the ending attributes for an animated removal.
        * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}
        * to the one returned by this method. The default implementation returns its input.
        *
        * @param layoutInfo The original LayoutInfo for this view.
        */
        getFinalLayoutInfo(layoutInfo) {
          return layoutInfo;
        }
      };
      var $8a899922c0a55745$export$7e0eeb9da702a085 = class _$8a899922c0a55745$export$7e0eeb9da702a085 {
        /**
        * Returns a copy of the LayoutInfo.
        */
        copy() {
          let res = new _$8a899922c0a55745$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());
          res.estimatedSize = this.estimatedSize;
          res.opacity = this.opacity;
          res.transform = this.transform;
          res.parentKey = this.parentKey;
          res.isSticky = this.isSticky;
          res.zIndex = this.zIndex;
          res.allowOverflow = this.allowOverflow;
          return res;
        }
        /**
        * @param type A string representing the view type. Should be `'item'` for item views.
                                 Other types are used by supplementary views.
        * @param key The unique key for this view.
        * @param rect The rectangle describing the size and position of this view.
        */
        constructor(type, key, rect) {
          this.type = type;
          this.key = key;
          this.parentKey = null;
          this.rect = rect;
          this.estimatedSize = false;
          this.isSticky = false;
          this.opacity = 1;
          this.transform = null;
          this.zIndex = 0;
          this.allowOverflow = false;
        }
      };
      var $f89f15d7f52bce29$export$baf26146a414f24a = class _$f89f15d7f52bce29$export$baf26146a414f24a {
        /**
        * Returns a copy of this point.
        */
        copy() {
          return new _$f89f15d7f52bce29$export$baf26146a414f24a(this.x, this.y);
        }
        /**
        * Checks if two points are equal.
        */
        equals(point) {
          return this.x === point.x && this.y === point.y;
        }
        /**
        * Returns true if this point is the origin.
        */
        isOrigin() {
          return this.x === 0 && this.y === 0;
        }
        constructor(x = 0, y = 0) {
          this.x = x;
          this.y = y;
        }
      };
      var $41b7691783731623$export$c79fc6492f3af13d = class _$41b7691783731623$export$c79fc6492f3af13d {
        /**
        * The maximum x-coordinate in the rectangle.
        */
        get maxX() {
          return this.x + this.width;
        }
        /**
        * The maximum y-coordinate in the rectangle.
        */
        get maxY() {
          return this.y + this.height;
        }
        /**
        * The area of the rectangle.
        */
        get area() {
          return this.width * this.height;
        }
        /**
        * The top left corner of the rectangle.
        */
        get topLeft() {
          return new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(this.x, this.y);
        }
        /**
        * The top right corner of the rectangle.
        */
        get topRight() {
          return new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(this.maxX, this.y);
        }
        /**
        * The bottom left corner of the rectangle.
        */
        get bottomLeft() {
          return new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(this.x, this.maxY);
        }
        /**
        * The bottom right corner of the rectangle.
        */
        get bottomRight() {
          return new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(this.maxX, this.maxY);
        }
        /**
        * Returns whether this rectangle intersects another rectangle.
        * @param rect - The rectangle to check.
        */
        intersects(rect) {
          return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;
        }
        /**
        * Returns whether this rectangle fully contains another rectangle.
        * @param rect - The rectangle to check.
        */
        containsRect(rect) {
          return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;
        }
        /**
        * Returns whether the rectangle contains the given point.
        * @param point - The point to check.
        */
        containsPoint(point) {
          return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;
        }
        /**
        * Returns the first corner of this rectangle (from top to bottom, left to right)
        * that is contained in the given rectangle, or null of the rectangles do not intersect.
        * @param rect - The rectangle to check.
        */
        getCornerInRect(rect) {
          for (let key of [
            "topLeft",
            "topRight",
            "bottomLeft",
            "bottomRight"
          ]) {
            if (rect.containsPoint(this[key]))
              return key;
          }
          return null;
        }
        equals(rect) {
          return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;
        }
        pointEquals(point) {
          return this.x === point.x && this.y === point.y;
        }
        sizeEquals(size) {
          return this.width === size.width && this.height === size.height;
        }
        /**
        * Returns the union of this Rect and another.
        */
        union(other) {
          let x = Math.min(this.x, other.x);
          let y = Math.min(this.y, other.y);
          let width = Math.max(this.maxX, other.maxX) - x;
          let height = Math.max(this.maxY, other.maxY) - y;
          return new _$41b7691783731623$export$c79fc6492f3af13d(x, y, width, height);
        }
        /**
        * Returns the intersection of this Rect with another.
        * If the rectangles do not intersect, an all zero Rect is returned.
        */
        intersection(other) {
          if (!this.intersects(other))
            return new _$41b7691783731623$export$c79fc6492f3af13d(0, 0, 0, 0);
          let x = Math.max(this.x, other.x);
          let y = Math.max(this.y, other.y);
          return new _$41b7691783731623$export$c79fc6492f3af13d(x, y, Math.min(this.maxX, other.maxX) - x, Math.min(this.maxY, other.maxY) - y);
        }
        /**
        * Returns a copy of this rectangle.
        */
        copy() {
          return new _$41b7691783731623$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);
        }
        constructor(x = 0, y = 0, width = 0, height = 0) {
          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;
        }
      };
      var $064492b79924894c$export$cb6da89c6af1a8ec = class _$064492b79924894c$export$cb6da89c6af1a8ec {
        /**
        * Returns a copy of this size.
        */
        copy() {
          return new _$064492b79924894c$export$cb6da89c6af1a8ec(this.width, this.height);
        }
        /**
        * Returns whether this size is equal to another one.
        */
        equals(other) {
          return this.width === other.width && this.height === other.height;
        }
        /**
        * The total area of the Size.
        */
        get area() {
          return this.width * this.height;
        }
        constructor(width = 0, height = 0) {
          this.width = width;
          this.height = height;
        }
      };
      var $197a1781bd47f5b9$var$KEY = 0;
      var $197a1781bd47f5b9$export$1a5223887c560441 = class {
        /**
        * Prepares the view for reuse. Called just before the view is removed from the DOM.
        */
        prepareForReuse() {
          this.content = null;
          this.rendered = null;
          this.layoutInfo = null;
        }
        constructor(virtualizer) {
          this.virtualizer = virtualizer;
          this.key = ++$197a1781bd47f5b9$var$KEY;
        }
      };
      var $57c5d36217e1f286$var$perf = typeof window !== "undefined" ? window.performance : null;
      var $57c5d36217e1f286$var$perfNow = $57c5d36217e1f286$var$perf && ($57c5d36217e1f286$var$perf.now || $57c5d36217e1f286$var$perf.webkitNow || $57c5d36217e1f286$var$perf.msNow || $57c5d36217e1f286$var$perf.mozNow);
      var $57c5d36217e1f286$var$getTime = $57c5d36217e1f286$var$perfNow ? $57c5d36217e1f286$var$perfNow.bind($57c5d36217e1f286$var$perf) : function() {
        return Date.now ? Date.now() : (/* @__PURE__ */ new Date()).getTime();
      };
      var $57c5d36217e1f286$var$fixTs;
      function $57c5d36217e1f286$export$dc0b63720788090c(begin, end, duration, ease, fn) {
        let canceled = false;
        let raf_id;
        let promise = new Promise((resolve) => {
          let start = $57c5d36217e1f286$var$getTime();
          let diffX = end.x - begin.x;
          let diffY = end.y - begin.y;
          raf_id = requestAnimationFrame(function run(t) {
            if ($57c5d36217e1f286$var$fixTs == null)
              $57c5d36217e1f286$var$fixTs = t > 1e12 !== $57c5d36217e1f286$var$getTime() > 1e12;
            if ($57c5d36217e1f286$var$fixTs)
              t = $57c5d36217e1f286$var$getTime();
            let delta = t - start;
            if (delta > duration) {
              fn(end);
              resolve();
            } else {
              let proceed = fn(new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));
              if (proceed !== false && !canceled)
                raf_id = requestAnimationFrame(run);
            }
          });
        });
        promise.cancel = function() {
          canceled = true;
          cancelAnimationFrame(raf_id);
        };
        return promise;
      }
      function $57c5d36217e1f286$export$57636bb43b1ccbb0(t) {
        return Math.sin(t * Math.PI / 2);
      }
      function $abed55ea619a7a17$export$37a26b283fd7740e(a, b) {
        let res = /* @__PURE__ */ new Set();
        for (let key of a.keys())
          if (!b.has(key))
            res.add(key);
        return res;
      }
      function $abed55ea619a7a17$export$acaf96a27438246b(a, b) {
        let toRemove = $abed55ea619a7a17$export$37a26b283fd7740e(a, b);
        let toAdd = $abed55ea619a7a17$export$37a26b283fd7740e(b, a);
        let toUpdate = /* @__PURE__ */ new Set();
        for (let key of a.keys())
          if (b.has(key))
            toUpdate.add(key);
        return {
          toRemove,
          toAdd,
          toUpdate
        };
      }
      function* $abed55ea619a7a17$export$cfc14088dfefce5f(...iterators) {
        for (let iterator of iterators)
          yield* __yieldStar(iterator);
      }
      function $abed55ea619a7a17$export$a8d0d0c8d1c5df64(a, b) {
        if (a === b)
          return true;
        if (a.size !== b.size)
          return false;
        for (let key of a) {
          if (!b.has(key))
            return false;
        }
        return true;
      }
      var $191a033606d4fda1$var$RollingAverage = class {
        addSample(sample) {
          this.count++;
          this.value += (sample - this.value) / this.count;
        }
        constructor() {
          this.count = 0;
          this.value = 0;
        }
      };
      var $191a033606d4fda1$export$4455ee6afb38dcbb = class {
        setVisibleRect(rect) {
          let time = performance.now() - this.startTime;
          if (time < 500) {
            this.averageTime.addSample(time);
            if (rect.x !== this.visibleRect.x && time > 0)
              this.velocity.x = (rect.x - this.visibleRect.x) / time;
            if (rect.y !== this.visibleRect.y && time > 0)
              this.velocity.y = (rect.y - this.visibleRect.y) / time;
          }
          this.startTime = performance.now();
          this.visibleRect = rect;
        }
        collectMetrics() {
          let time = performance.now() - this.startTime;
          if (time < 500)
            this.averagePerf.addSample(time);
          if (this.visibleRect.height > 0) {
            let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));
            this.overscanY.addSample(o);
          }
          if (this.visibleRect.width > 0) {
            let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));
            this.overscanX.addSample(o);
          }
        }
        getOverscannedRect() {
          let overscanned = this.visibleRect.copy();
          let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;
          if (this.velocity.y > 0) {
            overscanned.y -= overscanY * 0.2;
            overscanned.height += overscanY + overscanY * 0.2;
          } else {
            overscanned.y -= overscanY;
            overscanned.height += overscanY + overscanY * 0.2;
          }
          let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;
          if (this.velocity.x > 0) {
            overscanned.x -= overscanX * 0.2;
            overscanned.width += overscanX + overscanX * 0.2;
          } else {
            overscanned.x -= overscanX;
            overscanned.width += overscanX + overscanX * 0.2;
          }
          return overscanned;
        }
        constructor() {
          this.startTime = 0;
          this.averagePerf = new $191a033606d4fda1$var$RollingAverage();
          this.averageTime = new $191a033606d4fda1$var$RollingAverage();
          this.velocity = new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(5, 5);
          this.overscanX = new $191a033606d4fda1$var$RollingAverage();
          this.overscanY = new $191a033606d4fda1$var$RollingAverage();
          this.visibleRect = new (0, $41b7691783731623$export$c79fc6492f3af13d)();
        }
      };
      var $d288159e8347722a$export$febc5573c75cefb0 = class {
        constructor() {
          this.level = 0;
          this.actions = [];
          this.animated = true;
          this.initialMap = /* @__PURE__ */ new Map();
          this.finalMap = /* @__PURE__ */ new Map();
          this.initialLayoutInfo = /* @__PURE__ */ new Map();
          this.finalLayoutInfo = /* @__PURE__ */ new Map();
          this.removed = /* @__PURE__ */ new Map();
          this.toRemove = /* @__PURE__ */ new Map();
        }
      };
      var $e1bc15d49d21df0e$export$89be5a243e59c4b2 = class {
        _setContentSize(size) {
          this._contentSize = size;
          this.delegate.setContentSize(size);
        }
        _setContentOffset(offset) {
          let rect = new (0, $41b7691783731623$export$c79fc6492f3af13d)(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);
          this.delegate.setVisibleRect(rect);
        }
        /**
        * Get the size of the scrollable content.
        */
        get contentSize() {
          return this._contentSize;
        }
        /**
        * Get the collection view's currently visible rectangle.
        */
        get visibleRect() {
          return this._visibleRect;
        }
        /**
        * Set the collection view's currently visible rectangle.
        */
        set visibleRect(rect) {
          this._setVisibleRect(rect);
        }
        _setVisibleRect(rect, forceUpdate = false) {
          let current = this._visibleRect;
          if (rect.equals(current))
            return;
          if (this.shouldOverscan)
            this._overscanManager.setVisibleRect(rect);
          let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);
          this._resetAnimatedContentOffset();
          this._visibleRect = rect;
          if (shouldInvalidate)
            this.relayoutNow({
              offsetChanged: !rect.pointEquals(current),
              sizeChanged: !rect.sizeEquals(current)
            });
          else
            this.updateSubviews(forceUpdate);
        }
        get collection() {
          return this._collection;
        }
        set collection(data) {
          this._setData(data);
        }
        _setData(data) {
          if (data === this._collection)
            return;
          if (this._collection)
            this._runTransaction(() => {
              this._collection = data;
            }, this.transitionDuration > 0);
          else {
            this._collection = data;
            this.reloadData();
          }
        }
        /**
        * Reloads the data from the data source and relayouts the collection view.
        * Does not animate any changes. Equivalent to re-assigning the same data source
        * to the collection view.
        */
        reloadData() {
          this.relayout({
            contentChanged: true
          });
        }
        /**
        * Returns the item with the given key.
        */
        getItem(key) {
          return this._collection ? this._collection.getItem(key) : null;
        }
        /** The set of persisted keys are always present in the DOM, even if not currently in view. */
        get persistedKeys() {
          return this._persistedKeys;
        }
        /** The set of persisted keys are always present in the DOM, even if not currently in view. */
        set persistedKeys(persistedKeys) {
          if (!(0, $abed55ea619a7a17$export$a8d0d0c8d1c5df64)(persistedKeys, this._persistedKeys)) {
            this._persistedKeys = persistedKeys;
            this.updateSubviews();
          }
        }
        /** Returns whether the given key, or an ancestor, is persisted. */
        isPersistedKey(key) {
          if (this._persistedKeys.has(key))
            return true;
          for (let k of this._persistedKeys)
            while (k != null) {
              let layoutInfo = this.layout.getLayoutInfo(k);
              if (!layoutInfo)
                break;
              k = layoutInfo.parentKey;
              if (k === key)
                return true;
            }
          return false;
        }
        /**
        * Get the collection view's layout.
        */
        get layout() {
          return this._layout;
        }
        /**
        * Set the collection view's layout.
        */
        set layout(layout) {
          this.setLayout(layout);
        }
        /**
        * Sets the collection view's layout, optionally with an animated transition
        * from the current layout to the new layout.
        * @param layout The layout to switch to.
        * @param animated Whether to animate the layout change.
        */
        setLayout(layout, animated = false) {
          if (layout === this._layout)
            return;
          let applyLayout = () => {
            if (this._layout)
              this._layout.virtualizer = null;
            layout.virtualizer = this;
            this._layout = layout;
          };
          if (animated)
            this._runTransaction(applyLayout);
          else {
            applyLayout();
            this.relayout();
          }
        }
        _getReuseType(layoutInfo, content) {
          if (layoutInfo.type === "item" && content) {
            let type = this.delegate.getType ? this.delegate.getType(content) : "item";
            let reuseType = type === "item" ? "item" : layoutInfo.type + "_" + type;
            return {
              type,
              reuseType
            };
          }
          return {
            type: layoutInfo.type,
            reuseType: layoutInfo.type
          };
        }
        getReusableView(layoutInfo) {
          let content = this.getItem(layoutInfo.key);
          let { reuseType } = this._getReuseType(layoutInfo, content);
          if (!this._reusableViews[reuseType])
            this._reusableViews[reuseType] = [];
          let reusable = this._reusableViews[reuseType];
          let view = reusable.length > 0 ? reusable.pop() : new (0, $197a1781bd47f5b9$export$1a5223887c560441)(this);
          view.viewType = reuseType;
          if (!this._animatedContentOffset.isOrigin()) {
            layoutInfo = layoutInfo.copy();
            layoutInfo.rect.x += this._animatedContentOffset.x;
            layoutInfo.rect.y += this._animatedContentOffset.y;
          }
          view.layoutInfo = layoutInfo;
          this._renderView(view);
          return view;
        }
        _renderView(reusableView) {
          let { type, key } = reusableView.layoutInfo;
          reusableView.content = this.getItem(key);
          reusableView.rendered = this._renderContent(type, reusableView.content);
        }
        _renderContent(type, content) {
          let cached = this._renderedContent.get(content);
          if (cached != null)
            return cached;
          let rendered = this.delegate.renderView(type, content);
          if (content)
            this._renderedContent.set(content, rendered);
          return rendered;
        }
        /**
        * Returns an array of all currently visible views, including both
        * item views and supplementary views.
        */
        get visibleViews() {
          return Array.from(this._visibleViews.values());
        }
        /**
        * Gets the visible view for the given type and key. Returns null if
        * the view is not currently visible.
        *
        * @param key The key of the view to retrieve.
        */
        getView(key) {
          return this._visibleViews.get(key) || null;
        }
        /**
        * Returns an array of visible views matching the given type.
        * @param type The view type to find.
        */
        getViewsOfType(type) {
          return this.visibleViews.filter((v) => v.layoutInfo && v.layoutInfo.type === type);
        }
        /**
        * Returns the key for the given view. Returns null
        * if the view is not currently visible.
        */
        keyForView(view) {
          if (view && view.layoutInfo)
            return view.layoutInfo.key;
          return null;
        }
        /**
        * Returns the key for the item view currently at the given point.
        */
        keyAtPoint(point) {
          let rect = new (0, $41b7691783731623$export$c79fc6492f3af13d)(point.x, point.y, 1, 1);
          let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
          for (let layoutInfo of layoutInfos) {
            if (layoutInfo.rect.intersects(rect))
              return layoutInfo.key;
          }
          return null;
        }
        /**
        * Cleanup for when the Virtualizer will be unmounted.
        */
        willUnmount() {
          cancelAnimationFrame(this._relayoutRaf);
        }
        /**
        * Triggers a layout invalidation, and updates the visible subviews.
        */
        relayout(context = {}) {
          if (this._scrollAnimation || typeof requestAnimationFrame === "undefined")
            return;
          if (this._invalidationContext) {
            Object.assign(this._invalidationContext, context);
            return;
          }
          this._invalidationContext = context;
        }
        /**
        * Performs a relayout immediately. Prefer {@link relayout} over this method
        * where possible, since it coalesces multiple layout passes in the same tick.
        */
        relayoutNow(context = this._invalidationContext || {}) {
          if (this._relayoutRaf) {
            cancelAnimationFrame(this._relayoutRaf);
            this._relayoutRaf = null;
            context = __spreadValues(__spreadValues({}, this._invalidationContext), context);
          }
          this._invalidationContext = null;
          if (!this.layout || !this._collection || this._scrollAnimation)
            return;
          let scrollAnchor = this._getScrollAnchor();
          if (typeof context.beforeLayout === "function")
            context.beforeLayout();
          this.layout.validate(context);
          this._setContentSize(this.layout.getContentSize());
          if (typeof context.afterLayout === "function")
            context.afterLayout();
          let visibleRect = this.getVisibleRect();
          let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);
          let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;
          let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;
          contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));
          contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));
          let hasLayoutUpdates = false;
          if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {
            if (context.animated || !this._animatedContentOffset.isOrigin()) {
              this._animatedContentOffset.x += visibleRect.x - contentOffsetX;
              this._animatedContentOffset.y += visibleRect.y - contentOffsetY;
              hasLayoutUpdates = this.updateSubviews(context.contentChanged);
            } else
              this._setContentOffset(new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(contentOffsetX, contentOffsetY));
          } else
            hasLayoutUpdates = this.updateSubviews(context.contentChanged);
          if (!(context.transaction && context.animated))
            this._applyLayoutInfos();
          if (context.animated && hasLayoutUpdates) {
            this._enableTransitions();
            let done = () => {
              this._disableTransitions();
              if (!this._animatedContentOffset.isOrigin()) {
                let { x, y } = this.getVisibleRect();
                this._resetAnimatedContentOffset();
                this._setContentOffset(new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(x, y));
              }
              if (typeof context.afterAnimation === "function")
                context.afterAnimation();
            };
            setTimeout(done, this.transitionDuration + 100);
            return;
          } else if (typeof context.afterAnimation === "function")
            context.afterAnimation();
        }
        /**
        * Corrects DOM order of visible views to match item order of collection.
        */
        _correctItemOrder() {
          if (this._isScrolling || this._transaction)
            return;
          for (let key of this._visibleLayoutInfos.keys()) {
            let view = this._visibleViews.get(key);
            this._children.delete(view);
            this._children.add(view);
          }
        }
        _enableTransitions() {
          this.delegate.beginAnimations();
        }
        _disableTransitions() {
          this.delegate.endAnimations();
        }
        _getScrollAnchor() {
          if (!this.anchorScrollPosition)
            return null;
          let visibleRect = this.getVisibleRect();
          if (this.delegate.getScrollAnchor) {
            let key = this.delegate.getScrollAnchor(visibleRect);
            if (key != null) {
              let layoutInfo = this.layout.getLayoutInfo(key);
              let corner = layoutInfo.rect.getCornerInRect(visibleRect);
              if (corner) {
                let key2 = layoutInfo.key;
                let offset = layoutInfo.rect[corner].y - visibleRect.y;
                return {
                  key: key2,
                  layoutInfo,
                  corner,
                  offset
                };
              }
            }
          }
          if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop)
            return null;
          let cornerAnchor = null;
          for (let [key, view] of this._visibleViews) {
            let layoutInfo = view.layoutInfo;
            if (layoutInfo && layoutInfo.rect.area > 0) {
              let corner = layoutInfo.rect.getCornerInRect(visibleRect);
              if (corner) {
                let offset = layoutInfo.rect[corner].y - visibleRect.y;
                if (!cornerAnchor || offset < cornerAnchor.offset)
                  cornerAnchor = {
                    key,
                    layoutInfo,
                    corner,
                    offset
                  };
              }
            }
          }
          return cornerAnchor;
        }
        _restoreScrollAnchor(scrollAnchor, context) {
          let contentOffset = this.getVisibleRect();
          if (scrollAnchor) {
            var _context_transaction;
            let finalAnchor = ((_context_transaction = context.transaction) === null || _context_transaction === void 0 ? void 0 : _context_transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);
            if (finalAnchor) {
              let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;
              contentOffset.y += adjustment;
            }
          }
          return contentOffset;
        }
        getVisibleRect() {
          let v = this.visibleRect;
          let x = v.x - this._animatedContentOffset.x;
          let y = v.y - this._animatedContentOffset.y;
          return new (0, $41b7691783731623$export$c79fc6492f3af13d)(x, y, v.width, v.height);
        }
        getVisibleLayoutInfos() {
          let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();
          this._visibleLayoutInfos = this._getLayoutInfoMap(rect);
          return this._visibleLayoutInfos;
        }
        _getLayoutInfoMap(rect, copy = false) {
          let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
          let map = /* @__PURE__ */ new Map();
          for (let layoutInfo of layoutInfos) {
            if (copy)
              layoutInfo = layoutInfo.copy();
            map.set(layoutInfo.key, layoutInfo);
          }
          return map;
        }
        updateSubviews(forceUpdate = false) {
          if (!this._collection)
            return;
          let visibleLayoutInfos = this.getVisibleLayoutInfos();
          let currentlyVisible = this._visibleViews;
          let toAdd, toRemove, toUpdate;
          if (forceUpdate) {
            toAdd = visibleLayoutInfos;
            toRemove = currentlyVisible;
            toUpdate = /* @__PURE__ */ new Set();
          } else {
            ({ toAdd, toRemove, toUpdate } = (0, $abed55ea619a7a17$export$acaf96a27438246b)(currentlyVisible, visibleLayoutInfos));
            for (let key of toUpdate) {
              let view = currentlyVisible.get(key);
              if (!view || !view.layoutInfo)
                continue;
              let item = this.getItem(visibleLayoutInfos.get(key).key);
              if (view.content === item)
                toUpdate.delete(key);
              else {
                let { reuseType } = this._getReuseType(view.layoutInfo, item);
                if (view.viewType !== reuseType) {
                  toUpdate.delete(key);
                  toAdd.add(key);
                  toRemove.add(key);
                }
              }
            }
            if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {
              if (this._transaction)
                this._applyLayoutInfos();
              return;
            }
          }
          let removed = /* @__PURE__ */ new Set();
          for (let key of toRemove.keys()) {
            let view = this._visibleViews.get(key);
            if (view) {
              removed.add(view);
              this._visibleViews.delete(key);
              if (this._transaction)
                this._transaction.toRemove.set(key, view);
              else
                this.reuseView(view);
            }
          }
          for (let key of toAdd.keys()) {
            let layoutInfo = visibleLayoutInfos.get(key);
            let view;
            if (this._transaction) {
              if (this._transaction.initialLayoutInfo.has(key))
                layoutInfo = this._transaction.initialLayoutInfo.get(key);
              view = this._transaction.toRemove.get(key);
              if (view) {
                this._transaction.toRemove.delete(key);
                this._applyLayoutInfo(view, layoutInfo);
              }
            }
            if (!view) {
              view = this.getReusableView(layoutInfo);
              if (!removed.has(view))
                this._children.add(view);
            }
            this._visibleViews.set(key, view);
            removed.delete(view);
          }
          for (let key of toUpdate) {
            let view = currentlyVisible.get(key);
            this._renderedContent.delete(key);
            this._renderView(view);
          }
          if (!this._transaction)
            this.removeViews(removed);
          this._correctItemOrder();
          this._flushVisibleViews();
          let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());
          if (hasLayoutUpdates)
            requestAnimationFrame(() => {
              if (this._transaction)
                requestAnimationFrame(() => this._applyLayoutInfos());
            });
          return hasLayoutUpdates;
        }
        afterRender() {
          if (this._transactionQueue.length > 0)
            this._processTransactionQueue();
          else if (this._invalidationContext)
            this.relayoutNow();
          if (this.shouldOverscan)
            this._overscanManager.collectMetrics();
        }
        _flushVisibleViews() {
          let viewsByParentKey = /* @__PURE__ */ new Map([
            [
              null,
              []
            ]
          ]);
          for (let view of this._children) {
            var _view_layoutInfo, _viewsByParentKey_get, _view_layoutInfo1, _view_layoutInfo2, _view_layoutInfo3;
            if (((_view_layoutInfo = view.layoutInfo) === null || _view_layoutInfo === void 0 ? void 0 : _view_layoutInfo.parentKey) != null && !viewsByParentKey.has(view.layoutInfo.parentKey))
              viewsByParentKey.set(view.layoutInfo.parentKey, []);
            (_viewsByParentKey_get = viewsByParentKey.get((_view_layoutInfo1 = view.layoutInfo) === null || _view_layoutInfo1 === void 0 ? void 0 : _view_layoutInfo1.parentKey)) === null || _viewsByParentKey_get === void 0 ? void 0 : _viewsByParentKey_get.push(view);
            if (!viewsByParentKey.has((_view_layoutInfo2 = view.layoutInfo) === null || _view_layoutInfo2 === void 0 ? void 0 : _view_layoutInfo2.key))
              viewsByParentKey.set((_view_layoutInfo3 = view.layoutInfo) === null || _view_layoutInfo3 === void 0 ? void 0 : _view_layoutInfo3.key, []);
          }
          let buildTree = (parent, views) => views.map((view) => {
            let children2 = viewsByParentKey.get(view.layoutInfo.key);
            return this.delegate.renderWrapper(parent, view, children2, (childViews) => buildTree(view, childViews));
          });
          let children = buildTree(null, viewsByParentKey.get(null));
          this.delegate.setVisibleViews(children);
        }
        _applyLayoutInfo(view, layoutInfo) {
          if (view.layoutInfo === layoutInfo)
            return false;
          view.layoutInfo = layoutInfo;
          return true;
        }
        _applyLayoutInfos() {
          let updated = false;
          for (let view of this._visibleViews.values()) {
            let cur = view.layoutInfo;
            if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {
              let layoutInfo = this.layout.getLayoutInfo(cur.key);
              if (this._applyLayoutInfo(view, layoutInfo))
                updated = true;
            }
          }
          if (this._transaction) {
            for (let view of this._transaction.toRemove.values()) {
              let cur = view.layoutInfo;
              if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {
                let layoutInfo = this.layout.getLayoutInfo(cur.key);
                if (this._applyLayoutInfo(view, layoutInfo))
                  updated = true;
              }
            }
            for (let view of this._transaction.removed.values()) {
              let cur = view.layoutInfo;
              let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;
              layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());
              if (this._applyLayoutInfo(view, layoutInfo))
                updated = true;
            }
          }
          if (updated)
            this._flushVisibleViews();
        }
        _hasLayoutUpdates() {
          if (!this._transaction)
            return false;
          for (let view of this._visibleViews.values()) {
            let cur = view.layoutInfo;
            if (!cur)
              return true;
            let layoutInfo = this.layout.getLayoutInfo(cur.key);
            if (
              // Uses equals rather than pointEquals so that width/height changes are taken into account
              !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform
            )
              return true;
          }
          return false;
        }
        reuseView(view) {
          view.prepareForReuse();
          this._reusableViews[view.viewType].push(view);
        }
        removeViews(toRemove) {
          for (let view of toRemove)
            this._children.delete(view);
        }
        updateItemSize(key, size) {
          if (!this.layout.updateItemSize)
            return;
          if (this._scrollAnimation) {
            this._sizeUpdateQueue.set(key, size);
            return;
          }
          let changed = this.layout.updateItemSize(key, size);
          if (changed)
            this.relayout();
        }
        startScrolling() {
          this._isScrolling = true;
        }
        endScrolling() {
          this._isScrolling = false;
          this._correctItemOrder();
          this._flushVisibleViews();
        }
        _resetAnimatedContentOffset() {
          if (!this._animatedContentOffset.isOrigin()) {
            this._animatedContentOffset = new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(0, 0);
            this._applyLayoutInfos();
          }
        }
        /**
        * Scrolls the item with the given key into view, optionally with an animation.
        * @param key The key of the item to scroll into view.
        * @param duration The duration of the scroll animation.
        */
        scrollToItem(key, options) {
          if (key == null)
            return;
          let layoutInfo = this.layout.getLayoutInfo(key);
          if (!layoutInfo)
            return;
          let { duration = 300, shouldScrollX = true, shouldScrollY = true, offsetX = 0, offsetY = 0 } = options;
          let x = this.visibleRect.x;
          let y = this.visibleRect.y;
          let minX = layoutInfo.rect.x - offsetX;
          let minY = layoutInfo.rect.y - offsetY;
          let maxX = x + this.visibleRect.width;
          let maxY = y + this.visibleRect.height;
          if (shouldScrollX) {
            if (minX <= x || maxX === 0)
              x = minX;
            else if (layoutInfo.rect.maxX > maxX)
              x += layoutInfo.rect.maxX - maxX;
          }
          if (shouldScrollY) {
            if (minY <= y || maxY === 0)
              y = minY;
            else if (layoutInfo.rect.maxY > maxY)
              y += layoutInfo.rect.maxY - maxY;
          }
          return this.scrollTo(new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(x, y), duration);
        }
        /**
        * Performs an animated scroll to the given offset.
        * @param offset - The offset to scroll to.
        * @param duration The duration of the animation.
        * @returns A promise that resolves when the animation is complete.
        */
        scrollTo(offset, duration = 300) {
          if (this._scrollAnimation) {
            this._scrollAnimation.cancel();
            this._scrollAnimation = null;
          }
          if (duration <= 0 || this.visibleRect.pointEquals(offset)) {
            this._setContentOffset(offset);
            return Promise.resolve();
          }
          this.startScrolling();
          this._scrollAnimation = (0, $57c5d36217e1f286$export$dc0b63720788090c)(this.visibleRect, offset, duration, (0, $57c5d36217e1f286$export$57636bb43b1ccbb0), (offset2) => {
            this._setContentOffset(offset2);
          });
          this._scrollAnimation.then(() => {
            this._scrollAnimation = null;
            for (let [key, size] of this._sizeUpdateQueue)
              this.updateItemSize(key, size);
            this._sizeUpdateQueue.clear();
            this.relayout();
            this._processTransactionQueue();
            this.endScrolling();
          });
          return this._scrollAnimation;
        }
        _runTransaction(action, animated) {
          this._startTransaction();
          if (this._nextTransaction)
            this._nextTransaction.actions.push(action);
          this._endTransaction(animated);
        }
        _startTransaction() {
          if (!this._nextTransaction)
            this._nextTransaction = new (0, $d288159e8347722a$export$febc5573c75cefb0)();
          this._nextTransaction.level++;
        }
        _endTransaction(animated) {
          if (!this._nextTransaction)
            return false;
          if (animated != null)
            this._nextTransaction.animated = animated;
          if (--this._nextTransaction.level > 0)
            return false;
          if (this._nextTransaction.actions.length === 0) {
            this._nextTransaction = null;
            return false;
          }
          if (this._nextTransaction.animated == null)
            this._nextTransaction.animated = true;
          this._transactionQueue.push(this._nextTransaction);
          this._nextTransaction = null;
          return true;
        }
        _processTransactionQueue() {
          if (this._transaction || this._scrollAnimation)
            return;
          let next = this._transactionQueue.shift();
          if (next)
            this._performTransaction(next);
        }
        _getContentRect() {
          return new (0, $41b7691783731623$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);
        }
        _performTransaction(transaction) {
          this._transaction = transaction;
          this.relayoutNow({
            transaction,
            animated: transaction.animated,
            beforeLayout: () => {
              if (transaction.animated)
                transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);
              for (let action of transaction.actions)
                action();
            },
            afterLayout: () => {
              if (transaction.animated) {
                transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());
                this._setupTransactionAnimations(transaction);
              } else
                this._transaction = null;
            },
            afterAnimation: () => {
              if (transaction.toRemove.size > 0 || transaction.removed.size > 0)
                for (let view of (0, $abed55ea619a7a17$export$cfc14088dfefce5f)(transaction.toRemove.values(), transaction.removed.values())) {
                  this._children.delete(view);
                  this.reuseView(view);
                }
              this._transaction = null;
              this._correctItemOrder();
              this._flushVisibleViews();
              this._processTransactionQueue();
            }
          });
        }
        _setupTransactionAnimations(transaction) {
          let { initialMap, finalMap } = transaction;
          for (let [key, layoutInfo] of initialMap)
            if (finalMap.has(key))
              transaction.initialLayoutInfo.set(key, layoutInfo);
            else
              transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);
          for (let [key, layoutInfo] of finalMap)
            if (!initialMap.has(key)) {
              let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());
              transaction.initialLayoutInfo.set(key, initialLayoutInfo);
            }
          for (let [key, view] of this._visibleViews)
            if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {
              transaction.removed.set(key, view);
              this._visibleViews.delete(key);
              if (view.layoutInfo) {
                if (!transaction.finalLayoutInfo.has(view.layoutInfo.key))
                  transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);
              }
            }
        }
        constructor(options = {}) {
          this._contentSize = new (0, $064492b79924894c$export$cb6da89c6af1a8ec)();
          this._visibleRect = new (0, $41b7691783731623$export$c79fc6492f3af13d)();
          this._reusableViews = {};
          this._visibleLayoutInfos = /* @__PURE__ */ new Map();
          this._visibleViews = /* @__PURE__ */ new Map();
          this._renderedContent = /* @__PURE__ */ new WeakMap();
          this._children = /* @__PURE__ */ new Set();
          this._invalidationContext = null;
          this._overscanManager = new (0, $191a033606d4fda1$export$4455ee6afb38dcbb)();
          this._persistedKeys = /* @__PURE__ */ new Set();
          this._scrollAnimation = null;
          this._isScrolling = false;
          this._sizeUpdateQueue = /* @__PURE__ */ new Map();
          this._animatedContentOffset = new (0, $f89f15d7f52bce29$export$baf26146a414f24a)(0, 0);
          this._transaction = null;
          this._nextTransaction = null;
          this._transactionQueue = [];
          var _options_transitionDuration;
          this.transitionDuration = (_options_transitionDuration = options.transitionDuration) !== null && _options_transitionDuration !== void 0 ? _options_transitionDuration : 500;
          this.anchorScrollPosition = options.anchorScrollPosition || false;
          this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;
          this.shouldOverscan = options.shouldOverscan !== false;
          for (let key of [
            "delegate",
            "size",
            "layout",
            "collection"
          ])
            if (options[key])
              this[key] = options[key];
        }
      };
      function $f02ef43b5e8eee9b$export$1505db82fe357e65(opts) {
        let [visibleViews, setVisibleViews] = (0, $aEpNF$react.useState)([]);
        let [contentSize, setContentSize] = (0, $aEpNF$react.useState)(new (0, $064492b79924894c$export$cb6da89c6af1a8ec)());
        let [isAnimating, setAnimating] = (0, $aEpNF$react.useState)(false);
        let [isScrolling, setScrolling] = (0, $aEpNF$react.useState)(false);
        let virtualizer = (0, $aEpNF$react.useMemo)(() => new (0, $e1bc15d49d21df0e$export$89be5a243e59c4b2)(), []);
        virtualizer.delegate = {
          setVisibleViews,
          setVisibleRect(rect) {
            virtualizer.visibleRect = rect;
            opts.onVisibleRectChange(rect);
          },
          setContentSize,
          renderView: opts.renderView,
          renderWrapper: opts.renderWrapper,
          beginAnimations: () => setAnimating(true),
          endAnimations: () => setAnimating(false),
          getScrollAnchor: opts.getScrollAnchor
        };
        virtualizer.layout = opts.layout;
        virtualizer.collection = opts.collection;
        virtualizer.transitionDuration = opts.transitionDuration;
        (0, $aEpNF$reactariautils.useLayoutEffect)(() => {
          virtualizer.afterRender();
        });
        (0, $aEpNF$react.useEffect)(() => {
          return () => virtualizer.willUnmount();
        }, []);
        let setVisibleRect = (0, $aEpNF$react.useCallback)((rect) => {
          virtualizer.visibleRect = rect;
        }, [
          virtualizer
        ]);
        let startScrolling = (0, $aEpNF$react.useCallback)(() => {
          virtualizer.startScrolling();
          setScrolling(true);
        }, [
          virtualizer
        ]);
        let endScrolling = (0, $aEpNF$react.useCallback)(() => {
          virtualizer.endScrolling();
          setScrolling(false);
        }, [
          virtualizer
        ]);
        let state = (0, $aEpNF$react.useMemo)(() => ({
          virtualizer,
          visibleViews,
          setVisibleRect,
          contentSize,
          isAnimating,
          isScrolling,
          startScrolling,
          endScrolling
        }), [
          virtualizer,
          visibleViews,
          setVisibleRect,
          contentSize,
          isAnimating,
          isScrolling,
          startScrolling,
          endScrolling
        ]);
        return state;
      }
    }
  });

  // node_modules/@react-aria/live-announcer/dist/main.js
  var require_main39 = __commonJS({
    "node_modules/@react-aria/live-announcer/dist/main.js"(exports, module) {
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "announce", () => $97cebfa4133ebec3$export$a9b970dcc4ae71a9);
      $parcel$export(module.exports, "clearAnnouncer", () => $97cebfa4133ebec3$export$d10ae4f68404609a);
      $parcel$export(module.exports, "destroyAnnouncer", () => $97cebfa4133ebec3$export$d8686216b8b81b2f);
      var $97cebfa4133ebec3$var$LIVEREGION_TIMEOUT_DELAY = 7e3;
      var $97cebfa4133ebec3$var$liveAnnouncer = null;
      function $97cebfa4133ebec3$export$a9b970dcc4ae71a9(message, assertiveness = "assertive", timeout = $97cebfa4133ebec3$var$LIVEREGION_TIMEOUT_DELAY) {
        if (!$97cebfa4133ebec3$var$liveAnnouncer)
          $97cebfa4133ebec3$var$liveAnnouncer = new $97cebfa4133ebec3$var$LiveAnnouncer();
        $97cebfa4133ebec3$var$liveAnnouncer.announce(message, assertiveness, timeout);
      }
      function $97cebfa4133ebec3$export$d10ae4f68404609a(assertiveness) {
        if ($97cebfa4133ebec3$var$liveAnnouncer)
          $97cebfa4133ebec3$var$liveAnnouncer.clear(assertiveness);
      }
      function $97cebfa4133ebec3$export$d8686216b8b81b2f() {
        if ($97cebfa4133ebec3$var$liveAnnouncer) {
          $97cebfa4133ebec3$var$liveAnnouncer.destroy();
          $97cebfa4133ebec3$var$liveAnnouncer = null;
        }
      }
      var $97cebfa4133ebec3$var$LiveAnnouncer = class {
        createLog(ariaLive) {
          let node = document.createElement("div");
          node.setAttribute("role", "log");
          node.setAttribute("aria-live", ariaLive);
          node.setAttribute("aria-relevant", "additions");
          return node;
        }
        destroy() {
          if (!this.node)
            return;
          document.body.removeChild(this.node);
          this.node = null;
        }
        announce(message, assertiveness = "assertive", timeout = $97cebfa4133ebec3$var$LIVEREGION_TIMEOUT_DELAY) {
          if (!this.node)
            return;
          let node = document.createElement("div");
          node.textContent = message;
          if (assertiveness === "assertive")
            this.assertiveLog.appendChild(node);
          else
            this.politeLog.appendChild(node);
          if (message !== "")
            setTimeout(() => {
              node.remove();
            }, timeout);
        }
        clear(assertiveness) {
          if (!this.node)
            return;
          if (!assertiveness || assertiveness === "assertive")
            this.assertiveLog.innerHTML = "";
          if (!assertiveness || assertiveness === "polite")
            this.politeLog.innerHTML = "";
        }
        constructor() {
          this.node = document.createElement("div");
          this.node.dataset.liveAnnouncer = "true";
          Object.assign(this.node.style, {
            border: 0,
            clip: "rect(0 0 0 0)",
            clipPath: "inset(50%)",
            height: "1px",
            margin: "-1px",
            overflow: "hidden",
            padding: 0,
            position: "absolute",
            width: "1px",
            whiteSpace: "nowrap"
          });
          this.assertiveLog = this.createLog("assertive");
          this.node.appendChild(this.assertiveLog);
          this.politeLog = this.createLog("polite");
          this.node.appendChild(this.politeLog);
          document.body.prepend(this.node);
        }
      };
    }
  });

  // node_modules/@react-aria/grid/dist/main.js
  var require_main40 = __commonJS({
    "node_modules/@react-aria/grid/dist/main.js"(exports, module) {
      var $2oePb$reactstatelycollections = require_main15();
      var $2oePb$reactstatelyvirtualizer = require_main38();
      var $2oePb$reactariautils = require_main7();
      var $2oePb$react = require_react();
      var $2oePb$reactariai18n = require_main10();
      var $2oePb$reactariafocus = require_main12();
      var $2oePb$reactariaselection = require_main18();
      var $2oePb$reactarialiveannouncer = require_main39();
      var $2oePb$reactariainteractions = require_main11();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "GridKeyboardDelegate", () => $3187c0e19200cb16$export$de9feff04fda126e);
      $parcel$export(module.exports, "useGrid", () => $11d770dfabe45077$export$f6b86a04e5d66d90);
      $parcel$export(module.exports, "useGridRowGroup", () => $c7def85a57100898$export$d3037f5d3f3e51bf);
      $parcel$export(module.exports, "useGridRow", () => $eed398987c639831$export$96357d5a73f686fa);
      $parcel$export(module.exports, "useGridCell", () => $cf2021be63b01ef4$export$c7e10bfc0c59f67c);
      $parcel$export(module.exports, "useGridSelectionCheckbox", () => $d8385f73d3701365$export$70e2eed1a92976ad);
      $parcel$export(module.exports, "useHighlightSelectionDescription", () => $340f2fcd0ef9ce8d$export$be42ebdab07ae4c2);
      $parcel$export(module.exports, "useGridSelectionAnnouncement", () => $1eb174acfe8a0f16$export$137e594ef3218a10);
      var $3187c0e19200cb16$export$de9feff04fda126e = class {
        isCell(node) {
          return node.type === "cell";
        }
        isRow(node) {
          return node.type === "row" || node.type === "item";
        }
        findPreviousKey(fromKey, pred) {
          let key = fromKey != null ? this.collection.getKeyBefore(fromKey) : this.collection.getLastKey();
          while (key != null) {
            let item = this.collection.getItem(key);
            if (!this.disabledKeys.has(key) && (!pred || pred(item)))
              return key;
            key = this.collection.getKeyBefore(key);
          }
        }
        findNextKey(fromKey, pred) {
          let key = fromKey != null ? this.collection.getKeyAfter(fromKey) : this.collection.getFirstKey();
          while (key != null) {
            let item = this.collection.getItem(key);
            if (!this.disabledKeys.has(key) && (!pred || pred(item)))
              return key;
            key = this.collection.getKeyAfter(key);
          }
        }
        getKeyBelow(key) {
          let startItem = this.collection.getItem(key);
          if (!startItem)
            return;
          if (this.isCell(startItem))
            key = startItem.parentKey;
          key = this.findNextKey(key);
          if (key != null) {
            if (this.isCell(startItem)) {
              let item = this.collection.getItem(key);
              return (0, $2oePb$reactstatelycollections.getNthItem)((0, $2oePb$reactstatelycollections.getChildNodes)(item, this.collection), startItem.index).key;
            }
            if (this.focusMode === "row")
              return key;
          }
        }
        getKeyAbove(key) {
          let startItem = this.collection.getItem(key);
          if (!startItem)
            return;
          if (this.isCell(startItem))
            key = startItem.parentKey;
          key = this.findPreviousKey(key);
          if (key != null) {
            if (this.isCell(startItem)) {
              let item = this.collection.getItem(key);
              return (0, $2oePb$reactstatelycollections.getNthItem)((0, $2oePb$reactstatelycollections.getChildNodes)(item, this.collection), startItem.index).key;
            }
            if (this.focusMode === "row")
              return key;
          }
        }
        getKeyRightOf(key) {
          let item = this.collection.getItem(key);
          if (!item)
            return;
          if (this.isRow(item)) {
            let children = (0, $2oePb$reactstatelycollections.getChildNodes)(item, this.collection);
            return this.direction === "rtl" ? (0, $2oePb$reactstatelycollections.getLastItem)(children).key : (0, $2oePb$reactstatelycollections.getFirstItem)(children).key;
          }
          if (this.isCell(item)) {
            let parent = this.collection.getItem(item.parentKey);
            let children = (0, $2oePb$reactstatelycollections.getChildNodes)(parent, this.collection);
            let next = this.direction === "rtl" ? (0, $2oePb$reactstatelycollections.getNthItem)(children, item.index - 1) : (0, $2oePb$reactstatelycollections.getNthItem)(children, item.index + 1);
            if (next)
              return next.key;
            if (this.focusMode === "row")
              return item.parentKey;
            return this.direction === "rtl" ? this.getFirstKey(key) : this.getLastKey(key);
          }
        }
        getKeyLeftOf(key) {
          let item = this.collection.getItem(key);
          if (!item)
            return;
          if (this.isRow(item)) {
            let children = (0, $2oePb$reactstatelycollections.getChildNodes)(item, this.collection);
            return this.direction === "rtl" ? (0, $2oePb$reactstatelycollections.getFirstItem)(children).key : (0, $2oePb$reactstatelycollections.getLastItem)(children).key;
          }
          if (this.isCell(item)) {
            let parent = this.collection.getItem(item.parentKey);
            let children = (0, $2oePb$reactstatelycollections.getChildNodes)(parent, this.collection);
            let prev = this.direction === "rtl" ? (0, $2oePb$reactstatelycollections.getNthItem)(children, item.index + 1) : (0, $2oePb$reactstatelycollections.getNthItem)(children, item.index - 1);
            if (prev)
              return prev.key;
            if (this.focusMode === "row")
              return item.parentKey;
            return this.direction === "rtl" ? this.getLastKey(key) : this.getFirstKey(key);
          }
        }
        getFirstKey(key, global2) {
          let item;
          if (key != null) {
            item = this.collection.getItem(key);
            if (!item)
              return;
            if (this.isCell(item) && !global2) {
              let parent = this.collection.getItem(item.parentKey);
              return (0, $2oePb$reactstatelycollections.getFirstItem)((0, $2oePb$reactstatelycollections.getChildNodes)(parent, this.collection)).key;
            }
          }
          key = this.findNextKey();
          if (key != null && item && this.isCell(item) && global2 || this.focusMode === "cell") {
            let item2 = this.collection.getItem(key);
            key = (0, $2oePb$reactstatelycollections.getFirstItem)((0, $2oePb$reactstatelycollections.getChildNodes)(item2, this.collection)).key;
          }
          return key;
        }
        getLastKey(key, global2) {
          let item;
          if (key != null) {
            item = this.collection.getItem(key);
            if (!item)
              return;
            if (this.isCell(item) && !global2) {
              let parent = this.collection.getItem(item.parentKey);
              let children = (0, $2oePb$reactstatelycollections.getChildNodes)(parent, this.collection);
              return (0, $2oePb$reactstatelycollections.getLastItem)(children).key;
            }
          }
          key = this.findPreviousKey();
          if (key != null && item && this.isCell(item) && global2 || this.focusMode === "cell") {
            let item2 = this.collection.getItem(key);
            let children = (0, $2oePb$reactstatelycollections.getChildNodes)(item2, this.collection);
            key = (0, $2oePb$reactstatelycollections.getLastItem)(children).key;
          }
          return key;
        }
        getItem(key) {
          return this.ref.current.querySelector(`[data-key="${key}"]`);
        }
        getItemRect(key) {
          var _this_layout_getLayoutInfo;
          if (this.layout)
            return (_this_layout_getLayoutInfo = this.layout.getLayoutInfo(key)) === null || _this_layout_getLayoutInfo === void 0 ? void 0 : _this_layout_getLayoutInfo.rect;
          let item = this.getItem(key);
          if (item)
            return new (0, $2oePb$reactstatelyvirtualizer.Rect)(item.offsetLeft, item.offsetTop, item.offsetWidth, item.offsetHeight);
        }
        getPageHeight() {
          var _this_layout_virtualizer, _this_ref, _this_ref_current;
          if (this.layout)
            return (_this_layout_virtualizer = this.layout.virtualizer) === null || _this_layout_virtualizer === void 0 ? void 0 : _this_layout_virtualizer.visibleRect.height;
          return (_this_ref = this.ref) === null || _this_ref === void 0 ? void 0 : (_this_ref_current = _this_ref.current) === null || _this_ref_current === void 0 ? void 0 : _this_ref_current.offsetHeight;
        }
        getContentHeight() {
          var _this_ref, _this_ref_current;
          if (this.layout)
            return this.layout.getContentSize().height;
          return (_this_ref = this.ref) === null || _this_ref === void 0 ? void 0 : (_this_ref_current = _this_ref.current) === null || _this_ref_current === void 0 ? void 0 : _this_ref_current.scrollHeight;
        }
        getKeyPageAbove(key) {
          let itemRect = this.getItemRect(key);
          if (!itemRect)
            return null;
          let pageY = Math.max(0, itemRect.maxY - this.getPageHeight());
          while (itemRect && itemRect.y > pageY) {
            key = this.getKeyAbove(key);
            itemRect = this.getItemRect(key);
          }
          return key;
        }
        getKeyPageBelow(key) {
          let itemRect = this.getItemRect(key);
          if (!itemRect)
            return null;
          let pageHeight = this.getPageHeight();
          let pageY = Math.min(this.getContentHeight(), itemRect.y + pageHeight);
          while (itemRect && itemRect.maxY < pageY) {
            let nextKey = this.getKeyBelow(key);
            itemRect = this.getItemRect(nextKey);
            if (nextKey != null)
              key = nextKey;
          }
          return key;
        }
        getKeyForSearch(search, fromKey) {
          if (!this.collator)
            return null;
          let collection = this.collection;
          let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey();
          let startItem = collection.getItem(key);
          if (startItem.type === "cell")
            key = startItem.parentKey;
          let hasWrapped = false;
          while (key != null) {
            let item = collection.getItem(key);
            if (item.textValue) {
              let substring = item.textValue.slice(0, search.length);
              if (this.collator.compare(substring, search) === 0) {
                if (this.isRow(item) && this.focusMode === "cell")
                  return (0, $2oePb$reactstatelycollections.getFirstItem)((0, $2oePb$reactstatelycollections.getChildNodes)(item, this.collection)).key;
                return item.key;
              }
            }
            key = this.findNextKey(key);
            if (key == null && !hasWrapped) {
              key = this.getFirstKey();
              hasWrapped = true;
            }
          }
          return null;
        }
        constructor(options) {
          this.collection = options.collection;
          this.disabledKeys = options.disabledKeys;
          this.ref = options.ref;
          this.direction = options.direction;
          this.collator = options.collator;
          this.layout = options.layout;
          this.focusMode = options.focusMode || "row";
        }
      };
      var $8ee34951196858d0$export$e6235c0d09b995d0 = /* @__PURE__ */ new WeakMap();
      var $085250522aa37816$exports = {};
      var $6f42661ae0214332$exports = {};
      $6f42661ae0214332$exports = {
        "deselectedItem": (args) => `${args.item} \u063A\u064A\u0631 \u0627\u0644\u0645\u062D\u062F\u062F`,
        "longPressToSelect": `\u0627\u0636\u063A\u0637 \u0645\u0637\u0648\u0644\u064B\u0627 \u0644\u0644\u062F\u062E\u0648\u0644 \u0625\u0644\u0649 \u0648\u0636\u0639 \u0627\u0644\u062A\u062D\u062F\u064A\u062F.`,
        "select": `\u062A\u062D\u062F\u064A\u062F`,
        "selectedAll": `\u062C\u0645\u064A\u0639 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u0645\u062D\u062F\u062F\u0629.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u0644\u0645 \u064A\u062A\u0645 \u062A\u062D\u062F\u064A\u062F \u0639\u0646\u0627\u0635\u0631`,
          one: () => `${formatter.number(args.count)} \u0639\u0646\u0635\u0631 \u0645\u062D\u062F\u062F`,
          other: () => `${formatter.number(args.count)} \u0639\u0646\u0635\u0631 \u0645\u062D\u062F\u062F`
        })}.`,
        "selectedItem": (args) => `${args.item} \u0627\u0644\u0645\u062D\u062F\u062F`
      };
      var $3e5d289b19f0fad9$exports = {};
      $3e5d289b19f0fad9$exports = {
        "deselectedItem": (args) => `${args.item} \u043D\u0435 \u0435 \u0438\u0437\u0431\u0440\u0430\u043D.`,
        "longPressToSelect": `\u041D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 \u0438 \u0437\u0430\u0434\u0440\u044A\u0436\u0442\u0435 \u0437\u0430 \u0434\u0430 \u0432\u043B\u0435\u0437\u0435\u0442\u0435 \u0432 \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435\u043B\u0435\u043D \u0440\u0435\u0436\u0438\u043C.`,
        "select": `\u0418\u0437\u0431\u0435\u0440\u0435\u0442\u0435`,
        "selectedAll": `\u0412\u0441\u0438\u0447\u043A\u0438 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438 \u0441\u0430 \u0438\u0437\u0431\u0440\u0430\u043D\u0438.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u041D\u044F\u043C\u0430 \u0438\u0437\u0431\u0440\u0430\u043D\u0438 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438`,
          one: () => `${formatter.number(args.count)} \u0438\u0437\u0431\u0440\u0430\u043D \u0435\u043B\u0435\u043C\u0435\u043D\u0442`,
          other: () => `${formatter.number(args.count)} \u0438\u0437\u0431\u0440\u0430\u043D\u0438 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438`
        })}.`,
        "selectedItem": (args) => `${args.item} \u0438\u0437\u0431\u0440\u0430\u043D.`
      };
      var $786c35956e916979$exports = {};
      $786c35956e916979$exports = {
        "deselectedItem": (args) => `Polo\u017Eka ${args.item} nen\xED vybr\xE1na.`,
        "longPressToSelect": `Dlouh\xFDm stisknut\xEDm p\u0159ejdete do re\u017Eimu v\xFDb\u011Bru.`,
        "select": `Vybrat`,
        "selectedAll": `Vybr\xE1ny v\u0161echny polo\u017Eky.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nevybr\xE1ny \u017E\xE1dn\xE9 polo\u017Eky`,
          one: () => `Vybr\xE1na ${formatter.number(args.count)} polo\u017Eka`,
          other: () => `Vybr\xE1no ${formatter.number(args.count)} polo\u017Eek`
        })}.`,
        "selectedItem": (args) => `Vybr\xE1na polo\u017Eka ${args.item}.`
      };
      var $7166f564b8fa3e8a$exports = {};
      $7166f564b8fa3e8a$exports = {
        "deselectedItem": (args) => `${args.item} ikke valgt.`,
        "longPressToSelect": `Lav et langt tryk for at aktivere valgtilstand.`,
        "select": `V\xE6lg`,
        "selectedAll": `Alle elementer valgt.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Ingen elementer valgt`,
          one: () => `${formatter.number(args.count)} element valgt`,
          other: () => `${formatter.number(args.count)} elementer valgt`
        })}.`,
        "selectedItem": (args) => `${args.item} valgt.`
      };
      var $12fc5e32bb482de0$exports = {};
      $12fc5e32bb482de0$exports = {
        "deselectedItem": (args) => `${args.item} nicht ausgew\xE4hlt.`,
        "longPressToSelect": `Gedr\xFCckt halten, um Auswahlmodus zu \xF6ffnen.`,
        "select": `Ausw\xE4hlen`,
        "selectedAll": `Alle Elemente ausgew\xE4hlt.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Keine Elemente ausgew\xE4hlt`,
          one: () => `${formatter.number(args.count)} Element ausgew\xE4hlt`,
          other: () => `${formatter.number(args.count)} Elemente ausgew\xE4hlt`
        })}.`,
        "selectedItem": (args) => `${args.item} ausgew\xE4hlt.`
      };
      var $84b67ad15c785b2c$exports = {};
      $84b67ad15c785b2c$exports = {
        "deselectedItem": (args) => `\u0394\u03B5\u03BD \u03B5\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B5 \u03C4\u03BF \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03BF ${args.item}.`,
        "longPressToSelect": `\u03A0\u03B1\u03C4\u03AE\u03C3\u03C4\u03B5 \u03C0\u03B1\u03C1\u03B1\u03C4\u03B5\u03C4\u03B1\u03BC\u03AD\u03BD\u03B1 \u03B3\u03B9\u03B1 \u03BD\u03B1 \u03BC\u03C0\u03B5\u03AF\u03C4\u03B5 \u03C3\u03B5 \u03BB\u03B5\u03B9\u03C4\u03BF\u03C5\u03C1\u03B3\u03AF\u03B1 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE\u03C2.`,
        "select": `\u0395\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE`,
        "selectedAll": `\u0395\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B1\u03BD \u03CC\u03BB\u03B1 \u03C4\u03B1 \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03B1.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u0394\u03B5\u03BD \u03B5\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B1\u03BD \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03B1`,
          one: () => `\u0395\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B5 ${formatter.number(args.count)} \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03BF`,
          other: () => `\u0395\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B1\u03BD ${formatter.number(args.count)} \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03B1`
        })}.`,
        "selectedItem": (args) => `\u0395\u03C0\u03B9\u03BB\u03AD\u03C7\u03B8\u03B7\u03BA\u03B5 \u03C4\u03BF \u03C3\u03C4\u03BF\u03B9\u03C7\u03B5\u03AF\u03BF ${args.item}.`
      };
      var $86f7e6ba2423a35d$exports = {};
      $86f7e6ba2423a35d$exports = {
        "deselectedItem": (args) => `${args.item} not selected.`,
        "select": `Select`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `No items selected`,
          one: () => `${formatter.number(args.count)} item selected`,
          other: () => `${formatter.number(args.count)} items selected`
        })}.`,
        "selectedAll": `All items selected.`,
        "selectedItem": (args) => `${args.item} selected.`,
        "longPressToSelect": `Long press to enter selection mode.`
      };
      var $67f524d2f2545d56$exports = {};
      $67f524d2f2545d56$exports = {
        "deselectedItem": (args) => `${args.item} no seleccionado.`,
        "longPressToSelect": `Mantenga pulsado para abrir el modo de selecci\xF3n.`,
        "select": `Seleccionar`,
        "selectedAll": `Todos los elementos seleccionados.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Ning\xFAn elemento seleccionado`,
          one: () => `${formatter.number(args.count)} elemento seleccionado`,
          other: () => `${formatter.number(args.count)} elementos seleccionados`
        })}.`,
        "selectedItem": (args) => `${args.item} seleccionado.`
      };
      var $d8df13f1dbf6e0c4$exports = {};
      $d8df13f1dbf6e0c4$exports = {
        "deselectedItem": (args) => `${args.item} pole valitud.`,
        "longPressToSelect": `Valikure\u017Eiimi sisenemiseks vajutage pikalt.`,
        "select": `Vali`,
        "selectedAll": `K\xF5ik \xFCksused valitud.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\xDCksusi pole valitud`,
          one: () => `${formatter.number(args.count)} \xFCksus valitud`,
          other: () => `${formatter.number(args.count)} \xFCksust valitud`
        })}.`,
        "selectedItem": (args) => `${args.item} valitud.`
      };
      var $e2b4dfe2d4d55739$exports = {};
      $e2b4dfe2d4d55739$exports = {
        "deselectedItem": (args) => `Kohdetta ${args.item} ei valittu.`,
        "longPressToSelect": `Siirry valintatilaan painamalla pitk\xE4\xE4n.`,
        "select": `Valitse`,
        "selectedAll": `Kaikki kohteet valittu.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Ei yht\xE4\xE4n kohdetta valittu`,
          one: () => `${formatter.number(args.count)} kohde valittu`,
          other: () => `${formatter.number(args.count)} kohdetta valittu`
        })}.`,
        "selectedItem": (args) => `${args.item} valittu.`
      };
      var $c06d6698d30993e7$exports = {};
      $c06d6698d30993e7$exports = {
        "deselectedItem": (args) => `${args.item} non s\xE9lectionn\xE9.`,
        "longPressToSelect": `Appuyez de mani\xE8re prolong\xE9e pour passer en mode de s\xE9lection.`,
        "select": `S\xE9lectionner`,
        "selectedAll": `Tous les \xE9l\xE9ments s\xE9lectionn\xE9s.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Aucun \xE9l\xE9ment s\xE9lectionn\xE9`,
          one: () => `${formatter.number(args.count)} \xE9l\xE9ment s\xE9lectionn\xE9`,
          other: () => `${formatter.number(args.count)} \xE9l\xE9ments s\xE9lectionn\xE9s`
        })}.`,
        "selectedItem": (args) => `${args.item} s\xE9lectionn\xE9.`
      };
      var $e775713aa5566057$exports = {};
      $e775713aa5566057$exports = {
        "deselectedItem": (args) => `${args.item} \u05DC\u05D0 \u05E0\u05D1\u05D7\u05E8.`,
        "longPressToSelect": `\u05D4\u05E7\u05E9\u05D4 \u05D0\u05E8\u05D5\u05DB\u05D4 \u05DC\u05DB\u05E0\u05D9\u05E1\u05D4 \u05DC\u05DE\u05E6\u05D1 \u05D1\u05D7\u05D9\u05E8\u05D4.`,
        "select": `\u05D1\u05D7\u05E8`,
        "selectedAll": `\u05DB\u05DC \u05D4\u05E4\u05E8\u05D9\u05D8\u05D9\u05DD \u05E0\u05D1\u05D7\u05E8\u05D5.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u05DC\u05D0 \u05E0\u05D1\u05D7\u05E8\u05D5 \u05E4\u05E8\u05D9\u05D8\u05D9\u05DD`,
          one: () => `\u05E4\u05E8\u05D9\u05D8 ${formatter.number(args.count)} \u05E0\u05D1\u05D7\u05E8`,
          other: () => `${formatter.number(args.count)} \u05E4\u05E8\u05D9\u05D8\u05D9\u05DD \u05E0\u05D1\u05D7\u05E8\u05D5`
        })}.`,
        "selectedItem": (args) => `${args.item} \u05E0\u05D1\u05D7\u05E8.`
      };
      var $a972cfeb69a51f5b$exports = {};
      $a972cfeb69a51f5b$exports = {
        "deselectedItem": (args) => `Stavka ${args.item} nije odabrana.`,
        "longPressToSelect": `Dugo pritisnite za ulazak u na\u010Din odabira.`,
        "select": `Odaberite`,
        "selectedAll": `Odabrane su sve stavke.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nije odabrana nijedna stavka`,
          one: () => `Odabrana je ${formatter.number(args.count)} stavka`,
          other: () => `Odabrano je ${formatter.number(args.count)} stavki`
        })}.`,
        "selectedItem": (args) => `Stavka ${args.item} je odabrana.`
      };
      var $a471da6bb87e6cd1$exports = {};
      $a471da6bb87e6cd1$exports = {
        "deselectedItem": (args) => `${args.item} nincs kijel\xF6lve.`,
        "longPressToSelect": `Nyomja hosszan a kijel\xF6l\xE9shez.`,
        "select": `Kijel\xF6l\xE9s`,
        "selectedAll": `Az \xF6sszes elem kijel\xF6lve.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Egy elem sincs kijel\xF6lve`,
          one: () => `${formatter.number(args.count)} elem kijel\xF6lve`,
          other: () => `${formatter.number(args.count)} elem kijel\xF6lve`
        })}.`,
        "selectedItem": (args) => `${args.item} kijel\xF6lve.`
      };
      var $47879155027d6c95$exports = {};
      $47879155027d6c95$exports = {
        "deselectedItem": (args) => `${args.item} non selezionato.`,
        "longPressToSelect": `Premi a lungo per passare alla modalit\xE0 di selezione.`,
        "select": `Seleziona`,
        "selectedAll": `Tutti gli elementi selezionati.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nessun elemento selezionato`,
          one: () => `${formatter.number(args.count)} elemento selezionato`,
          other: () => `${formatter.number(args.count)} elementi selezionati`
        })}.`,
        "selectedItem": (args) => `${args.item} selezionato.`
      };
      var $9cd8dc003c2209e6$exports = {};
      $9cd8dc003c2209e6$exports = {
        "deselectedItem": (args) => `${args.item} \u304C\u9078\u629E\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002`,
        "longPressToSelect": `\u9577\u62BC\u3057\u3057\u3066\u9078\u629E\u30E2\u30FC\u30C9\u3092\u958B\u304D\u307E\u3059\u3002`,
        "select": `\u9078\u629E`,
        "selectedAll": `\u3059\u3079\u3066\u306E\u9805\u76EE\u3092\u9078\u629E\u3057\u307E\u3057\u305F\u3002`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u9805\u76EE\u304C\u9078\u629E\u3055\u308C\u3066\u3044\u307E\u305B\u3093`,
          one: () => `${formatter.number(args.count)} \u9805\u76EE\u3092\u9078\u629E\u3057\u307E\u3057\u305F`,
          other: () => `${formatter.number(args.count)} \u9805\u76EE\u3092\u9078\u629E\u3057\u307E\u3057\u305F`
        })}\u3002`,
        "selectedItem": (args) => `${args.item} \u3092\u9078\u629E\u3057\u307E\u3057\u305F\u3002`
      };
      var $a490b9448c5f2ded$exports = {};
      $a490b9448c5f2ded$exports = {
        "deselectedItem": (args) => `${args.item}\uC774(\uAC00) \uC120\uD0DD\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4.`,
        "longPressToSelect": `\uC120\uD0DD \uBAA8\uB4DC\uB85C \uB4E4\uC5B4\uAC00\uB824\uBA74 \uAE38\uAC8C \uB204\uB974\uC2ED\uC2DC\uC624.`,
        "select": `\uC120\uD0DD`,
        "selectedAll": `\uBAA8\uB4E0 \uD56D\uBAA9\uC774 \uC120\uD0DD\uB418\uC5C8\uC2B5\uB2C8\uB2E4.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\uC120\uD0DD\uB41C \uD56D\uBAA9\uC774 \uC5C6\uC2B5\uB2C8\uB2E4`,
          one: () => `${formatter.number(args.count)}\uAC1C \uD56D\uBAA9\uC774 \uC120\uD0DD\uB418\uC5C8\uC2B5\uB2C8\uB2E4`,
          other: () => `${formatter.number(args.count)}\uAC1C \uD56D\uBAA9\uC774 \uC120\uD0DD\uB418\uC5C8\uC2B5\uB2C8\uB2E4`
        })}.`,
        "selectedItem": (args) => `${args.item}\uC774(\uAC00) \uC120\uD0DD\uB418\uC5C8\uC2B5\uB2C8\uB2E4.`
      };
      var $99f69e0597841328$exports = {};
      $99f69e0597841328$exports = {
        "deselectedItem": (args) => `${args.item} nepasirinkta.`,
        "longPressToSelect": `Nor\u0117dami \u012Fjungti pasirinkimo re\u017Eim\u0105, paspauskite ir palaikykite.`,
        "select": `Pasirinkti`,
        "selectedAll": `Pasirinkti visi elementai.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nepasirinktas n\u0117 vienas elementas`,
          one: () => `Pasirinktas ${formatter.number(args.count)} elementas`,
          other: () => `Pasirinkta element\u0173: ${formatter.number(args.count)}`
        })}.`,
        "selectedItem": (args) => `Pasirinkta: ${args.item}.`
      };
      var $28ac5b31e47d46d4$exports = {};
      $28ac5b31e47d46d4$exports = {
        "deselectedItem": (args) => `Vienums ${args.item} nav atlas\u012Bts.`,
        "longPressToSelect": `Ilgi turiet nospiestu. lai iesl\u0113gtu atlases re\u017E\u012Bmu.`,
        "select": `Atlas\u012Bt`,
        "selectedAll": `Atlas\u012Bti visi vienumi.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nav atlas\u012Bts neviens vienums`,
          one: () => `Atlas\u012Bto vienumu skaits: ${formatter.number(args.count)}`,
          other: () => `Atlas\u012Bto vienumu skaits: ${formatter.number(args.count)}`
        })}.`,
        "selectedItem": (args) => `Atlas\u012Bts vienums ${args.item}.`
      };
      var $d0ae97c9412add8b$exports = {};
      $d0ae97c9412add8b$exports = {
        "deselectedItem": (args) => `${args.item} er ikke valgt.`,
        "longPressToSelect": `Bruk et langt trykk for \xE5 g\xE5 inn i valgmodus.`,
        "select": `Velg`,
        "selectedAll": `Alle elementer er valgt.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Ingen elementer er valgt`,
          one: () => `${formatter.number(args.count)} element er valgt`,
          other: () => `${formatter.number(args.count)} elementer er valgt`
        })}.`,
        "selectedItem": (args) => `${args.item} er valgt.`
      };
      var $7e5335510891b8c3$exports = {};
      $7e5335510891b8c3$exports = {
        "deselectedItem": (args) => `${args.item} niet geselecteerd.`,
        "longPressToSelect": `Druk lang om de selectiemodus te openen.`,
        "select": `Selecteren`,
        "selectedAll": `Alle items geselecteerd.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Geen items geselecteerd`,
          one: () => `${formatter.number(args.count)} item geselecteerd`,
          other: () => `${formatter.number(args.count)} items geselecteerd`
        })}.`,
        "selectedItem": (args) => `${args.item} geselecteerd.`
      };
      var $455cb5ebd5f6c27d$exports = {};
      $455cb5ebd5f6c27d$exports = {
        "deselectedItem": (args) => `Nie zaznaczono ${args.item}.`,
        "longPressToSelect": `Naci\u015Bnij i przytrzymaj, aby wej\u015B\u0107 do trybu wyboru.`,
        "select": `Zaznacz`,
        "selectedAll": `Wszystkie zaznaczone elementy.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nie zaznaczono \u017Cadnych element\xF3w`,
          one: () => `${formatter.number(args.count)} zaznaczony element`,
          other: () => `${formatter.number(args.count)} zaznaczonych element\xF3w`
        })}.`,
        "selectedItem": (args) => `Zaznaczono ${args.item}.`
      };
      var $55020c522ee676a2$exports = {};
      $55020c522ee676a2$exports = {
        "deselectedItem": (args) => `${args.item} n\xE3o selecionado.`,
        "longPressToSelect": `Mantenha pressionado para entrar no modo de sele\xE7\xE3o.`,
        "select": `Selecionar`,
        "selectedAll": `Todos os itens selecionados.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nenhum item selecionado`,
          one: () => `${formatter.number(args.count)} item selecionado`,
          other: () => `${formatter.number(args.count)} itens selecionados`
        })}.`,
        "selectedItem": (args) => `${args.item} selecionado.`
      };
      var $cc691e0f35e41c7f$exports = {};
      $cc691e0f35e41c7f$exports = {
        "deselectedItem": (args) => `${args.item} n\xE3o selecionado.`,
        "longPressToSelect": `Prima continuamente para entrar no modo de sele\xE7\xE3o.`,
        "select": `Selecionar`,
        "selectedAll": `Todos os itens selecionados.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nenhum item selecionado`,
          one: () => `${formatter.number(args.count)} item selecionado`,
          other: () => `${formatter.number(args.count)} itens selecionados`
        })}.`,
        "selectedItem": (args) => `${args.item} selecionado.`
      };
      var $712b70af9d7e11e9$exports = {};
      $712b70af9d7e11e9$exports = {
        "deselectedItem": (args) => `${args.item} neselectat.`,
        "longPressToSelect": `Ap\u0103sa\u021Bi lung pentru a intra \xEEn modul de selectare.`,
        "select": `Selectare`,
        "selectedAll": `Toate elementele selectate.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Niciun element selectat`,
          one: () => `${formatter.number(args.count)} element selectat`,
          other: () => `${formatter.number(args.count)} elemente selectate`
        })}.`,
        "selectedItem": (args) => `${args.item} selectat.`
      };
      var $c483d9d6d4bcff75$exports = {};
      $c483d9d6d4bcff75$exports = {
        "deselectedItem": (args) => `${args.item} \u043D\u0435 \u0432\u044B\u0431\u0440\u0430\u043D\u043E.`,
        "longPressToSelect": `\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0439\u0442\u0435 \u0434\u043B\u044F \u0432\u0445\u043E\u0434\u0430 \u0432 \u0440\u0435\u0436\u0438\u043C \u0432\u044B\u0431\u043E\u0440\u0430.`,
        "select": `\u0412\u044B\u0431\u0440\u0430\u0442\u044C`,
        "selectedAll": `\u0412\u044B\u0431\u0440\u0430\u043D\u044B \u0432\u0441\u0435 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u041D\u0435\u0442 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0445 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432`,
          one: () => `${formatter.number(args.count)} \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u0432\u044B\u0431\u0440\u0430\u043D`,
          other: () => `${formatter.number(args.count)} \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432 \u0432\u044B\u0431\u0440\u0430\u043D\u043E`
        })}.`,
        "selectedItem": (args) => `${args.item} \u0432\u044B\u0431\u0440\u0430\u043D\u043E.`
      };
      var $35bc9f18e7cf9157$exports = {};
      $35bc9f18e7cf9157$exports = {
        "deselectedItem": (args) => `Nevybrat\xE9 polo\u017Eky: ${args.item}.`,
        "longPressToSelect": `Dlh\u0161\xEDm stla\u010Den\xEDm prejdite do re\u017Eimu v\xFDberu.`,
        "select": `Vybra\u0165`,
        "selectedAll": `V\u0161etky vybrat\xE9 polo\u017Eky.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u017Diadne vybrat\xE9 polo\u017Eky`,
          one: () => `${formatter.number(args.count)} vybrat\xE1 polo\u017Eka`,
          other: () => `Po\u010Det vybrat\xFDch polo\u017Eiek:${formatter.number(args.count)}`
        })}.`,
        "selectedItem": (args) => `Vybrat\xE9 polo\u017Eky: ${args.item}.`
      };
      var $e933d1373d8e91e0$exports = {};
      $e933d1373d8e91e0$exports = {
        "deselectedItem": (args) => `Element ${args.item} ni izbran.`,
        "longPressToSelect": `Za izbirni na\u010Din pritisnite in dlje \u010Dasa dr\u017Eite.`,
        "select": `Izberite`,
        "selectedAll": `Vsi elementi so izbrani.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Noben element ni izbran`,
          one: () => `${formatter.number(args.count)} element je izbran`,
          other: () => `${formatter.number(args.count)} elementov je izbranih`
        })}.`,
        "selectedItem": (args) => `Element ${args.item} je izbran.`
      };
      var $77463d6521c72512$exports = {};
      $77463d6521c72512$exports = {
        "deselectedItem": (args) => `${args.item} nije izabrano.`,
        "longPressToSelect": `Dugo pritisnite za ulazak u re\u017Eim biranja.`,
        "select": `Izaberite`,
        "selectedAll": `Izabrane su sve stavke.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Nije izabrana nijedna stavka`,
          one: () => `Izabrana je ${formatter.number(args.count)} stavka`,
          other: () => `Izabrano je ${formatter.number(args.count)} stavki`
        })}.`,
        "selectedItem": (args) => `${args.item} je izabrano.`
      };
      var $6380ab044222ca52$exports = {};
      $6380ab044222ca52$exports = {
        "deselectedItem": (args) => `${args.item} ej markerat.`,
        "longPressToSelect": `Tryck l\xE4nge n\xE4r du vill \xF6ppna v\xE4ljarl\xE4ge.`,
        "select": `Markera`,
        "selectedAll": `Alla markerade objekt.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Inga markerade objekt`,
          one: () => `${formatter.number(args.count)} markerat objekt`,
          other: () => `${formatter.number(args.count)} markerade objekt`
        })}.`,
        "selectedItem": (args) => `${args.item} markerat.`
      };
      var $9cb854f23a6ff322$exports = {};
      $9cb854f23a6ff322$exports = {
        "deselectedItem": (args) => `${args.item} se\xE7ilmedi.`,
        "longPressToSelect": `Se\xE7im moduna girmek i\xE7in uzun bas\u0131n.`,
        "select": `Se\xE7`,
        "selectedAll": `T\xFCm \xF6geler se\xE7ildi.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `Hi\xE7bir \xF6ge se\xE7ilmedi`,
          one: () => `${formatter.number(args.count)} \xF6ge se\xE7ildi`,
          other: () => `${formatter.number(args.count)} \xF6ge se\xE7ildi`
        })}.`,
        "selectedItem": (args) => `${args.item} se\xE7ildi.`
      };
      var $912862d79e063c74$exports = {};
      $912862d79e063c74$exports = {
        "deselectedItem": (args) => `${args.item} \u043D\u0435 \u0432\u0438\u0431\u0440\u0430\u043D\u043E.`,
        "longPressToSelect": `\u0412\u0438\u043A\u043E\u043D\u0430\u0439\u0442\u0435 \u0434\u043E\u0432\u0433\u0435 \u043D\u0430\u0442\u0438\u0441\u043D\u0435\u043D\u043D\u044F, \u0449\u043E\u0431 \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u0440\u0435\u0436\u0438\u043C \u0432\u0438\u0431\u043E\u0440\u0443.`,
        "select": `\u0412\u0438\u0431\u0440\u0430\u0442\u0438`,
        "selectedAll": `\u0423\u0441\u0456 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438 \u0432\u0438\u0431\u0440\u0430\u043D\u043E.`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u0416\u043E\u0434\u043D\u0438\u0445 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432 \u043D\u0435 \u0432\u0438\u0431\u0440\u0430\u043D\u043E`,
          one: () => `${formatter.number(args.count)} \u0435\u043B\u0435\u043C\u0435\u043D\u0442 \u0432\u0438\u0431\u0440\u0430\u043D\u043E`,
          other: () => `\u0412\u0438\u0431\u0440\u0430\u043D\u043E \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0456\u0432: ${formatter.number(args.count)}`
        })}.`,
        "selectedItem": (args) => `${args.item} \u0432\u0438\u0431\u0440\u0430\u043D\u043E.`
      };
      var $91bb887772fd7ad4$exports = {};
      $91bb887772fd7ad4$exports = {
        "deselectedItem": (args) => `\u672A\u9009\u62E9 ${args.item}\u3002`,
        "longPressToSelect": `\u957F\u6309\u4EE5\u8FDB\u5165\u9009\u62E9\u6A21\u5F0F\u3002`,
        "select": `\u9009\u62E9`,
        "selectedAll": `\u5DF2\u9009\u62E9\u6240\u6709\u9879\u76EE\u3002`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u672A\u9009\u62E9\u9879\u76EE`,
          one: () => `\u5DF2\u9009\u62E9 ${formatter.number(args.count)} \u4E2A\u9879\u76EE`,
          other: () => `\u5DF2\u9009\u62E9 ${formatter.number(args.count)} \u4E2A\u9879\u76EE`
        })}\u3002`,
        "selectedItem": (args) => `\u5DF2\u9009\u62E9 ${args.item}\u3002`
      };
      var $a33ce76c4b030d83$exports = {};
      $a33ce76c4b030d83$exports = {
        "deselectedItem": (args) => `\u672A\u9078\u53D6\u300C${args.item}\u300D\u3002`,
        "longPressToSelect": `\u9577\u6309\u4EE5\u9032\u5165\u9078\u64C7\u6A21\u5F0F\u3002`,
        "select": `\u9078\u53D6`,
        "selectedAll": `\u5DF2\u9078\u53D6\u6240\u6709\u9805\u76EE\u3002`,
        "selectedCount": (args, formatter) => `${formatter.plural(args.count, {
          "=0": `\u672A\u9078\u53D6\u4EFB\u4F55\u9805\u76EE`,
          one: () => `\u5DF2\u9078\u53D6 ${formatter.number(args.count)} \u500B\u9805\u76EE`,
          other: () => `\u5DF2\u9078\u53D6 ${formatter.number(args.count)} \u500B\u9805\u76EE`
        })}\u3002`,
        "selectedItem": (args) => `\u5DF2\u9078\u53D6\u300C${args.item}\u300D\u3002`
      };
      $085250522aa37816$exports = {
        "ar-AE": $6f42661ae0214332$exports,
        "bg-BG": $3e5d289b19f0fad9$exports,
        "cs-CZ": $786c35956e916979$exports,
        "da-DK": $7166f564b8fa3e8a$exports,
        "de-DE": $12fc5e32bb482de0$exports,
        "el-GR": $84b67ad15c785b2c$exports,
        "en-US": $86f7e6ba2423a35d$exports,
        "es-ES": $67f524d2f2545d56$exports,
        "et-EE": $d8df13f1dbf6e0c4$exports,
        "fi-FI": $e2b4dfe2d4d55739$exports,
        "fr-FR": $c06d6698d30993e7$exports,
        "he-IL": $e775713aa5566057$exports,
        "hr-HR": $a972cfeb69a51f5b$exports,
        "hu-HU": $a471da6bb87e6cd1$exports,
        "it-IT": $47879155027d6c95$exports,
        "ja-JP": $9cd8dc003c2209e6$exports,
        "ko-KR": $a490b9448c5f2ded$exports,
        "lt-LT": $99f69e0597841328$exports,
        "lv-LV": $28ac5b31e47d46d4$exports,
        "nb-NO": $d0ae97c9412add8b$exports,
        "nl-NL": $7e5335510891b8c3$exports,
        "pl-PL": $455cb5ebd5f6c27d$exports,
        "pt-BR": $55020c522ee676a2$exports,
        "pt-PT": $cc691e0f35e41c7f$exports,
        "ro-RO": $712b70af9d7e11e9$exports,
        "ru-RU": $c483d9d6d4bcff75$exports,
        "sk-SK": $35bc9f18e7cf9157$exports,
        "sl-SI": $e933d1373d8e91e0$exports,
        "sr-SP": $77463d6521c72512$exports,
        "sv-SE": $6380ab044222ca52$exports,
        "tr-TR": $9cb854f23a6ff322$exports,
        "uk-UA": $912862d79e063c74$exports,
        "zh-CN": $91bb887772fd7ad4$exports,
        "zh-TW": $a33ce76c4b030d83$exports
      };
      function $1eb174acfe8a0f16$export$137e594ef3218a10(props, state) {
        var _state_collection_getTextValue;
        let { getRowText = (key) => {
          var _state_collection, _state_collection_getTextValue1, _state_collection_getItem;
          return (_state_collection_getTextValue = (_state_collection_getTextValue1 = (_state_collection = state.collection).getTextValue) === null || _state_collection_getTextValue1 === void 0 ? void 0 : _state_collection_getTextValue1.call(_state_collection, key)) !== null && _state_collection_getTextValue !== void 0 ? _state_collection_getTextValue : (_state_collection_getItem = state.collection.getItem(key)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.textValue;
        } } = props;
        let stringFormatter = (0, $2oePb$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($085250522aa37816$exports)));
        let selection = state.selectionManager.rawSelection;
        let lastSelection = (0, $2oePb$react.useRef)(selection);
        (0, $2oePb$reactariautils.useUpdateEffect)(() => {
          var _lastSelection_current;
          if (!state.selectionManager.isFocused) {
            lastSelection.current = selection;
            return;
          }
          let addedKeys = $1eb174acfe8a0f16$var$diffSelection(selection, lastSelection.current);
          let removedKeys = $1eb174acfe8a0f16$var$diffSelection(lastSelection.current, selection);
          let isReplace = state.selectionManager.selectionBehavior === "replace";
          let messages = [];
          if (state.selectionManager.selectedKeys.size === 1 && isReplace) {
            if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {
              let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);
              if (currentSelectionText)
                messages.push(stringFormatter.format("selectedItem", {
                  item: currentSelectionText
                }));
            }
          } else if (addedKeys.size === 1 && removedKeys.size === 0) {
            let addedText = getRowText(addedKeys.keys().next().value);
            if (addedText)
              messages.push(stringFormatter.format("selectedItem", {
                item: addedText
              }));
          } else if (removedKeys.size === 1 && addedKeys.size === 0) {
            if (state.collection.getItem(removedKeys.keys().next().value)) {
              let removedText = getRowText(removedKeys.keys().next().value);
              if (removedText)
                messages.push(stringFormatter.format("deselectedItem", {
                  item: removedText
                }));
            }
          }
          if (state.selectionManager.selectionMode === "multiple") {
            if (messages.length === 0 || selection === "all" || selection.size > 1 || lastSelection.current === "all" || ((_lastSelection_current = lastSelection.current) === null || _lastSelection_current === void 0 ? void 0 : _lastSelection_current.size) > 1)
              messages.push(selection === "all" ? stringFormatter.format("selectedAll") : stringFormatter.format("selectedCount", {
                count: selection.size
              }));
          }
          if (messages.length > 0)
            (0, $2oePb$reactarialiveannouncer.announce)(messages.join(" "));
          lastSelection.current = selection;
        }, [
          selection
        ]);
      }
      function $1eb174acfe8a0f16$var$diffSelection(a, b) {
        let res = /* @__PURE__ */ new Set();
        if (a === "all" || b === "all")
          return res;
        for (let key of a.keys())
          if (!b.has(key))
            res.add(key);
        return res;
      }
      function $340f2fcd0ef9ce8d$export$be42ebdab07ae4c2(props) {
        let stringFormatter = (0, $2oePb$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($085250522aa37816$exports)));
        let modality = (0, $2oePb$reactariainteractions.useInteractionModality)();
        let shouldLongPress = (modality === "pointer" || modality === "virtual" || modality == null) && typeof window !== "undefined" && "ontouchstart" in window;
        let interactionDescription = (0, $2oePb$react.useMemo)(() => {
          let selectionMode = props.selectionManager.selectionMode;
          let selectionBehavior = props.selectionManager.selectionBehavior;
          let message = void 0;
          if (shouldLongPress)
            message = stringFormatter.format("longPressToSelect");
          return selectionBehavior === "replace" && selectionMode !== "none" && props.hasItemActions ? message : void 0;
        }, [
          props.selectionManager.selectionMode,
          props.selectionManager.selectionBehavior,
          props.hasItemActions,
          stringFormatter,
          shouldLongPress
        ]);
        let descriptionProps = (0, $2oePb$reactariautils.useDescription)(interactionDescription);
        return descriptionProps;
      }
      function $11d770dfabe45077$export$f6b86a04e5d66d90(props, state, ref) {
        let { isVirtualized, keyboardDelegate, focusMode, scrollRef, getRowText, onRowAction, onCellAction } = props;
        let { selectionManager: manager } = state;
        if (!props["aria-label"] && !props["aria-labelledby"])
          console.warn("An aria-label or aria-labelledby prop is required for accessibility.");
        let collator = (0, $2oePb$reactariai18n.useCollator)({
          usage: "search",
          sensitivity: "base"
        });
        let { direction } = (0, $2oePb$reactariai18n.useLocale)();
        let disabledBehavior = state.selectionManager.disabledBehavior;
        let delegate = (0, $2oePb$react.useMemo)(() => keyboardDelegate || new (0, $3187c0e19200cb16$export$de9feff04fda126e)({
          collection: state.collection,
          disabledKeys: disabledBehavior === "selection" ? /* @__PURE__ */ new Set() : state.disabledKeys,
          ref,
          direction,
          collator,
          focusMode
        }), [
          keyboardDelegate,
          state.collection,
          state.disabledKeys,
          disabledBehavior,
          ref,
          direction,
          collator,
          focusMode
        ]);
        let { collectionProps } = (0, $2oePb$reactariaselection.useSelectableCollection)({
          ref,
          selectionManager: manager,
          keyboardDelegate: delegate,
          isVirtualized,
          scrollRef
        });
        let id = (0, $2oePb$reactariautils.useId)(props.id);
        (0, $8ee34951196858d0$export$e6235c0d09b995d0).set(state, {
          keyboardDelegate: delegate,
          actions: {
            onRowAction,
            onCellAction
          }
        });
        let descriptionProps = (0, $340f2fcd0ef9ce8d$export$be42ebdab07ae4c2)({
          selectionManager: manager,
          hasItemActions: !!(onRowAction || onCellAction)
        });
        let domProps = (0, $2oePb$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        let onFocus = (0, $2oePb$react.useCallback)((e) => {
          if (manager.isFocused) {
            if (!e.currentTarget.contains(e.target))
              manager.setFocused(false);
            return;
          }
          if (!e.currentTarget.contains(e.target))
            return;
          manager.setFocused(true);
        }, [
          manager
        ]);
        let navDisabledHandlers = (0, $2oePb$react.useMemo)(() => ({
          onBlur: collectionProps.onBlur,
          onFocus
        }), [
          onFocus,
          collectionProps.onBlur
        ]);
        let hasTabbableChild = (0, $2oePb$reactariafocus.useHasTabbableChild)(ref, {
          isDisabled: state.collection.size !== 0
        });
        let gridProps = (0, $2oePb$reactariautils.mergeProps)(
          domProps,
          {
            role: "grid",
            id,
            "aria-multiselectable": manager.selectionMode === "multiple" ? "true" : void 0
          },
          state.isKeyboardNavigationDisabled ? navDisabledHandlers : collectionProps,
          // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.
          state.collection.size === 0 && {
            tabIndex: hasTabbableChild ? -1 : 0
          },
          descriptionProps
        );
        if (isVirtualized) {
          gridProps["aria-rowcount"] = state.collection.size;
          gridProps["aria-colcount"] = state.collection.columnCount;
        }
        (0, $1eb174acfe8a0f16$export$137e594ef3218a10)({
          getRowText
        }, state);
        return {
          gridProps
        };
      }
      function $c7def85a57100898$export$d3037f5d3f3e51bf() {
        return {
          rowGroupProps: {
            role: "rowgroup"
          }
        };
      }
      function $eed398987c639831$export$96357d5a73f686fa(props, state, ref) {
        let { node, isVirtualized, shouldSelectOnPressUp, onAction } = props;
        let { actions: { onRowAction } } = (0, $8ee34951196858d0$export$e6235c0d09b995d0).get(state);
        let _a = (0, $2oePb$reactariaselection.useSelectableItem)({
          selectionManager: state.selectionManager,
          key: node.key,
          ref,
          isVirtualized,
          shouldSelectOnPressUp,
          onAction: onRowAction ? () => onRowAction(node.key) : onAction,
          isDisabled: state.collection.size === 0
        }), { itemProps } = _a, states = __objRest(_a, ["itemProps"]);
        let isSelected = state.selectionManager.isSelected(node.key);
        let rowProps = __spreadValues({
          role: "row",
          "aria-selected": state.selectionManager.selectionMode !== "none" ? isSelected : void 0,
          "aria-disabled": states.isDisabled || void 0
        }, itemProps);
        if (isVirtualized)
          rowProps["aria-rowindex"] = node.index + 1;
        return __spreadValues({
          rowProps
        }, states);
      }
      function $cf2021be63b01ef4$export$c7e10bfc0c59f67c(props, state, ref) {
        let { node, isVirtualized, focusMode = "child", shouldSelectOnPressUp, onAction } = props;
        let { direction } = (0, $2oePb$reactariai18n.useLocale)();
        let { keyboardDelegate, actions: { onCellAction } } = (0, $8ee34951196858d0$export$e6235c0d09b995d0).get(state);
        let keyWhenFocused = (0, $2oePb$react.useRef)(null);
        let focus = () => {
          let treeWalker = (0, $2oePb$reactariafocus.getFocusableTreeWalker)(ref.current);
          if (focusMode === "child") {
            if (ref.current.contains(document.activeElement) && ref.current !== document.activeElement)
              return;
            let focusable = state.selectionManager.childFocusStrategy === "last" ? $cf2021be63b01ef4$var$last(treeWalker) : treeWalker.firstChild();
            if (focusable) {
              (0, $2oePb$reactariafocus.focusSafely)(focusable);
              return;
            }
          }
          if (keyWhenFocused.current != null && node.key !== keyWhenFocused.current || !ref.current.contains(document.activeElement))
            (0, $2oePb$reactariafocus.focusSafely)(ref.current);
        };
        let { itemProps, isPressed } = (0, $2oePb$reactariaselection.useSelectableItem)({
          selectionManager: state.selectionManager,
          key: node.key,
          ref,
          isVirtualized,
          focus,
          shouldSelectOnPressUp,
          onAction: onCellAction ? () => onCellAction(node.key) : onAction,
          isDisabled: state.collection.size === 0
        });
        let onKeyDownCapture = (e) => {
          if (!e.currentTarget.contains(e.target) || state.isKeyboardNavigationDisabled)
            return;
          let walker = (0, $2oePb$reactariafocus.getFocusableTreeWalker)(ref.current);
          walker.currentNode = document.activeElement;
          switch (e.key) {
            case "ArrowLeft": {
              let focusable = direction === "rtl" ? walker.nextNode() : walker.previousNode();
              if (focusMode === "child" && focusable === ref.current)
                focusable = null;
              if (focusable) {
                e.preventDefault();
                e.stopPropagation();
                (0, $2oePb$reactariafocus.focusSafely)(focusable);
                (0, $2oePb$reactariautils.scrollIntoViewport)(focusable, {
                  containingElement: (0, $2oePb$reactariautils.getScrollParent)(ref.current)
                });
              } else {
                let prev = keyboardDelegate.getKeyLeftOf(node.key);
                if (prev !== node.key)
                  break;
                e.preventDefault();
                e.stopPropagation();
                if (focusMode === "cell" && direction === "rtl") {
                  (0, $2oePb$reactariafocus.focusSafely)(ref.current);
                  (0, $2oePb$reactariautils.scrollIntoViewport)(ref.current, {
                    containingElement: (0, $2oePb$reactariautils.getScrollParent)(ref.current)
                  });
                } else {
                  walker.currentNode = ref.current;
                  focusable = direction === "rtl" ? walker.firstChild() : $cf2021be63b01ef4$var$last(walker);
                  if (focusable) {
                    (0, $2oePb$reactariafocus.focusSafely)(focusable);
                    (0, $2oePb$reactariautils.scrollIntoViewport)(focusable, {
                      containingElement: (0, $2oePb$reactariautils.getScrollParent)(ref.current)
                    });
                  }
                }
              }
              break;
            }
            case "ArrowRight": {
              let focusable = direction === "rtl" ? walker.previousNode() : walker.nextNode();
              if (focusMode === "child" && focusable === ref.current)
                focusable = null;
              if (focusable) {
                e.preventDefault();
                e.stopPropagation();
                (0, $2oePb$reactariafocus.focusSafely)(focusable);
                (0, $2oePb$reactariautils.scrollIntoViewport)(focusable, {
                  containingElement: (0, $2oePb$reactariautils.getScrollParent)(ref.current)
                });
              } else {
                let next = keyboardDelegate.getKeyRightOf(node.key);
                if (next !== node.key)
                  break;
                e.preventDefault();
                e.stopPropagation();
                if (focusMode === "cell" && direction === "ltr") {
                  (0, $2oePb$reactariafocus.focusSafely)(ref.current);
                  (0, $2oePb$reactariautils.scrollIntoViewport)(ref.current, {
                    containingElement: (0, $2oePb$reactariautils.getScrollParent)(ref.current)
                  });
                } else {
                  walker.currentNode = ref.current;
                  focusable = direction === "rtl" ? $cf2021be63b01ef4$var$last(walker) : walker.firstChild();
                  if (focusable) {
                    (0, $2oePb$reactariafocus.focusSafely)(focusable);
                    (0, $2oePb$reactariautils.scrollIntoViewport)(focusable, {
                      containingElement: (0, $2oePb$reactariautils.getScrollParent)(ref.current)
                    });
                  }
                }
              }
              break;
            }
            case "ArrowUp":
            case "ArrowDown":
              if (!e.altKey && ref.current.contains(e.target)) {
                e.stopPropagation();
                e.preventDefault();
                ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));
              }
              break;
          }
        };
        let onFocus = (e) => {
          keyWhenFocused.current = node.key;
          if (e.target !== ref.current) {
            if (!(0, $2oePb$reactariainteractions.isFocusVisible)())
              state.selectionManager.setFocusedKey(node.key);
            return;
          }
          requestAnimationFrame(() => {
            if (focusMode === "child" && document.activeElement === ref.current)
              focus();
          });
        };
        let gridCellProps = (0, $2oePb$reactariautils.mergeProps)(itemProps, {
          role: "gridcell",
          onKeyDownCapture,
          onFocus
        });
        var _node_colIndex;
        if (isVirtualized)
          gridCellProps["aria-colindex"] = ((_node_colIndex = node.colIndex) !== null && _node_colIndex !== void 0 ? _node_colIndex : node.index) + 1;
        if (shouldSelectOnPressUp && gridCellProps.tabIndex != null && gridCellProps.onPointerDown == null)
          gridCellProps.onPointerDown = (e) => {
            let el = e.currentTarget;
            let tabindex = el.getAttribute("tabindex");
            el.removeAttribute("tabindex");
            requestAnimationFrame(() => {
              el.setAttribute("tabindex", tabindex);
            });
          };
        return {
          gridCellProps,
          isPressed
        };
      }
      function $cf2021be63b01ef4$var$last(walker) {
        let next;
        let last;
        do {
          last = walker.lastChild();
          if (last)
            next = last;
        } while (last);
        return next;
      }
      function $d8385f73d3701365$export$70e2eed1a92976ad(props, state) {
        let { key } = props;
        let manager = state.selectionManager;
        let checkboxId = (0, $2oePb$reactariautils.useId)();
        let isDisabled = !state.selectionManager.canSelectItem(key);
        let isSelected = state.selectionManager.isSelected(key);
        let onChange = () => manager.select(key);
        const stringFormatter = (0, $2oePb$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($085250522aa37816$exports)));
        return {
          checkboxProps: {
            id: checkboxId,
            "aria-label": stringFormatter.format("select"),
            isSelected,
            isDisabled,
            onChange
          }
        };
      }
    }
  });

  // node_modules/@react-aria/table/dist/main.js
  var require_main41 = __commonJS({
    "node_modules/@react-aria/table/dist/main.js"(exports, module) {
      var $kJQf8$reactariagrid = require_main40();
      var $kJQf8$reactarialiveannouncer = require_main39();
      var $kJQf8$reactariautils = require_main7();
      var $kJQf8$react = require_react();
      var $kJQf8$reactstatelyflags = require_main36();
      var $kJQf8$reactariai18n = require_main10();
      var $kJQf8$reactstatelycollections = require_main15();
      var $kJQf8$reactariafocus = require_main12();
      var $kJQf8$reactariainteractions = require_main11();
      var $kJQf8$reactariavisuallyhidden = require_main13();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      function $parcel$interopDefault(a) {
        return a && a.__esModule ? a.default : a;
      }
      $parcel$export(module.exports, "useTableRowGroup", () => $cd66afe5decb6adb$export$6fb1613bd7b28198);
      $parcel$export(module.exports, "useTable", () => $25d14c0f8fad722e$export$25bceaac3c7e4dc7);
      $parcel$export(module.exports, "useTableColumnHeader", () => $7669c34a63ef0113$export$9514819a8c81e960);
      $parcel$export(module.exports, "useTableRow", () => $10b2115217af7c93$export$7f2f6ae19e707aa5);
      $parcel$export(module.exports, "useTableHeaderRow", () => $eb16c38321a72835$export$1b95a7d2d517b841);
      $parcel$export(module.exports, "useTableCell", () => $32387a1f2c61cda2$export$49571c903d73624c);
      $parcel$export(module.exports, "useTableSelectionCheckbox", () => $0b394e4562ac57c9$export$16ea7f650bd7c1bb);
      $parcel$export(module.exports, "useTableSelectAllCheckbox", () => $0b394e4562ac57c9$export$1003db6a7e384b99);
      $parcel$export(module.exports, "useTableColumnResize", () => $16d645f9e2153641$export$52994e973806c219);
      var $6acf696f746f932c$export$552312adfd451dab = /* @__PURE__ */ new WeakMap();
      function $6acf696f746f932c$var$normalizeKey(key) {
        if (typeof key === "string")
          return key.replace(/\s*/g, "");
        return "" + key;
      }
      function $6acf696f746f932c$export$37cd4213f2ad742e(state, columnKey) {
        let gridId = $6acf696f746f932c$export$552312adfd451dab.get(state);
        if (!gridId)
          throw new Error("Unknown grid");
        return `${gridId}-${$6acf696f746f932c$var$normalizeKey(columnKey)}`;
      }
      function $6acf696f746f932c$export$19baff3266315d44(state, rowKey, columnKey) {
        let gridId = $6acf696f746f932c$export$552312adfd451dab.get(state);
        if (!gridId)
          throw new Error("Unknown grid");
        return `${gridId}-${$6acf696f746f932c$var$normalizeKey(rowKey)}-${$6acf696f746f932c$var$normalizeKey(columnKey)}`;
      }
      function $6acf696f746f932c$export$85069b70317f543(state, rowKey) {
        return [
          ...state.collection.rowHeaderColumnKeys
        ].map((columnKey) => $6acf696f746f932c$export$19baff3266315d44(state, rowKey, columnKey)).join(" ");
      }
      var $7ff3f66df3873a5e$exports = {};
      var $ca0f93ae476efcee$exports = {};
      $ca0f93ae476efcee$exports = {
        "ascending": `\u062A\u0635\u0627\u0639\u062F\u064A`,
        "ascendingSort": (args) => `\u062A\u0631\u062A\u064A\u0628 \u062D\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u062F ${args.columnName} \u0628\u062A\u0631\u062A\u064A\u0628 \u062A\u0635\u0627\u0639\u062F\u064A`,
        "columnSize": (args) => `${args.value} \u0628\u0627\u0644\u0628\u0643\u0633\u0644`,
        "descending": `\u062A\u0646\u0627\u0632\u0644\u064A`,
        "descendingSort": (args) => `\u062A\u0631\u062A\u064A\u0628 \u062D\u0633\u0628 \u0627\u0644\u0639\u0645\u0648\u062F ${args.columnName} \u0628\u062A\u0631\u062A\u064A\u0628 \u062A\u0646\u0627\u0632\u0644\u064A`,
        "resizerDescription": `\u0627\u0636\u063A\u0637 \u0639\u0644\u0649 \u0645\u0641\u062A\u0627\u062D Enter \u0644\u0628\u062F\u0621 \u062A\u063A\u064A\u064A\u0631 \u0627\u0644\u062D\u062C\u0645`,
        "select": `\u062A\u062D\u062F\u064A\u062F`,
        "selectAll": `\u062A\u062D\u062F\u064A\u062F \u0627\u0644\u0643\u0644`,
        "sortable": `\u0639\u0645\u0648\u062F \u0642\u0627\u0628\u0644 \u0644\u0644\u062A\u0631\u062A\u064A\u0628`
      };
      var $8fcf86b24fd399a9$exports = {};
      $8fcf86b24fd399a9$exports = {
        "ascending": `\u0432\u044A\u0437\u0445\u043E\u0434\u044F\u0449`,
        "ascendingSort": (args) => `\u0441\u043E\u0440\u0442\u0438\u0440\u0430\u043D\u043E \u043F\u043E \u043A\u043E\u043B\u043E\u043D\u0430 ${args.columnName} \u0432\u044A\u0432 \u0432\u044A\u0437\u0445\u043E\u0434\u044F\u0449 \u0440\u0435\u0434`,
        "columnSize": (args) => `${args.value} \u043F\u0438\u043A\u0441\u0435\u043B\u0430`,
        "descending": `\u043D\u0438\u0437\u0445\u043E\u0434\u044F\u0449`,
        "descendingSort": (args) => `\u0441\u043E\u0440\u0442\u0438\u0440\u0430\u043D\u043E \u043F\u043E \u043A\u043E\u043B\u043E\u043D\u0430 ${args.columnName} \u0432 \u043D\u0438\u0437\u0445\u043E\u0434\u044F\u0449 \u0440\u0435\u0434`,
        "resizerDescription": `\u041D\u0430\u0442\u0438\u0441\u043D\u0435\u0442\u0435 \u201EEnter\u201C, \u0437\u0430 \u0434\u0430 \u0437\u0430\u043F\u043E\u0447\u043D\u0435\u0442\u0435 \u0434\u0430 \u043F\u0440\u0435\u043E\u0440\u0430\u0437\u043C\u0435\u0440\u044F\u0432\u0430\u0442\u0435`,
        "select": `\u0418\u0437\u0431\u0435\u0440\u0435\u0442\u0435`,
        "selectAll": `\u0418\u0437\u0431\u0435\u0440\u0435\u0442\u0435 \u0432\u0441\u0438\u0447\u043A\u043E`,
        "sortable": `\u0441\u043E\u0440\u0442\u0438\u0440\u0430\u0449\u0430 \u043A\u043E\u043B\u043E\u043D\u0430`
      };
      var $146712099a722811$exports = {};
      $146712099a722811$exports = {
        "ascending": `vzestupn\u011B`,
        "ascendingSort": (args) => `\u0159azeno vzestupn\u011B podle sloupce ${args.columnName}`,
        "columnSize": (args) => `${args.value} pixel\u016F`,
        "descending": `sestupn\u011B`,
        "descendingSort": (args) => `\u0159azeno sestupn\u011B podle sloupce ${args.columnName}`,
        "resizerDescription": `Stisknut\xEDm kl\xE1vesy Enter za\u010Dnete m\u011Bnit velikost`,
        "select": `Vybrat`,
        "selectAll": `Vybrat v\u0161e`,
        "sortable": `sloupec s mo\u017Enost\xED \u0159azen\xED`
      };
      var $2735c96991aebe53$exports = {};
      $2735c96991aebe53$exports = {
        "ascending": `stigende`,
        "ascendingSort": (args) => `sorteret efter kolonne ${args.columnName} i stigende r\xE6kkef\xF8lge`,
        "columnSize": (args) => `${args.value} pixels`,
        "descending": `faldende`,
        "descendingSort": (args) => `sorteret efter kolonne ${args.columnName} i faldende r\xE6kkef\xF8lge`,
        "resizerDescription": `Tryk p\xE5 Enter for at \xE6ndre st\xF8rrelse`,
        "select": `V\xE6lg`,
        "selectAll": `V\xE6lg alle`,
        "sortable": `sorterbar kolonne`
      };
      var $d85ed0c826146b1e$exports = {};
      $d85ed0c826146b1e$exports = {
        "ascending": `aufsteigend`,
        "ascendingSort": (args) => `sortiert nach Spalte ${args.columnName} in aufsteigender Reihenfolge`,
        "columnSize": (args) => `${args.value} Pixel`,
        "descending": `absteigend`,
        "descendingSort": (args) => `sortiert nach Spalte ${args.columnName} in absteigender Reihenfolge`,
        "resizerDescription": `Eingabetaste zum Starten der Gr\xF6\xDFen\xE4nderung dr\xFCcken`,
        "select": `Ausw\xE4hlen`,
        "selectAll": `Alles ausw\xE4hlen`,
        "sortable": `sortierbare Spalte`
      };
      var $1aecf8df24cd2c6e$exports = {};
      $1aecf8df24cd2c6e$exports = {
        "ascending": `\u03B1\u03CD\u03BE\u03BF\u03C5\u03C3\u03B1`,
        "ascendingSort": (args) => `\u03B4\u03B9\u03B1\u03BB\u03BF\u03B3\u03AE \u03B1\u03BD\u03AC \u03C3\u03C4\u03AE\u03BB\u03B7 ${args.columnName} \u03C3\u03B5 \u03B1\u03CD\u03BE\u03BF\u03C5\u03C3\u03B1 \u03C3\u03B5\u03B9\u03C1\u03AC`,
        "columnSize": (args) => `${args.value} pixel`,
        "descending": `\u03C6\u03B8\u03AF\u03BD\u03BF\u03C5\u03C3\u03B1`,
        "descendingSort": (args) => `\u03B4\u03B9\u03B1\u03BB\u03BF\u03B3\u03AE \u03B1\u03BD\u03AC \u03C3\u03C4\u03AE\u03BB\u03B7 ${args.columnName} \u03C3\u03B5 \u03C6\u03B8\u03AF\u03BD\u03BF\u03C5\u03C3\u03B1 \u03C3\u03B5\u03B9\u03C1\u03AC`,
        "resizerDescription": `\u03A0\u03B1\u03C4\u03AE\u03C3\u03C4\u03B5 Enter \u03B3\u03B9\u03B1 \u03AD\u03BD\u03B1\u03C1\u03BE\u03B7 \u03C4\u03B7\u03C2 \u03B1\u03BB\u03BB\u03B1\u03B3\u03AE\u03C2 \u03BC\u03B5\u03B3\u03AD\u03B8\u03BF\u03C5\u03C2`,
        "select": `\u0395\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE`,
        "selectAll": `\u0395\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE \u03CC\u03BB\u03C9\u03BD`,
        "sortable": `\u03A3\u03C4\u03AE\u03BB\u03B7 \u03B4\u03B9\u03B1\u03BB\u03BF\u03B3\u03AE\u03C2`
      };
      var $8629e38d73986227$exports = {};
      $8629e38d73986227$exports = {
        "select": `Select`,
        "selectAll": `Select All`,
        "sortable": `sortable column`,
        "ascending": `ascending`,
        "descending": `descending`,
        "ascendingSort": (args) => `sorted by column ${args.columnName} in ascending order`,
        "descendingSort": (args) => `sorted by column ${args.columnName} in descending order`,
        "columnSize": (args) => `${args.value} pixels`,
        "resizerDescription": `Press Enter to start resizing`
      };
      var $219ef73190fd7b54$exports = {};
      $219ef73190fd7b54$exports = {
        "ascending": `de subida`,
        "ascendingSort": (args) => `ordenado por columna ${args.columnName} en orden de subida`,
        "columnSize": (args) => `${args.value} p\xEDxeles`,
        "descending": `de bajada`,
        "descendingSort": (args) => `ordenado por columna ${args.columnName} en orden de bajada`,
        "resizerDescription": `Pulse Intro para empezar a redimensionar`,
        "select": `Seleccionar`,
        "selectAll": `Seleccionar todos`,
        "sortable": `columna ordenable`
      };
      var $28e4d12b64c559fe$exports = {};
      $28e4d12b64c559fe$exports = {
        "ascending": `t\xF5usev j\xE4rjestus`,
        "ascendingSort": (args) => `sorditud veeru j\xE4rgi ${args.columnName} t\xF5usvas j\xE4rjestuses`,
        "columnSize": (args) => `${args.value} pikslit`,
        "descending": `laskuv j\xE4rjestus`,
        "descendingSort": (args) => `sorditud veeru j\xE4rgi ${args.columnName} laskuvas j\xE4rjestuses`,
        "resizerDescription": `Suuruse muutmise alustamiseks vajutage klahvi Enter`,
        "select": `Vali`,
        "selectAll": `Vali k\xF5ik`,
        "sortable": `sorditav veerg`
      };
      var $d443cdd0bb14863a$exports = {};
      $d443cdd0bb14863a$exports = {
        "ascending": `nouseva`,
        "ascendingSort": (args) => `lajiteltu sarakkeen ${args.columnName} mukaan nousevassa j\xE4rjestyksess\xE4`,
        "columnSize": (args) => `${args.value} pikseli\xE4`,
        "descending": `laskeva`,
        "descendingSort": (args) => `lajiteltu sarakkeen ${args.columnName} mukaan laskevassa j\xE4rjestyksess\xE4`,
        "resizerDescription": `Aloita koon muutos painamalla Enter-n\xE4pp\xE4int\xE4`,
        "select": `Valitse`,
        "selectAll": `Valitse kaikki`,
        "sortable": `lajiteltava sarake`
      };
      var $e7b61bd0e93b97c5$exports = {};
      $e7b61bd0e93b97c5$exports = {
        "ascending": `croissant`,
        "ascendingSort": (args) => `tri\xE9 en fonction de la colonne\xA0${args.columnName} par ordre croissant`,
        "columnSize": (args) => `${args.value}\xA0pixels`,
        "descending": `d\xE9croissant`,
        "descendingSort": (args) => `tri\xE9 en fonction de la colonne\xA0${args.columnName} par ordre d\xE9croissant`,
        "resizerDescription": `Appuyez sur Entr\xE9e pour commencer le redimensionnement.`,
        "select": `S\xE9lectionner`,
        "selectAll": `S\xE9lectionner tout`,
        "sortable": `colonne triable`
      };
      var $b09d12ffa0a56a3e$exports = {};
      $b09d12ffa0a56a3e$exports = {
        "ascending": `\u05E2\u05D5\u05DC\u05D4`,
        "ascendingSort": (args) => `\u05DE\u05D5\u05D9\u05DF \u05DC\u05E4\u05D9 \u05E2\u05DE\u05D5\u05D3\u05D4 ${args.columnName} \u05D1\u05E1\u05D3\u05E8 \u05E2\u05D5\u05DC\u05D4`,
        "columnSize": (args) => `${args.value} \u05E4\u05D9\u05E7\u05E1\u05DC\u05D9\u05DD`,
        "descending": `\u05D9\u05D5\u05E8\u05D3`,
        "descendingSort": (args) => `\u05DE\u05D5\u05D9\u05DF \u05DC\u05E4\u05D9 \u05E2\u05DE\u05D5\u05D3\u05D4 ${args.columnName} \u05D1\u05E1\u05D3\u05E8 \u05D9\u05D5\u05E8\u05D3`,
        "resizerDescription": `\u05D4\u05E7\u05E9 Enter \u05DB\u05D3\u05D9 \u05DC\u05E9\u05E0\u05D5\u05EA \u05D0\u05EA \u05D4\u05D2\u05D5\u05D3\u05DC`,
        "select": `\u05D1\u05D7\u05E8`,
        "selectAll": `\u05D1\u05D7\u05E8 \u05D4\u05DB\u05D5\u05DC`,
        "sortable": `\u05E2\u05DE\u05D5\u05D3\u05D4 \u05E9\u05E0\u05D9\u05EA\u05DF \u05DC\u05DE\u05D9\u05D9\u05DF`
      };
      var $c3d9f76f15300329$exports = {};
      $c3d9f76f15300329$exports = {
        "ascending": `rastu\u0107i`,
        "ascendingSort": (args) => `razvrstano po stupcima ${args.columnName} rastu\u0107em redoslijedom`,
        "columnSize": (args) => `${args.value} piksela`,
        "descending": `padaju\u0107i`,
        "descendingSort": (args) => `razvrstano po stupcima ${args.columnName} padaju\u0107im redoslijedom`,
        "resizerDescription": `Pritisnite Enter da biste zapo\u010Deli promenu veli\u010Dine`,
        "select": `Odaberite`,
        "selectAll": `Odaberite sve`,
        "sortable": `stupac koji se mo\u017Ee razvrstati`
      };
      var $9904561a995a328e$exports = {};
      $9904561a995a328e$exports = {
        "ascending": `n\xF6vekv\u0151`,
        "ascendingSort": (args) => `rendezve a(z) ${args.columnName} oszlop szerint, n\xF6vekv\u0151 sorrendben`,
        "columnSize": (args) => `${args.value} k\xE9ppont`,
        "descending": `cs\xF6kken\u0151`,
        "descendingSort": (args) => `rendezve a(z) ${args.columnName} oszlop szerint, cs\xF6kken\u0151 sorrendben`,
        "resizerDescription": `Nyomja le az Enter billenty\u0171t az \xE1tm\xE9retez\xE9s megkezd\xE9s\xE9hez`,
        "select": `Kijel\xF6l\xE9s`,
        "selectAll": `\xD6sszes kijel\xF6l\xE9se`,
        "sortable": `rendezend\u0151 oszlop`
      };
      var $b63a88a974650d19$exports = {};
      $b63a88a974650d19$exports = {
        "ascending": `crescente`,
        "ascendingSort": (args) => `in ordine crescente in base alla colonna ${args.columnName}`,
        "columnSize": (args) => `${args.value} pixel`,
        "descending": `decrescente`,
        "descendingSort": (args) => `in ordine decrescente in base alla colonna ${args.columnName}`,
        "resizerDescription": `Premi Invio per iniziare a ridimensionare`,
        "select": `Seleziona`,
        "selectAll": `Seleziona tutto`,
        "sortable": `colonna ordinabile`
      };
      var $f79114b6f7838962$exports = {};
      $f79114b6f7838962$exports = {
        "ascending": `\u6607\u9806`,
        "ascendingSort": (args) => `\u5217 ${args.columnName} \u3092\u6607\u9806\u3067\u4E26\u3079\u66FF\u3048`,
        "columnSize": (args) => `${args.value} \u30D4\u30AF\u30BB\u30EB`,
        "descending": `\u964D\u9806`,
        "descendingSort": (args) => `\u5217 ${args.columnName} \u3092\u964D\u9806\u3067\u4E26\u3079\u66FF\u3048`,
        "resizerDescription": `Enter \u30AD\u30FC\u3092\u62BC\u3057\u3066\u30B5\u30A4\u30BA\u5909\u66F4\u3092\u958B\u59CB`,
        "select": `\u9078\u629E`,
        "selectAll": `\u3059\u3079\u3066\u9078\u629E`,
        "sortable": `\u4E26\u3079\u66FF\u3048\u53EF\u80FD\u306A\u5217`
      };
      var $305e358db516b233$exports = {};
      $305e358db516b233$exports = {
        "ascending": `\uC624\uB984\uCC28\uC21C`,
        "ascendingSort": (args) => `${args.columnName} \uC5F4\uC744 \uAE30\uC900\uC73C\uB85C \uC624\uB984\uCC28\uC21C\uC73C\uB85C \uC815\uB82C\uB428`,
        "columnSize": (args) => `${args.value} \uD53D\uC140`,
        "descending": `\uB0B4\uB9BC\uCC28\uC21C`,
        "descendingSort": (args) => `${args.columnName} \uC5F4\uC744 \uAE30\uC900\uC73C\uB85C \uB0B4\uB9BC\uCC28\uC21C\uC73C\uB85C \uC815\uB82C\uB428`,
        "resizerDescription": `\uD06C\uAE30 \uC870\uC815\uC744 \uC2DC\uC791\uD558\uB824\uBA74 Enter\uB97C \uB204\uB974\uC138\uC694.`,
        "select": `\uC120\uD0DD`,
        "selectAll": `\uBAA8\uB450 \uC120\uD0DD`,
        "sortable": `\uC815\uB82C \uAC00\uB2A5\uD55C \uC5F4`
      };
      var $c37a95c245032ee0$exports = {};
      $c37a95c245032ee0$exports = {
        "ascending": `did\u0117jan\u010Dia tvarka`,
        "ascendingSort": (args) => `surikiuota pagal stulpel\u012F ${args.columnName} did\u0117jan\u010Dia tvarka`,
        "columnSize": (args) => `${args.value} piks.`,
        "descending": `ma\u017E\u0117jan\u010Dia tvarka`,
        "descendingSort": (args) => `surikiuota pagal stulpel\u012F ${args.columnName} ma\u017E\u0117jan\u010Dia tvarka`,
        "resizerDescription": `Paspauskite \u201EEnter\u201C, kad prad\u0117tum\u0117te keisti dyd\u012F`,
        "select": `Pasirinkti`,
        "selectAll": `Pasirinkti visk\u0105`,
        "sortable": `rikiuojamas stulpelis`
      };
      var $0d99b6662f72a76d$exports = {};
      $0d99b6662f72a76d$exports = {
        "ascending": `augo\u0161\u0101 sec\u012Bb\u0101`,
        "ascendingSort": (args) => `k\u0101rtots p\u0113c kolonnas ${args.columnName} augo\u0161\u0101 sec\u012Bb\u0101`,
        "columnSize": (args) => `${args.value} pikse\u013Ci`,
        "descending": `dilsto\u0161\u0101 sec\u012Bb\u0101`,
        "descendingSort": (args) => `k\u0101rtots p\u0113c kolonnas ${args.columnName} dilsto\u0161\u0101 sec\u012Bb\u0101`,
        "resizerDescription": `Nospiediet Enter, lai s\u0101ktu izm\u0113ru main\u012B\u0161anu`,
        "select": `Atlas\u012Bt`,
        "selectAll": `Atlas\u012Bt visu`,
        "sortable": `k\u0101rtojam\u0101 kolonna`
      };
      var $b350dd154e1c203e$exports = {};
      $b350dd154e1c203e$exports = {
        "ascending": `stigende`,
        "ascendingSort": (args) => `sortert etter kolonne ${args.columnName} i stigende rekkef\xF8lge`,
        "columnSize": (args) => `${args.value} piksler`,
        "descending": `synkende`,
        "descendingSort": (args) => `sortert etter kolonne ${args.columnName} i synkende rekkef\xF8lge`,
        "resizerDescription": `Trykk p\xE5 Enter for \xE5 starte st\xF8rrelsesendring`,
        "select": `Velg`,
        "selectAll": `Velg alle`,
        "sortable": `kolonne som kan sorteres`
      };
      var $94dcc10598f2ecbe$exports = {};
      $94dcc10598f2ecbe$exports = {
        "ascending": `oplopend`,
        "ascendingSort": (args) => `gesorteerd in oplopende volgorde in kolom ${args.columnName}`,
        "columnSize": (args) => `${args.value} pixels`,
        "descending": `aflopend`,
        "descendingSort": (args) => `gesorteerd in aflopende volgorde in kolom ${args.columnName}`,
        "resizerDescription": `Druk op Enter om het formaat te wijzigen`,
        "select": `Selecteren`,
        "selectAll": `Alles selecteren`,
        "sortable": `sorteerbare kolom`
      };
      var $847263ec44d85feb$exports = {};
      $847263ec44d85feb$exports = {
        "ascending": `rosn\u0105co`,
        "ascendingSort": (args) => `posortowano wed\u0142ug kolumny ${args.columnName} w porz\u0105dku rosn\u0105cym`,
        "columnSize": (args) => `Liczba pikseli: ${args.value}`,
        "descending": `malej\u0105co`,
        "descendingSort": (args) => `posortowano wed\u0142ug kolumny ${args.columnName} w porz\u0105dku malej\u0105cym`,
        "resizerDescription": `Naci\u015Bnij Enter, aby rozpocz\u0105\u0107 zmienianie rozmiaru`,
        "select": `Zaznacz`,
        "selectAll": `Zaznacz wszystko`,
        "sortable": `kolumna z mo\u017Cliwo\u015Bci\u0105 sortowania`
      };
      var $649f25af616381b6$exports = {};
      $649f25af616381b6$exports = {
        "ascending": `crescente`,
        "ascendingSort": (args) => `classificado pela coluna ${args.columnName} em ordem crescente`,
        "columnSize": (args) => `${args.value} pixels`,
        "descending": `decrescente`,
        "descendingSort": (args) => `classificado pela coluna ${args.columnName} em ordem decrescente`,
        "resizerDescription": `Pressione Enter para come\xE7ar a redimensionar`,
        "select": `Selecionar`,
        "selectAll": `Selecionar tudo`,
        "sortable": `coluna classific\xE1vel`
      };
      var $63863f752f22090b$exports = {};
      $63863f752f22090b$exports = {
        "ascending": `ascendente`,
        "ascendingSort": (args) => `Ordenar por coluna ${args.columnName} em ordem ascendente`,
        "columnSize": (args) => `${args.value} pixels`,
        "descending": `descendente`,
        "descendingSort": (args) => `Ordenar por coluna ${args.columnName} em ordem descendente`,
        "resizerDescription": `Prima Enter para iniciar o redimensionamento`,
        "select": `Selecionar`,
        "selectAll": `Selecionar tudo`,
        "sortable": `Coluna orden\xE1vel`
      };
      var $1011caef6838d0cf$exports = {};
      $1011caef6838d0cf$exports = {
        "ascending": `cresc\u0103toare`,
        "ascendingSort": (args) => `sortate dup\u0103 coloana ${args.columnName} \xEEn ordine cresc\u0103toare`,
        "columnSize": (args) => `${args.value} pixeli`,
        "descending": `descresc\u0103toare`,
        "descendingSort": (args) => `sortate dup\u0103 coloana ${args.columnName} \xEEn ordine descresc\u0103toare`,
        "resizerDescription": `Ap\u0103sa\u021Bi pe Enter pentru a \xEEncepe redimensionarea`,
        "select": `Selectare`,
        "selectAll": `Selectare total\u0103`,
        "sortable": `coloan\u0103 sortabil\u0103`
      };
      var $5c0e71883f016b2f$exports = {};
      $5c0e71883f016b2f$exports = {
        "ascending": `\u0432\u043E\u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\u0435`,
        "ascendingSort": (args) => `\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0442\u043E\u043B\u0431\u0435\u0446 ${args.columnName} \u0432 \u043F\u043E\u0440\u044F\u0434\u043A\u0435 \u0432\u043E\u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\u044F`,
        "columnSize": (args) => `${args.value} \u043F\u0438\u043A\u0441.`,
        "descending": `\u0443\u0431\u044B\u0432\u0430\u043D\u0438\u0435`,
        "descendingSort": (args) => `\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u0442\u043E\u043B\u0431\u0435\u0446 ${args.columnName} \u0432 \u043F\u043E\u0440\u044F\u0434\u043A\u0435 \u0443\u0431\u044B\u0432\u0430\u043D\u0438\u044F`,
        "resizerDescription": `\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u043A\u043B\u0430\u0432\u0438\u0448\u0443 Enter \u0434\u043B\u044F \u043D\u0430\u0447\u0430\u043B\u0430 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F \u0440\u0430\u0437\u043C\u0435\u0440\u043E\u0432`,
        "select": `\u0412\u044B\u0431\u0440\u0430\u0442\u044C`,
        "selectAll": `\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0432\u0441\u0435`,
        "sortable": `\u0441\u043E\u0440\u0442\u0438\u0440\u0443\u0435\u043C\u044B\u0439 \u0441\u0442\u043E\u043B\u0431\u0435\u0446`
      };
      var $9799788df99a536e$exports = {};
      $9799788df99a536e$exports = {
        "ascending": `vzostupne`,
        "ascendingSort": (args) => `zoraden\xE9 zostupne pod\u013Ea st\u013Apca ${args.columnName}`,
        "columnSize": (args) => `Po\u010Det pixelov: ${args.value}`,
        "descending": `zostupne`,
        "descendingSort": (args) => `zoraden\xE9 zostupne pod\u013Ea st\u013Apca ${args.columnName}`,
        "resizerDescription": `Stla\u010Den\xEDm kl\xE1vesu Enter za\u010Dnete zmenu ve\u013Ekosti`,
        "select": `Vybra\u0165`,
        "selectAll": `Vybra\u0165 v\u0161etko`,
        "sortable": `zoradite\u013En\xFD st\u013Apec`
      };
      var $79bf9bea0e0b8579$exports = {};
      $79bf9bea0e0b8579$exports = {
        "ascending": `nara\u0161\u010Dajo\u010De`,
        "ascendingSort": (args) => `razvr\u0161\u010Deno po stolpcu ${args.columnName} v nara\u0161\u010Dajo\u010Dem vrstnem redu`,
        "columnSize": (args) => `${args.value} slikovnih pik`,
        "descending": `padajo\u010De`,
        "descendingSort": (args) => `razvr\u0161\u010Deno po stolpcu ${args.columnName} v padajo\u010Dem vrstnem redu`,
        "resizerDescription": `Pritisnite tipko Enter da za\u010Dnete spreminjati velikost`,
        "select": `Izberite`,
        "selectAll": `Izberite vse`,
        "sortable": `razvrstljivi stolpec`
      };
      var $374736afc1a4c11c$exports = {};
      $374736afc1a4c11c$exports = {
        "ascending": `rastu\u0107i`,
        "ascendingSort": (args) => `sortirano po kolonama ${args.columnName} padaju\u0107im redosledom`,
        "columnSize": (args) => `${args.value} piksela`,
        "descending": `padaju\u0107i`,
        "descendingSort": (args) => `sortirano po kolonama ${args.columnName} padaju\u0107im redosledom`,
        "resizerDescription": `Pritisnite Enter da biste zapo\u010Deli promenu veli\u010Dine`,
        "select": `Izaberite`,
        "selectAll": `Izaberite sve`,
        "sortable": `kolona koja se mo\u017Ee sortirati`
      };
      var $948317bce9061901$exports = {};
      $948317bce9061901$exports = {
        "ascending": `stigande`,
        "ascendingSort": (args) => `sorterat p\xE5 kolumn ${args.columnName} i stigande ordning`,
        "columnSize": (args) => `${args.value} pixlar`,
        "descending": `fallande`,
        "descendingSort": (args) => `sorterat p\xE5 kolumn ${args.columnName} i fallande ordning`,
        "resizerDescription": `Tryck p\xE5 Retur f\xF6r att b\xF6rja \xE4ndra storlek`,
        "select": `Markera`,
        "selectAll": `Markera allt`,
        "sortable": `sorterbar kolumn`
      };
      var $73e2289d5a9ac4de$exports = {};
      $73e2289d5a9ac4de$exports = {
        "ascending": `artan s\u0131rada`,
        "ascendingSort": (args) => `${args.columnName} s\xFCtuna g\xF6re artan d\xFCzende s\u0131rala`,
        "columnSize": (args) => `${args.value} piksel`,
        "descending": `azalan s\u0131rada`,
        "descendingSort": (args) => `${args.columnName} s\xFCtuna g\xF6re azalan d\xFCzende s\u0131rala`,
        "resizerDescription": `Yeniden boyutland\u0131rmak i\xE7in Enter'a bas\u0131n`,
        "select": `Se\xE7`,
        "selectAll": `T\xFCm\xFCn\xFC Se\xE7`,
        "sortable": `S\u0131ralanabilir s\xFCtun`
      };
      var $aca57efccc60ebb1$exports = {};
      $aca57efccc60ebb1$exports = {
        "ascending": `\u0432\u0438\u0441\u0445\u0456\u0434\u043D\u0438\u0439`,
        "ascendingSort": (args) => `\u0432\u0456\u0434\u0441\u043E\u0440\u0442\u043E\u0432\u0430\u043D\u043E \u0437\u0430 \u0441\u0442\u043E\u0432\u043F\u0446\u0435\u043C ${args.columnName} \u0443 \u0432\u0438\u0441\u0445\u0456\u0434\u043D\u043E\u043C\u0443 \u043F\u043E\u0440\u044F\u0434\u043A\u0443`,
        "columnSize": (args) => `${args.value} \u043F\u0456\u043A\u0441.`,
        "descending": `\u043D\u0438\u0437\u0445\u0456\u0434\u043D\u0438\u0439`,
        "descendingSort": (args) => `\u0432\u0456\u0434\u0441\u043E\u0440\u0442\u043E\u0432\u0430\u043D\u043E \u0437\u0430 \u0441\u0442\u043E\u0432\u043F\u0446\u0435\u043C ${args.columnName} \u0443 \u043D\u0438\u0437\u0445\u0456\u0434\u043D\u043E\u043C\u0443 \u043F\u043E\u0440\u044F\u0434\u043A\u0443`,
        "resizerDescription": `\u041D\u0430\u0442\u0438\u0441\u043D\u0456\u0442\u044C Enter, \u0449\u043E\u0431 \u043F\u043E\u0447\u0430\u0442\u0438 \u0437\u043C\u0456\u043D\u0443 \u0440\u043E\u0437\u043C\u0456\u0440\u0443`,
        "select": `\u0412\u0438\u0431\u0440\u0430\u0442\u0438`,
        "selectAll": `\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0432\u0441\u0435`,
        "sortable": `\u0441\u043E\u0440\u0442\u0443\u0432\u0430\u043B\u044C\u043D\u0438\u0439 \u0441\u0442\u043E\u0432\u043F\u0435\u0446\u044C`
      };
      var $ccd86abad329f871$exports = {};
      $ccd86abad329f871$exports = {
        "ascending": `\u5347\u5E8F`,
        "ascendingSort": (args) => `\u6309\u5217 ${args.columnName} \u5347\u5E8F\u6392\u5E8F`,
        "columnSize": (args) => `${args.value} \u50CF\u7D20`,
        "descending": `\u964D\u5E8F`,
        "descendingSort": (args) => `\u6309\u5217 ${args.columnName} \u964D\u5E8F\u6392\u5E8F`,
        "resizerDescription": `\u6309\u201C\u8F93\u5165\u201D\u952E\u5F00\u59CB\u8C03\u6574\u5927\u5C0F\u3002`,
        "select": `\u9009\u62E9`,
        "selectAll": `\u5168\u9009`,
        "sortable": `\u53EF\u6392\u5E8F\u7684\u5217`
      };
      var $ad6eb5efb83fe2f8$exports = {};
      $ad6eb5efb83fe2f8$exports = {
        "ascending": `\u905E\u589E`,
        "ascendingSort": (args) => `\u5DF2\u4F9D\u64DA\u300C${args.columnName}\u300D\u6B04\u905E\u589E\u6392\u5E8F`,
        "columnSize": (args) => `${args.value} \u50CF\u7D20`,
        "descending": `\u905E\u6E1B`,
        "descendingSort": (args) => `\u5DF2\u4F9D\u64DA\u300C${args.columnName}\u300D\u6B04\u905E\u6E1B\u6392\u5E8F`,
        "resizerDescription": `\u6309 Enter \u9375\u4EE5\u958B\u59CB\u8ABF\u6574\u5927\u5C0F`,
        "select": `\u9078\u53D6`,
        "selectAll": `\u5168\u9078`,
        "sortable": `\u53EF\u6392\u5E8F\u7684\u6B04`
      };
      $7ff3f66df3873a5e$exports = {
        "ar-AE": $ca0f93ae476efcee$exports,
        "bg-BG": $8fcf86b24fd399a9$exports,
        "cs-CZ": $146712099a722811$exports,
        "da-DK": $2735c96991aebe53$exports,
        "de-DE": $d85ed0c826146b1e$exports,
        "el-GR": $1aecf8df24cd2c6e$exports,
        "en-US": $8629e38d73986227$exports,
        "es-ES": $219ef73190fd7b54$exports,
        "et-EE": $28e4d12b64c559fe$exports,
        "fi-FI": $d443cdd0bb14863a$exports,
        "fr-FR": $e7b61bd0e93b97c5$exports,
        "he-IL": $b09d12ffa0a56a3e$exports,
        "hr-HR": $c3d9f76f15300329$exports,
        "hu-HU": $9904561a995a328e$exports,
        "it-IT": $b63a88a974650d19$exports,
        "ja-JP": $f79114b6f7838962$exports,
        "ko-KR": $305e358db516b233$exports,
        "lt-LT": $c37a95c245032ee0$exports,
        "lv-LV": $0d99b6662f72a76d$exports,
        "nb-NO": $b350dd154e1c203e$exports,
        "nl-NL": $94dcc10598f2ecbe$exports,
        "pl-PL": $847263ec44d85feb$exports,
        "pt-BR": $649f25af616381b6$exports,
        "pt-PT": $63863f752f22090b$exports,
        "ro-RO": $1011caef6838d0cf$exports,
        "ru-RU": $5c0e71883f016b2f$exports,
        "sk-SK": $9799788df99a536e$exports,
        "sl-SI": $79bf9bea0e0b8579$exports,
        "sr-SP": $374736afc1a4c11c$exports,
        "sv-SE": $948317bce9061901$exports,
        "tr-TR": $73e2289d5a9ac4de$exports,
        "uk-UA": $aca57efccc60ebb1$exports,
        "zh-CN": $ccd86abad329f871$exports,
        "zh-TW": $ad6eb5efb83fe2f8$exports
      };
      var $a911ff492b884835$export$da43f8f5cb04028d = class extends (0, $kJQf8$reactariagrid.GridKeyboardDelegate) {
        isCell(node) {
          return node.type === "cell" || node.type === "rowheader" || node.type === "column";
        }
        getKeyBelow(key) {
          let startItem = this.collection.getItem(key);
          if (!startItem)
            return;
          if (startItem.type === "column") {
            let child = (0, $kJQf8$reactstatelycollections.getFirstItem)((0, $kJQf8$reactstatelycollections.getChildNodes)(startItem, this.collection));
            if (child)
              return child.key;
            let firstKey = this.getFirstKey();
            if (firstKey == null)
              return;
            let firstItem = this.collection.getItem(firstKey);
            return (0, $kJQf8$reactstatelycollections.getNthItem)((0, $kJQf8$reactstatelycollections.getChildNodes)(firstItem, this.collection), startItem.index).key;
          }
          return super.getKeyBelow(key);
        }
        getKeyAbove(key) {
          let startItem = this.collection.getItem(key);
          if (!startItem)
            return;
          if (startItem.type === "column") {
            let parent = this.collection.getItem(startItem.parentKey);
            if (parent && parent.type === "column")
              return parent.key;
            return;
          }
          let superKey = super.getKeyAbove(key);
          if (superKey != null && this.collection.getItem(superKey).type !== "headerrow")
            return superKey;
          if (this.isCell(startItem))
            return this.collection.columns[startItem.index].key;
          return this.collection.columns[0].key;
        }
        findNextColumnKey(column) {
          let key = this.findNextKey(column.key, (item) => item.type === "column");
          if (key != null)
            return key;
          let row = this.collection.headerRows[column.level];
          for (let item of (0, $kJQf8$reactstatelycollections.getChildNodes)(row, this.collection)) {
            if (item.type === "column")
              return item.key;
          }
        }
        findPreviousColumnKey(column) {
          let key = this.findPreviousKey(column.key, (item) => item.type === "column");
          if (key != null)
            return key;
          let row = this.collection.headerRows[column.level];
          let childNodes = [
            ...(0, $kJQf8$reactstatelycollections.getChildNodes)(row, this.collection)
          ];
          for (let i = childNodes.length - 1; i >= 0; i--) {
            let item = childNodes[i];
            if (item.type === "column")
              return item.key;
          }
        }
        getKeyRightOf(key) {
          let item = this.collection.getItem(key);
          if (!item)
            return;
          if (item.type === "column")
            return this.direction === "rtl" ? this.findPreviousColumnKey(item) : this.findNextColumnKey(item);
          return super.getKeyRightOf(key);
        }
        getKeyLeftOf(key) {
          let item = this.collection.getItem(key);
          if (!item)
            return;
          if (item.type === "column")
            return this.direction === "rtl" ? this.findNextColumnKey(item) : this.findPreviousColumnKey(item);
          return super.getKeyLeftOf(key);
        }
        getKeyForSearch(search, fromKey) {
          if (!this.collator)
            return null;
          let collection = this.collection;
          let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey();
          if (key == null)
            return null;
          let startItem = collection.getItem(key);
          if (startItem.type === "cell")
            key = startItem.parentKey;
          let hasWrapped = false;
          while (key != null) {
            let item = collection.getItem(key);
            for (let cell of (0, $kJQf8$reactstatelycollections.getChildNodes)(item, this.collection)) {
              let column = collection.columns[cell.index];
              if (collection.rowHeaderColumnKeys.has(column.key) && cell.textValue) {
                let substring = cell.textValue.slice(0, search.length);
                if (this.collator.compare(substring, search) === 0) {
                  let fromItem = fromKey != null ? collection.getItem(fromKey) : startItem;
                  return fromItem.type === "cell" ? cell.key : item.key;
                }
              }
            }
            key = this.getKeyBelow(key);
            if (key == null && !hasWrapped) {
              key = this.getFirstKey();
              hasWrapped = true;
            }
          }
          return null;
        }
      };
      function $25d14c0f8fad722e$export$25bceaac3c7e4dc7(props, state, ref) {
        let { keyboardDelegate, isVirtualized, layout } = props;
        let collator = (0, $kJQf8$reactariai18n.useCollator)({
          usage: "search",
          sensitivity: "base"
        });
        let { direction } = (0, $kJQf8$reactariai18n.useLocale)();
        let disabledBehavior = state.selectionManager.disabledBehavior;
        let delegate = (0, $kJQf8$react.useMemo)(() => keyboardDelegate || new (0, $a911ff492b884835$export$da43f8f5cb04028d)({
          collection: state.collection,
          disabledKeys: disabledBehavior === "selection" ? /* @__PURE__ */ new Set() : state.disabledKeys,
          ref,
          direction,
          collator,
          layout
        }), [
          keyboardDelegate,
          state.collection,
          state.disabledKeys,
          disabledBehavior,
          ref,
          direction,
          collator,
          layout
        ]);
        let id = (0, $kJQf8$reactariautils.useId)(props.id);
        (0, $6acf696f746f932c$export$552312adfd451dab).set(state, id);
        let { gridProps } = (0, $kJQf8$reactariagrid.useGrid)(__spreadProps(__spreadValues({}, props), {
          id,
          keyboardDelegate: delegate
        }), state, ref);
        if (isVirtualized)
          gridProps["aria-rowcount"] = state.collection.size + state.collection.headerRows.length;
        if ((0, $kJQf8$reactstatelyflags.tableNestedRows)() && "expandedKeys" in state)
          gridProps.role = "treegrid";
        let { column, direction: sortDirection } = state.sortDescriptor || {};
        let stringFormatter = (0, $kJQf8$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($7ff3f66df3873a5e$exports)));
        let sortDescription = (0, $kJQf8$react.useMemo)(() => {
          var _state_collection_columns_find;
          let columnName = (_state_collection_columns_find = state.collection.columns.find((c) => c.key === column)) === null || _state_collection_columns_find === void 0 ? void 0 : _state_collection_columns_find.textValue;
          return sortDirection && column ? stringFormatter.format(`${sortDirection}Sort`, {
            columnName
          }) : void 0;
        }, [
          sortDirection,
          column,
          state.collection.columns
        ]);
        let descriptionProps = (0, $kJQf8$reactariautils.useDescription)(sortDescription);
        (0, $kJQf8$reactariautils.useUpdateEffect)(() => {
          (0, $kJQf8$reactarialiveannouncer.announce)(sortDescription, "assertive", 500);
        }, [
          sortDescription
        ]);
        return {
          gridProps: (0, $kJQf8$reactariautils.mergeProps)(gridProps, descriptionProps, {
            // merge sort description with long press information
            "aria-describedby": [
              descriptionProps["aria-describedby"],
              gridProps["aria-describedby"]
            ].filter(Boolean).join(" ")
          })
        };
      }
      function $7669c34a63ef0113$export$9514819a8c81e960(props, state, ref) {
        var _state_sortDescriptor, _state_sortDescriptor1;
        let { node } = props;
        let allowsSorting = node.props.allowsSorting;
        let { gridCellProps } = (0, $kJQf8$reactariagrid.useGridCell)(__spreadProps(__spreadValues({}, props), {
          focusMode: "child"
        }), state, ref);
        let isSelectionCellDisabled = node.props.isSelectionCell && state.selectionManager.selectionMode === "single";
        let { pressProps } = (0, $kJQf8$reactariainteractions.usePress)({
          isDisabled: !allowsSorting || isSelectionCellDisabled,
          onPress() {
            state.sort(node.key);
          },
          ref
        });
        let { focusableProps } = (0, $kJQf8$reactariafocus.useFocusable)({}, ref);
        let ariaSort = null;
        let isSortedColumn = ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === node.key;
        let sortDirection = (_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.direction;
        if (node.props.allowsSorting && !(0, $kJQf8$reactariautils.isAndroid)())
          ariaSort = isSortedColumn ? sortDirection : "none";
        let stringFormatter = (0, $kJQf8$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($7ff3f66df3873a5e$exports)));
        let sortDescription;
        if (allowsSorting) {
          sortDescription = `${stringFormatter.format("sortable")}`;
          if (isSortedColumn && sortDirection && (0, $kJQf8$reactariautils.isAndroid)())
            sortDescription = `${sortDescription}, ${stringFormatter.format(sortDirection)}`;
        }
        let descriptionProps = (0, $kJQf8$reactariautils.useDescription)(sortDescription);
        let shouldDisableFocus = state.collection.size === 0;
        (0, $kJQf8$react.useEffect)(() => {
          if (shouldDisableFocus && state.selectionManager.focusedKey === node.key)
            state.selectionManager.setFocusedKey(null);
        }, [
          shouldDisableFocus,
          state.selectionManager,
          node.key
        ]);
        return {
          columnHeaderProps: __spreadProps(__spreadValues({}, (0, $kJQf8$reactariautils.mergeProps)(
            gridCellProps,
            pressProps,
            focusableProps,
            descriptionProps,
            // If the table is empty, make all column headers untabbable
            shouldDisableFocus && {
              tabIndex: -1
            }
          )), {
            role: "columnheader",
            id: (0, $6acf696f746f932c$export$37cd4213f2ad742e)(state, node.key),
            "aria-colspan": node.colspan && node.colspan > 1 ? node.colspan : null,
            "aria-sort": ariaSort
          })
        };
      }
      var $10b2115217af7c93$var$EXPANSION_KEYS = {
        expand: {
          ltr: "ArrowRight",
          rtl: "ArrowLeft"
        },
        "collapse": {
          ltr: "ArrowLeft",
          rtl: "ArrowRight"
        }
      };
      function $10b2115217af7c93$export$7f2f6ae19e707aa5(props, state, ref) {
        let { node, isVirtualized } = props;
        let _a = (0, $kJQf8$reactariagrid.useGridRow)(props, state, ref), { rowProps } = _a, states = __objRest(_a, ["rowProps"]);
        let { direction } = (0, $kJQf8$reactariai18n.useLocale)();
        if (isVirtualized && !((0, $kJQf8$reactstatelyflags.tableNestedRows)() && "expandedKeys" in state))
          rowProps["aria-rowindex"] = node.index + 1 + state.collection.headerRows.length;
        else
          delete rowProps["aria-rowindex"];
        let treeGridRowProps = {};
        if ((0, $kJQf8$reactstatelyflags.tableNestedRows)() && "expandedKeys" in state) {
          let treeNode = state.keyMap.get(node.key);
          if (treeNode != null) {
            var _treeNode_props, _treeNode_props1, _treeNode_props_children;
            let hasChildRows = ((_treeNode_props = treeNode.props) === null || _treeNode_props === void 0 ? void 0 : _treeNode_props.UNSTABLE_childItems) || ((_treeNode_props1 = treeNode.props) === null || _treeNode_props1 === void 0 ? void 0 : (_treeNode_props_children = _treeNode_props1.children) === null || _treeNode_props_children === void 0 ? void 0 : _treeNode_props_children.length) > state.userColumnCount;
            treeGridRowProps = {
              onKeyDown: (e) => {
                if (e.key === $10b2115217af7c93$var$EXPANSION_KEYS["expand"][direction] && state.selectionManager.focusedKey === treeNode.key && hasChildRows && state.expandedKeys !== "all" && !state.expandedKeys.has(treeNode.key)) {
                  state.toggleKey(treeNode.key);
                  e.stopPropagation();
                } else if (e.key === $10b2115217af7c93$var$EXPANSION_KEYS["collapse"][direction] && state.selectionManager.focusedKey === treeNode.key && hasChildRows && (state.expandedKeys === "all" || state.expandedKeys.has(treeNode.key))) {
                  state.toggleKey(treeNode.key);
                  e.stopPropagation();
                }
              },
              "aria-expanded": hasChildRows ? state.expandedKeys === "all" || state.expandedKeys.has(node.key) : void 0,
              "aria-level": treeNode.level,
              "aria-posinset": treeNode.indexOfType + 1,
              "aria-setsize": treeNode.level > 1 ? (0, $kJQf8$reactstatelycollections.getLastItem)(state.keyMap.get(treeNode === null || treeNode === void 0 ? void 0 : treeNode.parentKey).childNodes).indexOfType + 1 : (0, $kJQf8$reactstatelycollections.getLastItem)(state.keyMap.get(state.collection.body.key).childNodes).indexOfType + 1
            };
          }
        }
        let linkProps = states.hasAction ? (0, $kJQf8$reactariautils.getSyntheticLinkProps)(node.props) : {};
        return __spreadValues({
          rowProps: __spreadProps(__spreadValues({}, (0, $kJQf8$reactariautils.mergeProps)(rowProps, treeGridRowProps, linkProps)), {
            "aria-labelledby": (0, $6acf696f746f932c$export$85069b70317f543)(state, node.key)
          })
        }, states);
      }
      function $eb16c38321a72835$export$1b95a7d2d517b841(props, state, ref) {
        let { node, isVirtualized } = props;
        let rowProps = {
          role: "row"
        };
        if (isVirtualized && !((0, $kJQf8$reactstatelyflags.tableNestedRows)() && "expandedKeys" in state))
          rowProps["aria-rowindex"] = node.index + 1;
        return {
          rowProps
        };
      }
      function $32387a1f2c61cda2$export$49571c903d73624c(props, state, ref) {
        let { gridCellProps, isPressed } = (0, $kJQf8$reactariagrid.useGridCell)(props, state, ref);
        let columnKey = props.node.column.key;
        if (state.collection.rowHeaderColumnKeys.has(columnKey)) {
          gridCellProps.role = "rowheader";
          gridCellProps.id = (0, $6acf696f746f932c$export$19baff3266315d44)(state, props.node.parentKey, columnKey);
        }
        return {
          gridCellProps,
          isPressed
        };
      }
      function $0b394e4562ac57c9$export$16ea7f650bd7c1bb(props, state) {
        let { key } = props;
        const { checkboxProps } = (0, $kJQf8$reactariagrid.useGridSelectionCheckbox)(props, state);
        return {
          checkboxProps: __spreadProps(__spreadValues({}, checkboxProps), {
            "aria-labelledby": `${checkboxProps.id} ${(0, $6acf696f746f932c$export$85069b70317f543)(state, key)}`
          })
        };
      }
      function $0b394e4562ac57c9$export$1003db6a7e384b99(state) {
        let { isEmpty, isSelectAll, selectionMode } = state.selectionManager;
        const stringFormatter = (0, $kJQf8$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($7ff3f66df3873a5e$exports)));
        return {
          checkboxProps: {
            "aria-label": stringFormatter.format(selectionMode === "single" ? "select" : "selectAll"),
            isSelected: isSelectAll,
            isDisabled: selectionMode !== "multiple" || state.collection.size === 0,
            isIndeterminate: !isEmpty && !isSelectAll,
            onChange: () => state.selectionManager.toggleSelectAll()
          }
        };
      }
      function $16d645f9e2153641$export$52994e973806c219(props, state, ref) {
        let { column: item, triggerRef, isDisabled, onResizeStart, onResize, onResizeEnd, "aria-label": ariaLabel } = props;
        const stringFormatter = (0, $kJQf8$reactariai18n.useLocalizedStringFormatter)((0, /* @__PURE__ */ $parcel$interopDefault($7ff3f66df3873a5e$exports)));
        let id = (0, $kJQf8$reactariautils.useId)();
        let isResizing = state.resizingColumn === item.key;
        let isResizingRef = (0, $kJQf8$react.useRef)(isResizing);
        let lastSize = (0, $kJQf8$react.useRef)(null);
        let wasFocusedOnResizeStart = (0, $kJQf8$react.useRef)(false);
        let editModeEnabled = state.tableState.isKeyboardNavigationDisabled;
        let { direction } = (0, $kJQf8$reactariai18n.useLocale)();
        let { keyboardProps } = (0, $kJQf8$reactariainteractions.useKeyboard)({
          onKeyDown: (e) => {
            if (editModeEnabled) {
              if (e.key === "Escape" || e.key === "Enter" || e.key === " " || e.key === "Tab") {
                e.preventDefault();
                endResize(item);
              }
            } else {
              e.continuePropagation();
              if (e.key === "Enter")
                startResize(item);
            }
          }
        });
        let startResize = (0, $kJQf8$reactariautils.useEffectEvent)((item2) => {
          if (!isResizingRef.current) {
            lastSize.current = state.updateResizedColumns(item2.key, state.getColumnWidth(item2.key));
            state.startResize(item2.key);
            state.tableState.setKeyboardNavigationDisabled(true);
            onResizeStart === null || onResizeStart === void 0 ? void 0 : onResizeStart(lastSize.current);
          }
          isResizingRef.current = true;
        });
        let resize = (0, $kJQf8$reactariautils.useEffectEvent)((item2, newWidth) => {
          let sizes = state.updateResizedColumns(item2.key, newWidth);
          onResize === null || onResize === void 0 ? void 0 : onResize(sizes);
          lastSize.current = sizes;
        });
        let endResize = (0, $kJQf8$reactariautils.useEffectEvent)((item2) => {
          if (isResizingRef.current) {
            if (lastSize.current == null)
              lastSize.current = state.updateResizedColumns(item2.key, state.getColumnWidth(item2.key));
            state.endResize();
            state.tableState.setKeyboardNavigationDisabled(false);
            onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(lastSize.current);
            isResizingRef.current = false;
            if ((triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) && !wasFocusedOnResizeStart.current)
              (0, $kJQf8$reactariafocus.focusSafely)(triggerRef.current);
          }
          lastSize.current = null;
        });
        const columnResizeWidthRef = (0, $kJQf8$react.useRef)(0);
        const { moveProps } = (0, $kJQf8$reactariainteractions.useMove)({
          onMoveStart() {
            columnResizeWidthRef.current = state.getColumnWidth(item.key);
            startResize(item);
          },
          onMove(e) {
            let { deltaX, deltaY, pointerType } = e;
            if (direction === "rtl")
              deltaX *= -1;
            if (pointerType === "keyboard") {
              if (deltaY !== 0 && deltaX === 0)
                deltaX = deltaY * -1;
              deltaX *= 10;
            }
            if (deltaX !== 0) {
              columnResizeWidthRef.current += deltaX;
              resize(item, columnResizeWidthRef.current);
            }
          },
          onMoveEnd(e) {
            let { pointerType } = e;
            columnResizeWidthRef.current = 0;
            if (pointerType === "mouse" || pointerType === "touch" && wasFocusedOnResizeStart.current)
              endResize(item);
          }
        });
        let onKeyDown = (0, $kJQf8$react.useCallback)((e) => {
          if (editModeEnabled)
            moveProps.onKeyDown(e);
        }, [
          editModeEnabled,
          moveProps
        ]);
        let min = Math.floor(state.getColumnMinWidth(item.key));
        let max = Math.floor(state.getColumnMaxWidth(item.key));
        if (max === Infinity)
          max = Number.MAX_SAFE_INTEGER;
        let value = Math.floor(state.getColumnWidth(item.key));
        let modality = (0, $kJQf8$reactariainteractions.useInteractionModality)();
        if (modality === "virtual" && typeof window !== "undefined" && "ontouchstart" in window)
          modality = "touch";
        let description = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) == null && (modality === "keyboard" || modality === "virtual") && !isResizing ? stringFormatter.format("resizerDescription") : void 0;
        let descriptionProps = (0, $kJQf8$reactariautils.useDescription)(description);
        let ariaProps = __spreadValues({
          "aria-label": ariaLabel,
          "aria-orientation": "horizontal",
          "aria-labelledby": `${id} ${(0, $6acf696f746f932c$export$37cd4213f2ad742e)(state.tableState, item.key)}`,
          "aria-valuetext": stringFormatter.format("columnSize", {
            value
          }),
          "type": "range",
          min,
          max,
          value
        }, descriptionProps);
        const focusInput = (0, $kJQf8$react.useCallback)(() => {
          if (ref.current)
            (0, $kJQf8$reactariafocus.focusSafely)(ref.current);
        }, [
          ref
        ]);
        let resizingColumn = state.resizingColumn;
        let prevResizingColumn = (0, $kJQf8$react.useRef)(null);
        (0, $kJQf8$react.useEffect)(() => {
          if (prevResizingColumn.current !== resizingColumn && resizingColumn != null && resizingColumn === item.key) {
            wasFocusedOnResizeStart.current = document.activeElement === ref.current;
            startResize(item);
            let timeout = setTimeout(() => focusInput(), 0);
            let VOTimeout = setTimeout(focusInput, 400);
            return () => {
              clearTimeout(timeout);
              clearTimeout(VOTimeout);
            };
          }
          prevResizingColumn.current = resizingColumn;
        }, [
          resizingColumn,
          item,
          focusInput,
          ref,
          startResize
        ]);
        let onChange = (e) => {
          let currentWidth = state.getColumnWidth(item.key);
          let nextValue = parseFloat(e.target.value);
          if (nextValue > currentWidth)
            nextValue = currentWidth + 10;
          else
            nextValue = currentWidth - 10;
          resize(item, nextValue);
        };
        let { pressProps } = (0, $kJQf8$reactariainteractions.usePress)({
          onPressStart: (e) => {
            if (e.ctrlKey || e.altKey || e.metaKey || e.shiftKey || e.pointerType === "keyboard")
              return;
            if (e.pointerType === "virtual" && state.resizingColumn != null) {
              endResize(item);
              return;
            }
            focusInput();
            if (e.pointerType !== "virtual")
              startResize(item);
          },
          onPress: (e) => {
            if ((e.pointerType === "touch" && wasFocusedOnResizeStart.current || e.pointerType === "mouse") && state.resizingColumn != null)
              endResize(item);
          }
        });
        let { visuallyHiddenProps } = (0, $kJQf8$reactariavisuallyhidden.useVisuallyHidden)();
        return {
          resizerProps: (0, $kJQf8$reactariautils.mergeProps)(keyboardProps, __spreadProps(__spreadValues({}, moveProps), {
            onKeyDown
          }), pressProps, {
            style: {
              touchAction: "none"
            }
          }),
          inputProps: (0, $kJQf8$reactariautils.mergeProps)(visuallyHiddenProps, {
            id,
            onBlur: () => {
              endResize(item);
            },
            onChange,
            disabled: isDisabled
          }, ariaProps),
          isResizing
        };
      }
      function $cd66afe5decb6adb$export$6fb1613bd7b28198() {
        return (0, $kJQf8$reactariagrid.useGridRowGroup)();
      }
    }
  });

  // node_modules/@nextui-org/spacer/dist/index.js
  var require_dist55 = __commonJS({
    "node_modules/@nextui-org/spacer/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Spacer: () => spacer_default,
        useSpacer: () => useSpacer
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system_rsc2 = require_dist3();
      var import_system_rsc = require_dist3();
      var import_theme = require_dist5();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      var spacing = {
        px: "1px",
        0: "0px",
        0.5: "0.125rem",
        1: "0.25rem",
        1.5: "0.375rem",
        2: "0.5rem",
        2.5: "0.625rem",
        3: "0.75rem",
        3.5: "0.875rem",
        4: "1rem",
        5: "1.25rem",
        6: "1.5rem",
        7: "1.75rem",
        8: "2rem",
        9: "2.25rem",
        10: "2.5rem",
        11: "2.75rem",
        12: "3rem",
        14: "3.5rem",
        16: "4rem",
        20: "5rem",
        24: "6rem",
        28: "7rem",
        32: "8rem",
        36: "9rem",
        40: "10rem",
        44: "11rem",
        48: "12rem",
        52: "13rem",
        56: "14rem",
        60: "15rem",
        64: "16rem",
        72: "18rem",
        80: "20rem",
        96: "24rem"
      };
      var getMargin = (value) => {
        var _a;
        return (_a = spacing[value]) != null ? _a : value;
      };
      function useSpacer(originalProps) {
        const [props, variantProps] = (0, import_system_rsc.mapPropsVariants)(originalProps, import_theme.spacer.variantKeys);
        const _a = props, { as, className, x = 1, y = 1 } = _a, otherProps = __objRest(_a, ["as", "className", "x", "y"]);
        const Component = as || "span";
        const styles = (0, import_react3.useMemo)(
          () => (0, import_theme.spacer)(__spreadProps(__spreadValues({}, variantProps), {
            className
          })),
          [...Object.values(variantProps), className]
        );
        const marginLeft = getMargin(x);
        const marginTop = getMargin(y);
        const getSpacerProps = (props2 = {}) => __spreadProps(__spreadValues(__spreadValues({}, props2), otherProps), {
          "aria-hidden": (0, import_shared_utils.dataAttr)(true),
          className: (0, import_shared_utils.clsx)(styles, props2.className),
          style: __spreadProps(__spreadValues(__spreadValues({}, props2.style), otherProps.style), {
            marginLeft,
            marginTop
          })
        });
        return { Component, getSpacerProps };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Spacer = (0, import_system_rsc2.forwardRef)((props, ref) => {
        const { Component, getSpacerProps } = useSpacer(__spreadValues({}, props));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadValues({ ref }, getSpacerProps()));
      });
      Spacer.displayName = "NextUI.Spacer";
      var spacer_default = Spacer;
    }
  });

  // node_modules/@nextui-org/table/dist/index.js
  var require_dist56 = __commonJS({
    "node_modules/@nextui-org/table/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Table: () => table_default,
        TableBody: () => table_body_default2,
        TableCell: () => table_cell_default2,
        TableColumn: () => table_column_default,
        TableHeader: () => table_header_default,
        TableRow: () => table_row_default2,
        getKeyValue: () => import_shared_utils10.getKeyValue,
        useTable: () => useTable
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      var import_table = require_main37();
      var import_table2 = require_main41();
      var import_system = require_dist4();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_utils = require_main7();
      var import_shared_utils = require_dist9();
      var import_react22 = require_react();
      function useTable(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.table.variantKeys);
        const _a = props, {
          ref,
          as,
          baseRef,
          children,
          className,
          classNames,
          layoutNode,
          removeWrapper = false,
          disableAnimation = false,
          selectionMode = "none",
          topContentPlacement = "inside",
          bottomContentPlacement = "inside",
          selectionBehavior = selectionMode === "none" ? null : "toggle",
          disabledBehavior = "selection",
          showSelectionCheckboxes = selectionMode === "multiple" && selectionBehavior !== "replace",
          BaseComponent = "div",
          checkboxesProps,
          topContent,
          bottomContent,
          onRowAction,
          onCellAction
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "baseRef",
          "children",
          "className",
          "classNames",
          "layoutNode",
          "removeWrapper",
          "disableAnimation",
          "selectionMode",
          "topContentPlacement",
          "bottomContentPlacement",
          "selectionBehavior",
          "disabledBehavior",
          "showSelectionCheckboxes",
          "BaseComponent",
          "checkboxesProps",
          "topContent",
          "bottomContent",
          "onRowAction",
          "onCellAction"
        ]);
        const Component = as || "table";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const domBaseRef = (0, import_react_utils.useDOMRef)(baseRef);
        const state = (0, import_table.useTableState)(__spreadProps(__spreadValues({}, originalProps), {
          children,
          showSelectionCheckboxes
        }));
        const { collection } = state;
        const { gridProps } = (0, import_table2.useTable)(__spreadProps(__spreadValues({}, originalProps), { layout: layoutNode }), state, domRef);
        const isSelectable = selectionMode !== "none";
        const isMultiSelectable = selectionMode === "multiple";
        const slots = (0, import_react22.useMemo)(
          () => (0, import_theme.table)(__spreadProps(__spreadValues({}, variantProps), {
            isSelectable,
            isMultiSelectable
          })),
          [...Object.values(variantProps), isSelectable, isMultiSelectable]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const values = (0, import_react22.useMemo)(
          () => {
            var _a2;
            return {
              state,
              slots,
              isSelectable,
              collection,
              classNames,
              color: originalProps == null ? void 0 : originalProps.color,
              disableAnimation,
              checkboxesProps,
              isHeaderSticky: (_a2 = originalProps == null ? void 0 : originalProps.isHeaderSticky) != null ? _a2 : false,
              selectionMode,
              selectionBehavior,
              disabledBehavior,
              showSelectionCheckboxes,
              onRowAction,
              onCellAction
            };
          },
          [
            slots,
            state,
            collection,
            isSelectable,
            classNames,
            selectionMode,
            selectionBehavior,
            checkboxesProps,
            disabledBehavior,
            disableAnimation,
            showSelectionCheckboxes,
            originalProps == null ? void 0 : originalProps.color,
            originalProps == null ? void 0 : originalProps.isHeaderSticky,
            onRowAction,
            onCellAction
          ]
        );
        const getBaseProps = (0, import_react3.useCallback)(
          (props2) => __spreadProps(__spreadValues({}, props2), {
            ref: domBaseRef,
            className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2 == null ? void 0 : props2.className) })
          }),
          [baseStyles, slots]
        );
        const getWrapperProps = (0, import_react3.useCallback)(
          (props2) => __spreadProps(__spreadValues({}, props2), {
            ref: domBaseRef,
            className: slots.wrapper({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.wrapper, props2 == null ? void 0 : props2.className) })
          }),
          [classNames == null ? void 0 : classNames.wrapper, slots]
        );
        const getTableProps = (0, import_react3.useCallback)(
          (props2) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(
            gridProps,
            (0, import_react_utils.filterDOMProps)(otherProps, {
              enabled: shouldFilterDOMProps
            }),
            props2
          )), {
            ref: domRef,
            className: slots.table({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.table, props2 == null ? void 0 : props2.className) })
          }),
          [classNames == null ? void 0 : classNames.table, shouldFilterDOMProps, slots, gridProps, otherProps]
        );
        return {
          BaseComponent,
          Component,
          children,
          state,
          collection,
          values,
          topContent,
          bottomContent,
          removeWrapper,
          topContentPlacement,
          bottomContentPlacement,
          getBaseProps,
          getWrapperProps,
          getTableProps
        };
      }
      var import_shared_utils10 = require_dist9();
      var import_react6 = require_react();
      var import_spacer = require_dist55();
      var import_system10 = require_dist4();
      var import_system2 = require_dist4();
      var import_react_utils2 = require_dist10();
      var import_shared_utils2 = require_dist9();
      var import_table3 = require_main41();
      var import_utils2 = require_main7();
      var import_jsx_runtime = require_jsx_runtime();
      var TableRowGroup = (0, import_system2.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, { as, className, children, slots, classNames } = _a2, otherProps = __objRest(_a2, ["as", "className", "children", "slots", "classNames"]);
        const Component = as || "thead";
        const domRef = (0, import_react_utils2.useDOMRef)(ref);
        const { rowGroupProps } = (0, import_table3.useTableRowGroup)();
        const theadStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.thead, className);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            className: (_a = slots.thead) == null ? void 0 : _a.call(slots, { class: theadStyles })
          }, (0, import_utils2.mergeProps)(rowGroupProps, otherProps)), {
            children
          })
        );
      });
      TableRowGroup.displayName = "NextUI.TableRowGroup";
      var table_row_group_default = TableRowGroup;
      var import_system3 = require_dist4();
      var import_react_utils3 = require_dist10();
      var import_shared_utils3 = require_dist9();
      var import_table4 = require_main41();
      var import_utils3 = require_main7();
      var import_jsx_runtime2 = require_jsx_runtime();
      var TableHeaderRow = (0, import_system3.forwardRef)((props, ref) => {
        var _a, _b;
        const _a2 = props, { as, className, children, node, slots, classNames, state } = _a2, otherProps = __objRest(_a2, ["as", "className", "children", "node", "slots", "classNames", "state"]);
        const Component = as || "tr";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const { rowProps } = (0, import_table4.useTableHeaderRow)({ node }, state, domRef);
        const trStyles = (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.tr, className, (_a = node.props) == null ? void 0 : _a.className);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef
          }, (0, import_utils3.mergeProps)(
            rowProps,
            (0, import_react_utils3.filterDOMProps)(node.props, {
              enabled: shouldFilterDOMProps
            }),
            otherProps
          )), {
            className: (_b = slots.tr) == null ? void 0 : _b.call(slots, { class: trStyles }),
            children
          })
        );
      });
      TableHeaderRow.displayName = "NextUI.TableHeaderRow";
      var table_header_row_default = TableHeaderRow;
      var import_system4 = require_dist4();
      var import_react_utils4 = require_dist10();
      var import_shared_utils4 = require_dist9();
      var import_table5 = require_main41();
      var import_utils4 = require_main7();
      var import_shared_icons = require_dist12();
      var import_focus = require_main12();
      var import_visually_hidden = require_main13();
      var import_interactions = require_main11();
      var import_jsx_runtime3 = require_jsx_runtime();
      var TableColumnHeader = (0, import_system4.forwardRef)((props, ref) => {
        var _a, _b, _c, _d, _e;
        const _a2 = props, { as, className, state, node, slots, classNames } = _a2, otherProps = __objRest(_a2, ["as", "className", "state", "node", "slots", "classNames"]);
        const Component = as || "th";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils4.useDOMRef)(ref);
        const { columnHeaderProps } = (0, import_table5.useTableColumnHeader)({ node }, state, domRef);
        const thStyles = (0, import_shared_utils4.clsx)(classNames == null ? void 0 : classNames.th, className, (_a = node.props) == null ? void 0 : _a.className);
        const { isFocusVisible, focusProps } = (0, import_focus.useFocusRing)();
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({});
        const _b2 = node.props, { hideHeader } = _b2, columnProps = __objRest(_b2, ["hideHeader"]);
        const allowsSorting = columnProps.allowsSorting;
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            colSpan: node.colspan,
            "data-focus-visible": (0, import_shared_utils4.dataAttr)(isFocusVisible),
            "data-hover": (0, import_shared_utils4.dataAttr)(isHovered),
            "data-sortable": (0, import_shared_utils4.dataAttr)(allowsSorting)
          }, (0, import_utils4.mergeProps)(
            columnHeaderProps,
            focusProps,
            (0, import_react_utils4.filterDOMProps)(columnProps, {
              enabled: shouldFilterDOMProps
            }),
            allowsSorting ? hoverProps : {},
            otherProps
          )), {
            className: (_b = slots.th) == null ? void 0 : _b.call(slots, { class: thStyles }),
            children: [
              hideHeader ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_visually_hidden.VisuallyHidden, { children: node.rendered }) : node.rendered,
              allowsSorting && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                import_shared_icons.ChevronDownIcon,
                {
                  "aria-hidden": "true",
                  className: (_c = slots.sortIcon) == null ? void 0 : _c.call(slots, { class: classNames == null ? void 0 : classNames.sortIcon }),
                  "data-direction": (_d = state.sortDescriptor) == null ? void 0 : _d.direction,
                  "data-visible": (0, import_shared_utils4.dataAttr)(((_e = state.sortDescriptor) == null ? void 0 : _e.column) === node.key),
                  strokeWidth: 3
                }
              )
            ]
          })
        );
      });
      TableColumnHeader.displayName = "NextUI.TableColumnHeader";
      var table_column_header_default = TableColumnHeader;
      var import_system5 = require_dist4();
      var import_react_utils5 = require_dist10();
      var import_shared_utils5 = require_dist9();
      var import_table6 = require_main41();
      var import_utils5 = require_main7();
      var import_focus2 = require_main12();
      var import_checkbox = require_dist25();
      var import_visually_hidden2 = require_main13();
      var import_jsx_runtime4 = require_jsx_runtime();
      var TableSelectAllCheckbox = (0, import_system5.forwardRef)((props, ref) => {
        var _a, _b;
        const _a2 = props, {
          as,
          className,
          node,
          slots,
          state,
          selectionMode,
          color,
          checkboxesProps,
          disableAnimation,
          classNames
        } = _a2, otherProps = __objRest(_a2, [
          "as",
          "className",
          "node",
          "slots",
          "state",
          "selectionMode",
          "color",
          "checkboxesProps",
          "disableAnimation",
          "classNames"
        ]);
        const Component = as || "th";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils5.useDOMRef)(ref);
        const { columnHeaderProps } = (0, import_table6.useTableColumnHeader)({ node }, state, domRef);
        const { isFocusVisible, focusProps } = (0, import_focus2.useFocusRing)();
        const { checkboxProps } = (0, import_table6.useTableSelectAllCheckbox)(state);
        const thStyles = (0, import_shared_utils5.clsx)(classNames == null ? void 0 : classNames.th, className, (_a = node.props) == null ? void 0 : _a.className);
        const isSingleSelectionMode = selectionMode === "single";
        const _b2 = checkboxProps, { onChange } = _b2, otherCheckboxProps = __objRest(_b2, ["onChange"]);
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            "data-focus-visible": (0, import_shared_utils5.dataAttr)(isFocusVisible)
          }, (0, import_utils5.mergeProps)(
            columnHeaderProps,
            focusProps,
            (0, import_react_utils5.filterDOMProps)(node.props, {
              enabled: shouldFilterDOMProps
            }),
            (0, import_react_utils5.filterDOMProps)(otherProps, {
              enabled: shouldFilterDOMProps
            })
          )), {
            className: (_b = slots.th) == null ? void 0 : _b.call(slots, { class: thStyles }),
            children: isSingleSelectionMode ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_visually_hidden2.VisuallyHidden, { children: checkboxProps["aria-label"] }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              import_checkbox.Checkbox,
              __spreadValues({
                color,
                disableAnimation,
                onValueChange: onChange
              }, (0, import_utils5.mergeProps)(checkboxesProps, otherCheckboxProps))
            )
          })
        );
      });
      TableSelectAllCheckbox.displayName = "NextUI.TableSelectAllCheckbox";
      var table_select_all_checkbox_default = TableSelectAllCheckbox;
      var import_system9 = require_dist4();
      var import_react_utils9 = require_dist10();
      var import_shared_utils9 = require_dist9();
      var import_table10 = require_main41();
      var import_react_utils10 = require_dist10();
      var import_utils9 = require_main7();
      var import_react5 = require_react();
      var import_system6 = require_dist4();
      var import_react_utils6 = require_dist10();
      var import_shared_utils6 = require_dist9();
      var import_table7 = require_main41();
      var import_utils6 = require_main7();
      var import_focus3 = require_main12();
      var import_interactions2 = require_main11();
      var import_react32 = require_react();
      var import_jsx_runtime5 = require_jsx_runtime();
      var TableRow = (0, import_system6.forwardRef)((props, ref) => {
        var _a, _b;
        const _a2 = props, { as, className, children, node, slots, state, isSelectable, classNames } = _a2, otherProps = __objRest(_a2, ["as", "className", "children", "node", "slots", "state", "isSelectable", "classNames"]);
        const Component = as || "tr";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils6.useDOMRef)(ref);
        const { rowProps } = (0, import_table7.useTableRow)({ node }, state, domRef);
        const trStyles = (0, import_shared_utils6.clsx)(classNames == null ? void 0 : classNames.tr, className, (_a = node.props) == null ? void 0 : _a.className);
        const { isFocusVisible, focusProps } = (0, import_focus3.useFocusRing)();
        const isDisabled = state.disabledKeys.has(node.key);
        const isSelected = state.selectionManager.isSelected(node.key);
        const { isHovered, hoverProps } = (0, import_interactions2.useHover)({ isDisabled });
        const { isFirst, isLast, isMiddle, isOdd } = (0, import_react32.useMemo)(() => {
          const isFirst2 = node.key === state.collection.getFirstKey();
          const isLast2 = node.key === state.collection.getLastKey();
          const isMiddle2 = !isFirst2 && !isLast2;
          const isOdd2 = (node == null ? void 0 : node.index) ? (node.index + 1) % 2 === 0 : false;
          return {
            isFirst: isFirst2,
            isLast: isLast2,
            isMiddle: isMiddle2,
            isOdd: isOdd2
          };
        }, [node, state.collection]);
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            "data-disabled": (0, import_shared_utils6.dataAttr)(isDisabled),
            "data-first": (0, import_shared_utils6.dataAttr)(isFirst),
            "data-focus-visible": (0, import_shared_utils6.dataAttr)(isFocusVisible),
            "data-hover": (0, import_shared_utils6.dataAttr)(isHovered),
            "data-last": (0, import_shared_utils6.dataAttr)(isLast),
            "data-middle": (0, import_shared_utils6.dataAttr)(isMiddle),
            "data-odd": (0, import_shared_utils6.dataAttr)(isOdd),
            "data-selected": (0, import_shared_utils6.dataAttr)(isSelected)
          }, (0, import_utils6.mergeProps)(
            rowProps,
            focusProps,
            isSelectable ? hoverProps : {},
            (0, import_react_utils6.filterDOMProps)(node.props, {
              enabled: shouldFilterDOMProps
            }),
            otherProps
          )), {
            className: (_b = slots.tr) == null ? void 0 : _b.call(slots, { class: trStyles }),
            children
          })
        );
      });
      TableRow.displayName = "NextUI.TableRow";
      var table_row_default = TableRow;
      var import_react4 = require_react();
      var import_system7 = require_dist4();
      var import_react_utils7 = require_dist10();
      var import_shared_utils7 = require_dist9();
      var import_table8 = require_main41();
      var import_utils7 = require_main7();
      var import_focus4 = require_main12();
      var import_jsx_runtime6 = require_jsx_runtime();
      var TableCell = (0, import_system7.forwardRef)((props, ref) => {
        var _a, _b;
        const _a2 = props, { as, className, node, rowKey, slots, state, classNames } = _a2, otherProps = __objRest(_a2, ["as", "className", "node", "rowKey", "slots", "state", "classNames"]);
        const Component = as || "td";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils7.useDOMRef)(ref);
        const { gridCellProps } = (0, import_table8.useTableCell)({ node }, state, domRef);
        const tdStyles = (0, import_shared_utils7.clsx)(classNames == null ? void 0 : classNames.td, className, (_a = node.props) == null ? void 0 : _a.className);
        const { isFocusVisible, focusProps } = (0, import_focus4.useFocusRing)();
        const isRowSelected = state.selectionManager.isSelected(rowKey);
        const cell = (0, import_react4.useMemo)(() => {
          const cellType = typeof node.rendered;
          return cellType !== "object" && cellType !== "function" ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("span", { children: node.rendered }) : node.rendered;
        }, [node.rendered]);
        return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            "data-focus-visible": (0, import_shared_utils7.dataAttr)(isFocusVisible),
            "data-selected": (0, import_shared_utils7.dataAttr)(isRowSelected)
          }, (0, import_utils7.mergeProps)(
            gridCellProps,
            focusProps,
            (0, import_react_utils7.filterDOMProps)(node.props, {
              enabled: shouldFilterDOMProps
            }),
            otherProps
          )), {
            className: (_b = slots.td) == null ? void 0 : _b.call(slots, { class: tdStyles }),
            children: cell
          })
        );
      });
      TableCell.displayName = "NextUI.TableCell";
      var table_cell_default = TableCell;
      var import_system8 = require_dist4();
      var import_react_utils8 = require_dist10();
      var import_shared_utils8 = require_dist9();
      var import_table9 = require_main41();
      var import_utils8 = require_main7();
      var import_focus5 = require_main12();
      var import_checkbox2 = require_dist25();
      var import_visually_hidden3 = require_main13();
      var import_jsx_runtime7 = require_jsx_runtime();
      var TableCheckboxCell = (0, import_system8.forwardRef)((props, ref) => {
        var _a, _b;
        const _a2 = props, {
          as,
          className,
          node,
          rowKey,
          slots,
          state,
          color,
          disableAnimation,
          checkboxesProps,
          selectionMode,
          classNames
        } = _a2, otherProps = __objRest(_a2, [
          "as",
          "className",
          "node",
          "rowKey",
          "slots",
          "state",
          "color",
          "disableAnimation",
          "checkboxesProps",
          "selectionMode",
          "classNames"
        ]);
        const Component = as || "td";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils8.useDOMRef)(ref);
        const { gridCellProps } = (0, import_table9.useTableCell)({ node }, state, domRef);
        const { isFocusVisible, focusProps } = (0, import_focus5.useFocusRing)();
        const { checkboxProps } = (0, import_table9.useTableSelectionCheckbox)({ key: (node == null ? void 0 : node.parentKey) || node.key }, state);
        const tdStyles = (0, import_shared_utils8.clsx)(classNames == null ? void 0 : classNames.td, className, (_a = node.props) == null ? void 0 : _a.className);
        const isSingleSelectionMode = selectionMode === "single";
        const _b2 = checkboxProps, { onChange } = _b2, otherCheckboxProps = __objRest(_b2, ["onChange"]);
        const isRowSelected = state.selectionManager.isSelected(rowKey);
        return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            "data-focus-visible": (0, import_shared_utils8.dataAttr)(isFocusVisible),
            "data-selected": (0, import_shared_utils8.dataAttr)(isRowSelected)
          }, (0, import_utils8.mergeProps)(
            gridCellProps,
            focusProps,
            (0, import_react_utils8.filterDOMProps)(node.props, {
              enabled: shouldFilterDOMProps
            }),
            otherProps
          )), {
            className: (_b = slots.td) == null ? void 0 : _b.call(slots, { class: tdStyles }),
            children: isSingleSelectionMode ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_visually_hidden3.VisuallyHidden, { children: checkboxProps["aria-label"] }) : /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
              import_checkbox2.Checkbox,
              __spreadValues({
                color,
                disableAnimation,
                onValueChange: onChange
              }, (0, import_utils8.mergeProps)(checkboxesProps, otherCheckboxProps))
            )
          })
        );
      });
      TableCheckboxCell.displayName = "NextUI.TableCheckboxCell";
      var table_checkbox_cell_default = TableCheckboxCell;
      var import_jsx_runtime8 = require_jsx_runtime();
      var TableBody = (0, import_system9.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, {
          as,
          className,
          slots,
          state,
          collection,
          isSelectable,
          color,
          disableAnimation,
          checkboxesProps,
          selectionMode,
          classNames
        } = _a2, otherProps = __objRest(_a2, [
          "as",
          "className",
          "slots",
          "state",
          "collection",
          "isSelectable",
          "color",
          "disableAnimation",
          "checkboxesProps",
          "selectionMode",
          "classNames"
        ]);
        const Component = as || "tbody";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils9.useDOMRef)(ref);
        const { rowGroupProps } = (0, import_table10.useTableRowGroup)();
        const tbodyStyles = (0, import_shared_utils9.clsx)(classNames == null ? void 0 : classNames.tbody, className);
        const bodyProps = collection == null ? void 0 : collection.body.props;
        const isLoading = (bodyProps == null ? void 0 : bodyProps.isLoading) || (bodyProps == null ? void 0 : bodyProps.loadingState) === "loading" || (bodyProps == null ? void 0 : bodyProps.loadingState) === "loadingMore";
        const renderRows = (0, import_react5.useMemo)(() => {
          return [...collection.body.childNodes].map((row) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
            table_row_default,
            {
              classNames,
              isSelectable,
              node: row,
              slots,
              state,
              children: [...row.childNodes].map(
                (cell) => cell.props.isSelectionCell ? /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
                  table_checkbox_cell_default,
                  {
                    checkboxesProps,
                    classNames,
                    color,
                    disableAnimation,
                    node: cell,
                    rowKey: row.key,
                    selectionMode,
                    slots,
                    state
                  },
                  cell.key
                ) : /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
                  table_cell_default,
                  {
                    classNames,
                    node: cell,
                    rowKey: row.key,
                    slots,
                    state
                  },
                  cell.key
                )
              )
            },
            row.key
          ));
        }, [collection.body.childNodes, classNames, isSelectable, slots, state]);
        let emptyContent;
        let loadingContent;
        if (collection.size === 0 && bodyProps.emptyContent) {
          emptyContent = /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("tr", { role: "row", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
            "td",
            {
              className: slots == null ? void 0 : slots.emptyWrapper({ class: classNames == null ? void 0 : classNames.emptyWrapper }),
              colSpan: collection.columnCount,
              role: "gridcell",
              children: bodyProps.emptyContent
            }
          ) });
        }
        if (isLoading && bodyProps.loadingContent) {
          loadingContent = /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("tr", { role: "row", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
            "td",
            {
              className: slots == null ? void 0 : slots.loadingWrapper({ class: classNames == null ? void 0 : classNames.loadingWrapper }),
              colSpan: collection.columnCount,
              role: "gridcell",
              children: bodyProps.loadingContent
            }
          ) });
        }
        return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef
          }, (0, import_utils9.mergeProps)(
            rowGroupProps,
            (0, import_react_utils10.filterDOMProps)(bodyProps, {
              enabled: shouldFilterDOMProps
            }),
            otherProps
          )), {
            className: (_a = slots.tbody) == null ? void 0 : _a.call(slots, { class: tbodyStyles }),
            "data-empty": (0, import_shared_utils9.dataAttr)(collection.size === 0),
            "data-loading": (0, import_shared_utils9.dataAttr)(isLoading),
            children: [
              renderRows,
              loadingContent,
              emptyContent
            ]
          })
        );
      });
      TableBody.displayName = "NextUI.TableBody";
      var table_body_default = TableBody;
      var import_jsx_runtime9 = require_jsx_runtime();
      var Table = (0, import_system10.forwardRef)((props, ref) => {
        const {
          BaseComponent,
          Component,
          collection,
          values,
          topContent,
          topContentPlacement,
          bottomContentPlacement,
          bottomContent,
          removeWrapper,
          getBaseProps,
          getWrapperProps,
          getTableProps
        } = useTable(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        const Wrapper = (0, import_react6.useCallback)(
          ({ children }) => {
            if (removeWrapper) {
              return children;
            }
            return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BaseComponent, __spreadProps(__spreadValues({}, getWrapperProps()), { children }));
          },
          [removeWrapper, getWrapperProps]
        );
        return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", __spreadProps(__spreadValues({}, getBaseProps()), { children: [
          topContentPlacement === "outside" && topContent,
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Wrapper, { children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
            topContentPlacement === "inside" && topContent,
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(Component, __spreadProps(__spreadValues({}, getTableProps()), { children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(table_row_group_default, { classNames: values.classNames, slots: values.slots, children: [
                collection.headerRows.map((headerRow) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                  table_header_row_default,
                  {
                    classNames: values.classNames,
                    node: headerRow,
                    slots: values.slots,
                    state: values.state,
                    children: [...headerRow.childNodes].map(
                      (column) => {
                        var _a;
                        return ((_a = column == null ? void 0 : column.props) == null ? void 0 : _a.isSelectionCell) ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                          table_select_all_checkbox_default,
                          {
                            checkboxesProps: values.checkboxesProps,
                            classNames: values.classNames,
                            color: values.color,
                            disableAnimation: values.disableAnimation,
                            node: column,
                            selectionMode: values.selectionMode,
                            slots: values.slots,
                            state: values.state
                          },
                          column == null ? void 0 : column.key
                        ) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                          table_column_header_default,
                          {
                            classNames: values.classNames,
                            node: column,
                            slots: values.slots,
                            state: values.state
                          },
                          column == null ? void 0 : column.key
                        );
                      }
                    )
                  },
                  headerRow == null ? void 0 : headerRow.key
                )),
                /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(import_spacer.Spacer, { as: "tr", tabIndex: -1, y: 1 })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
                table_body_default,
                {
                  checkboxesProps: values.checkboxesProps,
                  classNames: values.classNames,
                  collection: values.collection,
                  color: values.color,
                  disableAnimation: values.disableAnimation,
                  isSelectable: values.isSelectable,
                  selectionMode: values.selectionMode,
                  slots: values.slots,
                  state: values.state
                }
              )
            ] })),
            bottomContentPlacement === "inside" && bottomContent
          ] }) }),
          bottomContentPlacement === "outside" && bottomContent
        ] }));
      });
      Table.displayName = "NextUI.Table";
      var table_default = Table;
      var import_table11 = require_main37();
      var TableBody2 = import_table11.TableBody;
      var table_body_default2 = TableBody2;
      var import_table12 = require_main37();
      var TableCell2 = import_table12.Cell;
      var table_cell_default2 = TableCell2;
      var import_table13 = require_main37();
      var TableColumn = import_table13.Column;
      var table_column_default = TableColumn;
      var import_table14 = require_main37();
      var TableHeader = import_table14.TableHeader;
      var table_header_default = TableHeader;
      var import_table15 = require_main37();
      var TableRow2 = import_table15.Row;
      var table_row_default2 = TableRow2;
    }
  });

  // node_modules/@nextui-org/kbd/dist/index.js
  var require_dist57 = __commonJS({
    "node_modules/@nextui-org/kbd/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Kbd: () => kbd_default,
        useKbd: () => useKbd
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react22 = require_react();
      var import_system_rsc2 = require_dist3();
      var import_system_rsc = require_dist3();
      var import_theme = require_dist5();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      function useKbd(originalProps) {
        const [props, variantProps] = (0, import_system_rsc.mapPropsVariants)(originalProps, import_theme.kbd.variantKeys);
        const _a = props, { as, children, className, keys, title, classNames } = _a, otherProps = __objRest(_a, ["as", "children", "className", "keys", "title", "classNames"]);
        const Component = as || "kbd";
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.kbd)(__spreadValues({}, variantProps)),
          [...Object.values(variantProps)]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const keysToRender = typeof keys === "string" ? [keys] : Array.isArray(keys) ? keys : [];
        const getKbdProps = (props2 = {}) => __spreadProps(__spreadValues(__spreadValues({}, otherProps), props2), {
          className: (0, import_shared_utils.clsx)(slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2.className) }))
        });
        return { Component, slots, classNames, title, children, keysToRender, getKbdProps };
      }
      var kbdKeysMap = {
        command: "\u2318",
        shift: "\u21E7",
        ctrl: "\u2303",
        option: "\u2325",
        enter: "\u21B5",
        delete: "\u232B",
        escape: "\u238B",
        tab: "\u21E5",
        capslock: "\u21EA",
        up: "\u2191",
        right: "\u2192",
        down: "\u2193",
        left: "\u2190",
        pageup: "\u21DE",
        pagedown: "\u21DF",
        home: "\u2196",
        end: "\u2198",
        help: "?",
        space: "\u2423"
      };
      var kbdKeysLabelMap = {
        command: "Command",
        shift: "Shift",
        ctrl: "Control",
        option: "Option",
        enter: "Enter",
        delete: "Delete",
        escape: "Escape",
        tab: "Tab",
        capslock: "Caps Lock",
        up: "Up",
        right: "Right",
        down: "Down",
        left: "Left",
        pageup: "Page Up",
        pagedown: "Page Down",
        home: "Home",
        end: "End",
        help: "Help",
        space: "Space"
      };
      var import_jsx_runtime = require_jsx_runtime();
      var Kbd = (0, import_system_rsc2.forwardRef)((props, ref) => {
        const { Component, children, slots, classNames, keysToRender, getKbdProps } = useKbd(__spreadValues({}, props));
        const keysContent = (0, import_react22.useMemo)(() => {
          return keysToRender.map((key) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "abbr",
            {
              className: slots.abbr({ class: classNames == null ? void 0 : classNames.abbr }),
              title: kbdKeysLabelMap[key],
              children: kbdKeysMap[key]
            },
            key
          ));
        }, [keysToRender]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Component, __spreadProps(__spreadValues({ ref }, getKbdProps()), { children: [
          keysContent,
          children && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: slots.content({ class: classNames == null ? void 0 : classNames.content }), children })
        ] }));
      });
      Kbd.displayName = "NextUI.Kbd";
      var kbd_default = Kbd;
    }
  });

  // node_modules/@react-stately/list/dist/main.js
  var require_main42 = __commonJS({
    "node_modules/@react-stately/list/dist/main.js"(exports, module) {
      var $jitug$react = require_react();
      var $jitug$reactstatelyselection = require_main16();
      var $jitug$reactstatelycollections = require_main15();
      var $jitug$reactstatelyutils = require_main6();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useListState", () => $5450691d3629f6ea$export$2f645645f7bca764);
      $parcel$export(module.exports, "useSingleSelectListState", () => $b9e99587a092d199$export$e7f05e985daf4b5f);
      $parcel$export(module.exports, "ListCollection", () => $c9aa5a224613c979$export$d085fb9e920b5ca7);
      var $c9aa5a224613c979$export$d085fb9e920b5ca7 = class {
        *[Symbol.iterator]() {
          yield* __yieldStar(this.iterable);
        }
        get size() {
          return this.keyMap.size;
        }
        getKeys() {
          return this.keyMap.keys();
        }
        getKeyBefore(key) {
          let node = this.keyMap.get(key);
          return node ? node.prevKey : null;
        }
        getKeyAfter(key) {
          let node = this.keyMap.get(key);
          return node ? node.nextKey : null;
        }
        getFirstKey() {
          return this.firstKey;
        }
        getLastKey() {
          return this.lastKey;
        }
        getItem(key) {
          return this.keyMap.get(key);
        }
        at(idx) {
          const keys = [
            ...this.getKeys()
          ];
          return this.getItem(keys[idx]);
        }
        getChildren(key) {
          let node = this.keyMap.get(key);
          return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
        }
        constructor(nodes) {
          this.keyMap = /* @__PURE__ */ new Map();
          this.iterable = nodes;
          let visit = (node) => {
            this.keyMap.set(node.key, node);
            if (node.childNodes && node.type === "section")
              for (let child of node.childNodes)
                visit(child);
          };
          for (let node of nodes)
            visit(node);
          let last;
          let index3 = 0;
          for (let [key, node] of this.keyMap) {
            if (last) {
              last.nextKey = key;
              node.prevKey = last.key;
            } else {
              this.firstKey = key;
              node.prevKey = void 0;
            }
            if (node.type === "item")
              node.index = index3++;
            last = node;
            last.nextKey = void 0;
          }
          this.lastKey = last === null || last === void 0 ? void 0 : last.key;
        }
      };
      function $5450691d3629f6ea$export$2f645645f7bca764(props) {
        let { filter } = props;
        let selectionState = (0, $jitug$reactstatelyselection.useMultipleSelectionState)(props);
        let disabledKeys = (0, $jitug$react.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set(), [
          props.disabledKeys
        ]);
        let factory = (0, $jitug$react.useCallback)((nodes) => filter ? new (0, $c9aa5a224613c979$export$d085fb9e920b5ca7)(filter(nodes)) : new (0, $c9aa5a224613c979$export$d085fb9e920b5ca7)(nodes), [
          filter
        ]);
        let context = (0, $jitug$react.useMemo)(() => ({
          suppressTextValueWarning: props.suppressTextValueWarning
        }), [
          props.suppressTextValueWarning
        ]);
        let collection = (0, $jitug$reactstatelycollections.useCollection)(props, factory, context);
        let selectionManager = (0, $jitug$react.useMemo)(() => new (0, $jitug$reactstatelyselection.SelectionManager)(collection, selectionState), [
          collection,
          selectionState
        ]);
        const cachedCollection = (0, $jitug$react.useRef)(null);
        (0, $jitug$react.useEffect)(() => {
          if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
            const startItem = cachedCollection.current.getItem(selectionState.focusedKey);
            const cachedItemNodes = [
              ...cachedCollection.current.getKeys()
            ].map((key) => {
              const itemNode = cachedCollection.current.getItem(key);
              return itemNode.type === "item" ? itemNode : null;
            }).filter((node) => node !== null);
            const itemNodes = [
              ...collection.getKeys()
            ].map((key) => {
              const itemNode = collection.getItem(key);
              return itemNode.type === "item" ? itemNode : null;
            }).filter((node) => node !== null);
            const diff = cachedItemNodes.length - itemNodes.length;
            let index3 = Math.min(diff > 1 ? Math.max(startItem.index - diff + 1, 0) : startItem.index, itemNodes.length - 1);
            let newNode;
            while (index3 >= 0) {
              if (!selectionManager.isDisabled(itemNodes[index3].key)) {
                newNode = itemNodes[index3];
                break;
              }
              if (index3 < itemNodes.length - 1)
                index3++;
              else {
                if (index3 > startItem.index)
                  index3 = startItem.index;
                index3--;
              }
            }
            selectionState.setFocusedKey(newNode ? newNode.key : null);
          }
          cachedCollection.current = collection;
        }, [
          collection,
          selectionManager,
          selectionState,
          selectionState.focusedKey
        ]);
        return {
          collection,
          disabledKeys,
          selectionManager
        };
      }
      function $b9e99587a092d199$export$e7f05e985daf4b5f(props) {
        var _props_defaultSelectedKey;
        let [selectedKey, setSelectedKey] = (0, $jitug$reactstatelyutils.useControlledState)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange);
        let selectedKeys = (0, $jitug$react.useMemo)(() => selectedKey != null ? [
          selectedKey
        ] : [], [
          selectedKey
        ]);
        let { collection, disabledKeys, selectionManager } = (0, $5450691d3629f6ea$export$2f645645f7bca764)(__spreadProps(__spreadValues({}, props), {
          selectionMode: "single",
          disallowEmptySelection: true,
          allowDuplicateSelectionEvents: true,
          selectedKeys,
          onSelectionChange: (keys) => {
            var _keys_values_next_value;
            let key = (_keys_values_next_value = keys.values().next().value) !== null && _keys_values_next_value !== void 0 ? _keys_values_next_value : null;
            if (key === selectedKey && props.onSelectionChange)
              props.onSelectionChange(key);
            setSelectedKey(key);
          }
        }));
        let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;
        return {
          collection,
          disabledKeys,
          selectionManager,
          selectedKey,
          setSelectedKey,
          selectedItem
        };
      }
    }
  });

  // node_modules/@react-stately/tabs/dist/main.js
  var require_main43 = __commonJS({
    "node_modules/@react-stately/tabs/dist/main.js"(exports, module) {
      var $7iSyh$react = require_react();
      var $7iSyh$reactstatelylist = require_main42();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useTabListState", () => $817f925d289daf81$export$4ba071daf4e486);
      function $817f925d289daf81$export$4ba071daf4e486(props) {
        var _props_defaultSelectedKey;
        let state = (0, $7iSyh$reactstatelylist.useSingleSelectListState)(__spreadProps(__spreadValues({}, props), {
          suppressTextValueWarning: true,
          defaultSelectedKey: (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : $817f925d289daf81$var$findDefaultSelectedKey(props.collection, props.disabledKeys ? new Set(props.disabledKeys) : /* @__PURE__ */ new Set())
        }));
        let { selectionManager, collection, selectedKey: currentSelectedKey } = state;
        let lastSelectedKey = (0, $7iSyh$react.useRef)(currentSelectedKey);
        (0, $7iSyh$react.useEffect)(() => {
          let selectedKey = currentSelectedKey;
          if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {
            selectedKey = $817f925d289daf81$var$findDefaultSelectedKey(collection, state.disabledKeys);
            if (selectedKey != null)
              selectionManager.setSelectedKeys([
                selectedKey
              ]);
          }
          if (selectedKey != null && selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current)
            selectionManager.setFocusedKey(selectedKey);
          lastSelectedKey.current = selectedKey;
        });
        return __spreadProps(__spreadValues({}, state), {
          isDisabled: props.isDisabled || false
        });
      }
      function $817f925d289daf81$var$findDefaultSelectedKey(collection, disabledKeys) {
        let selectedKey = null;
        if (collection) {
          selectedKey = collection.getFirstKey();
          while (disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey())
            selectedKey = collection.getKeyAfter(selectedKey);
          if (disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey())
            selectedKey = collection.getFirstKey();
        }
        return selectedKey;
      }
    }
  });

  // node_modules/@react-aria/tabs/dist/main.js
  var require_main44 = __commonJS({
    "node_modules/@react-aria/tabs/dist/main.js"(exports, module) {
      var $1cJu1$reactariautils = require_main7();
      var $1cJu1$reactariaselection = require_main18();
      var $1cJu1$reactariafocus = require_main12();
      var $1cJu1$react = require_react();
      var $1cJu1$reactariai18n = require_main10();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useTab", () => $4eeea1c984cc0628$export$fdf4756d5b8ef90a);
      $parcel$export(module.exports, "useTabPanel", () => $8db1928b18472a1f$export$fae0121b5afe572d);
      $parcel$export(module.exports, "useTabList", () => $f2b4a4926440e901$export$773e389e644c5874);
      var $a217ebca77471970$export$c5f62239608282b6 = /* @__PURE__ */ new WeakMap();
      function $a217ebca77471970$export$567fc7097e064344(state, key, role) {
        if (typeof key === "string")
          key = key.replace(/\s+/g, "");
        let baseId = $a217ebca77471970$export$c5f62239608282b6.get(state);
        return `${baseId}-${role}-${key}`;
      }
      function $4eeea1c984cc0628$export$fdf4756d5b8ef90a(props, state, ref) {
        var _item_props;
        let { key, isDisabled: propsDisabled, shouldSelectOnPressUp } = props;
        let { selectionManager: manager, selectedKey } = state;
        let isSelected = key === selectedKey;
        let isDisabled = propsDisabled || state.isDisabled || state.disabledKeys.has(key);
        let { itemProps, isPressed } = (0, $1cJu1$reactariaselection.useSelectableItem)({
          selectionManager: manager,
          key,
          ref,
          isDisabled,
          shouldSelectOnPressUp,
          linkBehavior: "selection"
        });
        let tabId = (0, $a217ebca77471970$export$567fc7097e064344)(state, key, "tab");
        let tabPanelId = (0, $a217ebca77471970$export$567fc7097e064344)(state, key, "tabpanel");
        let { tabIndex } = itemProps;
        let item = state.collection.getItem(key);
        let domProps = (0, $1cJu1$reactariautils.filterDOMProps)(item === null || item === void 0 ? void 0 : item.props, {
          isLink: !!(item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.href)
        });
        delete domProps.id;
        return {
          tabProps: (0, $1cJu1$reactariautils.mergeProps)(domProps, itemProps, {
            id: tabId,
            "aria-selected": isSelected,
            "aria-disabled": isDisabled || void 0,
            "aria-controls": isSelected ? tabPanelId : void 0,
            tabIndex: isDisabled ? void 0 : tabIndex,
            role: "tab"
          }),
          isSelected,
          isDisabled,
          isPressed
        };
      }
      function $8db1928b18472a1f$export$fae0121b5afe572d(props, state, ref) {
        let tabIndex = (0, $1cJu1$reactariafocus.useHasTabbableChild)(ref) ? void 0 : 0;
        var _props_id;
        const id = (0, $a217ebca77471970$export$567fc7097e064344)(state, (_props_id = props.id) !== null && _props_id !== void 0 ? _props_id : state === null || state === void 0 ? void 0 : state.selectedKey, "tabpanel");
        const tabPanelProps = (0, $1cJu1$reactariautils.useLabels)(__spreadProps(__spreadValues({}, props), {
          id,
          "aria-labelledby": (0, $a217ebca77471970$export$567fc7097e064344)(state, state === null || state === void 0 ? void 0 : state.selectedKey, "tab")
        }));
        return {
          tabPanelProps: (0, $1cJu1$reactariautils.mergeProps)(tabPanelProps, {
            tabIndex,
            role: "tabpanel",
            "aria-describedby": props["aria-describedby"],
            "aria-details": props["aria-details"]
          })
        };
      }
      var $283e5d8830177ead$export$15010ca3c1abe90b = class {
        getKeyLeftOf(key) {
          if (this.flipDirection)
            return this.getNextKey(key);
          return this.getPreviousKey(key);
        }
        getKeyRightOf(key) {
          if (this.flipDirection)
            return this.getPreviousKey(key);
          return this.getNextKey(key);
        }
        getKeyAbove(key) {
          return this.getPreviousKey(key);
        }
        getKeyBelow(key) {
          return this.getNextKey(key);
        }
        getFirstKey() {
          let key = this.collection.getFirstKey();
          if (this.disabledKeys.has(key))
            key = this.getNextKey(key);
          return key;
        }
        getLastKey() {
          let key = this.collection.getLastKey();
          if (this.disabledKeys.has(key))
            key = this.getPreviousKey(key);
          return key;
        }
        getNextKey(key) {
          do {
            key = this.collection.getKeyAfter(key);
            if (key == null)
              key = this.collection.getFirstKey();
          } while (this.disabledKeys.has(key));
          return key;
        }
        getPreviousKey(key) {
          do {
            key = this.collection.getKeyBefore(key);
            if (key == null)
              key = this.collection.getLastKey();
          } while (this.disabledKeys.has(key));
          return key;
        }
        constructor(collection, direction, orientation, disabledKeys = /* @__PURE__ */ new Set()) {
          this.collection = collection;
          this.flipDirection = direction === "rtl" && orientation === "horizontal";
          this.disabledKeys = disabledKeys;
        }
      };
      function $f2b4a4926440e901$export$773e389e644c5874(props, state, ref) {
        let { orientation = "horizontal", keyboardActivation = "automatic" } = props;
        let { collection, selectionManager: manager, disabledKeys } = state;
        let { direction } = (0, $1cJu1$reactariai18n.useLocale)();
        let delegate = (0, $1cJu1$react.useMemo)(() => new (0, $283e5d8830177ead$export$15010ca3c1abe90b)(collection, direction, orientation, disabledKeys), [
          collection,
          disabledKeys,
          orientation,
          direction
        ]);
        let { collectionProps } = (0, $1cJu1$reactariaselection.useSelectableCollection)({
          ref,
          selectionManager: manager,
          keyboardDelegate: delegate,
          selectOnFocus: keyboardActivation === "automatic",
          disallowEmptySelection: true,
          scrollRef: ref,
          linkBehavior: "selection"
        });
        let tabsId = (0, $1cJu1$reactariautils.useId)();
        (0, $a217ebca77471970$export$c5f62239608282b6).set(state, tabsId);
        let tabListLabelProps = (0, $1cJu1$reactariautils.useLabels)(__spreadProps(__spreadValues({}, props), {
          id: tabsId
        }));
        return {
          tabListProps: __spreadProps(__spreadValues({}, (0, $1cJu1$reactariautils.mergeProps)(collectionProps, tabListLabelProps)), {
            role: "tablist",
            "aria-orientation": orientation,
            tabIndex: void 0
          })
        };
      }
    }
  });

  // node_modules/@nextui-org/tabs/dist/index.js
  var require_dist58 = __commonJS({
    "node_modules/@nextui-org/tabs/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
        isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
        mod
      ));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Tab: () => tab_item_base_default,
        Tabs: () => tabs_default,
        useTabs: () => useTabs
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react22 = require_react();
      var import_framer_motion2 = require_cjs2();
      var import_system4 = require_dist4();
      var import_system = require_dist4();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_shared_utils = require_dist9();
      var import_react_utils2 = require_dist10();
      var import_react3 = require_react();
      var import_tabs = require_main43();
      var import_tabs2 = require_main44();
      var import_utils = require_main7();
      function useTabs(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.tabs.variantKeys);
        const _a = props, {
          ref,
          as,
          className,
          children,
          classNames,
          disableCursorAnimation,
          motionProps
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "className",
          "children",
          "classNames",
          "disableCursorAnimation",
          "motionProps"
        ]);
        const Component = as || "div";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const state = (0, import_tabs.useTabListState)(__spreadValues({
          children
        }, otherProps));
        const { tabListProps } = (0, import_tabs2.useTabList)(otherProps, state, domRef);
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.tabs)(__spreadProps(__spreadValues({}, variantProps), {
            className
          })),
          [...Object.values(variantProps), className]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const values = (0, import_react3.useMemo)(
          () => ({
            state,
            slots,
            classNames,
            motionProps,
            listRef: domRef,
            disableCursorAnimation,
            isDisabled: originalProps == null ? void 0 : originalProps.isDisabled,
            disableAnimation: originalProps == null ? void 0 : originalProps.disableAnimation
          }),
          [
            state,
            slots,
            domRef,
            motionProps,
            disableCursorAnimation,
            originalProps == null ? void 0 : originalProps.disableAnimation,
            originalProps == null ? void 0 : originalProps.isDisabled,
            classNames
          ]
        );
        const getBaseProps = (0, import_react3.useCallback)(
          (props2) => __spreadValues({
            "data-slot": "base",
            className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2 == null ? void 0 : props2.className) })
          }, (0, import_utils.mergeProps)(
            (0, import_react_utils2.filterDOMProps)(otherProps, {
              enabled: shouldFilterDOMProps
            }),
            props2
          )),
          [baseStyles, otherProps, slots]
        );
        const getTabListProps = (0, import_react3.useCallback)(
          (props2) => __spreadValues({
            ref: domRef,
            "data-slot": "tabList",
            className: slots.tabList({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.tabList, props2 == null ? void 0 : props2.className) })
          }, (0, import_utils.mergeProps)(tabListProps, props2)),
          [domRef, tabListProps, classNames, slots]
        );
        return {
          Component,
          domRef,
          state,
          values,
          getBaseProps,
          getTabListProps
        };
      }
      var import_system2 = require_dist4();
      var import_react_utils3 = require_dist10();
      var import_shared_utils2 = require_dist9();
      var import_utils2 = require_main7();
      var import_scroll_into_view_if_needed = __toESM2(require_dist31());
      var import_focus = require_main12();
      var import_tabs3 = require_main44();
      var import_interactions = require_main11();
      var import_framer_motion = require_cjs2();
      var import_use_is_mounted = require_dist39();
      var import_jsx_runtime = require_jsx_runtime();
      var Tab = (0, import_system2.forwardRef)((props, ref) => {
        var _a;
        const _a2 = props, {
          className,
          as,
          item,
          state,
          classNames,
          isDisabled: isDisabledProp,
          listRef,
          slots,
          motionProps,
          disableAnimation,
          disableCursorAnimation,
          onClick
        } = _a2, otherProps = __objRest(_a2, [
          "className",
          "as",
          "item",
          "state",
          "classNames",
          "isDisabled",
          "listRef",
          "slots",
          "motionProps",
          "disableAnimation",
          "disableCursorAnimation",
          "onClick"
        ]);
        const { key } = item;
        const domRef = (0, import_react_utils3.useDOMRef)(ref);
        const Component = as || "button";
        const shouldFilterDOMProps = typeof Component === "string";
        const {
          tabProps,
          isSelected,
          isDisabled: isDisabledItem,
          isPressed
        } = (0, import_tabs3.useTab)({ key }, state, domRef);
        const isDisabled = isDisabledProp || isDisabledItem;
        const { focusProps, isFocused, isFocusVisible } = (0, import_focus.useFocusRing)();
        const { hoverProps, isHovered } = (0, import_interactions.useHover)({
          isDisabled
        });
        const tabStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.tab, className);
        const [, isMounted] = (0, import_use_is_mounted.useIsMounted)({
          rerender: true
        });
        const handleClick = () => {
          (0, import_utils2.chain)(onClick, tabProps.onClick);
          if (!(domRef == null ? void 0 : domRef.current) || !(listRef == null ? void 0 : listRef.current))
            return;
          (0, import_scroll_into_view_if_needed.default)(domRef.current, {
            scrollMode: "if-needed",
            behavior: "smooth",
            block: "end",
            inline: "end",
            boundary: listRef == null ? void 0 : listRef.current
          });
        };
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            "data-disabled": (0, import_shared_utils2.dataAttr)(isDisabledItem),
            "data-focus": (0, import_shared_utils2.dataAttr)(isFocused),
            "data-focus-visible": (0, import_shared_utils2.dataAttr)(isFocusVisible),
            "data-hover": (0, import_shared_utils2.dataAttr)(isHovered),
            "data-hover-unselected": (0, import_shared_utils2.dataAttr)((isHovered || isPressed) && !isSelected),
            "data-pressed": (0, import_shared_utils2.dataAttr)(isPressed),
            "data-selected": (0, import_shared_utils2.dataAttr)(isSelected),
            "data-slot": "tab"
          }, (0, import_utils2.mergeProps)(
            tabProps,
            !isDisabled ? __spreadValues(__spreadValues({}, focusProps), hoverProps) : {},
            (0, import_react_utils3.filterDOMProps)(otherProps, {
              enabled: shouldFilterDOMProps,
              omitPropNames: /* @__PURE__ */ new Set(["title"])
            })
          )), {
            className: (_a = slots.tab) == null ? void 0 : _a.call(slots, { class: tabStyles }),
            title: otherProps == null ? void 0 : otherProps.titleValue,
            type: Component === "button" ? "button" : void 0,
            onClick: handleClick,
            children: [
              isSelected && !disableAnimation && !disableCursorAnimation && isMounted ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                import_framer_motion.motion.span,
                __spreadValues({
                  className: slots.cursor({ class: classNames == null ? void 0 : classNames.cursor }),
                  "data-slot": "cursor",
                  layoutDependency: false,
                  layoutId: "cursor",
                  transition: {
                    type: "spring",
                    bounce: 0.15,
                    duration: 0.5
                  }
                }, motionProps)
              ) : null,
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                "div",
                {
                  className: slots.tabContent({
                    class: classNames == null ? void 0 : classNames.tabContent
                  }),
                  "data-slot": "tabContent",
                  children: item.rendered
                }
              )
            ]
          })
        );
      });
      Tab.displayName = "NextUI.Tab";
      var tab_default = Tab;
      var import_system3 = require_dist4();
      var import_react_utils4 = require_dist10();
      var import_shared_utils3 = require_dist9();
      var import_utils3 = require_main7();
      var import_tabs4 = require_main44();
      var import_focus2 = require_main12();
      var import_jsx_runtime2 = require_jsx_runtime();
      var TabPanel = (0, import_system3.forwardRef)((props, ref) => {
        var _a, _b, _c;
        const _a2 = props, { as, state, className, slots, classNames } = _a2, otherProps = __objRest(_a2, ["as", "state", "className", "slots", "classNames"]);
        const Component = as || "div";
        const domRef = (0, import_react_utils4.useDOMRef)(ref);
        const { tabPanelProps } = (0, import_tabs4.useTabPanel)(props, state, domRef);
        const { focusProps, isFocused, isFocusVisible } = (0, import_focus2.useFocusRing)();
        const selectedItem = state.selectedItem;
        const content = (_a = selectedItem == null ? void 0 : selectedItem.props) == null ? void 0 : _a.children;
        const tabPanelStyles = (0, import_shared_utils3.clsx)(classNames == null ? void 0 : classNames.panel, className, (_b = selectedItem == null ? void 0 : selectedItem.props) == null ? void 0 : _b.className);
        if (!content) {
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          Component,
          __spreadProps(__spreadValues({
            ref: domRef,
            "data-focus": isFocused,
            "data-focus-visible": isFocusVisible
          }, (0, import_utils3.mergeProps)(tabPanelProps, focusProps, otherProps)), {
            className: (_c = slots.panel) == null ? void 0 : _c.call(slots, { class: tabPanelStyles }),
            "data-slot": "panel",
            children: content
          })
        );
      });
      TabPanel.displayName = "NextUI.TabPanel";
      var tab_panel_default = TabPanel;
      var import_jsx_runtime3 = require_jsx_runtime();
      function Tabs(props, ref) {
        var _a;
        const { Component, values, state, getBaseProps, getTabListProps } = useTabs(__spreadProps(__spreadValues({}, props), {
          ref
        }));
        const layoutId = (0, import_react22.useId)();
        const layoutGroupEnabled = !props.disableAnimation && !props.disableCursorAnimation;
        const tabsProps = {
          state,
          listRef: values.listRef,
          slots: values.slots,
          classNames: values.classNames,
          isDisabled: values.isDisabled,
          motionProps: values.motionProps,
          disableAnimation: values.disableAnimation,
          disableCursorAnimation: values.disableCursorAnimation
        };
        const tabs2 = [...state.collection].map((item) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(tab_default, __spreadValues(__spreadValues({ item }, item.props), tabsProps), item.key));
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", __spreadProps(__spreadValues({}, getBaseProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Component, __spreadProps(__spreadValues({}, getTabListProps()), { children: layoutGroupEnabled ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_framer_motion2.LayoutGroup, { id: layoutId, children: tabs2 }) : tabs2 })) })),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            tab_panel_default,
            {
              classNames: values.classNames,
              slots: values.slots,
              state: values.state
            },
            (_a = state.selectedItem) == null ? void 0 : _a.key
          )
        ] });
      }
      var tabs_default = (0, import_system4.forwardRef)(Tabs);
      Tabs.displayName = "NextUI.Tabs";
      var import_aria_utils = require_dist6();
      var TabItemBase = import_aria_utils.BaseItem;
      var tab_item_base_default = TabItemBase;
    }
  });

  // node_modules/@nextui-org/skeleton/dist/index.js
  var require_dist59 = __commonJS({
    "node_modules/@nextui-org/skeleton/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Skeleton: () => skeleton_default,
        useSkeleton: () => useSkeleton
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system_rsc2 = require_dist3();
      var import_system_rsc = require_dist3();
      var import_theme = require_dist5();
      var import_shared_utils = require_dist9();
      var import_react3 = require_react();
      function useSkeleton(originalProps) {
        const [props, variantProps] = (0, import_system_rsc.mapPropsVariants)(originalProps, import_theme.skeleton.variantKeys);
        const _a = props, { as, children, isLoaded = false, className, classNames } = _a, otherProps = __objRest(_a, ["as", "children", "isLoaded", "className", "classNames"]);
        const Component = as || "div";
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.skeleton)(__spreadValues({}, variantProps)),
          [...Object.values(variantProps), children]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const getSkeletonProps = (props2 = {}) => {
          return __spreadValues({
            "data-loaded": (0, import_shared_utils.dataAttr)(isLoaded),
            className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2 == null ? void 0 : props2.className) })
          }, otherProps);
        };
        const getContentProps = (props2 = {}) => {
          return {
            className: slots.content({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.content, props2 == null ? void 0 : props2.className) })
          };
        };
        return { Component, children, slots, classNames, getSkeletonProps, getContentProps };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var Skeleton = (0, import_system_rsc2.forwardRef)((props, ref) => {
        const { Component, children, getSkeletonProps, getContentProps } = useSkeleton(__spreadValues({}, props));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadProps(__spreadValues({ ref }, getSkeletonProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", __spreadProps(__spreadValues({}, getContentProps()), { children })) }));
      });
      Skeleton.displayName = "NextUI.Skeleton";
      var skeleton_default = Skeleton;
    }
  });

  // node_modules/@nextui-org/use-data-scroll-overflow/dist/index.js
  var require_dist60 = __commonJS({
    "node_modules/@nextui-org/use-data-scroll-overflow/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useDataScrollOverflow: () => useDataScrollOverflow
      });
      module.exports = __toCommonJS2(src_exports);
      var import_react3 = require_react();
      function useDataScrollOverflow(props = {}) {
        const { domRef, isEnabled = true, overflowCheck = "vertical", offset = 0 } = props;
        (0, import_react3.useEffect)(() => {
          const el = domRef == null ? void 0 : domRef.current;
          const checkOverflow = () => {
            if (!el)
              return;
            if (overflowCheck === "vertical" || overflowCheck === "both") {
              const hasElementsAbove = el.scrollTop > offset;
              const hasElementsBelow = el.scrollTop + el.clientHeight + offset < el.scrollHeight;
              if (hasElementsAbove && hasElementsBelow) {
                el.dataset.topBottomScroll = "true";
                el.removeAttribute("data-top-scroll");
                el.removeAttribute("data-bottom-scroll");
              } else {
                el.dataset.topScroll = hasElementsAbove.toString();
                el.dataset.bottomScroll = hasElementsBelow.toString();
                el.removeAttribute("data-top-bottom-scroll");
              }
            }
            if (overflowCheck === "horizontal" || overflowCheck === "both") {
              const hasElementsLeft = el.scrollLeft > offset;
              const hasElementsRight = el.scrollLeft + el.clientWidth + offset < el.scrollWidth;
              if (hasElementsLeft && hasElementsRight) {
                el.dataset.leftRightScroll = "true";
                el.removeAttribute("data-left-scroll");
                el.removeAttribute("data-right-scroll");
              } else {
                el.dataset.leftScroll = hasElementsLeft.toString();
                el.dataset.rightScroll = hasElementsRight.toString();
                el.removeAttribute("data-left-right-scroll");
              }
            }
          };
          const clearOverflow = () => {
            if (!el)
              return;
            el.removeAttribute("data-top-scroll");
            el.removeAttribute("data-bottom-scroll");
            el.removeAttribute("data-top-bottom-scroll");
            el.removeAttribute("data-left-scroll");
            el.removeAttribute("data-right-scroll");
            el.removeAttribute("data-left-right-scroll");
          };
          if (isEnabled) {
            checkOverflow();
            el == null ? void 0 : el.addEventListener("scroll", checkOverflow);
          } else {
            clearOverflow();
          }
          return () => {
            el == null ? void 0 : el.removeEventListener("scroll", checkOverflow);
            clearOverflow();
          };
        }, [isEnabled, overflowCheck, domRef]);
      }
    }
  });

  // node_modules/@nextui-org/scroll-shadow/dist/index.js
  var require_dist61 = __commonJS({
    "node_modules/@nextui-org/scroll-shadow/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        ScrollShadow: () => scroll_shadow_default,
        useScrollShadow: () => useScrollShadow
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system2 = require_dist4();
      var import_system = require_dist4();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_use_data_scroll_overflow = require_dist60();
      var import_react3 = require_react();
      function useScrollShadow(originalProps) {
        var _a;
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.scrollShadow.variantKeys);
        const _a2 = props, {
          ref,
          as,
          children,
          className,
          size = 40,
          offset = 0,
          isEnabled = true,
          style
        } = _a2, otherProps = __objRest(_a2, [
          "ref",
          "as",
          "children",
          "className",
          "size",
          "offset",
          "isEnabled",
          "style"
        ]);
        const Component = as || "div";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        (0, import_use_data_scroll_overflow.useDataScrollOverflow)({
          domRef,
          offset,
          isEnabled,
          overflowCheck: (_a = originalProps.orientation) != null ? _a : "vertical"
        });
        const styles = (0, import_react3.useMemo)(
          () => (0, import_theme.scrollShadow)(__spreadProps(__spreadValues({}, variantProps), {
            className
          })),
          [...Object.values(variantProps), className]
        );
        const getBaseProps = (props2 = {}) => {
          var _a22;
          return __spreadValues(__spreadValues({
            ref: domRef,
            className: styles,
            "data-orientation": (_a22 = originalProps.orientation) != null ? _a22 : "vertical",
            style: __spreadValues(__spreadValues({
              "--scroll-shadow-size": `${size}px`
            }, style), props2.style)
          }, otherProps), props2);
        };
        return { Component, styles, domRef, children, getBaseProps };
      }
      var import_jsx_runtime = require_jsx_runtime();
      var ScrollShadow = (0, import_system2.forwardRef)((props, ref) => {
        const { Component, children, getBaseProps } = useScrollShadow(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children }));
      });
      ScrollShadow.displayName = "NextUI.ScrollShadow";
      var scroll_shadow_default = ScrollShadow;
    }
  });

  // node_modules/@react-aria/listbox/dist/main.js
  var require_main45 = __commonJS({
    "node_modules/@react-aria/listbox/dist/main.js"(exports, module) {
      var $eFCLV$reactariautils = require_main7();
      var $eFCLV$reactariainteractions = require_main11();
      var $eFCLV$reactarialabel = require_main22();
      var $eFCLV$reactariaselection = require_main18();
      var $eFCLV$reactstatelycollections = require_main15();
      function $parcel$export(e, n, v, s) {
        Object.defineProperty(e, n, { get: v, set: s, enumerable: true, configurable: true });
      }
      $parcel$export(module.exports, "useListBox", () => $a3ce5bb3074610af$export$50eacbbf140a3141);
      $parcel$export(module.exports, "useOption", () => $c164f9f79f4cef2d$export$497855f14858aa34);
      $parcel$export(module.exports, "useListBoxSection", () => $f32afd5f225c3320$export$c3f9f39876e4bc7);
      $parcel$export(module.exports, "listData", () => $87beb89ab4a308fd$export$3585ede4d035bf14);
      $parcel$export(module.exports, "getItemId", () => $87beb89ab4a308fd$export$9145995848b05025);
      var $87beb89ab4a308fd$export$3585ede4d035bf14 = /* @__PURE__ */ new WeakMap();
      function $87beb89ab4a308fd$var$normalizeKey(key) {
        if (typeof key === "string")
          return key.replace(/\s*/g, "");
        return "" + key;
      }
      function $87beb89ab4a308fd$export$9145995848b05025(state, itemKey) {
        let data = $87beb89ab4a308fd$export$3585ede4d035bf14.get(state);
        if (!data)
          throw new Error("Unknown list");
        return `${data.id}-option-${$87beb89ab4a308fd$var$normalizeKey(itemKey)}`;
      }
      function $a3ce5bb3074610af$export$50eacbbf140a3141(props, state, ref) {
        let domProps = (0, $eFCLV$reactariautils.filterDOMProps)(props, {
          labelable: true
        });
        let selectionBehavior = props.selectionBehavior || "toggle";
        let linkBehavior = props.linkBehavior || (selectionBehavior === "replace" ? "action" : "override");
        if (selectionBehavior === "toggle" && linkBehavior === "action")
          linkBehavior = "override";
        let { listProps } = (0, $eFCLV$reactariaselection.useSelectableList)(__spreadProps(__spreadValues({}, props), {
          ref,
          selectionManager: state.selectionManager,
          collection: state.collection,
          disabledKeys: state.disabledKeys,
          linkBehavior
        }));
        let { focusWithinProps } = (0, $eFCLV$reactariainteractions.useFocusWithin)({
          onFocusWithin: props.onFocus,
          onBlurWithin: props.onBlur,
          onFocusWithinChange: props.onFocusChange
        });
        let id = (0, $eFCLV$reactariautils.useId)(props.id);
        (0, $87beb89ab4a308fd$export$3585ede4d035bf14).set(state, {
          id,
          shouldUseVirtualFocus: props.shouldUseVirtualFocus,
          shouldSelectOnPressUp: props.shouldSelectOnPressUp,
          shouldFocusOnHover: props.shouldFocusOnHover,
          isVirtualized: props.isVirtualized,
          onAction: props.onAction,
          linkBehavior
        });
        let { labelProps, fieldProps } = (0, $eFCLV$reactarialabel.useLabel)(__spreadProps(__spreadValues({}, props), {
          id,
          // listbox is not an HTML input element so it
          // shouldn't be labeled by a <label> element.
          labelElementType: "span"
        }));
        return {
          labelProps,
          listBoxProps: (0, $eFCLV$reactariautils.mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === "multiple" ? {
            "aria-multiselectable": "true"
          } : {}, __spreadValues({
            role: "listbox"
          }, (0, $eFCLV$reactariautils.mergeProps)(fieldProps, listProps)))
        };
      }
      function $c164f9f79f4cef2d$export$497855f14858aa34(props, state, ref) {
        var _item_props;
        let { key } = props;
        let data = (0, $87beb89ab4a308fd$export$3585ede4d035bf14).get(state);
        var _props_isDisabled;
        let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.disabledKeys.has(key);
        var _props_isSelected;
        let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);
        var _props_shouldSelectOnPressUp;
        let shouldSelectOnPressUp = (_props_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _props_shouldSelectOnPressUp !== void 0 ? _props_shouldSelectOnPressUp : data === null || data === void 0 ? void 0 : data.shouldSelectOnPressUp;
        var _props_shouldFocusOnHover;
        let shouldFocusOnHover = (_props_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _props_shouldFocusOnHover !== void 0 ? _props_shouldFocusOnHover : data === null || data === void 0 ? void 0 : data.shouldFocusOnHover;
        var _props_shouldUseVirtualFocus;
        let shouldUseVirtualFocus = (_props_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _props_shouldUseVirtualFocus !== void 0 ? _props_shouldUseVirtualFocus : data === null || data === void 0 ? void 0 : data.shouldUseVirtualFocus;
        var _props_isVirtualized;
        let isVirtualized = (_props_isVirtualized = props.isVirtualized) !== null && _props_isVirtualized !== void 0 ? _props_isVirtualized : data === null || data === void 0 ? void 0 : data.isVirtualized;
        let labelId = (0, $eFCLV$reactariautils.useSlotId)();
        let descriptionId = (0, $eFCLV$reactariautils.useSlotId)();
        let optionProps = {
          role: "option",
          "aria-disabled": isDisabled || void 0,
          "aria-selected": state.selectionManager.selectionMode !== "none" ? isSelected : void 0
        };
        if (!((0, $eFCLV$reactariautils.isMac)() && (0, $eFCLV$reactariautils.isWebKit)())) {
          optionProps["aria-label"] = props["aria-label"];
          optionProps["aria-labelledby"] = labelId;
          optionProps["aria-describedby"] = descriptionId;
        }
        let item = state.collection.getItem(key);
        if (isVirtualized) {
          let index3 = Number(item === null || item === void 0 ? void 0 : item.index);
          optionProps["aria-posinset"] = Number.isNaN(index3) ? void 0 : index3 + 1;
          optionProps["aria-setsize"] = (0, $eFCLV$reactstatelycollections.getItemCount)(state.collection);
        }
        let { itemProps, isPressed, isFocused, hasAction, allowsSelection } = (0, $eFCLV$reactariaselection.useSelectableItem)({
          selectionManager: state.selectionManager,
          key,
          ref,
          shouldSelectOnPressUp,
          allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,
          isVirtualized,
          shouldUseVirtualFocus,
          isDisabled,
          onAction: (data === null || data === void 0 ? void 0 : data.onAction) ? () => {
            var _data_onAction;
            return data === null || data === void 0 ? void 0 : (_data_onAction = data.onAction) === null || _data_onAction === void 0 ? void 0 : _data_onAction.call(data, key);
          } : void 0,
          linkBehavior: data === null || data === void 0 ? void 0 : data.linkBehavior
        });
        let { hoverProps } = (0, $eFCLV$reactariainteractions.useHover)({
          isDisabled: isDisabled || !shouldFocusOnHover,
          onHoverStart() {
            if (!(0, $eFCLV$reactariainteractions.isFocusVisible)()) {
              state.selectionManager.setFocused(true);
              state.selectionManager.setFocusedKey(key);
            }
          }
        });
        let domProps = (0, $eFCLV$reactariautils.filterDOMProps)(item === null || item === void 0 ? void 0 : item.props, {
          isLink: !!(item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.href)
        });
        delete domProps.id;
        return {
          optionProps: __spreadProps(__spreadValues(__spreadValues({}, optionProps), (0, $eFCLV$reactariautils.mergeProps)(domProps, itemProps, hoverProps)), {
            id: (0, $87beb89ab4a308fd$export$9145995848b05025)(state, key)
          }),
          labelProps: {
            id: labelId
          },
          descriptionProps: {
            id: descriptionId
          },
          isFocused,
          isFocusVisible: isFocused && (0, $eFCLV$reactariainteractions.isFocusVisible)(),
          isSelected,
          isDisabled,
          isPressed,
          allowsSelection,
          hasAction
        };
      }
      function $f32afd5f225c3320$export$c3f9f39876e4bc7(props) {
        let { heading, "aria-label": ariaLabel } = props;
        let headingId = (0, $eFCLV$reactariautils.useId)();
        return {
          itemProps: {
            role: "presentation"
          },
          headingProps: heading ? {
            // Techincally, listbox cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, using role="presentation",
            // and only use it as a visual label for the nested group.
            id: headingId,
            role: "presentation"
          } : {},
          groupProps: {
            role: "group",
            "aria-label": ariaLabel,
            "aria-labelledby": heading ? headingId : void 0
          }
        };
      }
    }
  });

  // node_modules/@nextui-org/listbox/dist/index.js
  var require_dist62 = __commonJS({
    "node_modules/@nextui-org/listbox/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Listbox: () => listbox_default,
        ListboxItem: () => listbox_item_base_default,
        ListboxSection: () => listbox_section_base_default,
        useListbox: () => useListbox
      });
      module.exports = __toCommonJS2(src_exports);
      var import_system4 = require_dist4();
      var import_utils3 = require_main7();
      var import_listbox = require_main45();
      var import_theme = require_dist5();
      var import_list = require_main42();
      var import_react_utils = require_dist10();
      var import_react3 = require_react();
      function useListbox(props) {
        const _a = props, {
          ref,
          as,
          state: propState,
          variant,
          color,
          onAction,
          onSelectionChange,
          disableAnimation,
          itemClasses,
          className
        } = _a, otherProps = __objRest(_a, [
          "ref",
          "as",
          "state",
          "variant",
          "color",
          "onAction",
          "onSelectionChange",
          "disableAnimation",
          "itemClasses",
          "className"
        ]);
        const Component = as || "ul";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const innerState = (0, import_list.useListState)(__spreadProps(__spreadValues({}, props), { onSelectionChange }));
        const state = propState || innerState;
        const { listBoxProps } = (0, import_listbox.useListBox)(__spreadProps(__spreadValues({}, props), { onAction }), state, domRef);
        const styles = (0, import_react3.useMemo)(() => (0, import_theme.listbox)({ className }), [className]);
        const getBaseProps = (props2 = {}) => {
          return __spreadValues(__spreadValues(__spreadValues({
            ref: domRef,
            className: styles
          }, listBoxProps), (0, import_react_utils.filterDOMProps)(otherProps, {
            enabled: shouldFilterDOMProps
          })), props2);
        };
        return {
          Component,
          state,
          variant,
          color,
          disableAnimation,
          className,
          itemClasses,
          getBaseProps
        };
      }
      var import_theme3 = require_dist5();
      var import_react4 = require_react();
      var import_system3 = require_dist4();
      var import_utils2 = require_main7();
      var import_shared_utils2 = require_dist9();
      var import_divider = require_dist8();
      var import_listbox3 = require_main45();
      var import_react32 = require_react();
      var import_system2 = require_dist4();
      var import_react22 = require_react();
      var import_theme2 = require_dist5();
      var import_system = require_dist4();
      var import_focus = require_main12();
      var import_react_utils2 = require_dist10();
      var import_shared_utils = require_dist9();
      var import_listbox2 = require_main45();
      var import_utils = require_main7();
      var import_interactions = require_main11();
      var import_use_is_mobile = require_dist44();
      function useListboxItem(originalProps) {
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme2.listboxItem.variantKeys);
        const _a = props, {
          as,
          item,
          state,
          description,
          startContent,
          endContent,
          isVirtualized,
          selectedIcon,
          className,
          classNames,
          autoFocus,
          onPress,
          onClick,
          isReadOnly = false
        } = _a, otherProps = __objRest(_a, [
          "as",
          "item",
          "state",
          "description",
          "startContent",
          "endContent",
          "isVirtualized",
          "selectedIcon",
          "className",
          "classNames",
          "autoFocus",
          "onPress",
          "onClick",
          "isReadOnly"
        ]);
        const disableAnimation = originalProps.disableAnimation;
        const domRef = (0, import_react22.useRef)(null);
        const Component = as || "li";
        const shouldFilterDOMProps = typeof Component === "string";
        const { rendered, key } = item;
        const isDisabled = state.disabledKeys.has(key) || originalProps.isDisabled;
        const isSelectable = state.selectionManager.selectionMode !== "none";
        const isMobile = (0, import_use_is_mobile.useIsMobile)();
        const { pressProps, isPressed } = (0, import_interactions.usePress)({
          ref: domRef,
          isDisabled,
          onPress
        });
        const { isHovered, hoverProps } = (0, import_interactions.useHover)({
          isDisabled
        });
        const { isFocusVisible, focusProps } = (0, import_focus.useFocusRing)({
          autoFocus
        });
        const { isFocused, isSelected, optionProps, labelProps, descriptionProps } = (0, import_listbox2.useOption)(
          {
            key,
            isDisabled,
            "aria-label": props["aria-label"],
            isVirtualized
          },
          state,
          domRef
        );
        let itemProps = optionProps;
        const slots = (0, import_react22.useMemo)(
          () => (0, import_theme2.listboxItem)(__spreadProps(__spreadValues({}, variantProps), {
            isDisabled,
            disableAnimation
          })),
          [...Object.values(variantProps), isDisabled, disableAnimation]
        );
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        if (isReadOnly) {
          itemProps = (0, import_shared_utils.removeEvents)(itemProps);
        }
        const getItemProps = (props2 = {}) => __spreadProps(__spreadValues({
          ref: domRef
        }, (0, import_utils.mergeProps)(
          { onClick },
          itemProps,
          isReadOnly ? {} : (0, import_utils.mergeProps)(focusProps, pressProps),
          hoverProps,
          (0, import_react_utils2.filterDOMProps)(otherProps, {
            enabled: shouldFilterDOMProps
          }),
          props2
        )), {
          "data-selectable": (0, import_shared_utils.dataAttr)(isSelectable),
          "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
          "data-hover": (0, import_shared_utils.dataAttr)(isMobile ? isHovered || isPressed : isHovered),
          "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
          "data-selected": (0, import_shared_utils.dataAttr)(isSelected),
          "data-pressed": (0, import_shared_utils.dataAttr)(isPressed),
          "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
          className: slots.base({ class: (0, import_shared_utils.clsx)(baseStyles, props2.className) })
        });
        const getLabelProps = (props2 = {}) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(labelProps, props2)), {
          "data-label": (0, import_shared_utils.dataAttr)(true),
          className: slots.title({ class: classNames == null ? void 0 : classNames.title })
        });
        const getDescriptionProps = (props2 = {}) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(descriptionProps, props2)), {
          className: slots.description({ class: classNames == null ? void 0 : classNames.description })
        });
        const getWrapperProps = (props2 = {}) => __spreadProps(__spreadValues({}, (0, import_utils.mergeProps)(props2)), {
          className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper })
        });
        const getSelectedIconProps = (0, import_react22.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              "aria-hidden": (0, import_shared_utils.dataAttr)(true),
              "data-disabled": (0, import_shared_utils.dataAttr)(isDisabled),
              className: slots.selectedIcon({ class: classNames == null ? void 0 : classNames.selectedIcon })
            }, props2);
          },
          [isDisabled, slots, classNames]
        );
        return {
          Component,
          domRef,
          slots,
          classNames,
          isSelectable,
          isSelected,
          isDisabled,
          rendered,
          description,
          startContent,
          endContent,
          selectedIcon,
          disableAnimation,
          getItemProps,
          getLabelProps,
          getWrapperProps,
          getDescriptionProps,
          getSelectedIconProps
        };
      }
      var import_jsx_runtime = require_jsx_runtime();
      function ListboxSelectedIcon(props) {
        const _a = props, { isSelected, disableAnimation } = _a, otherProps = __objRest(_a, ["isSelected", "disableAnimation"]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "svg",
          __spreadProps(__spreadValues({
            "aria-hidden": "true",
            "data-selected": isSelected,
            role: "presentation",
            viewBox: "0 0 17 18"
          }, otherProps), {
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "polyline",
              {
                fill: "none",
                points: "1 9 7 14 15 4",
                stroke: "currentColor",
                strokeDasharray: 22,
                strokeDashoffset: isSelected ? 44 : 66,
                strokeLinecap: "round",
                strokeLinejoin: "round",
                strokeWidth: 1.5,
                style: !disableAnimation ? {
                  transition: "stroke-dashoffset 200ms ease"
                } : {}
              }
            )
          })
        );
      }
      var import_jsx_runtime2 = require_jsx_runtime();
      var ListboxItem = (0, import_system2.forwardRef)((props, _) => {
        const {
          Component,
          rendered,
          description,
          isSelectable,
          isSelected,
          isDisabled,
          selectedIcon,
          startContent,
          endContent,
          disableAnimation,
          getItemProps,
          getLabelProps,
          getWrapperProps,
          getDescriptionProps,
          getSelectedIconProps
        } = useListboxItem(props);
        const selectedContent = (0, import_react32.useMemo)(() => {
          const defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ListboxSelectedIcon, { disableAnimation, isSelected });
          if (typeof selectedIcon === "function") {
            return selectedIcon({ icon: defaultIcon, isSelected, isDisabled });
          }
          if (selectedIcon)
            return selectedIcon;
          return defaultIcon;
        }, [selectedIcon, isSelected, isDisabled, disableAnimation]);
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, getItemProps()), { children: [
          startContent,
          description ? /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", __spreadProps(__spreadValues({}, getWrapperProps()), { children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children: rendered })),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getDescriptionProps()), { children: description }))
          ] })) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getLabelProps()), { children: rendered })),
          isSelectable && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", __spreadProps(__spreadValues({}, getSelectedIconProps()), { children: selectedContent })),
          endContent
        ] }));
      });
      ListboxItem.displayName = "NextUI.ListboxItem";
      var listbox_item_default = ListboxItem;
      var import_jsx_runtime3 = require_jsx_runtime();
      var ListboxSection = (0, import_system3.forwardRef)(
        (_a, _) => {
          var _b = _a, {
            item,
            state,
            as,
            variant,
            color,
            disableAnimation,
            className,
            classNames,
            showDivider = false,
            dividerProps = {},
            itemClasses,
            title
          } = _b, otherProps = __objRest(_b, [
            "item",
            "state",
            "as",
            "variant",
            "color",
            "disableAnimation",
            "className",
            "classNames",
            "showDivider",
            "dividerProps",
            "itemClasses",
            "title"
          ]);
          const Component = as || "li";
          const slots = (0, import_react4.useMemo)(() => (0, import_theme3.listboxSection)(), []);
          const baseStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.base, className);
          const dividerStyles = (0, import_shared_utils2.clsx)(classNames == null ? void 0 : classNames.divider, dividerProps == null ? void 0 : dividerProps.className);
          const { itemProps, headingProps, groupProps } = (0, import_listbox3.useListBoxSection)({
            heading: item.rendered,
            "aria-label": item["aria-label"]
          });
          return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
            Component,
            __spreadProps(__spreadValues({
              "data-slot": "base"
            }, (0, import_utils2.mergeProps)(itemProps, otherProps)), {
              className: slots.base({ class: baseStyles }),
              children: [
                item.rendered && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                  "span",
                  __spreadProps(__spreadValues({}, headingProps), {
                    className: slots.heading({ class: classNames == null ? void 0 : classNames.heading }),
                    "data-slot": "heading",
                    children: item.rendered
                  })
                ),
                /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(
                  "ul",
                  __spreadProps(__spreadValues({}, groupProps), {
                    className: slots.group({ class: classNames == null ? void 0 : classNames.group }),
                    "data-has-title": !!item.rendered,
                    "data-slot": "group",
                    children: [
                      [...item.childNodes].map((node) => {
                        const { key: nodeKey, props: nodeProps } = node;
                        let listboxItem2 = /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                          listbox_item_default,
                          __spreadValues({
                            classNames: itemClasses,
                            color,
                            disableAnimation,
                            item: node,
                            state,
                            variant
                          }, nodeProps),
                          nodeKey
                        );
                        if (node.wrapper) {
                          listboxItem2 = node.wrapper(listboxItem2);
                        }
                        return listboxItem2;
                      }),
                      showDivider && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                        import_divider.Divider,
                        __spreadValues({
                          as: "li",
                          className: slots.divider({
                            class: dividerStyles
                          })
                        }, dividerProps)
                      )
                    ]
                  })
                )
              ]
            }),
            item.key
          );
        }
      );
      ListboxSection.displayName = "NextUI.ListboxSection";
      var listbox_section_default = ListboxSection;
      var import_jsx_runtime4 = require_jsx_runtime();
      function Listbox(props, ref) {
        const { Component, state, getBaseProps, color, disableAnimation, variant, itemClasses } = useListbox(__spreadProps(__spreadValues({}, props), { ref }));
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Component, __spreadProps(__spreadValues({}, getBaseProps()), { children: [...state.collection].map((item) => {
          var _a;
          const itemProps = __spreadValues({
            color,
            disableAnimation,
            item,
            state,
            variant
          }, item.props);
          if (item.type === "section") {
            return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(listbox_section_default, __spreadProps(__spreadValues({}, itemProps), { itemClasses }), item.key);
          }
          let listboxItem2 = /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            listbox_item_default,
            __spreadProps(__spreadValues({}, itemProps), {
              classNames: (0, import_utils3.mergeProps)(itemClasses, (_a = item.props) == null ? void 0 : _a.classNames)
            }),
            item.key
          );
          if (item.wrapper) {
            listboxItem2 = item.wrapper(listboxItem2);
          }
          return listboxItem2;
        }) }));
      }
      Listbox.displayName = "NextUI.Listbox";
      var listbox_default = (0, import_system4.forwardRef)(Listbox);
      Listbox.displayName = "NextUI.Listbox";
      var import_aria_utils = require_dist6();
      var ListboxItemBase = import_aria_utils.BaseItem;
      var listbox_item_base_default = ListboxItemBase;
      var import_aria_utils2 = require_dist6();
      var ListboxSectionBase = import_aria_utils2.BaseSection;
      var listbox_section_base_default = ListboxSectionBase;
    }
  });

  // node_modules/@nextui-org/use-aria-multiselect/dist/index.js
  var require_dist63 = __commonJS({
    "node_modules/@nextui-org/use-aria-multiselect/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        useMultiSelect: () => useMultiSelect,
        useMultiSelectListState: () => useMultiSelectListState,
        useMultiSelectState: () => useMultiSelectState
      });
      module.exports = __toCommonJS2(src_exports);
      var import_i18n = require_main10();
      var import_interactions = require_main11();
      var import_label = require_main22();
      var import_menu = require_main33();
      var import_selection = require_main18();
      var import_utils = require_main7();
      var import_react3 = require_react();
      function useMultiSelect(props, state, ref) {
        const { disallowEmptySelection, isDisabled } = props;
        const collator = (0, import_i18n.useCollator)({ usage: "search", sensitivity: "base" });
        const delegate = (0, import_react3.useMemo)(
          () => new import_selection.ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator),
          [state.collection, state.disabledKeys, collator]
        );
        const { menuTriggerProps, menuProps } = (0, import_menu.useMenuTrigger)(
          {
            isDisabled,
            type: "listbox"
          },
          state,
          ref
        );
        const triggerOnKeyDown = (e) => {
          if (state.selectionMode === "single") {
            switch (e.key) {
              case "ArrowLeft": {
                e.preventDefault();
                const key = state.selectedKeys.size > 0 ? delegate.getKeyAbove(state.selectedKeys.values().next().value) : delegate.getFirstKey();
                if (key) {
                  state.setSelectedKeys([key]);
                }
                break;
              }
              case "ArrowRight": {
                e.preventDefault();
                const key = state.selectedKeys.size > 0 ? delegate.getKeyBelow(state.selectedKeys.values().next().value) : delegate.getFirstKey();
                if (key) {
                  state.setSelectedKeys([key]);
                }
                break;
              }
            }
          }
        };
        const { typeSelectProps } = (0, import_selection.useTypeSelect)({
          keyboardDelegate: delegate,
          selectionManager: state.selectionManager,
          onTypeSelect(key) {
            state.setSelectedKeys([key]);
          }
        });
        const { labelProps, fieldProps, descriptionProps, errorMessageProps } = (0, import_label.useField)(__spreadProps(__spreadValues({}, props), {
          labelElementType: "span"
        }));
        typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;
        delete typeSelectProps.onKeyDownCapture;
        const domProps = (0, import_utils.filterDOMProps)(props, { labelable: true });
        const triggerProps = (0, import_utils.mergeProps)(typeSelectProps, menuTriggerProps, fieldProps);
        const valueId = (0, import_utils.useId)();
        return {
          labelProps: __spreadProps(__spreadValues({}, labelProps), {
            onClick: () => {
              var _a;
              if (!props.isDisabled) {
                (_a = ref.current) == null ? void 0 : _a.focus();
                (0, import_interactions.setInteractionModality)("keyboard");
              }
            }
          }),
          triggerProps: (0, import_utils.mergeProps)(domProps, __spreadProps(__spreadValues({}, triggerProps), {
            onKeyDown: (0, import_utils.chain)(triggerProps.onKeyDown, triggerOnKeyDown, props.onKeyDown),
            onKeyUp: props.onKeyUp,
            "aria-labelledby": [
              valueId,
              domProps["aria-label"] !== void 0 ? domProps["aria-labelledby"] !== void 0 ? domProps["aria-labelledby"] : triggerProps.id : triggerProps["aria-labelledby"]
            ].join(" "),
            onFocus(e) {
              if (state.isFocused) {
                return;
              }
              if (props.onFocus) {
                props.onFocus(e);
              }
              state.setFocused(true);
            },
            onBlur(e) {
              if (state.isOpen) {
                return;
              }
              if (props.onBlur) {
                props.onBlur(e);
              }
              state.setFocused(false);
            }
          })),
          valueProps: {
            id: valueId
          },
          menuProps: __spreadProps(__spreadValues({}, menuProps), {
            disallowEmptySelection,
            autoFocus: state.focusStrategy || true,
            shouldSelectOnPressUp: true,
            shouldFocusOnHover: true,
            onBlur: (e) => {
              if (e.currentTarget.contains(e.relatedTarget)) {
                return;
              }
              if (props.onBlur) {
                props.onBlur(e);
              }
              state.setFocused(false);
            },
            onFocus: menuProps == null ? void 0 : menuProps.onFocus,
            "aria-labelledby": [
              fieldProps["aria-labelledby"],
              triggerProps["aria-label"] && !fieldProps["aria-labelledby"] ? triggerProps.id : null
            ].filter(Boolean).join(" ")
          }),
          descriptionProps,
          errorMessageProps
        };
      }
      var import_list = require_main42();
      function useMultiSelectListState(props) {
        const {
          collection,
          disabledKeys,
          selectionManager,
          selectionManager: { setSelectedKeys, selectedKeys, selectionMode }
        } = (0, import_list.useListState)(props);
        const missingKeys = [];
        const selectedItems = selectedKeys.size !== 0 ? Array.from(selectedKeys).map((key) => {
          const item = collection.getItem(key);
          if (!item) {
            missingKeys.push(key);
          }
          return item;
        }).filter(Boolean) : null;
        if (missingKeys.length) {
          console.warn(
            `Select: Keys "${missingKeys.join(
              ", "
            )}" passed to "selectedKeys" are not present in the collection.`
          );
        }
        return {
          collection,
          disabledKeys,
          selectionManager,
          selectionMode,
          selectedKeys,
          setSelectedKeys: setSelectedKeys.bind(selectionManager),
          selectedItems
        };
      }
      var import_menu2 = require_main34();
      var import_react22 = require_react();
      function useMultiSelectState(props) {
        const [isFocused, setFocused] = (0, import_react22.useState)(false);
        const triggerState = (0, import_menu2.useMenuTriggerState)(props);
        const listState = useMultiSelectListState(__spreadProps(__spreadValues({}, props), {
          onSelectionChange: (keys) => {
            if (props.onSelectionChange != null) {
              if (keys === "all") {
                props.onSelectionChange(new Set(listState.collection.getKeys()));
              } else {
                props.onSelectionChange(keys);
              }
            }
            if (props.selectionMode === "single") {
              triggerState.close();
            }
          }
        }));
        return __spreadProps(__spreadValues(__spreadValues({}, listState), triggerState), {
          close() {
            triggerState.close();
          },
          open() {
            if (listState.collection.size !== 0) {
              triggerState.open();
            }
          },
          toggle(focusStrategy) {
            if (listState.collection.size !== 0) {
              triggerState.toggle(focusStrategy);
            }
          },
          isFocused,
          setFocused
        });
      }
    }
  });

  // node_modules/@nextui-org/select/dist/index.js
  var require_dist64 = __commonJS({
    "node_modules/@nextui-org/select/dist/index.js"(exports, module) {
      "use client";
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        Select: () => select_default,
        SelectItem: () => import_listbox2.ListboxItem,
        SelectSection: () => import_listbox2.ListboxSection,
        useSelect: () => useSelect
      });
      module.exports = __toCommonJS2(src_exports);
      var import_listbox2 = require_dist62();
      var import_listbox = require_dist62();
      var import_popover = require_dist43();
      var import_shared_icons = require_dist12();
      var import_spinner = require_dist19();
      var import_system2 = require_dist4();
      var import_scroll_shadow = require_dist61();
      var import_react22 = require_react();
      var import_visually_hidden2 = require_main13();
      var import_framer_motion = require_cjs2();
      var import_utils = require_main7();
      var import_interactions = require_main11();
      var import_visually_hidden = require_main13();
      var import_jsx_runtime = require_jsx_runtime();
      function useHiddenSelect(props, state, triggerRef) {
        var _a;
        let { autoComplete, name, isDisabled, isRequired, selectionMode, onChange } = props;
        let modality = (0, import_interactions.useInteractionModality)();
        let { visuallyHiddenProps } = (0, import_visually_hidden.useVisuallyHidden)();
        (0, import_utils.useFormReset)(props.selectRef, state.selectedKey, state.setSelectedKey);
        return {
          containerProps: __spreadProps(__spreadValues({}, visuallyHiddenProps), {
            "aria-hidden": true,
            ["data-a11y-ignore"]: "aria-hidden-focus"
          }),
          inputProps: {
            type: "text",
            tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,
            autoComplete,
            value: (_a = [...state.selectedKeys].join(",")) != null ? _a : "",
            required: isRequired,
            style: { fontSize: 16 },
            onFocus: () => {
              var _a2;
              return (_a2 = triggerRef.current) == null ? void 0 : _a2.focus();
            },
            disabled: isDisabled,
            onChange: () => {
            }
          },
          selectProps: {
            name,
            tabIndex: -1,
            autoComplete,
            disabled: isDisabled,
            size: state.collection.size,
            value: selectionMode === "multiple" ? [...state.selectedKeys].map((k) => String(k)) : [...state.selectedKeys][0],
            multiple: selectionMode === "multiple",
            onChange: (e) => {
              state.setSelectedKeys(e.target.value);
              onChange == null ? void 0 : onChange(e);
            }
          }
        };
      }
      function HiddenSelect(props) {
        var _a;
        let { state, triggerRef, selectRef, label, name, isDisabled } = props;
        let { containerProps, inputProps, selectProps } = useHiddenSelect(
          __spreadProps(__spreadValues({}, props), { selectRef }),
          state,
          triggerRef
        );
        if (state.collection.size <= 300) {
          return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", __spreadProps(__spreadValues({}, containerProps), { "data-testid": "hidden-select-container", children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)("input", __spreadValues({}, inputProps)),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("label", { children: [
              label,
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("select", __spreadProps(__spreadValues({}, selectProps), { ref: selectRef, children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", {}),
                [...state.collection.getKeys()].map((key) => {
                  let item = state.collection.getItem(key);
                  if ((item == null ? void 0 : item.type) === "item") {
                    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", { value: item.key, children: item.textValue }, item.key);
                  }
                })
              ] }))
            ] })
          ] }));
        } else if (name) {
          return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            "input",
            {
              autoComplete: selectProps.autoComplete,
              disabled: isDisabled,
              name,
              type: "hidden",
              value: (_a = [...state.selectedKeys].join(",")) != null ? _a : ""
            }
          );
        }
        return null;
      }
      var import_system = require_dist4();
      var import_theme = require_dist5();
      var import_react_utils = require_dist10();
      var import_react3 = require_react();
      var import_use_aria_button = require_dist21();
      var import_focus = require_main12();
      var import_shared_utils = require_dist9();
      var import_utils2 = require_main7();
      var import_interactions2 = require_main11();
      var import_use_aria_multiselect = require_dist63();
      function useSelect(originalProps) {
        var _a, _b;
        const [props, variantProps] = (0, import_system.mapPropsVariants)(originalProps, import_theme.select.variantKeys);
        const disableAnimation = (_a = originalProps.disableAnimation) != null ? _a : false;
        let _a2 = props, {
          ref,
          as,
          isOpen,
          label,
          name,
          children,
          isLoading,
          selectorIcon,
          defaultOpen,
          onOpenChange,
          startContent,
          endContent,
          description,
          errorMessage,
          renderValue,
          onSelectionChange,
          placeholder,
          disallowEmptySelection = false,
          selectionMode = "single",
          spinnerRef,
          scrollRef: scrollRefProp,
          popoverProps: userPopoverProps,
          scrollShadowProps: userScrollShadowProps,
          listboxProps: userListboxProps,
          validationState,
          spinnerProps,
          onChange,
          onClose,
          className,
          classNames
        } = _a2, otherProps = __objRest(_a2, [
          "ref",
          "as",
          "isOpen",
          "label",
          "name",
          "children",
          "isLoading",
          "selectorIcon",
          "defaultOpen",
          "onOpenChange",
          "startContent",
          "endContent",
          "description",
          "errorMessage",
          "renderValue",
          "onSelectionChange",
          "placeholder",
          "disallowEmptySelection",
          "selectionMode",
          "spinnerRef",
          "scrollRef",
          "popoverProps",
          "scrollShadowProps",
          "listboxProps",
          "validationState",
          "spinnerProps",
          "onChange",
          "onClose",
          "className",
          "classNames"
        ]);
        const scrollShadowRef = (0, import_react_utils.useDOMRef)(scrollRefProp);
        const defaultRelatedComponentsProps = {
          popoverProps: {
            placement: "bottom",
            triggerScaleOnOpen: false,
            offset: 5,
            disableAnimation
          },
          scrollShadowProps: {
            ref: scrollShadowRef,
            isEnabled: (_b = originalProps.showScrollIndicators) != null ? _b : true,
            hideScrollBar: true,
            offset: 15
          },
          listboxProps: {
            disableAnimation
          }
        };
        userPopoverProps = __spreadValues(__spreadValues({}, defaultRelatedComponentsProps.popoverProps), userPopoverProps);
        userScrollShadowProps = __spreadValues(__spreadValues({}, defaultRelatedComponentsProps.scrollShadowProps), userScrollShadowProps);
        userListboxProps = __spreadValues(__spreadValues({}, defaultRelatedComponentsProps.listboxProps), userListboxProps);
        const Component = as || "button";
        const shouldFilterDOMProps = typeof Component === "string";
        const domRef = (0, import_react_utils.useDOMRef)(ref);
        const triggerRef = (0, import_react3.useRef)(null);
        const listboxRef = (0, import_react3.useRef)(null);
        const popoverRef = (0, import_react3.useRef)(null);
        const state = (0, import_use_aria_multiselect.useMultiSelectState)(__spreadProps(__spreadValues({}, props), {
          isOpen,
          selectionMode,
          disallowEmptySelection,
          children,
          isRequired: originalProps == null ? void 0 : originalProps.isRequired,
          isDisabled: originalProps == null ? void 0 : originalProps.isDisabled,
          defaultOpen,
          onOpenChange: (open) => {
            onOpenChange == null ? void 0 : onOpenChange(open);
            if (!open) {
              onClose == null ? void 0 : onClose();
            }
          },
          onSelectionChange: (keys) => {
            onSelectionChange == null ? void 0 : onSelectionChange(keys);
            if (onChange && typeof onChange === "function" && domRef.current) {
              const event = {
                target: __spreadProps(__spreadValues({}, domRef.current), {
                  value: Array.from(keys).join(","),
                  name: domRef.current.name
                })
              };
              onChange(event);
            }
          }
        }));
        const { labelProps, triggerProps, valueProps, menuProps, descriptionProps, errorMessageProps } = (0, import_use_aria_multiselect.useMultiSelect)(
          __spreadProps(__spreadValues({}, props), { disallowEmptySelection, isDisabled: originalProps == null ? void 0 : originalProps.isDisabled }),
          state,
          triggerRef
        );
        const { isPressed, buttonProps } = (0, import_use_aria_button.useAriaButton)(triggerProps, triggerRef);
        const { focusProps, isFocused, isFocusVisible } = (0, import_focus.useFocusRing)();
        const { isHovered, hoverProps } = (0, import_interactions2.useHover)({ isDisabled: originalProps == null ? void 0 : originalProps.isDisabled });
        const labelPlacement = (0, import_react3.useMemo)(() => {
          var _a22;
          if ((!originalProps.labelPlacement || originalProps.labelPlacement === "inside") && !label) {
            return "outside";
          }
          return (_a22 = originalProps.labelPlacement) != null ? _a22 : "inside";
        }, [originalProps.labelPlacement, label]);
        const hasHelper = !!description || !!errorMessage;
        const hasPlaceholder = !!placeholder;
        const isInvalid = validationState === "invalid" || originalProps.isInvalid;
        const shouldLabelBeOutside = labelPlacement === "outside-left" || labelPlacement === "outside" && hasPlaceholder;
        const shouldLabelBeInside = labelPlacement === "inside";
        const isLabelPlaceholder = !hasPlaceholder && labelPlacement !== "outside-left";
        const isFilled = state.isOpen || !!state.selectedItems || !!startContent || !!endContent;
        const baseStyles = (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.base, className);
        const slots = (0, import_react3.useMemo)(
          () => (0, import_theme.select)(__spreadProps(__spreadValues({}, variantProps), {
            isLabelPlaceholder,
            isInvalid,
            className
          })),
          [...Object.values(variantProps), isInvalid, isLabelPlaceholder, className]
        );
        (0, import_react3.useEffect)(() => {
          if (state.isOpen && popoverRef.current && listboxRef.current) {
            let selectedItem = listboxRef.current.querySelector("[aria-selected=true] [data-label=true]");
            let scrollShadow = scrollShadowRef.current;
            if (selectedItem && scrollShadow && selectedItem.parentElement) {
              let scrollShadowRect = scrollShadow == null ? void 0 : scrollShadow.getBoundingClientRect();
              let scrollShadowHeight = scrollShadowRect.height;
              scrollShadow.scrollTop = selectedItem.parentElement.offsetTop - scrollShadowHeight / 2 + selectedItem.parentElement.clientHeight / 2;
            }
          }
        }, [state.isOpen, disableAnimation]);
        (0, import_react3.useEffect)(() => {
          if (state.isOpen && popoverRef.current && triggerRef.current) {
            let selectRect = triggerRef.current.getBoundingClientRect();
            let popover = popoverRef.current;
            popover.style.width = selectRect.width + "px";
          }
        }, [state.isOpen]);
        const getBaseProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues({
            "data-filled": (0, import_shared_utils.dataAttr)(isFilled),
            "data-has-helper": (0, import_shared_utils.dataAttr)(hasHelper),
            className: slots.base({
              class: (0, import_shared_utils.clsx)(baseStyles, props2.className)
            })
          }, props2),
          [slots, hasHelper, isFilled, baseStyles]
        );
        const getTriggerProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadValues({
              ref: triggerRef,
              "data-open": (0, import_shared_utils.dataAttr)(state.isOpen),
              "data-disabled": (0, import_shared_utils.dataAttr)(originalProps == null ? void 0 : originalProps.isDisabled),
              "data-focus": (0, import_shared_utils.dataAttr)(isFocused),
              "data-pressed": (0, import_shared_utils.dataAttr)(isPressed),
              "data-focus-visible": (0, import_shared_utils.dataAttr)(isFocusVisible),
              "data-hover": (0, import_shared_utils.dataAttr)(isHovered),
              className: slots.trigger({ class: classNames == null ? void 0 : classNames.trigger })
            }, (0, import_utils2.mergeProps)(
              buttonProps,
              focusProps,
              hoverProps,
              (0, import_react_utils.filterDOMProps)(otherProps, {
                enabled: shouldFilterDOMProps
              }),
              (0, import_react_utils.filterDOMProps)(props2)
            ));
          },
          [
            slots,
            triggerRef,
            state.isOpen,
            classNames == null ? void 0 : classNames.trigger,
            originalProps == null ? void 0 : originalProps.isDisabled,
            isFocused,
            isPressed,
            isFocusVisible,
            isHovered,
            buttonProps,
            focusProps,
            hoverProps,
            otherProps,
            shouldFilterDOMProps
          ]
        );
        const getHiddenSelectProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues({
            state,
            triggerRef,
            selectRef: domRef,
            selectionMode,
            label: originalProps == null ? void 0 : originalProps.label,
            name: originalProps == null ? void 0 : originalProps.name,
            isRequired: originalProps == null ? void 0 : originalProps.isRequired,
            autoComplete: originalProps == null ? void 0 : originalProps.autoComplete,
            isDisabled: originalProps == null ? void 0 : originalProps.isDisabled,
            onChange
          }, props2),
          [
            state,
            selectionMode,
            originalProps == null ? void 0 : originalProps.label,
            originalProps == null ? void 0 : originalProps.autoComplete,
            originalProps == null ? void 0 : originalProps.name,
            originalProps == null ? void 0 : originalProps.isDisabled,
            triggerRef
          ]
        );
        const getLabelProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues(__spreadValues({
            className: slots.label({
              class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.label, props2.className)
            })
          }, labelProps), props2),
          [slots, classNames == null ? void 0 : classNames.label, labelProps]
        );
        const getValueProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues(__spreadValues({
            className: slots.value({
              class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.value, props2.className)
            })
          }, valueProps), props2),
          [slots, classNames == null ? void 0 : classNames.value, valueProps]
        );
        const getListboxWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => __spreadValues({
            className: slots.listboxWrapper({
              class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.listboxWrapper, props2 == null ? void 0 : props2.className)
            })
          }, (0, import_utils2.mergeProps)(userScrollShadowProps, props2)),
          [slots.listboxWrapper, classNames == null ? void 0 : classNames.listboxWrapper, userScrollShadowProps]
        );
        const getListboxProps = (props2 = {}) => {
          return __spreadValues({
            state,
            ref: listboxRef,
            className: slots.listbox({
              class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.listbox, props2 == null ? void 0 : props2.className)
            })
          }, (0, import_utils2.mergeProps)(userListboxProps, props2, menuProps));
        };
        const getPopoverProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({
              state,
              triggerRef,
              ref: popoverRef,
              scrollRef: listboxRef,
              triggerType: "listbox",
              className: slots.popover({
                class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.popover, props2.className)
              })
            }, (0, import_utils2.mergeProps)(userPopoverProps, props2)), {
              offset: state.selectedItems && state.selectedItems.length > 0 ? state.selectedItems.length * 1e-8 + ((userPopoverProps == null ? void 0 : userPopoverProps.offset) || 0) : userPopoverProps == null ? void 0 : userPopoverProps.offset
            });
          },
          [slots, classNames == null ? void 0 : classNames.popover, userPopoverProps, triggerRef, state, state.selectedItems]
        );
        const getSelectorIconProps = (0, import_react3.useCallback)(
          () => ({
            "aria-hidden": (0, import_shared_utils.dataAttr)(true),
            "data-open": (0, import_shared_utils.dataAttr)(state.isOpen),
            className: slots.selectorIcon({ class: classNames == null ? void 0 : classNames.selectorIcon })
          }),
          [slots, classNames == null ? void 0 : classNames.selectorIcon, state == null ? void 0 : state.isOpen]
        );
        const getInnerWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              className: slots.innerWrapper({
                class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.innerWrapper, props2 == null ? void 0 : props2.className)
              })
            });
          },
          [slots, classNames == null ? void 0 : classNames.innerWrapper]
        );
        const getHelperWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              className: slots.helperWrapper({
                class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.helperWrapper, props2 == null ? void 0 : props2.className)
              })
            });
          },
          [slots, classNames == null ? void 0 : classNames.helperWrapper]
        );
        const getDescriptionProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({}, props2), descriptionProps), {
              className: slots.description({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.description, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, classNames == null ? void 0 : classNames.description]
        );
        const getMainWrapperProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues({}, props2), {
              className: slots.mainWrapper({
                class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.mainWrapper, props2 == null ? void 0 : props2.className)
              })
            });
          },
          [slots, classNames == null ? void 0 : classNames.mainWrapper]
        );
        const getErrorMessageProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({}, props2), errorMessageProps), {
              className: slots.errorMessage({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.errorMessage, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, errorMessageProps, classNames == null ? void 0 : classNames.errorMessage]
        );
        const getSpinnerProps = (0, import_react3.useCallback)(
          (props2 = {}) => {
            return __spreadProps(__spreadValues(__spreadValues({
              "aria-hidden": (0, import_shared_utils.dataAttr)(true),
              color: "current",
              size: "sm"
            }, spinnerProps), props2), {
              ref: spinnerRef,
              className: slots.spinner({ class: (0, import_shared_utils.clsx)(classNames == null ? void 0 : classNames.spinner, props2 == null ? void 0 : props2.className) })
            });
          },
          [slots, spinnerRef, spinnerProps, classNames == null ? void 0 : classNames.spinner]
        );
        return {
          Component,
          domRef,
          state,
          label,
          name,
          triggerRef,
          isLoading,
          placeholder,
          startContent,
          endContent,
          description,
          selectorIcon,
          errorMessage,
          hasHelper,
          labelPlacement,
          hasPlaceholder,
          renderValue,
          selectionMode,
          disableAnimation,
          shouldLabelBeOutside,
          shouldLabelBeInside,
          getBaseProps,
          getTriggerProps,
          getLabelProps,
          getValueProps,
          getListboxProps,
          getPopoverProps,
          getSpinnerProps,
          getMainWrapperProps,
          getListboxWrapperProps,
          getHiddenSelectProps,
          getInnerWrapperProps,
          getHelperWrapperProps,
          getDescriptionProps,
          getErrorMessageProps,
          getSelectorIconProps
        };
      }
      var import_jsx_runtime2 = require_jsx_runtime();
      function Select(props, ref) {
        const {
          Component,
          state,
          label,
          hasHelper,
          isLoading,
          triggerRef,
          selectorIcon = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_shared_icons.ChevronDownIcon, {}),
          description,
          errorMessage,
          startContent,
          endContent,
          placeholder,
          renderValue,
          disableAnimation,
          getBaseProps,
          getLabelProps,
          getTriggerProps,
          getValueProps,
          getListboxProps,
          getPopoverProps,
          getSpinnerProps,
          getMainWrapperProps,
          shouldLabelBeOutside,
          getInnerWrapperProps,
          getHiddenSelectProps,
          getHelperWrapperProps,
          getListboxWrapperProps,
          getDescriptionProps,
          getErrorMessageProps,
          getSelectorIconProps
        } = useSelect(__spreadProps(__spreadValues({}, props), { ref }));
        const labelContent = label ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("label", __spreadProps(__spreadValues({}, getLabelProps()), { children: label })) : null;
        const clonedIcon = (0, import_react22.cloneElement)(selectorIcon, getSelectorIconProps());
        const helperWrapper = (0, import_react22.useMemo)(() => {
          if (!hasHelper)
            return null;
          return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getHelperWrapperProps()), { children: errorMessage ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getErrorMessageProps()), { children: errorMessage })) : description ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", __spreadProps(__spreadValues({}, getDescriptionProps()), { children: description })) : null }));
        }, [
          hasHelper,
          errorMessage,
          description,
          getHelperWrapperProps,
          getErrorMessageProps,
          getDescriptionProps
        ]);
        const renderSelectedItem = (0, import_react22.useMemo)(() => {
          if (!state.selectedItems)
            return placeholder;
          if (renderValue && typeof renderValue === "function") {
            const mappedItems = [...state.selectedItems].map((item) => ({
              key: item.key,
              data: item.value,
              type: item.type,
              props: item.props,
              textValue: item.textValue,
              rendered: item.rendered,
              "aria-label": item["aria-label"]
            }));
            return renderValue(mappedItems);
          }
          return state.selectedItems.map((item) => item.textValue).join(", ");
        }, [state.selectedItems, renderValue]);
        const renderIndicator = (0, import_react22.useMemo)(() => {
          if (isLoading) {
            return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_spinner.Spinner, __spreadValues({}, getSpinnerProps()));
          }
          return clonedIcon;
        }, [isLoading, clonedIcon, getSpinnerProps]);
        const popoverContent = (0, import_react22.useMemo)(
          () => state.isOpen ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_popover.FreeSoloPopover, __spreadProps(__spreadValues({}, getPopoverProps()), { state, triggerRef, children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_scroll_shadow.ScrollShadow, __spreadProps(__spreadValues({}, getListboxWrapperProps()), { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_listbox.Listbox, __spreadValues({}, getListboxProps())) })) })) : null,
          [state.isOpen, getPopoverProps, state, triggerRef, getListboxWrapperProps, getListboxProps]
        );
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", __spreadProps(__spreadValues({}, getBaseProps()), { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(HiddenSelect, __spreadValues({}, getHiddenSelectProps())),
          shouldLabelBeOutside ? labelContent : null,
          /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", __spreadProps(__spreadValues({}, getMainWrapperProps()), { children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(Component, __spreadProps(__spreadValues({}, getTriggerProps()), { children: [
              !shouldLabelBeOutside ? labelContent : null,
              /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", __spreadProps(__spreadValues({}, getInnerWrapperProps()), { children: [
                startContent,
                /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("span", __spreadProps(__spreadValues({}, getValueProps()), { children: [
                  renderSelectedItem,
                  state.selectedItems && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_visually_hidden2.VisuallyHidden, { children: "," })
                ] })),
                endContent
              ] })),
              renderIndicator
            ] })),
            helperWrapper
          ] })),
          disableAnimation ? popoverContent : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_framer_motion.AnimatePresence, { children: popoverContent })
        ] }));
      }
      var select_default = (0, import_system2.forwardRef)(Select);
      Select.displayName = "NextUI.Select";
    }
  });

  // node_modules/@nextui-org/react/dist/index.js
  var require_dist65 = __commonJS({
    "node_modules/@nextui-org/react/dist/index.js"(exports, module) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = (target, all) => {
        for (var name in all)
          __defProp2(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps2 = (to, from, except, desc) => {
        if (from && typeof from === "object" || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
        }
        return to;
      };
      var __reExport = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
      var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
      var src_exports = {};
      __export2(src_exports, {
        VisuallyHidden: () => import_visually_hidden.VisuallyHidden
      });
      module.exports = __toCommonJS2(src_exports);
      __reExport(src_exports, require_dist4(), module.exports);
      __reExport(src_exports, require_dist5(), module.exports);
      __reExport(src_exports, require_dist14(), module.exports);
      __reExport(src_exports, require_dist17(), module.exports);
      __reExport(src_exports, require_dist18(), module.exports);
      __reExport(src_exports, require_dist22(), module.exports);
      __reExport(src_exports, require_dist23(), module.exports);
      __reExport(src_exports, require_dist24(), module.exports);
      __reExport(src_exports, require_dist25(), module.exports);
      __reExport(src_exports, require_dist26(), module.exports);
      __reExport(src_exports, require_dist28(), module.exports);
      __reExport(src_exports, require_dist32(), module.exports);
      __reExport(src_exports, require_dist33(), module.exports);
      __reExport(src_exports, require_dist36(), module.exports);
      __reExport(src_exports, require_dist19(), module.exports);
      __reExport(src_exports, require_dist37(), module.exports);
      __reExport(src_exports, require_dist35(), module.exports);
      __reExport(src_exports, require_dist38(), module.exports);
      __reExport(src_exports, require_dist41(), module.exports);
      __reExport(src_exports, require_dist42(), module.exports);
      __reExport(src_exports, require_dist43(), module.exports);
      __reExport(src_exports, require_dist46(), module.exports);
      __reExport(src_exports, require_dist47(), module.exports);
      __reExport(src_exports, require_dist51(), module.exports);
      __reExport(src_exports, require_dist54(), module.exports);
      __reExport(src_exports, require_dist56(), module.exports);
      __reExport(src_exports, require_dist55(), module.exports);
      __reExport(src_exports, require_dist8(), module.exports);
      __reExport(src_exports, require_dist57(), module.exports);
      __reExport(src_exports, require_dist58(), module.exports);
      __reExport(src_exports, require_dist59(), module.exports);
      __reExport(src_exports, require_dist61(), module.exports);
      __reExport(src_exports, require_dist64(), module.exports);
      __reExport(src_exports, require_dist62(), module.exports);
      __reExport(src_exports, require_dist45(), module.exports);
      __reExport(src_exports, require_dist20(), module.exports);
      var import_visually_hidden = require_main13();
    }
  });

  // client/components/ProfilePicture.jsx
  var require_ProfilePicture = __commonJS({
    "client/components/ProfilePicture.jsx"(exports, module) {
      var React3 = require_react();
      var { useState, useEffect } = require_react();
      var { retrieveProfilePicture: retrieveProfilePicture2 } = (init_dataHelper(), __toCommonJS(dataHelper_exports));
      var PropTypes = require_prop_types();
      var { Avatar } = require_dist65();
      function ProfilePicture(props) {
        const { username, size } = props;
        const [profilePictureName, setProfilePictureName] = useState("");
        useEffect(() => {
          function fetchProfilePictureName() {
            return __async(this, null, function* () {
              const imageName = yield retrieveProfilePicture2(username);
              setProfilePictureName(imageName);
            });
          }
          if (username !== "") {
            fetchProfilePictureName(username);
          }
        }, [username]);
        return /* @__PURE__ */ React3.createElement("div", null, /* @__PURE__ */ React3.createElement(Avatar, { showFallback: true, name: `${username}`, src: `/pictures/profile_pictures/${profilePictureName}`, size: `${size}` }));
      }
      module.exports = ProfilePicture;
      ProfilePicture.propTypes = {
        username: PropTypes.string.isRequired,
        size: PropTypes.string
      };
      ProfilePicture.defaultProps = {
        size: "md"
      };
    }
  });

  // node_modules/cookie/index.js
  var require_cookie = __commonJS({
    "node_modules/cookie/index.js"(exports) {
      "use strict";
      exports.parse = parse;
      exports.serialize = serialize;
      var __toString = Object.prototype.toString;
      var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
      function parse(str, options) {
        if (typeof str !== "string") {
          throw new TypeError("argument str must be a string");
        }
        var obj = {};
        var opt = options || {};
        var dec = opt.decode || decode;
        var index3 = 0;
        while (index3 < str.length) {
          var eqIdx = str.indexOf("=", index3);
          if (eqIdx === -1) {
            break;
          }
          var endIdx = str.indexOf(";", index3);
          if (endIdx === -1) {
            endIdx = str.length;
          } else if (endIdx < eqIdx) {
            index3 = str.lastIndexOf(";", eqIdx - 1) + 1;
            continue;
          }
          var key = str.slice(index3, eqIdx).trim();
          if (void 0 === obj[key]) {
            var val = str.slice(eqIdx + 1, endIdx).trim();
            if (val.charCodeAt(0) === 34) {
              val = val.slice(1, -1);
            }
            obj[key] = tryDecode(val, dec);
          }
          index3 = endIdx + 1;
        }
        return obj;
      }
      function serialize(name, val, options) {
        var opt = options || {};
        var enc = opt.encode || encode;
        if (typeof enc !== "function") {
          throw new TypeError("option encode is invalid");
        }
        if (!fieldContentRegExp.test(name)) {
          throw new TypeError("argument name is invalid");
        }
        var value = enc(val);
        if (value && !fieldContentRegExp.test(value)) {
          throw new TypeError("argument val is invalid");
        }
        var str = name + "=" + value;
        if (null != opt.maxAge) {
          var maxAge = opt.maxAge - 0;
          if (isNaN(maxAge) || !isFinite(maxAge)) {
            throw new TypeError("option maxAge is invalid");
          }
          str += "; Max-Age=" + Math.floor(maxAge);
        }
        if (opt.domain) {
          if (!fieldContentRegExp.test(opt.domain)) {
            throw new TypeError("option domain is invalid");
          }
          str += "; Domain=" + opt.domain;
        }
        if (opt.path) {
          if (!fieldContentRegExp.test(opt.path)) {
            throw new TypeError("option path is invalid");
          }
          str += "; Path=" + opt.path;
        }
        if (opt.expires) {
          var expires = opt.expires;
          if (!isDate(expires) || isNaN(expires.valueOf())) {
            throw new TypeError("option expires is invalid");
          }
          str += "; Expires=" + expires.toUTCString();
        }
        if (opt.httpOnly) {
          str += "; HttpOnly";
        }
        if (opt.secure) {
          str += "; Secure";
        }
        if (opt.priority) {
          var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
          switch (priority) {
            case "low":
              str += "; Priority=Low";
              break;
            case "medium":
              str += "; Priority=Medium";
              break;
            case "high":
              str += "; Priority=High";
              break;
            default:
              throw new TypeError("option priority is invalid");
          }
        }
        if (opt.sameSite) {
          var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
          switch (sameSite) {
            case true:
              str += "; SameSite=Strict";
              break;
            case "lax":
              str += "; SameSite=Lax";
              break;
            case "strict":
              str += "; SameSite=Strict";
              break;
            case "none":
              str += "; SameSite=None";
              break;
            default:
              throw new TypeError("option sameSite is invalid");
          }
        }
        return str;
      }
      function decode(str) {
        return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
      }
      function encode(val) {
        return encodeURIComponent(val);
      }
      function isDate(val) {
        return __toString.call(val) === "[object Date]" || val instanceof Date;
      }
      function tryDecode(str, decode2) {
        try {
          return decode2(str);
        } catch (e) {
          return str;
        }
      }
    }
  });

  // node_modules/universal-cookie/cjs/utils.js
  var require_utils2 = __commonJS({
    "node_modules/universal-cookie/cjs/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.cleanCookies = cleanCookies;
      exports.hasDocumentCookie = hasDocumentCookie;
      exports.parseCookies = parseCookies;
      exports.readCookie = readCookie;
      var cookie = _interopRequireWildcard(require_cookie());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function hasDocumentCookie() {
        return (typeof document === "undefined" ? "undefined" : _typeof(document)) === "object" && typeof document.cookie === "string";
      }
      function cleanCookies() {
        document.cookie.split(";").forEach(function(c) {
          document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + (/* @__PURE__ */ new Date()).toUTCString() + ";path=/");
        });
      }
      function parseCookies(cookies) {
        if (typeof cookies === "string") {
          return cookie.parse(cookies);
        } else if (_typeof(cookies) === "object" && cookies !== null) {
          return cookies;
        } else {
          return {};
        }
      }
      function readCookie(value) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var cleanValue = cleanupCookieValue(value);
        if (!options.doNotParse) {
          try {
            return JSON.parse(cleanValue);
          } catch (e) {
          }
        }
        return value;
      }
      function cleanupCookieValue(value) {
        if (value && value[0] === "j" && value[1] === ":") {
          return value.substr(2);
        }
        return value;
      }
    }
  });

  // node_modules/universal-cookie/cjs/Cookies.js
  var require_Cookies = __commonJS({
    "node_modules/universal-cookie/cjs/Cookies.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var cookie = _interopRequireWildcard(require_cookie());
      var _utils = require_utils2();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return _typeof(key) === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (_typeof(input) !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (_typeof(res) !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      var Cookies = /* @__PURE__ */ function() {
        function Cookies2(cookies) {
          var _this = this;
          var defaultSetOptions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          _classCallCheck(this, Cookies2);
          this.changeListeners = [];
          this.HAS_DOCUMENT_COOKIE = false;
          this.update = function() {
            if (!_this.HAS_DOCUMENT_COOKIE) {
              return;
            }
            var previousCookies = _this.cookies;
            _this.cookies = cookie.parse(document.cookie);
            _this._checkChanges(previousCookies);
          };
          var domCookies = typeof document === "undefined" ? "" : document.cookie;
          this.cookies = (0, _utils.parseCookies)(cookies || domCookies);
          this.defaultSetOptions = defaultSetOptions;
          this.HAS_DOCUMENT_COOKIE = (0, _utils.hasDocumentCookie)();
        }
        _createClass(Cookies2, [{
          key: "_emitChange",
          value: function _emitChange(params) {
            for (var i = 0; i < this.changeListeners.length; ++i) {
              this.changeListeners[i](params);
            }
          }
        }, {
          key: "_checkChanges",
          value: function _checkChanges(newCookies) {
            var _this2 = this;
            var names = new Set(Object.keys(newCookies).concat(Object.keys(this.cookies)));
            names.forEach(function(name) {
              if (newCookies[name] !== _this2.cookies[name]) {
                _this2._emitChange({
                  name,
                  value: (0, _utils.readCookie)(newCookies[name])
                });
              }
            });
          }
        }, {
          key: "_startPolling",
          value: function _startPolling() {
            this.pollingInterval = setInterval(this.update, 300);
          }
        }, {
          key: "_stopPolling",
          value: function _stopPolling() {
            if (this.pollingInterval) {
              clearInterval(this.pollingInterval);
            }
          }
        }, {
          key: "get",
          value: function get(name) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            if (!options.doNotUpdate) {
              this.update();
            }
            return (0, _utils.readCookie)(this.cookies[name], options);
          }
        }, {
          key: "getAll",
          value: function getAll() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            if (!options.doNotUpdate) {
              this.update();
            }
            var result = {};
            for (var name in this.cookies) {
              result[name] = (0, _utils.readCookie)(this.cookies[name], options);
            }
            return result;
          }
        }, {
          key: "set",
          value: function set(name, value, options) {
            if (options) {
              options = Object.assign(Object.assign({}, this.defaultSetOptions), options);
            } else {
              options = this.defaultSetOptions;
            }
            var stringValue = typeof value === "string" ? value : JSON.stringify(value);
            this.cookies = Object.assign(Object.assign({}, this.cookies), _defineProperty({}, name, stringValue));
            if (this.HAS_DOCUMENT_COOKIE) {
              document.cookie = cookie.serialize(name, stringValue, options);
            }
            this._emitChange({
              name,
              value,
              options
            });
          }
        }, {
          key: "remove",
          value: function remove(name, options) {
            var finalOptions = options = Object.assign(Object.assign({}, options), {
              expires: new Date(1970, 1, 1, 0, 0, 1),
              maxAge: 0
            });
            this.cookies = Object.assign({}, this.cookies);
            delete this.cookies[name];
            if (this.HAS_DOCUMENT_COOKIE) {
              document.cookie = cookie.serialize(name, "", finalOptions);
            }
            this._emitChange({
              name,
              value: void 0,
              options
            });
          }
        }, {
          key: "addChangeListener",
          value: function addChangeListener(callback) {
            this.changeListeners.push(callback);
            if (this.changeListeners.length === 1) {
              if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && "cookieStore" in window) {
                window.cookieStore.addEventListener("change", this.update);
              } else {
                this._startPolling();
              }
            }
          }
        }, {
          key: "removeChangeListener",
          value: function removeChangeListener(callback) {
            var idx = this.changeListeners.indexOf(callback);
            if (idx >= 0) {
              this.changeListeners.splice(idx, 1);
            }
            if (this.changeListeners.length === 0) {
              if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && "cookieStore" in window) {
                window.cookieStore.removeEventListener("change", this.update);
              } else {
                this._stopPolling();
              }
            }
          }
        }]);
        return Cookies2;
      }();
      exports["default"] = Cookies;
      module.exports = exports.default;
    }
  });

  // node_modules/universal-cookie/cjs/types.js
  var require_types2 = __commonJS({
    "node_modules/universal-cookie/cjs/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/universal-cookie/cjs/index.js
  var require_cjs3 = __commonJS({
    "node_modules/universal-cookie/cjs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      exports["default"] = void 0;
      var _Cookies = _interopRequireDefault(require_Cookies());
      var _types = require_types2();
      Object.keys(_types).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _types[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _types[key];
          }
        });
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _default = _Cookies["default"];
      exports["default"] = _default;
    }
  });

  // node_modules/react-cookie/cjs/Cookies.js
  var require_Cookies2 = __commonJS({
    "node_modules/react-cookie/cjs/Cookies.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var _universalCookie = _interopRequireDefault(require_cjs3());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _default = _universalCookie["default"];
      exports["default"] = _default;
      module.exports = exports.default;
    }
  });

  // node_modules/react-cookie/cjs/CookiesContext.js
  var require_CookiesContext = __commonJS({
    "node_modules/react-cookie/cjs/CookiesContext.js"(exports) {
      "use strict";
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = exports.Provider = exports.Consumer = void 0;
      var React3 = _interopRequireWildcard(require_react());
      var _Cookies = _interopRequireDefault(require_Cookies2());
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      var CookiesContext = /* @__PURE__ */ React3.createContext(new _Cookies["default"]());
      var Provider = CookiesContext.Provider;
      var Consumer = CookiesContext.Consumer;
      exports.Consumer = Consumer;
      exports.Provider = Provider;
      var _default = CookiesContext;
      exports["default"] = _default;
    }
  });

  // node_modules/react-cookie/cjs/CookiesProvider.js
  var require_CookiesProvider = __commonJS({
    "node_modules/react-cookie/cjs/CookiesProvider.js"(exports, module) {
      "use strict";
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = void 0;
      var React3 = _interopRequireWildcard(require_react());
      var _universalCookie = _interopRequireDefault(require_cjs3());
      var _CookiesContext = require_CookiesContext();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return _typeof(key) === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (_typeof(input) !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (_typeof(res) !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized(self2);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      var CookiesProvider = /* @__PURE__ */ function(_React$Component) {
        _inherits(CookiesProvider2, _React$Component);
        var _super = _createSuper(CookiesProvider2);
        function CookiesProvider2(props) {
          var _this;
          _classCallCheck(this, CookiesProvider2);
          _this = _super.call(this, props);
          if (props.cookies) {
            _this.cookies = props.cookies;
          } else {
            _this.cookies = new _universalCookie["default"](void 0, props.defaultSetOptions);
          }
          return _this;
        }
        _createClass(CookiesProvider2, [{
          key: "render",
          value: function render() {
            return /* @__PURE__ */ React3.createElement(_CookiesContext.Provider, {
              value: this.cookies
            }, this.props.children);
          }
        }]);
        return CookiesProvider2;
      }(React3.Component);
      exports["default"] = CookiesProvider;
      module.exports = exports.default;
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is2();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/react-cookie/cjs/withCookies.js
  var require_withCookies = __commonJS({
    "node_modules/react-cookie/cjs/withCookies.js"(exports, module) {
      "use strict";
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = withCookies;
      var React3 = _interopRequireWildcard(require_react());
      var _hoistNonReactStatics = _interopRequireDefault(require_hoist_non_react_statics_cjs());
      var _CookiesContext = require_CookiesContext();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
          return { "default": obj };
        }
        var cache = _getRequireWildcardCache(nodeInterop);
        if (cache && cache.has(obj)) {
          return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj["default"] = obj;
        if (cache) {
          cache.set(obj, newObj);
        }
        return newObj;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _toPropertyKey(arg) {
        var key = _toPrimitive(arg, "string");
        return _typeof(key) === "symbol" ? key : String(key);
      }
      function _toPrimitive(input, hint) {
        if (_typeof(input) !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res = prim.call(input, hint || "default");
          if (_typeof(res) !== "object")
            return res;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass)
          _setPrototypeOf(subClass, superClass);
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized(self2);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct)
          return false;
        if (Reflect.construct.sham)
          return false;
        if (typeof Proxy === "function")
          return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      var __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      function withCookies(WrappedComponent) {
        var name = WrappedComponent.displayName || WrappedComponent.name;
        var CookieWrapper = /* @__PURE__ */ function(_React$Component) {
          _inherits(CookieWrapper2, _React$Component);
          var _super = _createSuper(CookieWrapper2);
          function CookieWrapper2() {
            var _this;
            _classCallCheck(this, CookieWrapper2);
            _this = _super.apply(this, arguments);
            _this.onChange = function() {
              _this.forceUpdate();
            };
            return _this;
          }
          _createClass(CookieWrapper2, [{
            key: "listen",
            value: function listen() {
              this.props.cookies.addChangeListener(this.onChange);
            }
          }, {
            key: "unlisten",
            value: function unlisten(cookies) {
              (cookies || this.props.cookies).removeChangeListener(this.onChange);
            }
          }, {
            key: "componentDidMount",
            value: function componentDidMount() {
              this.listen();
            }
          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
              if (prevProps.cookies !== this.props.cookies) {
                this.unlisten(prevProps.cookies);
                this.listen();
              }
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.unlisten();
            }
          }, {
            key: "render",
            value: function render() {
              var _a = this.props, forwardedRef = _a.forwardedRef, cookies = _a.cookies, restProps = __rest2(_a, ["forwardedRef", "cookies"]);
              var allCookies = cookies.getAll();
              return /* @__PURE__ */ React3.createElement(WrappedComponent, Object.assign({}, restProps, {
                ref: forwardedRef,
                cookies,
                allCookies
              }));
            }
          }]);
          return CookieWrapper2;
        }(React3.Component);
        CookieWrapper.displayName = "withCookies(".concat(name, ")");
        CookieWrapper.WrappedComponent = WrappedComponent;
        var ForwardedComponent = /* @__PURE__ */ React3.forwardRef(function(props, ref) {
          return /* @__PURE__ */ React3.createElement(_CookiesContext.Consumer, null, function(cookies) {
            return /* @__PURE__ */ React3.createElement(CookieWrapper, Object.assign({
              cookies
            }, props, {
              forwardedRef: ref
            }));
          });
        });
        ForwardedComponent.displayName = CookieWrapper.displayName;
        ForwardedComponent.WrappedComponent = CookieWrapper.WrappedComponent;
        return (0, _hoistNonReactStatics["default"])(ForwardedComponent, WrappedComponent);
      }
      module.exports = exports.default;
    }
  });

  // node_modules/react-cookie/cjs/utils.js
  var require_utils3 = __commonJS({
    "node_modules/react-cookie/cjs/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isInBrowser = isInBrowser;
      function isInBrowser() {
        return typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
      }
    }
  });

  // node_modules/react-cookie/cjs/useCookies.js
  var require_useCookies = __commonJS({
    "node_modules/react-cookie/cjs/useCookies.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = useCookies;
      var _react = require_react();
      var _CookiesContext = _interopRequireDefault(require_CookiesContext());
      var _utils = require_utils3();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _createForOfIteratorHelper(o, allowArrayLike) {
        var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
        if (!it) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it)
              o = it;
            var i = 0;
            var F = function F2() {
            };
            return { s: F, n: function n() {
              if (i >= o.length)
                return { done: true };
              return { done: false, value: o[i++] };
            }, e: function e(_e) {
              throw _e;
            }, f: F };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var normalCompletion = true, didErr = false, err;
        return { s: function s() {
          it = it.call(o);
        }, n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        }, e: function e(_e2) {
          didErr = true;
          err = _e2;
        }, f: function f() {
          try {
            if (!normalCompletion && it["return"] != null)
              it["return"]();
          } finally {
            if (didErr)
              throw err;
          }
        } };
      }
      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
      }
      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o)
          return;
        if (typeof o === "string")
          return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor)
          n = o.constructor.name;
        if (n === "Map" || n === "Set")
          return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
          return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++)
          arr2[i] = arr[i];
        return arr2;
      }
      function _iterableToArrayLimit(r, l) {
        var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
        if (null != t) {
          var e, n, i, u, a = [], f = true, o = false;
          try {
            if (i = (t = t.call(r)).next, 0 === l) {
              if (Object(t) !== t)
                return;
              f = false;
            } else
              for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
                ;
          } catch (r2) {
            o = true, n = r2;
          } finally {
            try {
              if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
                return;
            } finally {
              if (o)
                throw n;
            }
          }
          return a;
        }
      }
      function _arrayWithHoles(arr) {
        if (Array.isArray(arr))
          return arr;
      }
      function useCookies(dependencies) {
        var cookies = (0, _react.useContext)(_CookiesContext["default"]);
        if (!cookies) {
          throw new Error("Missing <CookiesProvider>");
        }
        var _useState = (0, _react.useState)(function() {
          return cookies.getAll();
        }), _useState2 = _slicedToArray(_useState, 2), allCookies = _useState2[0], setCookies = _useState2[1];
        if ((0, _utils.isInBrowser)()) {
          (0, _react.useLayoutEffect)(function() {
            function onChange() {
              var newCookies = cookies.getAll({
                doNotUpdate: true
              });
              if (shouldUpdate(dependencies || null, newCookies, allCookies)) {
                setCookies(newCookies);
              }
            }
            cookies.addChangeListener(onChange);
            return function() {
              cookies.removeChangeListener(onChange);
            };
          }, [cookies, allCookies]);
        }
        var setCookie = (0, _react.useMemo)(function() {
          return cookies.set.bind(cookies);
        }, [cookies]);
        var removeCookie = (0, _react.useMemo)(function() {
          return cookies.remove.bind(cookies);
        }, [cookies]);
        var updateCookies = (0, _react.useMemo)(function() {
          return cookies.update.bind(cookies);
        }, [cookies]);
        return [allCookies, setCookie, removeCookie, updateCookies];
      }
      function shouldUpdate(dependencies, newCookies, oldCookies) {
        if (!dependencies) {
          return true;
        }
        var _iterator = _createForOfIteratorHelper(dependencies), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var dependency = _step.value;
            if (newCookies[dependency] !== oldCookies[dependency]) {
              return true;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return false;
      }
      module.exports = exports.default;
    }
  });

  // node_modules/react-cookie/cjs/types.js
  var require_types3 = __commonJS({
    "node_modules/react-cookie/cjs/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/react-cookie/cjs/index.js
  var require_cjs4 = __commonJS({
    "node_modules/react-cookie/cjs/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        Cookies: true,
        CookiesProvider: true,
        withCookies: true,
        useCookies: true
      };
      Object.defineProperty(exports, "Cookies", {
        enumerable: true,
        get: function get() {
          return _Cookies["default"];
        }
      });
      Object.defineProperty(exports, "CookiesProvider", {
        enumerable: true,
        get: function get() {
          return _CookiesProvider["default"];
        }
      });
      Object.defineProperty(exports, "useCookies", {
        enumerable: true,
        get: function get() {
          return _useCookies["default"];
        }
      });
      Object.defineProperty(exports, "withCookies", {
        enumerable: true,
        get: function get() {
          return _withCookies["default"];
        }
      });
      var _Cookies = _interopRequireDefault(require_Cookies2());
      var _CookiesProvider = _interopRequireDefault(require_CookiesProvider());
      var _withCookies = _interopRequireDefault(require_withCookies());
      var _useCookies = _interopRequireDefault(require_useCookies());
      var _types = require_types3();
      Object.keys(_types).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _types[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _types[key];
          }
        });
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
    }
  });

  // client/components/CookieTest.jsx
  var require_CookieTest = __commonJS({
    "client/components/CookieTest.jsx"(exports, module) {
      var React3 = require_react();
      var { useState, useEffect } = require_react();
      var PropTypes = require_prop_types();
      var { Button, Input } = require_dist65();
      var { useCookies } = require_cjs4();
      function CookieTest(props) {
        const { cookieName } = props;
        const [cookie, setCookie] = useCookies([cookieName]);
        return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(
          Input,
          {
            label: "Cookie Value",
            placeholder: "",
            value: cookie.token,
            onChange: (e) => {
              setCookie(cookieName, e.target.value);
            }
          }
        ));
      }
      module.exports = CookieTest;
    }
  });

  // node_modules/seedrandom/lib/alea.js
  var require_alea = __commonJS({
    "node_modules/seedrandom/lib/alea.js"(exports, module) {
      (function(global2, module2, define2) {
        function Alea(seed) {
          var me = this, mash = Mash();
          me.next = function() {
            var t = 2091639 * me.s0 + me.c * 23283064365386963e-26;
            me.s0 = me.s1;
            me.s1 = me.s2;
            return me.s2 = t - (me.c = t | 0);
          };
          me.c = 1;
          me.s0 = mash(" ");
          me.s1 = mash(" ");
          me.s2 = mash(" ");
          me.s0 -= mash(seed);
          if (me.s0 < 0) {
            me.s0 += 1;
          }
          me.s1 -= mash(seed);
          if (me.s1 < 0) {
            me.s1 += 1;
          }
          me.s2 -= mash(seed);
          if (me.s2 < 0) {
            me.s2 += 1;
          }
          mash = null;
        }
        function copy(f, t) {
          t.c = f.c;
          t.s0 = f.s0;
          t.s1 = f.s1;
          t.s2 = f.s2;
          return t;
        }
        function impl(seed, opts) {
          var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
          prng.int32 = function() {
            return xg.next() * 4294967296 | 0;
          };
          prng.double = function() {
            return prng() + (prng() * 2097152 | 0) * 11102230246251565e-32;
          };
          prng.quick = prng;
          if (state) {
            if (typeof state == "object")
              copy(state, xg);
            prng.state = function() {
              return copy(xg, {});
            };
          }
          return prng;
        }
        function Mash() {
          var n = 4022871197;
          var mash = function(data) {
            data = String(data);
            for (var i = 0; i < data.length; i++) {
              n += data.charCodeAt(i);
              var h = 0.02519603282416938 * n;
              n = h >>> 0;
              h -= n;
              h *= n;
              n = h >>> 0;
              h -= n;
              n += h * 4294967296;
            }
            return (n >>> 0) * 23283064365386963e-26;
          };
          return mash;
        }
        if (module2 && module2.exports) {
          module2.exports = impl;
        } else if (define2 && define2.amd) {
          define2(function() {
            return impl;
          });
        } else {
          this.alea = impl;
        }
      })(
        exports,
        typeof module == "object" && module,
        // present in node.js
        typeof define == "function" && define
        // present with an AMD loader
      );
    }
  });

  // node_modules/seedrandom/lib/xor128.js
  var require_xor128 = __commonJS({
    "node_modules/seedrandom/lib/xor128.js"(exports, module) {
      (function(global2, module2, define2) {
        function XorGen(seed) {
          var me = this, strseed = "";
          me.x = 0;
          me.y = 0;
          me.z = 0;
          me.w = 0;
          me.next = function() {
            var t = me.x ^ me.x << 11;
            me.x = me.y;
            me.y = me.z;
            me.z = me.w;
            return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;
          };
          if (seed === (seed | 0)) {
            me.x = seed;
          } else {
            strseed += seed;
          }
          for (var k = 0; k < strseed.length + 64; k++) {
            me.x ^= strseed.charCodeAt(k) | 0;
            me.next();
          }
        }
        function copy(f, t) {
          t.x = f.x;
          t.y = f.y;
          t.z = f.z;
          t.w = f.w;
          return t;
        }
        function impl(seed, opts) {
          var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
          };
          prng.double = function() {
            do {
              var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
            } while (result === 0);
            return result;
          };
          prng.int32 = xg.next;
          prng.quick = prng;
          if (state) {
            if (typeof state == "object")
              copy(state, xg);
            prng.state = function() {
              return copy(xg, {});
            };
          }
          return prng;
        }
        if (module2 && module2.exports) {
          module2.exports = impl;
        } else if (define2 && define2.amd) {
          define2(function() {
            return impl;
          });
        } else {
          this.xor128 = impl;
        }
      })(
        exports,
        typeof module == "object" && module,
        // present in node.js
        typeof define == "function" && define
        // present with an AMD loader
      );
    }
  });

  // node_modules/seedrandom/lib/xorwow.js
  var require_xorwow = __commonJS({
    "node_modules/seedrandom/lib/xorwow.js"(exports, module) {
      (function(global2, module2, define2) {
        function XorGen(seed) {
          var me = this, strseed = "";
          me.next = function() {
            var t = me.x ^ me.x >>> 2;
            me.x = me.y;
            me.y = me.z;
            me.z = me.w;
            me.w = me.v;
            return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;
          };
          me.x = 0;
          me.y = 0;
          me.z = 0;
          me.w = 0;
          me.v = 0;
          if (seed === (seed | 0)) {
            me.x = seed;
          } else {
            strseed += seed;
          }
          for (var k = 0; k < strseed.length + 64; k++) {
            me.x ^= strseed.charCodeAt(k) | 0;
            if (k == strseed.length) {
              me.d = me.x << 10 ^ me.x >>> 4;
            }
            me.next();
          }
        }
        function copy(f, t) {
          t.x = f.x;
          t.y = f.y;
          t.z = f.z;
          t.w = f.w;
          t.v = f.v;
          t.d = f.d;
          return t;
        }
        function impl(seed, opts) {
          var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
          };
          prng.double = function() {
            do {
              var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
            } while (result === 0);
            return result;
          };
          prng.int32 = xg.next;
          prng.quick = prng;
          if (state) {
            if (typeof state == "object")
              copy(state, xg);
            prng.state = function() {
              return copy(xg, {});
            };
          }
          return prng;
        }
        if (module2 && module2.exports) {
          module2.exports = impl;
        } else if (define2 && define2.amd) {
          define2(function() {
            return impl;
          });
        } else {
          this.xorwow = impl;
        }
      })(
        exports,
        typeof module == "object" && module,
        // present in node.js
        typeof define == "function" && define
        // present with an AMD loader
      );
    }
  });

  // node_modules/seedrandom/lib/xorshift7.js
  var require_xorshift7 = __commonJS({
    "node_modules/seedrandom/lib/xorshift7.js"(exports, module) {
      (function(global2, module2, define2) {
        function XorGen(seed) {
          var me = this;
          me.next = function() {
            var X = me.x, i = me.i, t, v, w;
            t = X[i];
            t ^= t >>> 7;
            v = t ^ t << 24;
            t = X[i + 1 & 7];
            v ^= t ^ t >>> 10;
            t = X[i + 3 & 7];
            v ^= t ^ t >>> 3;
            t = X[i + 4 & 7];
            v ^= t ^ t << 7;
            t = X[i + 7 & 7];
            t = t ^ t << 13;
            v ^= t ^ t << 9;
            X[i] = v;
            me.i = i + 1 & 7;
            return v;
          };
          function init(me2, seed2) {
            var j, w, X = [];
            if (seed2 === (seed2 | 0)) {
              w = X[0] = seed2;
            } else {
              seed2 = "" + seed2;
              for (j = 0; j < seed2.length; ++j) {
                X[j & 7] = X[j & 7] << 15 ^ seed2.charCodeAt(j) + X[j + 1 & 7] << 13;
              }
            }
            while (X.length < 8)
              X.push(0);
            for (j = 0; j < 8 && X[j] === 0; ++j)
              ;
            if (j == 8)
              w = X[7] = -1;
            else
              w = X[j];
            me2.x = X;
            me2.i = 0;
            for (j = 256; j > 0; --j) {
              me2.next();
            }
          }
          init(me, seed);
        }
        function copy(f, t) {
          t.x = f.x.slice();
          t.i = f.i;
          return t;
        }
        function impl(seed, opts) {
          if (seed == null)
            seed = +/* @__PURE__ */ new Date();
          var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
          };
          prng.double = function() {
            do {
              var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
            } while (result === 0);
            return result;
          };
          prng.int32 = xg.next;
          prng.quick = prng;
          if (state) {
            if (state.x)
              copy(state, xg);
            prng.state = function() {
              return copy(xg, {});
            };
          }
          return prng;
        }
        if (module2 && module2.exports) {
          module2.exports = impl;
        } else if (define2 && define2.amd) {
          define2(function() {
            return impl;
          });
        } else {
          this.xorshift7 = impl;
        }
      })(
        exports,
        typeof module == "object" && module,
        // present in node.js
        typeof define == "function" && define
        // present with an AMD loader
      );
    }
  });

  // node_modules/seedrandom/lib/xor4096.js
  var require_xor4096 = __commonJS({
    "node_modules/seedrandom/lib/xor4096.js"(exports, module) {
      (function(global2, module2, define2) {
        function XorGen(seed) {
          var me = this;
          me.next = function() {
            var w = me.w, X = me.X, i = me.i, t, v;
            me.w = w = w + 1640531527 | 0;
            v = X[i + 34 & 127];
            t = X[i = i + 1 & 127];
            v ^= v << 13;
            t ^= t << 17;
            v ^= v >>> 15;
            t ^= t >>> 12;
            v = X[i] = v ^ t;
            me.i = i;
            return v + (w ^ w >>> 16) | 0;
          };
          function init(me2, seed2) {
            var t, v, i, j, w, X = [], limit = 128;
            if (seed2 === (seed2 | 0)) {
              v = seed2;
              seed2 = null;
            } else {
              seed2 = seed2 + "\0";
              v = 0;
              limit = Math.max(limit, seed2.length);
            }
            for (i = 0, j = -32; j < limit; ++j) {
              if (seed2)
                v ^= seed2.charCodeAt((j + 32) % seed2.length);
              if (j === 0)
                w = v;
              v ^= v << 10;
              v ^= v >>> 15;
              v ^= v << 4;
              v ^= v >>> 13;
              if (j >= 0) {
                w = w + 1640531527 | 0;
                t = X[j & 127] ^= v + w;
                i = 0 == t ? i + 1 : 0;
              }
            }
            if (i >= 128) {
              X[(seed2 && seed2.length || 0) & 127] = -1;
            }
            i = 127;
            for (j = 4 * 128; j > 0; --j) {
              v = X[i + 34 & 127];
              t = X[i = i + 1 & 127];
              v ^= v << 13;
              t ^= t << 17;
              v ^= v >>> 15;
              t ^= t >>> 12;
              X[i] = v ^ t;
            }
            me2.w = w;
            me2.X = X;
            me2.i = i;
          }
          init(me, seed);
        }
        function copy(f, t) {
          t.i = f.i;
          t.w = f.w;
          t.X = f.X.slice();
          return t;
        }
        ;
        function impl(seed, opts) {
          if (seed == null)
            seed = +/* @__PURE__ */ new Date();
          var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
          };
          prng.double = function() {
            do {
              var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
            } while (result === 0);
            return result;
          };
          prng.int32 = xg.next;
          prng.quick = prng;
          if (state) {
            if (state.X)
              copy(state, xg);
            prng.state = function() {
              return copy(xg, {});
            };
          }
          return prng;
        }
        if (module2 && module2.exports) {
          module2.exports = impl;
        } else if (define2 && define2.amd) {
          define2(function() {
            return impl;
          });
        } else {
          this.xor4096 = impl;
        }
      })(
        exports,
        // window object or global
        typeof module == "object" && module,
        // present in node.js
        typeof define == "function" && define
        // present with an AMD loader
      );
    }
  });

  // node_modules/seedrandom/lib/tychei.js
  var require_tychei = __commonJS({
    "node_modules/seedrandom/lib/tychei.js"(exports, module) {
      (function(global2, module2, define2) {
        function XorGen(seed) {
          var me = this, strseed = "";
          me.next = function() {
            var b = me.b, c = me.c, d = me.d, a = me.a;
            b = b << 25 ^ b >>> 7 ^ c;
            c = c - d | 0;
            d = d << 24 ^ d >>> 8 ^ a;
            a = a - b | 0;
            me.b = b = b << 20 ^ b >>> 12 ^ c;
            me.c = c = c - d | 0;
            me.d = d << 16 ^ c >>> 16 ^ a;
            return me.a = a - b | 0;
          };
          me.a = 0;
          me.b = 0;
          me.c = 2654435769 | 0;
          me.d = 1367130551;
          if (seed === Math.floor(seed)) {
            me.a = seed / 4294967296 | 0;
            me.b = seed | 0;
          } else {
            strseed += seed;
          }
          for (var k = 0; k < strseed.length + 20; k++) {
            me.b ^= strseed.charCodeAt(k) | 0;
            me.next();
          }
        }
        function copy(f, t) {
          t.a = f.a;
          t.b = f.b;
          t.c = f.c;
          t.d = f.d;
          return t;
        }
        ;
        function impl(seed, opts) {
          var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
            return (xg.next() >>> 0) / 4294967296;
          };
          prng.double = function() {
            do {
              var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
            } while (result === 0);
            return result;
          };
          prng.int32 = xg.next;
          prng.quick = prng;
          if (state) {
            if (typeof state == "object")
              copy(state, xg);
            prng.state = function() {
              return copy(xg, {});
            };
          }
          return prng;
        }
        if (module2 && module2.exports) {
          module2.exports = impl;
        } else if (define2 && define2.amd) {
          define2(function() {
            return impl;
          });
        } else {
          this.tychei = impl;
        }
      })(
        exports,
        typeof module == "object" && module,
        // present in node.js
        typeof define == "function" && define
        // present with an AMD loader
      );
    }
  });

  // (disabled):crypto
  var require_crypto = __commonJS({
    "(disabled):crypto"() {
    }
  });

  // node_modules/seedrandom/seedrandom.js
  var require_seedrandom = __commonJS({
    "node_modules/seedrandom/seedrandom.js"(exports, module) {
      (function(global2, pool, math) {
        var width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;
        function seedrandom2(seed, options, callback) {
          var key = [];
          options = options == true ? { entropy: true } : options || {};
          var shortseed = mixkey(flatten(
            options.entropy ? [seed, tostring(pool)] : seed == null ? autoseed() : seed,
            3
          ), key);
          var arc4 = new ARC4(key);
          var prng = function() {
            var n = arc4.g(chunks), d = startdenom, x = 0;
            while (n < significance) {
              n = (n + x) * width;
              d *= width;
              x = arc4.g(1);
            }
            while (n >= overflow) {
              n /= 2;
              d /= 2;
              x >>>= 1;
            }
            return (n + x) / d;
          };
          prng.int32 = function() {
            return arc4.g(4) | 0;
          };
          prng.quick = function() {
            return arc4.g(4) / 4294967296;
          };
          prng.double = prng;
          mixkey(tostring(arc4.S), pool);
          return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
            if (state) {
              if (state.S) {
                copy(state, arc4);
              }
              prng2.state = function() {
                return copy(arc4, {});
              };
            }
            if (is_math_call) {
              math[rngname] = prng2;
              return seed2;
            } else
              return prng2;
          })(
            prng,
            shortseed,
            "global" in options ? options.global : this == math,
            options.state
          );
        }
        function ARC4(key) {
          var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
          if (!keylen) {
            key = [keylen++];
          }
          while (i < width) {
            s[i] = i++;
          }
          for (i = 0; i < width; i++) {
            s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
            s[j] = t;
          }
          (me.g = function(count2) {
            var t2, r = 0, i2 = me.i, j2 = me.j, s2 = me.S;
            while (count2--) {
              t2 = s2[i2 = mask & i2 + 1];
              r = r * width + s2[mask & (s2[i2] = s2[j2 = mask & j2 + t2]) + (s2[j2] = t2)];
            }
            me.i = i2;
            me.j = j2;
            return r;
          })(width);
        }
        function copy(f, t) {
          t.i = f.i;
          t.j = f.j;
          t.S = f.S.slice();
          return t;
        }
        ;
        function flatten(obj, depth) {
          var result = [], typ = typeof obj, prop;
          if (depth && typ == "object") {
            for (prop in obj) {
              try {
                result.push(flatten(obj[prop], depth - 1));
              } catch (e) {
              }
            }
          }
          return result.length ? result : typ == "string" ? obj : obj + "\0";
        }
        function mixkey(seed, key) {
          var stringseed = seed + "", smear, j = 0;
          while (j < stringseed.length) {
            key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
          }
          return tostring(key);
        }
        function autoseed() {
          try {
            var out;
            if (nodecrypto && (out = nodecrypto.randomBytes)) {
              out = out(width);
            } else {
              out = new Uint8Array(width);
              (global2.crypto || global2.msCrypto).getRandomValues(out);
            }
            return tostring(out);
          } catch (e) {
            var browser = global2.navigator, plugins = browser && browser.plugins;
            return [+/* @__PURE__ */ new Date(), global2, plugins, global2.screen, tostring(pool)];
          }
        }
        function tostring(a) {
          return String.fromCharCode.apply(0, a);
        }
        mixkey(math.random(), pool);
        if (typeof module == "object" && module.exports) {
          module.exports = seedrandom2;
          try {
            nodecrypto = require_crypto();
          } catch (ex) {
          }
        } else if (typeof define == "function" && define.amd) {
          define(function() {
            return seedrandom2;
          });
        } else {
          math["seed" + rngname] = seedrandom2;
        }
      })(
        // global: `self` in browsers (including strict mode and web workers),
        // otherwise `this` in Node and other environments
        typeof self !== "undefined" ? self : exports,
        [],
        // pool: entropy pool starts empty
        Math
        // math: package containing random, pow, and seedrandom
      );
    }
  });

  // node_modules/seedrandom/index.js
  var require_seedrandom2 = __commonJS({
    "node_modules/seedrandom/index.js"(exports, module) {
      var alea = require_alea();
      var xor128 = require_xor128();
      var xorwow = require_xorwow();
      var xorshift7 = require_xorshift7();
      var xor4096 = require_xor4096();
      var tychei = require_tychei();
      var sr = require_seedrandom();
      sr.alea = alea;
      sr.xor128 = xor128;
      sr.xorwow = xorwow;
      sr.xorshift7 = xorshift7;
      sr.xor4096 = xor4096;
      sr.tychei = tychei;
      module.exports = sr;
    }
  });

  // node_modules/random-words/index.js
  var random_words_exports = {};
  __export(random_words_exports, {
    count: () => count,
    generate: () => generate,
    wordList: () => wordList
  });
  function generate(options) {
    const random = (options == null ? void 0 : options.seed) ? new import_seedrandom.default(options.seed) : null;
    const _a = options || {}, { minLength, maxLength } = _a, rest = __objRest(_a, ["minLength", "maxLength"]);
    function word() {
      let min = typeof minLength !== "number" ? shortestWordSize : limitWordSize(minLength);
      const max = typeof maxLength !== "number" ? longestWordSize : limitWordSize(maxLength);
      if (min > max)
        min = max;
      let rightSize = false;
      let wordUsed;
      while (!rightSize) {
        wordUsed = generateRandomWord();
        rightSize = wordUsed.length <= max && wordUsed.length >= min;
      }
      return wordUsed;
    }
    function generateRandomWord() {
      return wordList[randInt(wordList.length)];
    }
    function limitWordSize(wordSize) {
      if (wordSize < shortestWordSize)
        wordSize = shortestWordSize;
      if (wordSize > longestWordSize)
        wordSize = longestWordSize;
      return wordSize;
    }
    function randInt(lessThan) {
      const r = random ? random() : Math.random();
      return Math.floor(r * lessThan);
    }
    if (options === void 0) {
      return word();
    }
    if (typeof options === "number") {
      options = { exactly: options };
    } else if (Object.keys(rest).length === 0) {
      return word();
    }
    if (options.exactly) {
      options.min = options.exactly;
      options.max = options.exactly;
    }
    if (typeof options.wordsPerString !== "number") {
      options.wordsPerString = 1;
    }
    if (typeof options.formatter !== "function") {
      options.formatter = (word2) => word2;
    }
    if (typeof options.separator !== "string") {
      options.separator = " ";
    }
    const total = options.min + randInt(options.max + 1 - options.min);
    let results = [];
    let token = "";
    let relativeIndex = 0;
    for (let i = 0; i < total * options.wordsPerString; i++) {
      if (relativeIndex === options.wordsPerString - 1) {
        token += options.formatter(word(), relativeIndex);
      } else {
        token += options.formatter(word(), relativeIndex) + options.separator;
      }
      relativeIndex++;
      if ((i + 1) % options.wordsPerString === 0) {
        results.push(token);
        token = "";
        relativeIndex = 0;
      }
    }
    if (typeof options.join === "string") {
      results = results.join(options.join);
    }
    return results;
  }
  function count(options) {
    let { minLength, maxLength } = options || {};
    if (typeof minLength !== "number") {
      minLength = shortestWordSize;
    }
    if (typeof maxLength !== "number") {
      maxLength = longestWordSize;
    }
    return wordList.filter(
      (word) => word.length >= minLength && word.length <= maxLength
    ).length;
  }
  var import_seedrandom, wordList, shortestWordSize, longestWordSize;
  var init_random_words = __esm({
    "node_modules/random-words/index.js"() {
      import_seedrandom = __toESM(require_seedrandom2(), 1);
      wordList = [
        "ability",
        "able",
        "aboard",
        "about",
        "above",
        "accept",
        "accident",
        "according",
        "account",
        "accurate",
        "acres",
        "across",
        "act",
        "action",
        "active",
        "activity",
        "actual",
        "actually",
        "add",
        "addition",
        "additional",
        "adjective",
        "adult",
        "adventure",
        "advice",
        "affect",
        "afraid",
        "after",
        "afternoon",
        "again",
        "against",
        "age",
        "ago",
        "agree",
        "ahead",
        "aid",
        "air",
        "airplane",
        "alike",
        "alive",
        "all",
        "allow",
        "almost",
        "alone",
        "along",
        "aloud",
        "alphabet",
        "already",
        "also",
        "although",
        "am",
        "among",
        "amount",
        "ancient",
        "angle",
        "angry",
        "animal",
        "announced",
        "another",
        "answer",
        "ants",
        "any",
        "anybody",
        "anyone",
        "anything",
        "anyway",
        "anywhere",
        "apart",
        "apartment",
        "appearance",
        "apple",
        "applied",
        "appropriate",
        "are",
        "area",
        "arm",
        "army",
        "around",
        "arrange",
        "arrangement",
        "arrive",
        "arrow",
        "art",
        "article",
        "as",
        "aside",
        "ask",
        "asleep",
        "at",
        "ate",
        "atmosphere",
        "atom",
        "atomic",
        "attached",
        "attack",
        "attempt",
        "attention",
        "audience",
        "author",
        "automobile",
        "available",
        "average",
        "avoid",
        "aware",
        "away",
        "baby",
        "back",
        "bad",
        "badly",
        "bag",
        "balance",
        "ball",
        "balloon",
        "band",
        "bank",
        "bar",
        "bare",
        "bark",
        "barn",
        "base",
        "baseball",
        "basic",
        "basis",
        "basket",
        "bat",
        "battle",
        "be",
        "bean",
        "bear",
        "beat",
        "beautiful",
        "beauty",
        "became",
        "because",
        "become",
        "becoming",
        "bee",
        "been",
        "before",
        "began",
        "beginning",
        "begun",
        "behavior",
        "behind",
        "being",
        "believed",
        "bell",
        "belong",
        "below",
        "belt",
        "bend",
        "beneath",
        "bent",
        "beside",
        "best",
        "bet",
        "better",
        "between",
        "beyond",
        "bicycle",
        "bigger",
        "biggest",
        "bill",
        "birds",
        "birth",
        "birthday",
        "bit",
        "bite",
        "black",
        "blank",
        "blanket",
        "blew",
        "blind",
        "block",
        "blood",
        "blow",
        "blue",
        "board",
        "boat",
        "body",
        "bone",
        "book",
        "border",
        "born",
        "both",
        "bottle",
        "bottom",
        "bound",
        "bow",
        "bowl",
        "box",
        "boy",
        "brain",
        "branch",
        "brass",
        "brave",
        "bread",
        "break",
        "breakfast",
        "breath",
        "breathe",
        "breathing",
        "breeze",
        "brick",
        "bridge",
        "brief",
        "bright",
        "bring",
        "broad",
        "broke",
        "broken",
        "brother",
        "brought",
        "brown",
        "brush",
        "buffalo",
        "build",
        "building",
        "built",
        "buried",
        "burn",
        "burst",
        "bus",
        "bush",
        "business",
        "busy",
        "but",
        "butter",
        "buy",
        "by",
        "cabin",
        "cage",
        "cake",
        "call",
        "calm",
        "came",
        "camera",
        "camp",
        "can",
        "canal",
        "cannot",
        "cap",
        "capital",
        "captain",
        "captured",
        "car",
        "carbon",
        "card",
        "care",
        "careful",
        "carefully",
        "carried",
        "carry",
        "case",
        "cast",
        "castle",
        "cat",
        "catch",
        "cattle",
        "caught",
        "cause",
        "cave",
        "cell",
        "cent",
        "center",
        "central",
        "century",
        "certain",
        "certainly",
        "chain",
        "chair",
        "chamber",
        "chance",
        "change",
        "changing",
        "chapter",
        "character",
        "characteristic",
        "charge",
        "chart",
        "check",
        "cheese",
        "chemical",
        "chest",
        "chicken",
        "chief",
        "child",
        "children",
        "choice",
        "choose",
        "chose",
        "chosen",
        "church",
        "circle",
        "circus",
        "citizen",
        "city",
        "class",
        "classroom",
        "claws",
        "clay",
        "clean",
        "clear",
        "clearly",
        "climate",
        "climb",
        "clock",
        "close",
        "closely",
        "closer",
        "cloth",
        "clothes",
        "clothing",
        "cloud",
        "club",
        "coach",
        "coal",
        "coast",
        "coat",
        "coffee",
        "cold",
        "collect",
        "college",
        "colony",
        "color",
        "column",
        "combination",
        "combine",
        "come",
        "comfortable",
        "coming",
        "command",
        "common",
        "community",
        "company",
        "compare",
        "compass",
        "complete",
        "completely",
        "complex",
        "composed",
        "composition",
        "compound",
        "concerned",
        "condition",
        "congress",
        "connected",
        "consider",
        "consist",
        "consonant",
        "constantly",
        "construction",
        "contain",
        "continent",
        "continued",
        "contrast",
        "control",
        "conversation",
        "cook",
        "cookies",
        "cool",
        "copper",
        "copy",
        "corn",
        "corner",
        "correct",
        "correctly",
        "cost",
        "cotton",
        "could",
        "count",
        "country",
        "couple",
        "courage",
        "course",
        "court",
        "cover",
        "cow",
        "cowboy",
        "crack",
        "cream",
        "create",
        "creature",
        "crew",
        "crop",
        "cross",
        "crowd",
        "cry",
        "cup",
        "curious",
        "current",
        "curve",
        "customs",
        "cut",
        "cutting",
        "daily",
        "damage",
        "dance",
        "danger",
        "dangerous",
        "dark",
        "darkness",
        "date",
        "daughter",
        "dawn",
        "day",
        "dead",
        "deal",
        "dear",
        "death",
        "decide",
        "declared",
        "deep",
        "deeply",
        "deer",
        "definition",
        "degree",
        "depend",
        "depth",
        "describe",
        "desert",
        "design",
        "desk",
        "detail",
        "determine",
        "develop",
        "development",
        "diagram",
        "diameter",
        "did",
        "die",
        "differ",
        "difference",
        "different",
        "difficult",
        "difficulty",
        "dig",
        "dinner",
        "direct",
        "direction",
        "directly",
        "dirt",
        "dirty",
        "disappear",
        "discover",
        "discovery",
        "discuss",
        "discussion",
        "disease",
        "dish",
        "distance",
        "distant",
        "divide",
        "division",
        "do",
        "doctor",
        "does",
        "dog",
        "doing",
        "doll",
        "dollar",
        "done",
        "donkey",
        "door",
        "dot",
        "double",
        "doubt",
        "down",
        "dozen",
        "draw",
        "drawn",
        "dream",
        "dress",
        "drew",
        "dried",
        "drink",
        "drive",
        "driven",
        "driver",
        "driving",
        "drop",
        "dropped",
        "drove",
        "dry",
        "duck",
        "due",
        "dug",
        "dull",
        "during",
        "dust",
        "duty",
        "each",
        "eager",
        "ear",
        "earlier",
        "early",
        "earn",
        "earth",
        "easier",
        "easily",
        "east",
        "easy",
        "eat",
        "eaten",
        "edge",
        "education",
        "effect",
        "effort",
        "egg",
        "eight",
        "either",
        "electric",
        "electricity",
        "element",
        "elephant",
        "eleven",
        "else",
        "empty",
        "end",
        "enemy",
        "energy",
        "engine",
        "engineer",
        "enjoy",
        "enough",
        "enter",
        "entire",
        "entirely",
        "environment",
        "equal",
        "equally",
        "equator",
        "equipment",
        "escape",
        "especially",
        "essential",
        "establish",
        "even",
        "evening",
        "event",
        "eventually",
        "ever",
        "every",
        "everybody",
        "everyone",
        "everything",
        "everywhere",
        "evidence",
        "exact",
        "exactly",
        "examine",
        "example",
        "excellent",
        "except",
        "exchange",
        "excited",
        "excitement",
        "exciting",
        "exclaimed",
        "exercise",
        "exist",
        "expect",
        "experience",
        "experiment",
        "explain",
        "explanation",
        "explore",
        "express",
        "expression",
        "extra",
        "eye",
        "face",
        "facing",
        "fact",
        "factor",
        "factory",
        "failed",
        "fair",
        "fairly",
        "fall",
        "fallen",
        "familiar",
        "family",
        "famous",
        "far",
        "farm",
        "farmer",
        "farther",
        "fast",
        "fastened",
        "faster",
        "fat",
        "father",
        "favorite",
        "fear",
        "feathers",
        "feature",
        "fed",
        "feed",
        "feel",
        "feet",
        "fell",
        "fellow",
        "felt",
        "fence",
        "few",
        "fewer",
        "field",
        "fierce",
        "fifteen",
        "fifth",
        "fifty",
        "fight",
        "fighting",
        "figure",
        "fill",
        "film",
        "final",
        "finally",
        "find",
        "fine",
        "finest",
        "finger",
        "finish",
        "fire",
        "fireplace",
        "firm",
        "first",
        "fish",
        "five",
        "fix",
        "flag",
        "flame",
        "flat",
        "flew",
        "flies",
        "flight",
        "floating",
        "floor",
        "flow",
        "flower",
        "fly",
        "fog",
        "folks",
        "follow",
        "food",
        "foot",
        "football",
        "for",
        "force",
        "foreign",
        "forest",
        "forget",
        "forgot",
        "forgotten",
        "form",
        "former",
        "fort",
        "forth",
        "forty",
        "forward",
        "fought",
        "found",
        "four",
        "fourth",
        "fox",
        "frame",
        "free",
        "freedom",
        "frequently",
        "fresh",
        "friend",
        "friendly",
        "frighten",
        "frog",
        "from",
        "front",
        "frozen",
        "fruit",
        "fuel",
        "full",
        "fully",
        "fun",
        "function",
        "funny",
        "fur",
        "furniture",
        "further",
        "future",
        "gain",
        "game",
        "garage",
        "garden",
        "gas",
        "gasoline",
        "gate",
        "gather",
        "gave",
        "general",
        "generally",
        "gentle",
        "gently",
        "get",
        "getting",
        "giant",
        "gift",
        "girl",
        "give",
        "given",
        "giving",
        "glad",
        "glass",
        "globe",
        "go",
        "goes",
        "gold",
        "golden",
        "gone",
        "good",
        "goose",
        "got",
        "government",
        "grabbed",
        "grade",
        "gradually",
        "grain",
        "grandfather",
        "grandmother",
        "graph",
        "grass",
        "gravity",
        "gray",
        "great",
        "greater",
        "greatest",
        "greatly",
        "green",
        "grew",
        "ground",
        "group",
        "grow",
        "grown",
        "growth",
        "guard",
        "guess",
        "guide",
        "gulf",
        "gun",
        "habit",
        "had",
        "hair",
        "half",
        "halfway",
        "hall",
        "hand",
        "handle",
        "handsome",
        "hang",
        "happen",
        "happened",
        "happily",
        "happy",
        "harbor",
        "hard",
        "harder",
        "hardly",
        "has",
        "hat",
        "have",
        "having",
        "hay",
        "he",
        "headed",
        "heading",
        "health",
        "heard",
        "hearing",
        "heart",
        "heat",
        "heavy",
        "height",
        "held",
        "hello",
        "help",
        "helpful",
        "her",
        "herd",
        "here",
        "herself",
        "hidden",
        "hide",
        "high",
        "higher",
        "highest",
        "highway",
        "hill",
        "him",
        "himself",
        "his",
        "history",
        "hit",
        "hold",
        "hole",
        "hollow",
        "home",
        "honor",
        "hope",
        "horn",
        "horse",
        "hospital",
        "hot",
        "hour",
        "house",
        "how",
        "however",
        "huge",
        "human",
        "hundred",
        "hung",
        "hungry",
        "hunt",
        "hunter",
        "hurried",
        "hurry",
        "hurt",
        "husband",
        "ice",
        "idea",
        "identity",
        "if",
        "ill",
        "image",
        "imagine",
        "immediately",
        "importance",
        "important",
        "impossible",
        "improve",
        "in",
        "inch",
        "include",
        "including",
        "income",
        "increase",
        "indeed",
        "independent",
        "indicate",
        "individual",
        "industrial",
        "industry",
        "influence",
        "information",
        "inside",
        "instance",
        "instant",
        "instead",
        "instrument",
        "interest",
        "interior",
        "into",
        "introduced",
        "invented",
        "involved",
        "iron",
        "is",
        "island",
        "it",
        "its",
        "itself",
        "jack",
        "jar",
        "jet",
        "job",
        "join",
        "joined",
        "journey",
        "joy",
        "judge",
        "jump",
        "jungle",
        "just",
        "keep",
        "kept",
        "key",
        "kids",
        "kill",
        "kind",
        "kitchen",
        "knew",
        "knife",
        "know",
        "knowledge",
        "known",
        "label",
        "labor",
        "lack",
        "lady",
        "laid",
        "lake",
        "lamp",
        "land",
        "language",
        "large",
        "larger",
        "largest",
        "last",
        "late",
        "later",
        "laugh",
        "law",
        "lay",
        "layers",
        "lead",
        "leader",
        "leaf",
        "learn",
        "least",
        "leather",
        "leave",
        "leaving",
        "led",
        "left",
        "leg",
        "length",
        "lesson",
        "let",
        "letter",
        "level",
        "library",
        "lie",
        "life",
        "lift",
        "light",
        "like",
        "likely",
        "limited",
        "line",
        "lion",
        "lips",
        "liquid",
        "list",
        "listen",
        "little",
        "live",
        "living",
        "load",
        "local",
        "locate",
        "location",
        "log",
        "lonely",
        "long",
        "longer",
        "look",
        "loose",
        "lose",
        "loss",
        "lost",
        "lot",
        "loud",
        "love",
        "lovely",
        "low",
        "lower",
        "luck",
        "lucky",
        "lunch",
        "lungs",
        "lying",
        "machine",
        "machinery",
        "mad",
        "made",
        "magic",
        "magnet",
        "mail",
        "main",
        "mainly",
        "major",
        "make",
        "making",
        "man",
        "managed",
        "manner",
        "manufacturing",
        "many",
        "map",
        "mark",
        "market",
        "married",
        "mass",
        "massage",
        "master",
        "material",
        "mathematics",
        "matter",
        "may",
        "maybe",
        "me",
        "meal",
        "mean",
        "means",
        "meant",
        "measure",
        "meat",
        "medicine",
        "meet",
        "melted",
        "member",
        "memory",
        "men",
        "mental",
        "merely",
        "met",
        "metal",
        "method",
        "mice",
        "middle",
        "might",
        "mighty",
        "mile",
        "military",
        "milk",
        "mill",
        "mind",
        "mine",
        "minerals",
        "minute",
        "mirror",
        "missing",
        "mission",
        "mistake",
        "mix",
        "mixture",
        "model",
        "modern",
        "molecular",
        "moment",
        "money",
        "monkey",
        "month",
        "mood",
        "moon",
        "more",
        "morning",
        "most",
        "mostly",
        "mother",
        "motion",
        "motor",
        "mountain",
        "mouse",
        "mouth",
        "move",
        "movement",
        "movie",
        "moving",
        "mud",
        "muscle",
        "music",
        "musical",
        "must",
        "my",
        "myself",
        "mysterious",
        "nails",
        "name",
        "nation",
        "national",
        "native",
        "natural",
        "naturally",
        "nature",
        "near",
        "nearby",
        "nearer",
        "nearest",
        "nearly",
        "necessary",
        "neck",
        "needed",
        "needle",
        "needs",
        "negative",
        "neighbor",
        "neighborhood",
        "nervous",
        "nest",
        "never",
        "new",
        "news",
        "newspaper",
        "next",
        "nice",
        "night",
        "nine",
        "no",
        "nobody",
        "nodded",
        "noise",
        "none",
        "noon",
        "nor",
        "north",
        "nose",
        "not",
        "note",
        "noted",
        "nothing",
        "notice",
        "noun",
        "now",
        "number",
        "numeral",
        "nuts",
        "object",
        "observe",
        "obtain",
        "occasionally",
        "occur",
        "ocean",
        "of",
        "off",
        "offer",
        "office",
        "officer",
        "official",
        "oil",
        "old",
        "older",
        "oldest",
        "on",
        "once",
        "one",
        "only",
        "onto",
        "open",
        "operation",
        "opinion",
        "opportunity",
        "opposite",
        "or",
        "orange",
        "orbit",
        "order",
        "ordinary",
        "organization",
        "organized",
        "origin",
        "original",
        "other",
        "ought",
        "our",
        "ourselves",
        "out",
        "outer",
        "outline",
        "outside",
        "over",
        "own",
        "owner",
        "oxygen",
        "pack",
        "package",
        "page",
        "paid",
        "pain",
        "paint",
        "pair",
        "palace",
        "pale",
        "pan",
        "paper",
        "paragraph",
        "parallel",
        "parent",
        "park",
        "part",
        "particles",
        "particular",
        "particularly",
        "partly",
        "parts",
        "party",
        "pass",
        "passage",
        "past",
        "path",
        "pattern",
        "pay",
        "peace",
        "pen",
        "pencil",
        "people",
        "per",
        "percent",
        "perfect",
        "perfectly",
        "perhaps",
        "period",
        "person",
        "personal",
        "pet",
        "phrase",
        "physical",
        "piano",
        "pick",
        "picture",
        "pictured",
        "pie",
        "piece",
        "pig",
        "pile",
        "pilot",
        "pine",
        "pink",
        "pipe",
        "pitch",
        "place",
        "plain",
        "plan",
        "plane",
        "planet",
        "planned",
        "planning",
        "plant",
        "plastic",
        "plate",
        "plates",
        "play",
        "pleasant",
        "please",
        "pleasure",
        "plenty",
        "plural",
        "plus",
        "pocket",
        "poem",
        "poet",
        "poetry",
        "point",
        "pole",
        "police",
        "policeman",
        "political",
        "pond",
        "pony",
        "pool",
        "poor",
        "popular",
        "population",
        "porch",
        "port",
        "position",
        "positive",
        "possible",
        "possibly",
        "post",
        "pot",
        "potatoes",
        "pound",
        "pour",
        "powder",
        "power",
        "powerful",
        "practical",
        "practice",
        "prepare",
        "present",
        "president",
        "press",
        "pressure",
        "pretty",
        "prevent",
        "previous",
        "price",
        "pride",
        "primitive",
        "principal",
        "principle",
        "printed",
        "private",
        "prize",
        "probably",
        "problem",
        "process",
        "produce",
        "product",
        "production",
        "program",
        "progress",
        "promised",
        "proper",
        "properly",
        "property",
        "protection",
        "proud",
        "prove",
        "provide",
        "public",
        "pull",
        "pupil",
        "pure",
        "purple",
        "purpose",
        "push",
        "put",
        "putting",
        "quarter",
        "queen",
        "question",
        "quick",
        "quickly",
        "quiet",
        "quietly",
        "quite",
        "rabbit",
        "race",
        "radio",
        "railroad",
        "rain",
        "raise",
        "ran",
        "ranch",
        "range",
        "rapidly",
        "rate",
        "rather",
        "raw",
        "rays",
        "reach",
        "read",
        "reader",
        "ready",
        "real",
        "realize",
        "rear",
        "reason",
        "recall",
        "receive",
        "recent",
        "recently",
        "recognize",
        "record",
        "red",
        "refer",
        "refused",
        "region",
        "regular",
        "related",
        "relationship",
        "religious",
        "remain",
        "remarkable",
        "remember",
        "remove",
        "repeat",
        "replace",
        "replied",
        "report",
        "represent",
        "require",
        "research",
        "respect",
        "rest",
        "result",
        "return",
        "review",
        "rhyme",
        "rhythm",
        "rice",
        "rich",
        "ride",
        "riding",
        "right",
        "ring",
        "rise",
        "rising",
        "river",
        "road",
        "roar",
        "rock",
        "rocket",
        "rocky",
        "rod",
        "roll",
        "roof",
        "room",
        "root",
        "rope",
        "rose",
        "rough",
        "round",
        "route",
        "row",
        "rubbed",
        "rubber",
        "rule",
        "ruler",
        "run",
        "running",
        "rush",
        "sad",
        "saddle",
        "safe",
        "safety",
        "said",
        "sail",
        "sale",
        "salmon",
        "salt",
        "same",
        "sand",
        "sang",
        "sat",
        "satellites",
        "satisfied",
        "save",
        "saved",
        "saw",
        "say",
        "scale",
        "scared",
        "scene",
        "school",
        "science",
        "scientific",
        "scientist",
        "score",
        "screen",
        "sea",
        "search",
        "season",
        "seat",
        "second",
        "secret",
        "section",
        "see",
        "seed",
        "seeing",
        "seems",
        "seen",
        "seldom",
        "select",
        "selection",
        "sell",
        "send",
        "sense",
        "sent",
        "sentence",
        "separate",
        "series",
        "serious",
        "serve",
        "service",
        "sets",
        "setting",
        "settle",
        "settlers",
        "seven",
        "several",
        "shade",
        "shadow",
        "shake",
        "shaking",
        "shall",
        "shallow",
        "shape",
        "share",
        "sharp",
        "she",
        "sheep",
        "sheet",
        "shelf",
        "shells",
        "shelter",
        "shine",
        "shinning",
        "ship",
        "shirt",
        "shoe",
        "shoot",
        "shop",
        "shore",
        "short",
        "shorter",
        "shot",
        "should",
        "shoulder",
        "shout",
        "show",
        "shown",
        "shut",
        "sick",
        "sides",
        "sight",
        "sign",
        "signal",
        "silence",
        "silent",
        "silk",
        "silly",
        "silver",
        "similar",
        "simple",
        "simplest",
        "simply",
        "since",
        "sing",
        "single",
        "sink",
        "sister",
        "sit",
        "sitting",
        "situation",
        "six",
        "size",
        "skill",
        "skin",
        "sky",
        "slabs",
        "slave",
        "sleep",
        "slept",
        "slide",
        "slight",
        "slightly",
        "slip",
        "slipped",
        "slope",
        "slow",
        "slowly",
        "small",
        "smaller",
        "smallest",
        "smell",
        "smile",
        "smoke",
        "smooth",
        "snake",
        "snow",
        "so",
        "soap",
        "social",
        "society",
        "soft",
        "softly",
        "soil",
        "solar",
        "sold",
        "soldier",
        "solid",
        "solution",
        "solve",
        "some",
        "somebody",
        "somehow",
        "someone",
        "something",
        "sometime",
        "somewhere",
        "son",
        "song",
        "soon",
        "sort",
        "sound",
        "source",
        "south",
        "southern",
        "space",
        "speak",
        "special",
        "species",
        "specific",
        "speech",
        "speed",
        "spell",
        "spend",
        "spent",
        "spider",
        "spin",
        "spirit",
        "spite",
        "split",
        "spoken",
        "sport",
        "spread",
        "spring",
        "square",
        "stage",
        "stairs",
        "stand",
        "standard",
        "star",
        "stared",
        "start",
        "state",
        "statement",
        "station",
        "stay",
        "steady",
        "steam",
        "steel",
        "steep",
        "stems",
        "step",
        "stepped",
        "stick",
        "stiff",
        "still",
        "stock",
        "stomach",
        "stone",
        "stood",
        "stop",
        "stopped",
        "store",
        "storm",
        "story",
        "stove",
        "straight",
        "strange",
        "stranger",
        "straw",
        "stream",
        "street",
        "strength",
        "stretch",
        "strike",
        "string",
        "strip",
        "strong",
        "stronger",
        "struck",
        "structure",
        "struggle",
        "stuck",
        "student",
        "studied",
        "studying",
        "subject",
        "substance",
        "success",
        "successful",
        "such",
        "sudden",
        "suddenly",
        "sugar",
        "suggest",
        "suit",
        "sum",
        "summer",
        "sun",
        "sunlight",
        "supper",
        "supply",
        "support",
        "suppose",
        "sure",
        "surface",
        "surprise",
        "surrounded",
        "swam",
        "sweet",
        "swept",
        "swim",
        "swimming",
        "swing",
        "swung",
        "syllable",
        "symbol",
        "system",
        "table",
        "tail",
        "take",
        "taken",
        "tales",
        "talk",
        "tall",
        "tank",
        "tape",
        "task",
        "taste",
        "taught",
        "tax",
        "tea",
        "teach",
        "teacher",
        "team",
        "tears",
        "teeth",
        "telephone",
        "television",
        "tell",
        "temperature",
        "ten",
        "tent",
        "term",
        "terrible",
        "test",
        "than",
        "thank",
        "that",
        "thee",
        "them",
        "themselves",
        "then",
        "theory",
        "there",
        "therefore",
        "these",
        "they",
        "thick",
        "thin",
        "thing",
        "think",
        "third",
        "thirty",
        "this",
        "those",
        "thou",
        "though",
        "thought",
        "thousand",
        "thread",
        "three",
        "threw",
        "throat",
        "through",
        "throughout",
        "throw",
        "thrown",
        "thumb",
        "thus",
        "thy",
        "tide",
        "tie",
        "tight",
        "tightly",
        "till",
        "time",
        "tin",
        "tiny",
        "tip",
        "tired",
        "title",
        "to",
        "tobacco",
        "today",
        "together",
        "told",
        "tomorrow",
        "tone",
        "tongue",
        "tonight",
        "too",
        "took",
        "tool",
        "top",
        "topic",
        "torn",
        "total",
        "touch",
        "toward",
        "tower",
        "town",
        "toy",
        "trace",
        "track",
        "trade",
        "traffic",
        "trail",
        "train",
        "transportation",
        "trap",
        "travel",
        "treated",
        "tree",
        "triangle",
        "tribe",
        "trick",
        "tried",
        "trip",
        "troops",
        "tropical",
        "trouble",
        "truck",
        "trunk",
        "truth",
        "try",
        "tube",
        "tune",
        "turn",
        "twelve",
        "twenty",
        "twice",
        "two",
        "type",
        "typical",
        "uncle",
        "under",
        "underline",
        "understanding",
        "unhappy",
        "union",
        "unit",
        "universe",
        "unknown",
        "unless",
        "until",
        "unusual",
        "up",
        "upon",
        "upper",
        "upward",
        "us",
        "use",
        "useful",
        "using",
        "usual",
        "usually",
        "valley",
        "valuable",
        "value",
        "vapor",
        "variety",
        "various",
        "vast",
        "vegetable",
        "verb",
        "vertical",
        "very",
        "vessels",
        "victory",
        "view",
        "village",
        "visit",
        "visitor",
        "voice",
        "volume",
        "vote",
        "vowel",
        "voyage",
        "wagon",
        "wait",
        "walk",
        "wall",
        "want",
        "war",
        "warm",
        "warn",
        "was",
        "wash",
        "waste",
        "watch",
        "water",
        "wave",
        "way",
        "we",
        "weak",
        "wealth",
        "wear",
        "weather",
        "week",
        "weigh",
        "weight",
        "welcome",
        "well",
        "went",
        "were",
        "west",
        "western",
        "wet",
        "whale",
        "what",
        "whatever",
        "wheat",
        "wheel",
        "when",
        "whenever",
        "where",
        "wherever",
        "whether",
        "which",
        "while",
        "whispered",
        "whistle",
        "white",
        "who",
        "whole",
        "whom",
        "whose",
        "why",
        "wide",
        "widely",
        "wife",
        "wild",
        "will",
        "willing",
        "win",
        "wind",
        "window",
        "wing",
        "winter",
        "wire",
        "wise",
        "wish",
        "with",
        "within",
        "without",
        "wolf",
        "women",
        "won",
        "wonder",
        "wonderful",
        "wood",
        "wooden",
        "wool",
        "word",
        "wore",
        "work",
        "worker",
        "world",
        "worried",
        "worry",
        "worse",
        "worth",
        "would",
        "wrapped",
        "write",
        "writer",
        "writing",
        "written",
        "wrong",
        "wrote",
        "yard",
        "year",
        "yellow",
        "yes",
        "yesterday",
        "yet",
        "you",
        "young",
        "younger",
        "your",
        "yourself",
        "youth",
        "zero",
        "zebra",
        "zipper",
        "zoo",
        "zulu"
      ];
      shortestWordSize = wordList.reduce(
        (shortestWord, currentWord) => currentWord.length < shortestWord.length ? currentWord : shortestWord
      ).length;
      longestWordSize = wordList.reduce(
        (longestWord, currentWord) => currentWord.length > longestWord.length ? currentWord : longestWord
      ).length;
    }
  });

  // client/passwordGenerator.js
  var require_passwordGenerator = __commonJS({
    "client/passwordGenerator.js"(exports, module) {
      var { generate: generate2 } = (init_random_words(), __toCommonJS(random_words_exports));
      function generatePassword(numWords) {
        if (numWords < 2) {
          numWords = 2;
        }
        const wordArray = generate2(numWords);
        let tempPass = wordArray.join("-");
        tempPass = tempPass.concat(Math.floor(Math.random() * 10));
        while (tempPass.length < 12) {
          tempPass = tempPass.concat(Math.floor(Math.random() * 10));
        }
        return tempPass;
      }
      module.exports = {
        generatePassword
      };
    }
  });

  // client/components/ChangePassword.jsx
  var require_ChangePassword = __commonJS({
    "client/components/ChangePassword.jsx"(exports, module) {
      var React3 = require_react();
      var { useState, useEffect } = require_react();
      var PropTypes = require_prop_types();
      var { Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, Input, useDisclosure: useDisclosure2 } = require_dist65();
      var { generatePassword } = require_passwordGenerator();
      var { sendUpdatedPassword: sendUpdatedPassword2 } = (init_dataHelper(), __toCommonJS(dataHelper_exports));
      var { useCookies } = require_cjs4();
      function ChangePassword(props) {
        const { username } = props;
        const { isOpen, onOpen, onOpenChange } = useDisclosure2();
        const [oldPassword, setOldPassword] = useState("");
        const [newPassword, setNewPassword] = useState("");
        const [confirmNewPassword, setConfirmNewPassword] = useState("");
        const [newPasswordsMatch, setNewPasswordsMatch] = useState(false);
        const [cookie, setCookie] = useCookies(["token"]);
        const handleSubmit = () => {
          const passwordResponse = sendUpdatedPassword2(cookie.token, oldPassword, newPassword);
          if (passwordResponse == "OK") {
            alert("Password Updated!");
            setOldPassword("");
            setNewPassword("");
            setConfirmNewPassword("");
            setNewPasswordsMatch(false);
          } else {
            alert(`Password Update Failed!`);
          }
        };
        return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Button, { onPress: onOpen }, "Change Password"), /* @__PURE__ */ React3.createElement(Modal, { isOpen, onOpenChange }, /* @__PURE__ */ React3.createElement(ModalContent, null, (onClose) => /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(ModalHeader, { className: "flex flex-col gap-1" }, "Change your Password"), /* @__PURE__ */ React3.createElement(ModalBody, null, /* @__PURE__ */ React3.createElement(
          Input,
          {
            label: "Old Password",
            placeholder: "Old Password",
            value: oldPassword,
            onChange: (e) => {
              setOldPassword(e.target.value);
            }
          }
        ), /* @__PURE__ */ React3.createElement(
          Button,
          {
            color: "primary",
            onPress: () => {
              const temp = generatePassword(3);
              setNewPassword(temp);
            }
          },
          "Generate New Password"
        ), /* @__PURE__ */ React3.createElement(
          Input,
          {
            label: "New Password",
            isReadOnly: true,
            value: newPassword
          }
        ), /* @__PURE__ */ React3.createElement(
          Input,
          {
            isDisabled: newPassword === "" || oldPassword === "",
            label: "Confirm Password",
            placeholder: "Confirm Password",
            value: confirmNewPassword,
            color: newPasswordsMatch ? "success" : "danger",
            onChange: (e) => {
              setConfirmNewPassword(e.target.value);
              if (newPassword === e.target.value) {
                setNewPasswordsMatch(true);
              } else {
                setNewPasswordsMatch(false);
              }
            }
          }
        )), /* @__PURE__ */ React3.createElement(ModalFooter, null, /* @__PURE__ */ React3.createElement(Button, { color: "danger", variant: "light", onPress: onClose }, "Cancel"), /* @__PURE__ */ React3.createElement(
          Button,
          {
            title: "changePasswordButton",
            isDisabled: !newPasswordsMatch || !cookie.token,
            color: "primary",
            onPress: () => {
              handleSubmit();
              onClose();
            }
          },
          "Change Password"
        ))))));
      }
      module.exports = ChangePassword;
      ChangePassword.propTypes = {
        username: PropTypes.string
      };
      ChangePassword.defaultProps = {
        username: "alice"
      };
    }
  });

  // client/pages/AccountPage.jsx
  var require_AccountPage = __commonJS({
    "client/pages/AccountPage.jsx"(exports, module) {
      var React3 = require_react();
      function AccountPage(props) {
        return /* @__PURE__ */ React3.createElement("p", null, `This page is "/account" (the account management page).`);
      }
      module.exports = AccountPage;
    }
  });

  // client/Components/AccountCreationCard.jsx
  var require_AccountCreationCard = __commonJS({
    "client/Components/AccountCreationCard.jsx"(exports, module) {
      var React3 = require_react();
      var PropTypes = require_prop_types();
      var { Button, Image: Image2, Input, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, Popover, PopoverContent, PopoverTrigger } = require_dist65();
      var { generatePassword } = require_passwordGenerator();
      function AccountCreationCard(props) {
        const { isOpen, onOpenChange } = props;
        const [profilePicture, setProfilePicture] = React3.useState("pictures/stock_images/botttsNeutral-1695826814739.png");
        const [username, setUsername] = React3.useState("");
        const [emailAddress, setEmailAddress] = React3.useState("");
        const [password, setPassword] = React3.useState("");
        const [isPopoverOpen, setIsPopoverOpen] = React3.useState(false);
        const [isCreateButtonDisabled, setIsCreateButtonDisabled] = React3.useState(true);
        const [emailInputColor, setEmailInputColor] = React3.useState("default");
        const [emailInputDescription, setEmailInputDescription] = React3.useState("This is used for email notifications. It can be changed later.");
        const [isFormDisabled, setIsFormDisabled] = React3.useState(false);
        const validateEmail = (emailAddress2) => emailAddress2.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i);
        const isEmailInvalid = React3.useMemo(() => {
          if (emailAddress === "") {
            setEmailInputColor("default");
            setEmailInputDescription("This is used for email notifications. It can be changed later.");
            return false;
          }
          if (validateEmail(emailAddress)) {
            setEmailInputColor("success");
            setEmailInputDescription("Email address is valid!");
            return false;
          }
          setEmailInputColor("danger");
          setEmailInputDescription("This is used for email notifications. It can be changed later.");
          return true;
        }, [emailAddress]);
        React3.useEffect(() => {
          username != "" && !isEmailInvalid && password != "" ? setIsCreateButtonDisabled(false) : setIsCreateButtonDisabled(true);
        }, [username, emailAddress, password]);
        function createNewAccount(newAccount) {
          return __async(this, null, function* () {
            console.log(newAccount);
            try {
              const response = yield fetch("/api/register", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json"
                },
                body: JSON.stringify(newAccount)
              });
              if (response.status === 400 || response.status === 500) {
                window.alert((yield response.text()).toString());
                setIsFormDisabled(false);
                throw new Error();
              } else if (response.status === 200) {
                window.alert(`Your account was created successfully.
Your session token is:
${(yield response.text()).toString()}`);
              }
            } catch (error) {
            }
          });
        }
        return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Modal, { isOpen, onOpenChange, hideCloseButton: isFormDisabled, isDismissable: !isFormDisabled, size: "xl", "data-testid": "create-account-modal" }, /* @__PURE__ */ React3.createElement(ModalContent, null, (onClose) => /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(ModalHeader, null), /* @__PURE__ */ React3.createElement(ModalBody, { className: "grid grid-flow-col auto-cols-max" }, /* @__PURE__ */ React3.createElement("div", { className: "pl-2 pr-6 w-48" }, /* @__PURE__ */ React3.createElement(Popover, { showArrow: true, isOpen: isPopoverOpen, onOpenChange: (open) => setIsPopoverOpen(open), placement: "right" }, /* @__PURE__ */ React3.createElement(PopoverTrigger, null, /* @__PURE__ */ React3.createElement(Image2, { className: "cursor-pointer", src: profilePicture, width: 180, radius: "full" })), /* @__PURE__ */ React3.createElement(PopoverContent, { className: "w-80 max-h-80" }, /* @__PURE__ */ React3.createElement("div", { className: "grid grid-cols-3 gap-4 py-3 pr-4 overflow-y-scroll" }, /* @__PURE__ */ React3.createElement(Image2, { onClick: () => {
          if (!isFormDisabled) {
            setProfilePicture("pictures/stock_images/botttsNeutral-1695826814739.png");
            setIsPopoverOpen(false);
          }
        }, className: "cursor-pointer", src: "pictures/stock_images/botttsNeutral-1695826814739.png", width: 100, radius: "full" }), /* @__PURE__ */ React3.createElement(Image2, { onClick: () => {
          if (!isFormDisabled) {
            setProfilePicture("pictures/stock_images/funEmoji-1695997904423.png");
            setIsPopoverOpen(false);
          }
        }, className: "cursor-pointer", src: "pictures/stock_images/funEmoji-1695997904423.png", width: 100, radius: "full" }), /* @__PURE__ */ React3.createElement(Image2, { onClick: () => {
          if (!isFormDisabled) {
            setProfilePicture("pictures/stock_images/JaredD-2023.png");
            setIsPopoverOpen(false);
          }
        }, className: "cursor-pointer", src: "pictures/stock_images/JaredD-2023.png", width: 100, radius: "full" })))), /* @__PURE__ */ React3.createElement("p", { className: "text-center pt-2" }, "Click on the photo above to select a different profile picture.")), /* @__PURE__ */ React3.createElement("div", { className: "w-72" }, /* @__PURE__ */ React3.createElement(
          Input,
          {
            isReadOnly: isFormDisabled,
            isRequired: true,
            label: "Username",
            labelPlacement: "outside",
            color: username != "" ? "success" : "default",
            onValueChange: setUsername,
            size: "lg",
            placeholder: " ",
            description: "This is your unique identifier across pasma. It cannot be changed once your account is created."
          }
        ), /* @__PURE__ */ React3.createElement(
          Input,
          {
            isReadOnly: isFormDisabled,
            isRequired: true,
            className: "pt-2",
            type: "email",
            label: "Email Address",
            labelPlacement: "outside",
            isValid: isEmailInvalid,
            color: emailInputColor,
            errorMessage: isEmailInvalid && "Please enter a valid email address.",
            onValueChange: setEmailAddress,
            size: "lg",
            placeholder: " ",
            description: emailInputDescription
          }
        ), /* @__PURE__ */ React3.createElement(
          Input,
          {
            isReadOnly: true,
            isRequired: true,
            className: "pt-2",
            label: "Password",
            labelPlacement: "outside",
            size: "lg",
            color: password != "" ? "success" : "default",
            value: password ? password : " ",
            onClick: () => {
              setPassword("");
              setPassword(generatePassword);
            },
            placeholder: " ",
            description: password != "" ? "New password generated. Don't forget to copy this!" : "Click the field to generate a new password."
          }
        ))), /* @__PURE__ */ React3.createElement(ModalFooter, null, /* @__PURE__ */ React3.createElement(Button, { color: "primary", radius: "full", isDisabled: isCreateButtonDisabled, isLoading: isFormDisabled, "data-testid": "create-account-button", onPress: () => {
          setIsFormDisabled(true);
          const newAccount = {
            "username": username,
            "password": password,
            "email": emailAddress,
            "userType": "standard",
            "profilePicture": profilePicture
          };
          console.log("newAccount");
          console.log(JSON.parse(JSON.stringify(newAccount)));
          createNewAccount(JSON.parse(JSON.stringify(newAccount)));
        } }, "Create Account"))))));
      }
      AccountCreationCard.propTypes = {
        isOpen: PropTypes.bool.isRequired,
        onOpenChange: PropTypes.func.isRequired
      };
      module.exports = AccountCreationCard;
    }
  });

  // client/pages/IndexPage.jsx
  var require_IndexPage = __commonJS({
    "client/pages/IndexPage.jsx"(exports, module) {
      var React3 = require_react();
      var AccountCreationCard = require_AccountCreationCard();
      var { Button } = require_dist65();
      var { useDisclosure: useDisclosure2 } = require_dist65();
      function IndexPage(props) {
        const { isOpen, onOpen, onOpenChange } = useDisclosure2();
        return /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement("p", null, 'This page is "/" (the index page).'), /* @__PURE__ */ React3.createElement(Button, { onClick: onOpen }, "Create Account Card"), /* @__PURE__ */ React3.createElement(AccountCreationCard, { isOpen, onOpenChange }));
      }
      module.exports = IndexPage;
    }
  });

  // client/pages/PostFeedPage.jsx
  var require_PostFeedPage = __commonJS({
    "client/pages/PostFeedPage.jsx"(exports, module) {
      var React3 = require_react();
      function PostFeedPage(props) {
        return /* @__PURE__ */ React3.createElement("p", null, `This page is "/feed" (the post feed page).`);
      }
      module.exports = PostFeedPage;
    }
  });

  // client/pages/PostPage.jsx
  var require_PostPage = __commonJS({
    "client/pages/PostPage.jsx"(exports, module) {
      var React3 = require_react();
      var { useParams } = require_main2();
      function PostPage(props) {
        const { id } = useParams();
        return /* @__PURE__ */ React3.createElement("p", null, `This page is "/post/${id}" (the individual post page).`);
      }
      module.exports = PostPage;
    }
  });

  // client/pages/ProfilePage.jsx
  var require_ProfilePage = __commonJS({
    "client/pages/ProfilePage.jsx"(exports, module) {
      var React3 = require_react();
      var { useParams } = require_main2();
      function ProfilePage(props) {
        const { username } = useParams();
        return /* @__PURE__ */ React3.createElement("p", null, `This page is "/profile/${username}" (the user profile page).`);
      }
      module.exports = ProfilePage;
    }
  });

  // client/pages/404Page.jsx
  var require_Page = __commonJS({
    "client/pages/404Page.jsx"(exports, module) {
      var { Button } = require_dist22();
      var React3 = require_react();
      var { Link } = require_main2();
      function FourOhFourPage(props) {
        return /* @__PURE__ */ React3.createElement("div", { className: "flex h-screen items-center justify-center" }, /* @__PURE__ */ React3.createElement("div", { className: "h-56 grid grid-cols-1 gap-4 justify-items-center" }, /* @__PURE__ */ React3.createElement("div", { className: "justify-self-start" }, /* @__PURE__ */ React3.createElement("p", { className: "text-5xl text-rose-600" }, "404!")), /* @__PURE__ */ React3.createElement("div", null, /* @__PURE__ */ React3.createElement("p", { className: "text-sm" }, "We couldn't find the page you were looking for!")), /* @__PURE__ */ React3.createElement("div", null, /* @__PURE__ */ React3.createElement(Button, { color: "primary" }, /* @__PURE__ */ React3.createElement(Link, { to: "/" }, "Click here to return to the homepage.")))));
      }
      module.exports = FourOhFourPage;
    }
  });

  // client/pages/App.jsx
  var require_App = __commonJS({
    "client/pages/App.jsx"(exports, module) {
      var React3 = require_react();
      var {
        createBrowserRouter,
        createRoutesFromElements,
        Route,
        RouterProvider
      } = require_main2();
      var ProfilePicture = require_ProfilePicture();
      var CookieTest = require_CookieTest();
      var ChangePassword = require_ChangePassword();
      var AccountPage = require_AccountPage();
      var IndexPage = require_IndexPage();
      var PostFeedPage = require_PostFeedPage();
      var PostPage = require_PostPage();
      var ProfilePage = require_ProfilePage();
      var FourOhFourPage = require_Page();
      var router = createBrowserRouter(
        createRoutesFromElements(
          /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(Route, { index: true, element: /* @__PURE__ */ React3.createElement(IndexPage, null) }), /* @__PURE__ */ React3.createElement(Route, { path: "/feed", element: (
            /* Eventually, this should be a verified page */
            /* @__PURE__ */ React3.createElement(PostFeedPage, null)
          ) }), /* @__PURE__ */ React3.createElement(Route, { path: "/post/:id", element: /* @__PURE__ */ React3.createElement(PostPage, null) }), /* @__PURE__ */ React3.createElement(Route, { path: "/profile/:username", element: /* @__PURE__ */ React3.createElement(ProfilePage, null) }), /* @__PURE__ */ React3.createElement(Route, { path: "/account", element: (
            /* Eventually, this should be a verified page */
            /* @__PURE__ */ React3.createElement(AccountPage, null)
          ) }), /* @__PURE__ */ React3.createElement(Route, { path: "/test/profile_picture", element: /* @__PURE__ */ React3.createElement(ProfilePicture, { username: "alice" }) }), /* @__PURE__ */ React3.createElement(Route, { path: "/test/change_password", element: /* @__PURE__ */ React3.createElement(ChangePassword, { username: "alice" }) }), /* @__PURE__ */ React3.createElement(Route, { path: "/test/cookie", element: /* @__PURE__ */ React3.createElement(CookieTest, { cookieName: "token" }) }), /* @__PURE__ */ React3.createElement(Route, { path: "/api" }), /* @__PURE__ */ React3.createElement(Route, { path: "*", element: /* @__PURE__ */ React3.createElement(FourOhFourPage, null) }))
        )
      );
      function App(props) {
        return /* @__PURE__ */ React3.createElement(RouterProvider, { router });
      }
      module.exports = App;
    }
  });

  // client/main.jsx
  var require_main46 = __commonJS({
    "client/main.jsx"() {
      var React3 = require_react();
      var { createRoot } = require_client();
      var App = require_App();
      var { NextUIProvider } = require_dist65();
      var { CookiesProvider } = require_cjs4();
      var root = createRoot(document.getElementById("root"));
      root.render(
        /* @__PURE__ */ React3.createElement(React3.Fragment, null, /* @__PURE__ */ React3.createElement(CookiesProvider, { defaultSetOptions: { path: "/" } }, /* @__PURE__ */ React3.createElement(NextUIProvider, null, /* @__PURE__ */ React3.createElement(App, null))))
      );
    }
  });
  require_main46();
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

@remix-run/router/dist/router.cjs.js:
  (**
   * @remix-run/router v1.9.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/umd/react-router.development.js:
  (**
   * React Router v6.16.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/main.js:
  (**
   * React Router v6.16.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/umd/react-router-dom.development.js:
  (**
   * React Router DOM v6.16.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/main.js:
  (**
   * React Router DOM v6.16.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@nextui-org/react-rsc-utils/dist/index.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/

/**
 * Contains pertinent session information as provided by {@link login#login}.
 */
export interface Session {
    token?: string;
    username: string,
}

/**
 * The amount of characters in the session token
 */
const TOKEN_LENGTH: number = 32;

/**
 * The list of characters to use in generated session tokens
 * (currently Base64 I think)
 */
const TOKEN_CHARS: string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_";

/**
 * List of active sessions currently in the program. The string key is the session token generated by {@link login#login}
 */
export const sessions: Map<string, Session> = new Map();

/**
 * Type guard for Session.
 */
export function isSession(x: any): x is Session {
    // Not sure if I can do any more?
    return "username" in x;
}

/**
 * Adds a new Session to the Map of actively running sessions.
 *
 * @param {Session} newSession - the Session information to store with a session token.
 *      The `token` instance variable is immediately set here.
 * @returns {string} the newly generated session token.
 */
export function addSession(newSession: Session): string {
    // generate session token
    let token: string = "";
    
    // Append random characters to the new token
    for (let i = 0; i < TOKEN_LENGTH; i++) {
        token += TOKEN_CHARS[Math.floor(Math.random() * 64)];
    }

    newSession.token = token;

    // add to map
    sessions.set(token, newSession);

    console.log(`Generated new token: "${token}"`);

    return token;
}

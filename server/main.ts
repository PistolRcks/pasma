// Here is the file which will act as the launching point for our Bun backend.

import server from "bunrest";
import { Session } from "./types/Session";
import { login } from "./api/login";

/**
 * The amount of 
 */
const TOKEN_LENGTH = 32;

/**
 * List of active sessions currently in the program. The string key is the session token generated by {@link login#login} 
 */
const sessions: Map<string, Session> = new Map();

/**
 * The actual app. Set request handlers to this object.
 */
const app = server();

/**
 * The specific router for API calls. 
 */
const api = app.router();

api.post("/login", login);

app.use("/api", api);

console.log("Successfully initialized.");

/**
 * Adds a new Session to the Map of actively running sessions.
 * 
 * @param {Session} newSession - the Session information to store with a session token.
 *      The `token` instance variable is immediately set here.
 * @returns {string} the newly generated session token.
 */
function addSession(newSession: Session): string {
    // generate session token
    let token: string = "";

    // add to map
    sessions.set(token, newSession);

    return token;
}

/**
 * Gets a currently active session from its session token.
 * 
 * @param {string} sessionToken - The session token of the Session.
 * @returns {Session | null} The Session, if it is found; otherwise null.
 */
function getSession(sessionToken: string): (Session | null) {

}

/**
 * Removes a Session from the Map of actively running sessions.
 * 
 * @param {string} sessionToken - The session token of the Session to remove.
 * @returns {boolean} Whether or not the removal was successful.
 */
function removeSession(sessionToken: string): boolean {

}
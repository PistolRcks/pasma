// Here is the file which will act as the launching point for our Bun backend.

import server from "bunrest";
import { Session } from "./types/Session";
import { login } from "./api/login";
import { BunRequest } from "bunrest/src/server/request";
import { BunResponse } from "bunrest/src/server/response";

/**
 * The amount of characters in the session token
 */
const TOKEN_LENGTH: number = 32;

/**
 * The list of characters to use in generated session tokens
 * (currently Base64 I think)
 */
const TOKEN_CHARS: string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_";

/**
 * List of active sessions currently in the program. The string key is the session token generated by {@link login#login}
 */
const sessions: Map<string, Session> = new Map();

/**
 * The actual app. Set request handlers to this object.
 */
const app = server();

/**
 * The specific router for API calls.
 */
const api = app.router();

// Log all requests
app.use((req: BunRequest, res: BunResponse, next: any) => {
    // FIXME: Not displaying date correctly?
    console.log(`[${Date.now().toLocaleString("en-us")}] ${req.method} at ${req.path}`);
    next();
});

// Propagate errors to the frontend
app.use((req, res, next, err) => {
    const errorMsg: string = `Error occurred at "${err?.name}": ${err?.message}\n\t${err?.stack}`;
    res.status(500).send(errorMsg);
    // FIXME: Not displaying date correctly?
    console.log(`[${Date.now().toLocaleString("en-us")}] ${errorMsg}`);
 });

api.post("/login", login);

app.use("/api", api);

app.listen(3000, () => {
    console.log('App initialized and is listening on port 3000.');
});

addSession({token: null, username: "blah"});

console.log(`Sessions: ${sessions}`);

/**
 * Adds a new Session to the Map of actively running sessions.
 *
 * @param {Session} newSession - the Session information to store with a session token.
 *      The `token` instance variable is immediately set here.
 * @returns {string} the newly generated session token.
 */
export function addSession(newSession: Session): string {
    // generate session token
    let token: string = "";
    
    // Append random characters to the new token
    for (let i = 0; i < TOKEN_LENGTH; i++) {
        token += TOKEN_CHARS[Math.floor(Math.random() * 64)];
    }

    newSession.token = token;

    // add to map
    sessions.set(token, newSession);

    console.log(`Generated new token: "${token}"`);

    return token;
}

/**
 * Gets a currently active session from its session token.
 *
 * @param {string} sessionToken - The session token of the Session.
 * @returns {Session | null} The Session, if it is found; otherwise undefined.
 */
export function getSession(sessionToken: string): Session | undefined {
    return sessions.get(sessionToken);
}

/**
 * Removes a Session from the Map of actively running sessions.
 *
 * @param {string} sessionToken - The session token of the Session to remove.
 * @returns {boolean} Whether or not the removal was successful.
 */
export function removeSession(sessionToken: string): boolean {
    return sessions.delete(sessionToken);
}
